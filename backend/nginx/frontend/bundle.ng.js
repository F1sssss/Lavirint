/*
 AngularJS v1.8.2
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
*/
(function(z){'use strict';function ve(a){if(D(a))w(a.objectMaxDepth)&&(Xb.objectMaxDepth=Yb(a.objectMaxDepth)?a.objectMaxDepth:NaN),w(a.urlErrorParamsEnabled)&&Ga(a.urlErrorParamsEnabled)&&(Xb.urlErrorParamsEnabled=a.urlErrorParamsEnabled);else return Xb}function Yb(a){return X(a)&&0<a}function F(a,b){b=b||Error;return function(){var d=arguments[0],c;c="["+(a?a+":":"")+d+"] http://errors.angularjs.org/1.8.2/"+(a?a+"/":"")+d;for(d=1;d<arguments.length;d++){c=c+(1==d?"?":"&")+"p"+(d-1)+"=";var e=encodeURIComponent,
f;f=arguments[d];f="function"==typeof f?f.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof f?"undefined":"string"!=typeof f?JSON.stringify(f):f;c+=e(f)}return new b(c)}}function za(a){if(null==a||$a(a))return!1;if(H(a)||C(a)||x&&a instanceof x)return!0;var b="length"in Object(a)&&a.length;return X(b)&&(0<=b&&b-1 in a||"function"===typeof a.item)}function r(a,b,d){var c,e;if(a)if(B(a))for(c in a)"prototype"!==c&&"length"!==c&&"name"!==c&&a.hasOwnProperty(c)&&b.call(d,a[c],c,a);else if(H(a)||
za(a)){var f="object"!==typeof a;c=0;for(e=a.length;c<e;c++)(f||c in a)&&b.call(d,a[c],c,a)}else if(a.forEach&&a.forEach!==r)a.forEach(b,d,a);else if(Pc(a))for(c in a)b.call(d,a[c],c,a);else if("function"===typeof a.hasOwnProperty)for(c in a)a.hasOwnProperty(c)&&b.call(d,a[c],c,a);else for(c in a)ta.call(a,c)&&b.call(d,a[c],c,a);return a}function Qc(a,b,d){for(var c=Object.keys(a).sort(),e=0;e<c.length;e++)b.call(d,a[c[e]],c[e]);return c}function Zb(a){return function(b,d){a(d,b)}}function we(){return++qb}
function $b(a,b,d){for(var c=a.$$hashKey,e=0,f=b.length;e<f;++e){var g=b[e];if(D(g)||B(g))for(var k=Object.keys(g),h=0,l=k.length;h<l;h++){var m=k[h],p=g[m];d&&D(p)?ha(p)?a[m]=new Date(p.valueOf()):ab(p)?a[m]=new RegExp(p):p.nodeName?a[m]=p.cloneNode(!0):ac(p)?a[m]=p.clone():"__proto__"!==m&&(D(a[m])||(a[m]=H(p)?[]:{}),$b(a[m],[p],!0)):a[m]=p}}c?a.$$hashKey=c:delete a.$$hashKey;return a}function S(a){return $b(a,Ha.call(arguments,1),!1)}function xe(a){return $b(a,Ha.call(arguments,1),!0)}function fa(a){return parseInt(a,
10)}function bc(a,b){return S(Object.create(a),b)}function E(){}function Ta(a){return a}function ia(a){return function(){return a}}function cc(a){return B(a.toString)&&a.toString!==la}function A(a){return"undefined"===typeof a}function w(a){return"undefined"!==typeof a}function D(a){return null!==a&&"object"===typeof a}function Pc(a){return null!==a&&"object"===typeof a&&!Rc(a)}function C(a){return"string"===typeof a}function X(a){return"number"===typeof a}function ha(a){return"[object Date]"===la.call(a)}
function H(a){return Array.isArray(a)||a instanceof Array}function dc(a){switch(la.call(a)){case "[object Error]":return!0;case "[object Exception]":return!0;case "[object DOMException]":return!0;default:return a instanceof Error}}function B(a){return"function"===typeof a}function ab(a){return"[object RegExp]"===la.call(a)}function $a(a){return a&&a.window===a}function bb(a){return a&&a.$evalAsync&&a.$watch}function Ga(a){return"boolean"===typeof a}function ye(a){return a&&X(a.length)&&ze.test(la.call(a))}
function ac(a){return!(!a||!(a.nodeName||a.prop&&a.attr&&a.find))}function Ae(a){var b={};a=a.split(",");var d;for(d=0;d<a.length;d++)b[a[d]]=!0;return b}function ua(a){return K(a.nodeName||a[0]&&a[0].nodeName)}function cb(a,b){var d=a.indexOf(b);0<=d&&a.splice(d,1);return d}function Ia(a,b,d){function c(a,b,c){c--;if(0>c)return"...";var d=b.$$hashKey,f;if(H(a)){f=0;for(var g=a.length;f<g;f++)b.push(e(a[f],c))}else if(Pc(a))for(f in a)b[f]=e(a[f],c);else if(a&&"function"===typeof a.hasOwnProperty)for(f in a)a.hasOwnProperty(f)&&
(b[f]=e(a[f],c));else for(f in a)ta.call(a,f)&&(b[f]=e(a[f],c));d?b.$$hashKey=d:delete b.$$hashKey;return b}function e(a,b){if(!D(a))return a;var d=g.indexOf(a);if(-1!==d)return k[d];if($a(a)||bb(a))throw oa("cpws");var d=!1,e=f(a);void 0===e&&(e=H(a)?[]:Object.create(Rc(a)),d=!0);g.push(a);k.push(e);return d?c(a,e,b):e}function f(a){switch(la.call(a)){case "[object Int8Array]":case "[object Int16Array]":case "[object Int32Array]":case "[object Float32Array]":case "[object Float64Array]":case "[object Uint8Array]":case "[object Uint8ClampedArray]":case "[object Uint16Array]":case "[object Uint32Array]":return new a.constructor(e(a.buffer),
a.byteOffset,a.length);case "[object ArrayBuffer]":if(!a.slice){var b=new ArrayBuffer(a.byteLength);(new Uint8Array(b)).set(new Uint8Array(a));return b}return a.slice(0);case "[object Boolean]":case "[object Number]":case "[object String]":case "[object Date]":return new a.constructor(a.valueOf());case "[object RegExp]":return b=new RegExp(a.source,a.toString().match(/[^/]*$/)[0]),b.lastIndex=a.lastIndex,b;case "[object Blob]":return new a.constructor([a],{type:a.type})}if(B(a.cloneNode))return a.cloneNode(!0)}
var g=[],k=[];d=Yb(d)?d:NaN;if(b){if(ye(b)||"[object ArrayBuffer]"===la.call(b))throw oa("cpta");if(a===b)throw oa("cpi");H(b)?b.length=0:r(b,function(a,c){"$$hashKey"!==c&&delete b[c]});g.push(a);k.push(b);return c(a,b,d)}return e(a,d)}function ec(a,b){return a===b||a!==a&&b!==b}function va(a,b){if(a===b)return!0;if(null===a||null===b)return!1;if(a!==a&&b!==b)return!0;var d=typeof a,c;if(d===typeof b&&"object"===d)if(H(a)){if(!H(b))return!1;if((d=a.length)===b.length){for(c=0;c<d;c++)if(!va(a[c],
b[c]))return!1;return!0}}else{if(ha(a))return ha(b)?ec(a.getTime(),b.getTime()):!1;if(ab(a))return ab(b)?a.toString()===b.toString():!1;if(bb(a)||bb(b)||$a(a)||$a(b)||H(b)||ha(b)||ab(b))return!1;d=T();for(c in a)if("$"!==c.charAt(0)&&!B(a[c])){if(!va(a[c],b[c]))return!1;d[c]=!0}for(c in b)if(!(c in d)&&"$"!==c.charAt(0)&&w(b[c])&&!B(b[c]))return!1;return!0}return!1}function db(a,b,d){return a.concat(Ha.call(b,d))}function Va(a,b){var d=2<arguments.length?Ha.call(arguments,2):[];return!B(b)||b instanceof
RegExp?b:d.length?function(){return arguments.length?b.apply(a,db(d,arguments,0)):b.apply(a,d)}:function(){return arguments.length?b.apply(a,arguments):b.call(a)}}function Sc(a,b){var d=b;"string"===typeof a&&"$"===a.charAt(0)&&"$"===a.charAt(1)?d=void 0:$a(b)?d="$WINDOW":b&&z.document===b?d="$DOCUMENT":bb(b)&&(d="$SCOPE");return d}function eb(a,b){if(!A(a))return X(b)||(b=b?2:null),JSON.stringify(a,Sc,b)}function Tc(a){return C(a)?JSON.parse(a):a}function fc(a,b){a=a.replace(Be,"");var d=Date.parse("Jan 01, 1970 00:00:00 "+
a)/6E4;return Y(d)?b:d}function Uc(a,b){a=new Date(a.getTime());a.setMinutes(a.getMinutes()+b);return a}function gc(a,b,d){d=d?-1:1;var c=a.getTimezoneOffset();b=fc(b,c);return Uc(a,d*(b-c))}function Aa(a){a=x(a).clone().empty();var b=x("<div></div>").append(a).html();try{return a[0].nodeType===Pa?K(b):b.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(a,b){return"<"+K(b)})}catch(d){return K(b)}}function Vc(a){try{return decodeURIComponent(a)}catch(b){}}function hc(a){var b={};r((a||"").split("&"),
function(a){var c,e,f;a&&(e=a=a.replace(/\+/g,"%20"),c=a.indexOf("="),-1!==c&&(e=a.substring(0,c),f=a.substring(c+1)),e=Vc(e),w(e)&&(f=w(f)?Vc(f):!0,ta.call(b,e)?H(b[e])?b[e].push(f):b[e]=[b[e],f]:b[e]=f))});return b}function Ce(a){var b=[];r(a,function(a,c){H(a)?r(a,function(a){b.push(ba(c,!0)+(!0===a?"":"="+ba(a,!0)))}):b.push(ba(c,!0)+(!0===a?"":"="+ba(a,!0)))});return b.length?b.join("&"):""}function ic(a){return ba(a,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function ba(a,
b){return encodeURIComponent(a).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,b?"%20":"+")}function De(a,b){var d,c,e=Qa.length;for(c=0;c<e;++c)if(d=Qa[c]+b,C(d=a.getAttribute(d)))return d;return null}function Ee(a,b){var d,c,e={};r(Qa,function(b){b+="app";!d&&a.hasAttribute&&a.hasAttribute(b)&&(d=a,c=a.getAttribute(b))});r(Qa,function(b){b+="app";var e;!d&&(e=a.querySelector("["+b.replace(":","\\:")+"]"))&&(d=e,c=e.getAttribute(b))});
d&&(Fe?(e.strictDi=null!==De(d,"strict-di"),b(d,c?[c]:[],e)):z.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match."))}function Wc(a,b,d){D(d)||(d={});d=S({strictDi:!1},d);var c=function(){a=x(a);if(a.injector()){var c=a[0]===z.document?"document":Aa(a);throw oa("btstrpd",c.replace(/</,"&lt;").replace(/>/,"&gt;"));}b=b||[];b.unshift(["$provide",function(b){b.value("$rootElement",a)}]);d.debugInfoEnabled&&b.push(["$compileProvider",
function(a){a.debugInfoEnabled(!0)}]);b.unshift("ng");c=fb(b,d.strictDi);c.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},e=/^NG_ENABLE_DEBUG_INFO!/,f=/^NG_DEFER_BOOTSTRAP!/;z&&e.test(z.name)&&(d.debugInfoEnabled=!0,z.name=z.name.replace(e,""));if(z&&!f.test(z.name))return c();z.name=z.name.replace(f,"");ca.resumeBootstrap=function(a){r(a,function(a){b.push(a)});return c()};B(ca.resumeDeferredBootstrap)&&
ca.resumeDeferredBootstrap()}function Ge(){z.name="NG_ENABLE_DEBUG_INFO!"+z.name;z.location.reload()}function He(a){a=ca.element(a).injector();if(!a)throw oa("test");return a.get("$$testability")}function Xc(a,b){b=b||"_";return a.replace(Ie,function(a,c){return(c?b:"")+a.toLowerCase()})}function Je(){var a;if(!Yc){var b=rb();(sb=A(b)?z.jQuery:b?z[b]:void 0)&&sb.fn.on?(x=sb,S(sb.fn,{scope:Wa.scope,isolateScope:Wa.isolateScope,controller:Wa.controller,injector:Wa.injector,inheritedData:Wa.inheritedData})):
x=U;a=x.cleanData;x.cleanData=function(b){for(var c,e=0,f;null!=(f=b[e]);e++)(c=(x._data(f)||{}).events)&&c.$destroy&&x(f).triggerHandler("$destroy");a(b)};ca.element=x;Yc=!0}}function Ke(){U.legacyXHTMLReplacement=!0}function gb(a,b,d){if(!a)throw oa("areq",b||"?",d||"required");return a}function tb(a,b,d){d&&H(a)&&(a=a[a.length-1]);gb(B(a),b,"not a function, got "+(a&&"object"===typeof a?a.constructor.name||"Object":typeof a));return a}function Ja(a,b){if("hasOwnProperty"===a)throw oa("badname",
b);}function Le(a,b,d){if(!b)return a;b=b.split(".");for(var c,e=a,f=b.length,g=0;g<f;g++)c=b[g],a&&(a=(e=a)[c]);return!d&&B(a)?Va(e,a):a}function ub(a){for(var b=a[0],d=a[a.length-1],c,e=1;b!==d&&(b=b.nextSibling);e++)if(c||a[e]!==b)c||(c=x(Ha.call(a,0,e))),c.push(b);return c||a}function T(){return Object.create(null)}function jc(a){if(null==a)return"";switch(typeof a){case "string":break;case "number":a=""+a;break;default:a=!cc(a)||H(a)||ha(a)?eb(a):a.toString()}return a}function Me(a){function b(a,
b,c){return a[b]||(a[b]=c())}var d=F("$injector"),c=F("ng");a=b(a,"angular",Object);a.$$minErr=a.$$minErr||F;return b(a,"module",function(){var a={};return function(f,g,k){var h={};if("hasOwnProperty"===f)throw c("badname","module");g&&a.hasOwnProperty(f)&&(a[f]=null);return b(a,f,function(){function a(b,c,d,f){f||(f=e);return function(){f[d||"push"]([b,c,arguments]);return t}}function b(a,c,d){d||(d=e);return function(b,e){e&&B(e)&&(e.$$moduleName=f);d.push([a,c,arguments]);return t}}if(!g)throw d("nomod",
f);var e=[],n=[],s=[],G=a("$injector","invoke","push",n),t={_invokeQueue:e,_configBlocks:n,_runBlocks:s,info:function(a){if(w(a)){if(!D(a))throw c("aobj","value");h=a;return this}return h},requires:g,name:f,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:a("$provide","value"),constant:a("$provide","constant","unshift"),decorator:b("$provide","decorator",n),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider",
"register"),directive:b("$compileProvider","directive"),component:b("$compileProvider","component"),config:G,run:function(a){s.push(a);return this}};k&&G(k);return t})}})}function ja(a,b){if(H(a)){b=b||[];for(var d=0,c=a.length;d<c;d++)b[d]=a[d]}else if(D(a))for(d in b=b||{},a)if("$"!==d.charAt(0)||"$"!==d.charAt(1))b[d]=a[d];return b||a}function Ne(a,b){var d=[];Yb(b)&&(a=ca.copy(a,null,b));return JSON.stringify(a,function(a,b){b=Sc(a,b);if(D(b)){if(0<=d.indexOf(b))return"...";d.push(b)}return b})}
function Oe(a){S(a,{errorHandlingConfig:ve,bootstrap:Wc,copy:Ia,extend:S,merge:xe,equals:va,element:x,forEach:r,injector:fb,noop:E,bind:Va,toJson:eb,fromJson:Tc,identity:Ta,isUndefined:A,isDefined:w,isString:C,isFunction:B,isObject:D,isNumber:X,isElement:ac,isArray:H,version:Pe,isDate:ha,callbacks:{$$counter:0},getTestability:He,reloadWithDebugInfo:Ge,UNSAFE_restoreLegacyJqLiteXHTMLReplacement:Ke,$$minErr:F,$$csp:Ba,$$encodeUriSegment:ic,$$encodeUriQuery:ba,$$lowercase:K,$$stringify:jc,$$uppercase:vb});
lc=Me(z);lc("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:Qe});a.provider("$compile",Zc).directive({a:Re,input:$c,textarea:$c,form:Se,script:Te,select:Ue,option:Ve,ngBind:We,ngBindHtml:Xe,ngBindTemplate:Ye,ngClass:Ze,ngClassEven:$e,ngClassOdd:af,ngCloak:bf,ngController:cf,ngForm:df,ngHide:ef,ngIf:ff,ngInclude:gf,ngInit:hf,ngNonBindable:jf,ngPluralize:kf,ngRef:lf,ngRepeat:mf,ngShow:nf,ngStyle:of,ngSwitch:pf,ngSwitchWhen:qf,ngSwitchDefault:rf,ngOptions:sf,ngTransclude:tf,ngModel:uf,
ngList:vf,ngChange:wf,pattern:ad,ngPattern:ad,required:bd,ngRequired:bd,minlength:cd,ngMinlength:cd,maxlength:dd,ngMaxlength:dd,ngValue:xf,ngModelOptions:yf}).directive({ngInclude:zf,input:Af}).directive(wb).directive(ed);a.provider({$anchorScroll:Bf,$animate:Cf,$animateCss:Df,$$animateJs:Ef,$$animateQueue:Ff,$$AnimateRunner:Gf,$$animateAsyncRun:Hf,$browser:If,$cacheFactory:Jf,$controller:Kf,$document:Lf,$$isDocumentHidden:Mf,$exceptionHandler:Nf,$filter:fd,$$forceReflow:Of,$interpolate:Pf,$interval:Qf,
$$intervalFactory:Rf,$http:Sf,$httpParamSerializer:Tf,$httpParamSerializerJQLike:Uf,$httpBackend:Vf,$xhrFactory:Wf,$jsonpCallbacks:Xf,$location:Yf,$log:Zf,$parse:$f,$rootScope:ag,$q:bg,$$q:cg,$sce:dg,$sceDelegate:eg,$sniffer:fg,$$taskTrackerFactory:gg,$templateCache:hg,$templateRequest:ig,$$testability:jg,$timeout:kg,$window:lg,$$rAF:mg,$$jqLite:ng,$$Map:og,$$cookieReader:pg})}]).info({angularVersion:"1.8.2"})}function xb(a,b){return b.toUpperCase()}function yb(a){return a.replace(qg,xb)}function mc(a){a=
a.nodeType;return 1===a||!a||9===a}function gd(a,b){var d,c,e,f=b.createDocumentFragment(),g=[],k;if(nc.test(a)){d=f.appendChild(b.createElement("div"));c=(rg.exec(a)||["",""])[1].toLowerCase();e=U.legacyXHTMLReplacement?a.replace(sg,"<$1></$2>"):a;if(10>wa)for(c=hb[c]||hb._default,d.innerHTML=c[1]+e+c[2],k=c[0];k--;)d=d.firstChild;else{c=qa[c]||[];for(k=c.length;-1<--k;)d.appendChild(z.document.createElement(c[k])),d=d.firstChild;d.innerHTML=e}g=db(g,d.childNodes);d=f.firstChild;d.textContent=""}else g.push(b.createTextNode(a));
f.textContent="";f.innerHTML="";r(g,function(a){f.appendChild(a)});return f}function U(a){if(a instanceof U)return a;var b;C(a)&&(a=V(a),b=!0);if(!(this instanceof U)){if(b&&"<"!==a.charAt(0))throw oc("nosel");return new U(a)}if(b){b=z.document;var d;a=(d=tg.exec(a))?[b.createElement(d[1])]:(d=gd(a,b))?d.childNodes:[];pc(this,a)}else B(a)?hd(a):pc(this,a)}function qc(a){return a.cloneNode(!0)}function zb(a,b){!b&&mc(a)&&x.cleanData([a]);a.querySelectorAll&&x.cleanData(a.querySelectorAll("*"))}function id(a){for(var b in a)return!1;
return!0}function jd(a){var b=a.ng339,d=b&&Ka[b],c=d&&d.events,d=d&&d.data;d&&!id(d)||c&&!id(c)||(delete Ka[b],a.ng339=void 0)}function kd(a,b,d,c){if(w(c))throw oc("offargs");var e=(c=Ab(a))&&c.events,f=c&&c.handle;if(f){if(b){var g=function(b){var c=e[b];w(d)&&cb(c||[],d);w(d)&&c&&0<c.length||(a.removeEventListener(b,f),delete e[b])};r(b.split(" "),function(a){g(a);Bb[a]&&g(Bb[a])})}else for(b in e)"$destroy"!==b&&a.removeEventListener(b,f),delete e[b];jd(a)}}function rc(a,b){var d=a.ng339;if(d=
d&&Ka[d])b?delete d.data[b]:d.data={},jd(a)}function Ab(a,b){var d=a.ng339,d=d&&Ka[d];b&&!d&&(a.ng339=d=++ug,d=Ka[d]={events:{},data:{},handle:void 0});return d}function sc(a,b,d){if(mc(a)){var c,e=w(d),f=!e&&b&&!D(b),g=!b;a=(a=Ab(a,!f))&&a.data;if(e)a[yb(b)]=d;else{if(g)return a;if(f)return a&&a[yb(b)];for(c in b)a[yb(c)]=b[c]}}}function Cb(a,b){return a.getAttribute?-1<(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+b+" "):!1}function Db(a,b){if(b&&a.setAttribute){var d=
(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),c=d;r(b.split(" "),function(a){a=V(a);c=c.replace(" "+a+" "," ")});c!==d&&a.setAttribute("class",V(c))}}function Eb(a,b){if(b&&a.setAttribute){var d=(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),c=d;r(b.split(" "),function(a){a=V(a);-1===c.indexOf(" "+a+" ")&&(c+=a+" ")});c!==d&&a.setAttribute("class",V(c))}}function pc(a,b){if(b)if(b.nodeType)a[a.length++]=b;else{var d=b.length;if("number"===typeof d&&b.window!==b){if(d)for(var c=
0;c<d;c++)a[a.length++]=b[c]}else a[a.length++]=b}}function ld(a,b){return Fb(a,"$"+(b||"ngController")+"Controller")}function Fb(a,b,d){9===a.nodeType&&(a=a.documentElement);for(b=H(b)?b:[b];a;){for(var c=0,e=b.length;c<e;c++)if(w(d=x.data(a,b[c])))return d;a=a.parentNode||11===a.nodeType&&a.host}}function md(a){for(zb(a,!0);a.firstChild;)a.removeChild(a.firstChild)}function Gb(a,b){b||zb(a);var d=a.parentNode;d&&d.removeChild(a)}function vg(a,b){b=b||z;if("complete"===b.document.readyState)b.setTimeout(a);
else x(b).on("load",a)}function hd(a){function b(){z.document.removeEventListener("DOMContentLoaded",b);z.removeEventListener("load",b);a()}"complete"===z.document.readyState?z.setTimeout(a):(z.document.addEventListener("DOMContentLoaded",b),z.addEventListener("load",b))}function nd(a,b){var d=Hb[b.toLowerCase()];return d&&od[ua(a)]&&d}function wg(a,b){var d=function(c,d){c.isDefaultPrevented=function(){return c.defaultPrevented};var f=b[d||c.type],g=f?f.length:0;if(g){if(A(c.immediatePropagationStopped)){var k=
c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=!0;c.stopPropagation&&c.stopPropagation();k&&k.call(c)}}c.isImmediatePropagationStopped=function(){return!0===c.immediatePropagationStopped};var h=f.specialHandlerWrapper||xg;1<g&&(f=ja(f));for(var l=0;l<g;l++)c.isImmediatePropagationStopped()||h(a,c,f[l])}};d.elem=a;return d}function xg(a,b,d){d.call(a,b)}function yg(a,b,d){var c=b.relatedTarget;c&&(c===a||zg.call(a,c))||d.call(a,b)}function ng(){this.$get=
function(){return S(U,{hasClass:function(a,b){a.attr&&(a=a[0]);return Cb(a,b)},addClass:function(a,b){a.attr&&(a=a[0]);return Eb(a,b)},removeClass:function(a,b){a.attr&&(a=a[0]);return Db(a,b)}})}}function La(a,b){var d=a&&a.$$hashKey;if(d)return"function"===typeof d&&(d=a.$$hashKey()),d;d=typeof a;return d="function"===d||"object"===d&&null!==a?a.$$hashKey=d+":"+(b||we)():d+":"+a}function pd(){this._keys=[];this._values=[];this._lastKey=NaN;this._lastIndex=-1}function qd(a){a=Function.prototype.toString.call(a).replace(Ag,
"");return a.match(Bg)||a.match(Cg)}function Dg(a){return(a=qd(a))?"function("+(a[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function fb(a,b){function d(a){return function(b,c){if(D(b))r(b,Zb(a));else return a(b,c)}}function c(a,b){Ja(a,"service");if(B(b)||H(b))b=n.instantiate(b);if(!b.$get)throw Ca("pget",a);return p[a+"Provider"]=b}function e(a,b){return function(){var c=t.invoke(b,this);if(A(c))throw Ca("undef",a);return c}}function f(a,b,d){return c(a,{$get:!1!==d?e(a,b):b})}function g(a){gb(A(a)||
H(a),"modulesToLoad","not an array");var b=[],c;r(a,function(a){function d(a){var b,c;b=0;for(c=a.length;b<c;b++){var e=a[b],f=n.get(e[0]);f[e[1]].apply(f,e[2])}}if(!m.get(a)){m.set(a,!0);try{C(a)?(c=lc(a),t.modules[a]=c,b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):B(a)?b.push(n.invoke(a)):H(a)?b.push(n.invoke(a)):tb(a,"module")}catch(e){throw H(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1===e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ca("modulerr",
a,e.stack||e.message||e);}}});return b}function k(a,c){function d(b,e){if(a.hasOwnProperty(b)){if(a[b]===h)throw Ca("cdep",b+" <- "+l.join(" <- "));return a[b]}try{return l.unshift(b),a[b]=h,a[b]=c(b,e),a[b]}catch(f){throw a[b]===h&&delete a[b],f;}finally{l.shift()}}function e(a,c,f){var g=[];a=fb.$$annotate(a,b,f);for(var h=0,k=a.length;h<k;h++){var l=a[h];if("string"!==typeof l)throw Ca("itkn",l);g.push(c&&c.hasOwnProperty(l)?c[l]:d(l,f))}return g}return{invoke:function(a,b,c,d){"string"===typeof c&&
(d=c,c=null);c=e(a,c,d);H(a)&&(a=a[a.length-1]);d=a;if(wa||"function"!==typeof d)d=!1;else{var f=d.$$ngIsClass;Ga(f)||(f=d.$$ngIsClass=/^class\b/.test(Function.prototype.toString.call(d)));d=f}return d?(c.unshift(null),new (Function.prototype.bind.apply(a,c))):a.apply(b,c)},instantiate:function(a,b,c){var d=H(a)?a[a.length-1]:a;a=e(a,b,c);a.unshift(null);return new (Function.prototype.bind.apply(d,a))},get:d,annotate:fb.$$annotate,has:function(b){return p.hasOwnProperty(b+"Provider")||a.hasOwnProperty(b)}}}
b=!0===b;var h={},l=[],m=new Ib,p={$provide:{provider:d(c),factory:d(f),service:d(function(a,b){return f(a,["$injector",function(a){return a.instantiate(b)}])}),value:d(function(a,b){return f(a,ia(b),!1)}),constant:d(function(a,b){Ja(a,"constant");p[a]=b;s[a]=b}),decorator:function(a,b){var c=n.get(a+"Provider"),d=c.$get;c.$get=function(){var a=t.invoke(d,c);return t.invoke(b,null,{$delegate:a})}}}},n=p.$injector=k(p,function(a,b){ca.isString(b)&&l.push(b);throw Ca("unpr",l.join(" <- "));}),s={},
G=k(s,function(a,b){var c=n.get(a+"Provider",b);return t.invoke(c.$get,c,void 0,a)}),t=G;p.$injectorProvider={$get:ia(G)};t.modules=n.modules=T();var N=g(a),t=G.get("$injector");t.strictDi=b;r(N,function(a){a&&t.invoke(a)});t.loadNewModules=function(a){r(g(a),function(a){a&&t.invoke(a)})};return t}function Bf(){var a=!0;this.disableAutoScrolling=function(){a=!1};this.$get=["$window","$location","$rootScope",function(b,d,c){function e(a){var b=null;Array.prototype.some.call(a,function(a){if("a"===
ua(a))return b=a,!0});return b}function f(a){if(a){a.scrollIntoView();var c;c=g.yOffset;B(c)?c=c():ac(c)?(c=c[0],c="fixed"!==b.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):X(c)||(c=0);c&&(a=a.getBoundingClientRect().top,b.scrollBy(0,a-c))}else b.scrollTo(0,0)}function g(a){a=C(a)?a:X(a)?a.toString():d.hash();var b;a?(b=k.getElementById(a))?f(b):(b=e(k.getElementsByName(a)))?f(b):"top"===a&&f(null):f(null)}var k=b.document;a&&c.$watch(function(){return d.hash()},function(a,b){a===
b&&""===a||vg(function(){c.$evalAsync(g)})});return g}]}function ib(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;H(a)&&(a=a.join(" "));H(b)&&(b=b.join(" "));return a+" "+b}function Eg(a){C(a)&&(a=a.split(" "));var b=T();r(a,function(a){a.length&&(b[a]=!0)});return b}function ra(a){return D(a)?a:{}}function Fg(a,b,d,c,e){function f(){pa=null;k()}function g(){t=y();t=A(t)?null:t;va(t,P)&&(t=P);N=P=t}function k(){var a=N;g();if(v!==h.url()||a!==t)v=h.url(),N=t,r(J,function(a){a(h.url(),t)})}
var h=this,l=a.location,m=a.history,p=a.setTimeout,n=a.clearTimeout,s={},G=e(d);h.isMock=!1;h.$$completeOutstandingRequest=G.completeTask;h.$$incOutstandingRequestCount=G.incTaskCount;h.notifyWhenNoOutstandingRequests=G.notifyWhenNoPendingTasks;var t,N,v=l.href,kc=b.find("base"),pa=null,y=c.history?function(){try{return m.state}catch(a){}}:E;g();h.url=function(b,d,e){A(e)&&(e=null);l!==a.location&&(l=a.location);m!==a.history&&(m=a.history);if(b){var f=N===e;b=ga(b).href;if(v===b&&(!c.history||f))return h;
var k=v&&Da(v)===Da(b);v=b;N=e;!c.history||k&&f?(k||(pa=b),d?l.replace(b):k?(d=l,e=b,f=e.indexOf("#"),e=-1===f?"":e.substr(f),d.hash=e):l.href=b,l.href!==b&&(pa=b)):(m[d?"replaceState":"pushState"](e,"",b),g());pa&&(pa=b);return h}return(pa||l.href).replace(/#$/,"")};h.state=function(){return t};var J=[],I=!1,P=null;h.onUrlChange=function(b){if(!I){if(c.history)x(a).on("popstate",f);x(a).on("hashchange",f);I=!0}J.push(b);return b};h.$$applicationDestroyed=function(){x(a).off("hashchange popstate",
f)};h.$$checkUrlChange=k;h.baseHref=function(){var a=kc.attr("href");return a?a.replace(/^(https?:)?\/\/[^/]*/,""):""};h.defer=function(a,b,c){var d;b=b||0;c=c||G.DEFAULT_TASK_TYPE;G.incTaskCount(c);d=p(function(){delete s[d];G.completeTask(a,c)},b);s[d]=c;return d};h.defer.cancel=function(a){if(s.hasOwnProperty(a)){var b=s[a];delete s[a];n(a);G.completeTask(E,b);return!0}return!1}}function If(){this.$get=["$window","$log","$sniffer","$document","$$taskTrackerFactory",function(a,b,d,c,e){return new Fg(a,
c,b,d,e)}]}function Jf(){this.$get=function(){function a(a,c){function e(a){a!==p&&(n?n===a&&(n=a.n):n=a,f(a.n,a.p),f(a,p),p=a,p.n=null)}function f(a,b){a!==b&&(a&&(a.p=b),b&&(b.n=a))}if(a in b)throw F("$cacheFactory")("iid",a);var g=0,k=S({},c,{id:a}),h=T(),l=c&&c.capacity||Number.MAX_VALUE,m=T(),p=null,n=null;return b[a]={put:function(a,b){if(!A(b)){if(l<Number.MAX_VALUE){var c=m[a]||(m[a]={key:a});e(c)}a in h||g++;h[a]=b;g>l&&this.remove(n.key);return b}},get:function(a){if(l<Number.MAX_VALUE){var b=
m[a];if(!b)return;e(b)}return h[a]},remove:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;b===p&&(p=b.p);b===n&&(n=b.n);f(b.n,b.p);delete m[a]}a in h&&(delete h[a],g--)},removeAll:function(){h=T();g=0;m=T();p=n=null},destroy:function(){m=k=h=null;delete b[a]},info:function(){return S({},k,{size:g})}}}var b={};a.info=function(){var a={};r(b,function(b,e){a[e]=b.info()});return a};a.get=function(a){return b[a]};return a}}function hg(){this.$get=["$cacheFactory",function(a){return a("templates")}]}
function Zc(a,b){function d(a,b,c){var d=/^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/,e=T();r(a,function(a,f){a=a.trim();if(a in p)e[f]=p[a];else{var g=a.match(d);if(!g)throw $("iscp",b,f,a,c?"controller bindings definition":"isolate scope definition");e[f]={mode:g[1][0],collection:"*"===g[2],optional:"?"===g[3],attrName:g[4]||f};g[4]&&(p[a]=e[f])}});return e}function c(a){var b=a.charAt(0);if(!b||b!==K(b))throw $("baddir",a);if(a!==a.trim())throw $("baddir",a);}function e(a){var b=a.require||a.controller&&
a.name;!H(b)&&D(b)&&r(b,function(a,c){var d=a.match(l);a.substring(d[0].length)||(b[c]=d[0]+c)});return b}var f={},g=/^\s*directive:\s*([\w-]+)\s+(.*)$/,k=/(([\w-]+)(?::([^;]+))?;?)/,h=Ae("ngSrc,ngSrcset,src,srcset"),l=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,m=/^(on[a-z]+|formaction)$/,p=T();this.directive=function pa(b,d){gb(b,"name");Ja(b,"directive");C(b)?(c(b),gb(d,"directiveFactory"),f.hasOwnProperty(b)||(f[b]=[],a.factory(b+"Directive",["$injector","$exceptionHandler",function(a,c){var d=[];r(f[b],function(f,
g){try{var h=a.invoke(f);B(h)?h={compile:ia(h)}:!h.compile&&h.link&&(h.compile=ia(h.link));h.priority=h.priority||0;h.index=g;h.name=h.name||b;h.require=e(h);var k=h,l=h.restrict;if(l&&(!C(l)||!/[EACM]/.test(l)))throw $("badrestrict",l,b);k.restrict=l||"EA";h.$$moduleName=f.$$moduleName;d.push(h)}catch(m){c(m)}});return d}])),f[b].push(d)):r(b,Zb(pa));return this};this.component=function y(a,b){function c(a){function e(b){return B(b)||H(b)?function(c,d){return a.invoke(b,this,{$element:c,$attrs:d})}:
b}var f=b.template||b.templateUrl?b.template:"",g={controller:d,controllerAs:Gg(b.controller)||b.controllerAs||"$ctrl",template:e(f),templateUrl:e(b.templateUrl),transclude:b.transclude,scope:{},bindToController:b.bindings||{},restrict:"E",require:b.require};r(b,function(a,b){"$"===b.charAt(0)&&(g[b]=a)});return g}if(!C(a))return r(a,Zb(Va(this,y))),this;var d=b.controller||function(){};r(b,function(a,b){"$"===b.charAt(0)&&(c[b]=a,B(d)&&(d[b]=a))});c.$inject=["$injector"];return this.directive(a,
c)};this.aHrefSanitizationTrustedUrlList=function(a){return w(a)?(b.aHrefSanitizationTrustedUrlList(a),this):b.aHrefSanitizationTrustedUrlList()};Object.defineProperty(this,"aHrefSanitizationWhitelist",{get:function(){return this.aHrefSanitizationTrustedUrlList},set:function(a){this.aHrefSanitizationTrustedUrlList=a}});this.imgSrcSanitizationTrustedUrlList=function(a){return w(a)?(b.imgSrcSanitizationTrustedUrlList(a),this):b.imgSrcSanitizationTrustedUrlList()};Object.defineProperty(this,"imgSrcSanitizationWhitelist",
{get:function(){return this.imgSrcSanitizationTrustedUrlList},set:function(a){this.imgSrcSanitizationTrustedUrlList=a}});var n=!0;this.debugInfoEnabled=function(a){return w(a)?(n=a,this):n};var s=!1;this.strictComponentBindingsEnabled=function(a){return w(a)?(s=a,this):s};var G=10;this.onChangesTtl=function(a){return arguments.length?(G=a,this):G};var t=!0;this.commentDirectivesEnabled=function(a){return arguments.length?(t=a,this):t};var N=!0;this.cssClassDirectivesEnabled=function(a){return arguments.length?
(N=a,this):N};var v=T();this.addPropertySecurityContext=function(a,b,c){var d=a.toLowerCase()+"|"+b.toLowerCase();if(d in v&&v[d]!==c)throw $("ctxoverride",a,b,v[d],c);v[d]=c;return this};(function(){function a(b,c){r(c,function(a){v[a.toLowerCase()]=b})}a(W.HTML,["iframe|srcdoc","*|innerHTML","*|outerHTML"]);a(W.CSS,["*|style"]);a(W.URL,"area|href area|ping a|href a|ping blockquote|cite body|background del|cite input|src ins|cite q|cite".split(" "));a(W.MEDIA_URL,"audio|src img|src img|srcset source|src source|srcset track|src video|src video|poster".split(" "));
a(W.RESOURCE_URL,"*|formAction applet|code applet|codebase base|href embed|src frame|src form|action head|profile html|manifest iframe|src link|href media|src object|codebase object|data script|src".split(" "))})();this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate",function(a,b,c,e,p,M,L,u,R){function q(){try{if(!--Ja)throw Ua=void 0,$("infchng",G);L.$apply(function(){for(var a=0,b=Ua.length;a<b;++a)try{Ua[a]()}catch(d){c(d)}Ua=
void 0})}finally{Ja++}}function ma(a,b){if(!a)return a;if(!C(a))throw $("srcset",b,a.toString());for(var c="",d=V(a),e=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,e=/\s/.test(d)?e:/(,)/,d=d.split(e),e=Math.floor(d.length/2),f=0;f<e;f++)var g=2*f,c=c+u.getTrustedMediaUrl(V(d[g])),c=c+(" "+V(d[g+1]));d=V(d[2*f]).split(/\s/);c+=u.getTrustedMediaUrl(V(d[0]));2===d.length&&(c+=" "+V(d[1]));return c}function w(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<e;d++)f=c[d],this[f]=b[f]}else this.$attr=
{};this.$$element=a}function O(a,b,c){Fa.innerHTML="<span "+b+">";b=Fa.firstChild.attributes;var d=b[0];b.removeNamedItem(d.name);d.value=c;a.attributes.setNamedItem(d)}function sa(a,b){try{a.addClass(b)}catch(c){}}function da(a,b,c,d,e){a instanceof x||(a=x(a));var f=Xa(a,b,a,c,d,e);da.$$addScopeClass(a);var g=null;return function(b,c,d){if(!a)throw $("multilink");gb(b,"scope");e&&e.needsNewScope&&(b=b.$parent.$new());d=d||{};var h=d.parentBoundTranscludeFn,k=d.transcludeControllers;d=d.futureParentElement;
h&&h.$$boundTransclude&&(h=h.$$boundTransclude);g||(g=(d=d&&d[0])?"foreignobject"!==ua(d)&&la.call(d).match(/SVG/)?"svg":"html":"html");d="html"!==g?x(ja(g,x("<div></div>").append(a).html())):c?Wa.clone.call(a):a;if(k)for(var l in k)d.data("$"+l+"Controller",k[l].instance);da.$$addScopeInfo(d,b);c&&c(d,b);f&&f(b,d,d,h);c||(a=f=null);return d}}function Xa(a,b,c,d,e,f){function g(a,c,d,e){var f,k,l,m,p,I,t;if(n)for(t=Array(c.length),m=0;m<h.length;m+=3)f=h[m],t[f]=c[f];else t=c;m=0;for(p=h.length;m<
p;)k=t[h[m++]],c=h[m++],f=h[m++],c?(c.scope?(l=a.$new(),da.$$addScopeInfo(x(k),l)):l=a,I=c.transcludeOnThisElement?ka(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?ka(a,b):null,c(f,l,k,d,I)):f&&f(a,k.childNodes,void 0,e)}for(var h=[],k=H(a)||a instanceof x,l,m,p,I,n,t=0;t<a.length;t++){l=new w;11===wa&&jb(a,t,k);m=tc(a[t],[],l,0===t?d:void 0,e);(f=m.length?aa(m,a[t],l,b,c,null,[],[],f):null)&&f.scope&&da.$$addScopeClass(l.$$element);l=f&&f.terminal||!(p=a[t].childNodes)||!p.length?null:Xa(p,
f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b);if(f||l)h.push(t,f,l),I=!0,n=n||f;f=null}return I?g:null}function jb(a,b,c){var d=a[b],e=d.parentNode,f;if(d.nodeType===Pa)for(;;){f=e?d.nextSibling:a[b+1];if(!f||f.nodeType!==Pa)break;d.nodeValue+=f.nodeValue;f.parentNode&&f.parentNode.removeChild(f);c&&f===a[b+1]&&a.splice(b+1,1)}}function ka(a,b,c){function d(e,f,g,h,k){e||(e=a.$new(!1,k),e.$$transcluded=!0);return b(e,f,{parentBoundTranscludeFn:c,transcludeControllers:g,
futureParentElement:h})}var e=d.$$slots=T(),f;for(f in b.$$slots)e[f]=b.$$slots[f]?ka(a,b.$$slots[f],c):null;return d}function tc(a,b,d,e,f){var g=d.$attr,h;switch(a.nodeType){case 1:h=ua(a);Y(b,xa(h),"E",e,f);for(var l,m,n,t,J,s=a.attributes,v=0,G=s&&s.length;v<G;v++){var P=!1,N=!1,r=!1,y=!1,u=!1,M;l=s[v];m=l.name;t=l.value;n=xa(m.toLowerCase());(J=n.match(Ra))?(r="Attr"===J[1],y="Prop"===J[1],u="On"===J[1],m=m.replace(rd,"").toLowerCase().substr(4+J[1].length).replace(/_(.)/g,function(a,b){return b.toUpperCase()})):
(M=n.match(Sa))&&ca(M[1])&&(P=m,N=m.substr(0,m.length-5)+"end",m=m.substr(0,m.length-6));if(y||u)d[n]=t,g[n]=l.name,y?Ea(a,b,n,m):b.push(sd(p,L,c,n,m,!1));else{n=xa(m.toLowerCase());g[n]=m;if(r||!d.hasOwnProperty(n))d[n]=t,nd(a,n)&&(d[n]=!0);Ia(a,b,t,n,r);Y(b,n,"A",e,f,P,N)}}"input"===h&&"hidden"===a.getAttribute("type")&&a.setAttribute("autocomplete","off");if(!Qa)break;g=a.className;D(g)&&(g=g.animVal);if(C(g)&&""!==g)for(;a=k.exec(g);)n=xa(a[2]),Y(b,n,"C",e,f)&&(d[n]=V(a[3])),g=g.substr(a.index+
a[0].length);break;case Pa:na(b,a.nodeValue);break;case 8:if(!Oa)break;F(a,b,d,e,f)}b.sort(ia);return b}function F(a,b,c,d,e){try{var f=g.exec(a.nodeValue);if(f){var h=xa(f[1]);Y(b,h,"M",d,e)&&(c[h]=V(f[2]))}}catch(k){}}function U(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw $("uterdir",b,c);1===a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return x(d)}function W(a,b,c){return function(d,e,f,g,h){e=U(e[0],
b,c);return a(d,e,f,g,h)}}function Z(a,b,c,d,e,f){var g;return a?da(b,c,d,e,f):function(){g||(g=da(b,c,d,e,f),b=c=f=null);return g.apply(this,arguments)}}function aa(a,b,d,e,f,g,h,k,l){function m(a,b,c,d){if(a){c&&(a=W(a,c,d));a.require=u.require;a.directiveName=Q;if(s===u||u.$$isolateScope)a=Ba(a,{isolateScope:!0});h.push(a)}if(b){c&&(b=W(b,c,d));b.require=u.require;b.directiveName=Q;if(s===u||u.$$isolateScope)b=Ba(b,{isolateScope:!0});k.push(b)}}function p(a,e,f,g,l){function m(a,b,c,d){var e;bb(a)||
(d=c,c=b,b=a,a=void 0);N&&(e=P);c||(c=N?Q.parent():Q);if(d){var f=l.$$slots[d];if(f)return f(a,b,e,c,R);if(A(f))throw $("noslot",d,Aa(Q));}else return l(a,b,e,c,R)}var n,u,L,y,G,P,M,Q;b===f?(g=d,Q=d.$$element):(Q=x(f),g=new w(Q,d));G=e;s?y=e.$new(!0):t&&(G=e.$parent);l&&(M=m,M.$$boundTransclude=l,M.isSlotFilled=function(a){return!!l.$$slots[a]});J&&(P=ea(Q,g,M,J,y,e,s));s&&(da.$$addScopeInfo(Q,y,!0,!(v&&(v===s||v===s.$$originalDirective))),da.$$addScopeClass(Q,!0),y.$$isolateBindings=s.$$isolateBindings,
u=Da(e,g,y,y.$$isolateBindings,s),u.removeWatches&&y.$on("$destroy",u.removeWatches));for(n in P){u=J[n];L=P[n];var Hg=u.$$bindings.bindToController;L.instance=L();Q.data("$"+u.name+"Controller",L.instance);L.bindingInfo=Da(G,g,L.instance,Hg,u)}r(J,function(a,b){var c=a.require;a.bindToController&&!H(c)&&D(c)&&S(P[b].instance,X(b,c,Q,P))});r(P,function(a){var b=a.instance;if(B(b.$onChanges))try{b.$onChanges(a.bindingInfo.initialChanges)}catch(d){c(d)}if(B(b.$onInit))try{b.$onInit()}catch(e){c(e)}B(b.$doCheck)&&
(G.$watch(function(){b.$doCheck()}),b.$doCheck());B(b.$onDestroy)&&G.$on("$destroy",function(){b.$onDestroy()})});n=0;for(u=h.length;n<u;n++)L=h[n],Ca(L,L.isolateScope?y:e,Q,g,L.require&&X(L.directiveName,L.require,Q,P),M);var R=e;s&&(s.template||null===s.templateUrl)&&(R=y);a&&a(R,f.childNodes,void 0,l);for(n=k.length-1;0<=n;n--)L=k[n],Ca(L,L.isolateScope?y:e,Q,g,L.require&&X(L.directiveName,L.require,Q,P),M);r(P,function(a){a=a.instance;B(a.$postLink)&&a.$postLink()})}l=l||{};for(var n=-Number.MAX_VALUE,
t=l.newScopeDirective,J=l.controllerDirectives,s=l.newIsolateScopeDirective,v=l.templateDirective,L=l.nonTlbTranscludeDirective,G=!1,P=!1,N=l.hasElementTranscludeDirective,y=d.$$element=x(b),u,Q,M,R=e,q,ma=!1,Jb=!1,O,sa=0,C=a.length;sa<C;sa++){u=a[sa];var E=u.$$start,jb=u.$$end;E&&(y=U(b,E,jb));M=void 0;if(n>u.priority)break;if(O=u.scope)u.templateUrl||(D(O)?(ba("new/isolated scope",s||t,u,y),s=u):ba("new/isolated scope",s,u,y)),t=t||u;Q=u.name;if(!ma&&(u.replace&&(u.templateUrl||u.template)||u.transclude&&
!u.$$tlb)){for(O=sa+1;ma=a[O++];)if(ma.transclude&&!ma.$$tlb||ma.replace&&(ma.templateUrl||ma.template)){Jb=!0;break}ma=!0}!u.templateUrl&&u.controller&&(J=J||T(),ba("'"+Q+"' controller",J[Q],u,y),J[Q]=u);if(O=u.transclude)if(G=!0,u.$$tlb||(ba("transclusion",L,u,y),L=u),"element"===O)N=!0,n=u.priority,M=y,y=d.$$element=x(da.$$createComment(Q,d[Q])),b=y[0],oa(f,Ha.call(M,0),b),R=Z(Jb,M,e,n,g&&g.name,{nonTlbTranscludeDirective:L});else{var ka=T();if(D(O)){M=z.document.createDocumentFragment();var Xa=
T(),F=T();r(O,function(a,b){var c="?"===a.charAt(0);a=c?a.substring(1):a;Xa[a]=b;ka[b]=null;F[b]=c});r(y.contents(),function(a){var b=Xa[xa(ua(a))];b?(F[b]=!0,ka[b]=ka[b]||z.document.createDocumentFragment(),ka[b].appendChild(a)):M.appendChild(a)});r(F,function(a,b){if(!a)throw $("reqslot",b);});for(var K in ka)ka[K]&&(R=x(ka[K].childNodes),ka[K]=Z(Jb,R,e));M=x(M.childNodes)}else M=x(qc(b)).contents();y.empty();R=Z(Jb,M,e,void 0,void 0,{needsNewScope:u.$$isolateScope||u.$$newScope});R.$$slots=ka}if(u.template)if(P=
!0,ba("template",v,u,y),v=u,O=B(u.template)?u.template(y,d):u.template,O=Na(O),u.replace){g=u;M=nc.test(O)?td(ja(u.templateNamespace,V(O))):[];b=M[0];if(1!==M.length||1!==b.nodeType)throw $("tplrt",Q,"");oa(f,y,b);C={$attr:{}};O=tc(b,[],C);var Ig=a.splice(sa+1,a.length-(sa+1));(s||t)&&fa(O,s,t);a=a.concat(O).concat(Ig);ga(d,C);C=a.length}else y.html(O);if(u.templateUrl)P=!0,ba("template",v,u,y),v=u,u.replace&&(g=u),p=ha(a.splice(sa,a.length-sa),y,d,f,G&&R,h,k,{controllerDirectives:J,newScopeDirective:t!==
u&&t,newIsolateScopeDirective:s,templateDirective:v,nonTlbTranscludeDirective:L}),C=a.length;else if(u.compile)try{q=u.compile(y,d,R);var Y=u.$$originalDirective||u;B(q)?m(null,Va(Y,q),E,jb):q&&m(Va(Y,q.pre),Va(Y,q.post),E,jb)}catch(ca){c(ca,Aa(y))}u.terminal&&(p.terminal=!0,n=Math.max(n,u.priority))}p.scope=t&&!0===t.scope;p.transcludeOnThisElement=G;p.templateOnThisElement=P;p.transclude=R;l.hasElementTranscludeDirective=N;return p}function X(a,b,c,d){var e;if(C(b)){var f=b.match(l);b=b.substring(f[0].length);
var g=f[1]||f[3],f="?"===f[2];"^^"===g?c=c.parent():e=(e=d&&d[b])&&e.instance;if(!e){var h="$"+b+"Controller";e="^^"===g&&c[0]&&9===c[0].nodeType?null:g?c.inheritedData(h):c.data(h)}if(!e&&!f)throw $("ctreq",b,a);}else if(H(b))for(e=[],g=0,f=b.length;g<f;g++)e[g]=X(a,b[g],c,d);else D(b)&&(e={},r(b,function(b,f){e[f]=X(a,b,c,d)}));return e||null}function ea(a,b,c,d,e,f,g){var h=T(),k;for(k in d){var l=d[k],m={$scope:l===g||l.$$isolateScope?e:f,$element:a,$attrs:b,$transclude:c},p=l.controller;"@"===
p&&(p=b[l.name]);m=M(p,m,!0,l.controllerAs);h[l.name]=m;a.data("$"+l.name+"Controller",m.instance)}return h}function fa(a,b,c){for(var d=0,e=a.length;d<e;d++)a[d]=bc(a[d],{$$isolateScope:b,$$newScope:c})}function Y(b,c,e,g,h,k,l){if(c===h)return null;var m=null;if(f.hasOwnProperty(c)){h=a.get(c+"Directive");for(var p=0,n=h.length;p<n;p++)if(c=h[p],(A(g)||g>c.priority)&&-1!==c.restrict.indexOf(e)){k&&(c=bc(c,{$$start:k,$$end:l}));if(!c.$$bindings){var I=m=c,t=c.name,u={isolateScope:null,bindToController:null};
D(I.scope)&&(!0===I.bindToController?(u.bindToController=d(I.scope,t,!0),u.isolateScope={}):u.isolateScope=d(I.scope,t,!1));D(I.bindToController)&&(u.bindToController=d(I.bindToController,t,!0));if(u.bindToController&&!I.controller)throw $("noctrl",t);m=m.$$bindings=u;D(m.isolateScope)&&(c.$$isolateBindings=m.isolateScope)}b.push(c);m=c}}return m}function ca(b){if(f.hasOwnProperty(b))for(var c=a.get(b+"Directive"),d=0,e=c.length;d<e;d++)if(b=c[d],b.multiElement)return!0;return!1}function ga(a,b){var c=
b.$attr,d=a.$attr;r(a,function(d,e){"$"!==e.charAt(0)&&(b[e]&&b[e]!==d&&(d=d.length?d+(("style"===e?";":" ")+b[e]):b[e]),a.$set(e,d,!0,c[e]))});r(b,function(b,e){a.hasOwnProperty(e)||"$"===e.charAt(0)||(a[e]=b,"class"!==e&&"style"!==e&&(d[e]=c[e]))})}function ha(a,b,d,f,g,h,k,l){var m=[],p,n,t=b[0],u=a.shift(),J=bc(u,{templateUrl:null,transclude:null,replace:null,$$originalDirective:u}),s=B(u.templateUrl)?u.templateUrl(b,d):u.templateUrl,L=u.templateNamespace;b.empty();e(s).then(function(c){var e,
I;c=Na(c);if(u.replace){c=nc.test(c)?td(ja(L,V(c))):[];e=c[0];if(1!==c.length||1!==e.nodeType)throw $("tplrt",u.name,s);c={$attr:{}};oa(f,b,e);var v=tc(e,[],c);D(u.scope)&&fa(v,!0);a=v.concat(a);ga(d,c)}else e=t,b.html(c);a.unshift(J);p=aa(a,e,d,g,b,u,h,k,l);r(f,function(a,c){a===e&&(f[c]=b[0])});for(n=Xa(b[0].childNodes,g);m.length;){c=m.shift();I=m.shift();var y=m.shift(),P=m.shift(),v=b[0];if(!c.$$destroyed){if(I!==t){var G=I.className;l.hasElementTranscludeDirective&&u.replace||(v=qc(e));oa(y,
x(I),v);sa(x(v),G)}I=p.transcludeOnThisElement?ka(c,p.transclude,P):P;p(n,c,v,f,I)}}m=null}).catch(function(a){dc(a)&&c(a)});return function(a,b,c,d,e){a=e;b.$$destroyed||(m?m.push(b,c,d,a):(p.transcludeOnThisElement&&(a=ka(b,p.transclude,e)),p(n,b,c,d,a)))}}function ia(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function ba(a,b,c,d){function e(a){return a?" (module: "+a+")":""}if(b)throw $("multidir",b.name,e(b.$$moduleName),c.name,e(c.$$moduleName),
a,Aa(d));}function na(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=a.parent();var b=!!a.length;b&&da.$$addBindingClass(a);return function(a,c){var e=c.parent();b||da.$$addBindingClass(e);da.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function ja(a,b){a=K(a||"html");switch(a){case "svg":case "math":var c=z.document.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function qa(a,b){if("srcdoc"===
b)return u.HTML;if("src"===b||"ngSrc"===b)return-1===["img","video","audio","source","track"].indexOf(a)?u.RESOURCE_URL:u.MEDIA_URL;if("xlinkHref"===b)return"image"===a?u.MEDIA_URL:"a"===a?u.URL:u.RESOURCE_URL;if("form"===a&&"action"===b||"base"===a&&"href"===b||"link"===a&&"href"===b)return u.RESOURCE_URL;if("a"===a&&("href"===b||"ngHref"===b))return u.URL}function ya(a,b){var c=b.toLowerCase();return v[a+"|"+c]||v["*|"+c]}function za(a){return ma(u.valueOf(a),"ng-prop-srcset")}function Ea(a,b,c,
d){if(m.test(d))throw $("nodomevents");a=ua(a);var e=ya(a,d),f=Ta;"srcset"!==d||"img"!==a&&"source"!==a?e&&(f=u.getTrusted.bind(u,e)):f=za;b.push({priority:100,compile:function(a,b){var e=p(b[c]),g=p(b[c],function(a){return u.valueOf(a)});return{pre:function(a,b){function c(){var g=e(a);b[0][d]=f(g)}c();a.$watch(g,c)}}}})}function Ia(a,c,d,e,f){var g=ua(a),k=qa(g,e),l=h[e]||f,p=b(d,!f,k,l);if(p){if("multiple"===e&&"select"===g)throw $("selmulti",Aa(a));if(m.test(e))throw $("nodomevents");c.push({priority:100,
compile:function(){return{pre:function(a,c,f){c=f.$$observers||(f.$$observers=T());var g=f[e];g!==d&&(p=g&&b(g,!0,k,l),d=g);p&&(f[e]=p(a),(c[e]||(c[e]=[])).$$inter=!0,(f.$$observers&&f.$$observers[e].$$scope||a).$watch(p,function(a,b){"class"===e&&a!==b?f.$updateClass(a,b):f.$set(e,a)}))}}}})}}function oa(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]===d){a[g++]=c;h=g+e-1;for(var k=a.length;g<k;g++,h++)h<k?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&
(a.context=c);break}f&&f.replaceChild(c,d);a=z.document.createDocumentFragment();for(g=0;g<e;g++)a.appendChild(b[g]);x.hasData(d)&&(x.data(c,x.data(d)),x(d).off("$destroy"));x.cleanData(a.querySelectorAll("*"));for(g=1;g<e;g++)delete b[g];b[0]=c;b.length=1}function Ba(a,b){return S(function(){return a.apply(null,arguments)},a,b)}function Ca(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,Aa(d))}}function ra(a,b){if(s)throw $("missingattr",a,b);}function Da(a,c,d,e,f){function g(b,c,e){B(d.$onChanges)&&
!ec(c,e)&&(Ua||(a.$$postDigest(q),Ua=[]),m||(m={},Ua.push(h)),m[b]&&(e=m[b].previousValue),m[b]=new Kb(e,c))}function h(){d.$onChanges(m);m=void 0}var k=[],l={},m;r(e,function(e,h){var m=e.attrName,n=e.optional,I,t,u,s;switch(e.mode){case "@":n||ta.call(c,m)||(ra(m,f.name),d[h]=c[m]=void 0);n=c.$observe(m,function(a){if(C(a)||Ga(a))g(h,a,d[h]),d[h]=a});c.$$observers[m].$$scope=a;I=c[m];C(I)?d[h]=b(I)(a):Ga(I)&&(d[h]=I);l[h]=new Kb(uc,d[h]);k.push(n);break;case "=":if(!ta.call(c,m)){if(n)break;ra(m,
f.name);c[m]=void 0}if(n&&!c[m])break;t=p(c[m]);s=t.literal?va:ec;u=t.assign||function(){I=d[h]=t(a);throw $("nonassign",c[m],m,f.name);};I=d[h]=t(a);n=function(b){s(b,d[h])||(s(b,I)?u(a,b=d[h]):d[h]=b);return I=b};n.$stateful=!0;n=e.collection?a.$watchCollection(c[m],n):a.$watch(p(c[m],n),null,t.literal);k.push(n);break;case "<":if(!ta.call(c,m)){if(n)break;ra(m,f.name);c[m]=void 0}if(n&&!c[m])break;t=p(c[m]);var v=t.literal,L=d[h]=t(a);l[h]=new Kb(uc,d[h]);n=a[e.collection?"$watchCollection":"$watch"](t,
function(a,b){if(b===a){if(b===L||v&&va(b,L))return;b=L}g(h,a,b);d[h]=a});k.push(n);break;case "&":n||ta.call(c,m)||ra(m,f.name);t=c.hasOwnProperty(m)?p(c[m]):E;if(t===E&&n)break;d[h]=function(b){return t(a,b)}}});return{initialChanges:l,removeWatches:k.length&&function(){for(var a=0,b=k.length;a<b;++a)k[a]()}}}var Ma=/^\w/,Fa=z.document.createElement("div"),Oa=t,Qa=N,Ja=G,Ua;w.prototype={$normalize:xa,$addClass:function(a){a&&0<a.length&&R.addClass(this.$$element,a)},$removeClass:function(a){a&&
0<a.length&&R.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=ud(a,b);c&&c.length&&R.addClass(this.$$element,c);(c=ud(b,a))&&c.length&&R.removeClass(this.$$element,c)},$set:function(a,b,d,e){var f=nd(this.$$element[0],a),g=vd[a],h=a;f?(this.$$element.prop(a,b),e=f):g&&(this[g]=b,h=g);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=Xc(a,"-"));"img"===ua(this.$$element)&&"srcset"===a&&(this[a]=b=ma(b,"$set('srcset', value)"));!1!==d&&(null===b||A(b)?this.$$element.removeAttr(e):
Ma.test(e)?f&&!1===b?this.$$element.removeAttr(e):this.$$element.attr(e,b):O(this.$$element[0],e,b));(a=this.$$observers)&&r(a[h],function(a){try{a(b)}catch(d){c(d)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers=T()),e=d[a]||(d[a]=[]);e.push(b);L.$evalAsync(function(){e.$$inter||!c.hasOwnProperty(a)||A(c[a])||b(c[a])});return function(){cb(e,b)}}};var Ka=b.startSymbol(),La=b.endSymbol(),Na="{{"===Ka&&"}}"===La?Ta:function(a){return a.replace(/\{\{/g,Ka).replace(/}}/g,La)},Ra=
/^ng(Attr|Prop|On)([A-Z].*)$/,Sa=/^(.+)Start$/;da.$$addBindingInfo=n?function(a,b){var c=a.data("$binding")||[];H(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:E;da.$$addBindingClass=n?function(a){sa(a,"ng-binding")}:E;da.$$addScopeInfo=n?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:E;da.$$addScopeClass=n?function(a,b){sa(a,b?"ng-isolate-scope":"ng-scope")}:E;da.$$createComment=function(a,b){var c="";n&&(c=" "+(a||"")+": ",b&&(c+=b+" "));return z.document.createComment(c)};
return da}]}function Kb(a,b){this.previousValue=a;this.currentValue=b}function xa(a){return a.replace(rd,"").replace(Jg,function(a,d,c){return c?d.toUpperCase():d})}function ud(a,b){var d="",c=a.split(/\s+/),e=b.split(/\s+/),f=0;a:for(;f<c.length;f++){for(var g=c[f],k=0;k<e.length;k++)if(g===e[k])continue a;d+=(0<d.length?" ":"")+g}return d}function td(a){a=x(a);var b=a.length;if(1>=b)return a;for(;b--;){var d=a[b];(8===d.nodeType||d.nodeType===Pa&&""===d.nodeValue.trim())&&Kg.call(a,b,1)}return a}
function Gg(a,b){if(b&&C(b))return b;if(C(a)){var d=wd.exec(a);if(d)return d[3]}}function Kf(){var a={};this.has=function(b){return a.hasOwnProperty(b)};this.register=function(b,d){Ja(b,"controller");D(b)?S(a,b):a[b]=d};this.$get=["$injector",function(b){function d(a,b,d,g){if(!a||!D(a.$scope))throw F("$controller")("noscp",g,b);a.$scope[b]=d}return function(c,e,f,g){var k,h,l;f=!0===f;g&&C(g)&&(l=g);if(C(c)){g=c.match(wd);if(!g)throw xd("ctrlfmt",c);h=g[1];l=l||g[3];c=a.hasOwnProperty(h)?a[h]:Le(e.$scope,
h,!0);if(!c)throw xd("ctrlreg",h);tb(c,h,!0)}if(f)return f=(H(c)?c[c.length-1]:c).prototype,k=Object.create(f||null),l&&d(e,l,k,h||c.name),S(function(){var a=b.invoke(c,k,e,h);a!==k&&(D(a)||B(a))&&(k=a,l&&d(e,l,k,h||c.name));return k},{instance:k,identifier:l});k=b.instantiate(c,e,h);l&&d(e,l,k,h||c.name);return k}}]}function Lf(){this.$get=["$window",function(a){return x(a.document)}]}function Mf(){this.$get=["$document","$rootScope",function(a,b){function d(){e=c.hidden}var c=a[0],e=c&&c.hidden;
a.on("visibilitychange",d);b.$on("$destroy",function(){a.off("visibilitychange",d)});return function(){return e}}]}function Nf(){this.$get=["$log",function(a){return function(b,d){a.error.apply(a,arguments)}}]}function vc(a){return D(a)?ha(a)?a.toISOString():eb(a):a}function Tf(){this.$get=function(){return function(a){if(!a)return"";var b=[];Qc(a,function(a,c){null===a||A(a)||B(a)||(H(a)?r(a,function(a){b.push(ba(c)+"="+ba(vc(a)))}):b.push(ba(c)+"="+ba(vc(a))))});return b.join("&")}}}function Uf(){this.$get=
function(){return function(a){function b(a,e,f){H(a)?r(a,function(a,c){b(a,e+"["+(D(a)?c:"")+"]")}):D(a)&&!ha(a)?Qc(a,function(a,c){b(a,e+(f?"":"[")+c+(f?"":"]"))}):(B(a)&&(a=a()),d.push(ba(e)+"="+(null==a?"":ba(vc(a)))))}if(!a)return"";var d=[];b(a,"",!0);return d.join("&")}}}function wc(a,b){if(C(a)){var d=a.replace(Lg,"").trim();if(d){var c=b("Content-Type"),c=c&&0===c.indexOf(yd),e;(e=c)||(e=(e=d.match(Mg))&&Ng[e[0]].test(d));if(e)try{a=Tc(d)}catch(f){if(!c)return a;throw Lb("baddata",a,f);}}}return a}
function zd(a){var b=T(),d;C(a)?r(a.split("\n"),function(a){d=a.indexOf(":");var e=K(V(a.substr(0,d)));a=V(a.substr(d+1));e&&(b[e]=b[e]?b[e]+", "+a:a)}):D(a)&&r(a,function(a,d){var f=K(d),g=V(a);f&&(b[f]=b[f]?b[f]+", "+g:g)});return b}function Ad(a){var b;return function(d){b||(b=zd(a));return d?(d=b[K(d)],void 0===d&&(d=null),d):b}}function Bd(a,b,d,c){if(B(c))return c(a,b,d);r(c,function(c){a=c(a,b,d)});return a}function Sf(){var a=this.defaults={transformResponse:[wc],transformRequest:[function(a){return D(a)&&
"[object File]"!==la.call(a)&&"[object Blob]"!==la.call(a)&&"[object FormData]"!==la.call(a)?eb(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ja(xc),put:ja(xc),patch:ja(xc)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},b=!1;this.useApplyAsync=function(a){return w(a)?(b=!!a,this):b};var d=this.interceptors=[],c=this.xsrfTrustedOrigins=[];Object.defineProperty(this,"xsrfWhitelistedOrigins",
{get:function(){return this.xsrfTrustedOrigins},set:function(a){this.xsrfTrustedOrigins=a}});this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(e,f,g,k,h,l,m,p){function n(b){function c(a,b){for(var d=0,e=b.length;d<e;){var f=b[d++],g=b[d++];a=a.then(f,g)}b.length=0;return a}function d(a,b){var c,e={};r(a,function(a,d){B(a)?(c=a(b),null!=c&&(e[d]=c)):e[d]=a});return e}function f(a){var b=S({},a);b.data=Bd(a.data,a.headers,a.status,g.transformResponse);
a=a.status;return 200<=a&&300>a?b:l.reject(b)}if(!D(b))throw F("$http")("badreq",b);if(!C(p.valueOf(b.url)))throw F("$http")("badreq",b.url);var g=S({method:"get",transformRequest:a.transformRequest,transformResponse:a.transformResponse,paramSerializer:a.paramSerializer,jsonpCallbackParam:a.jsonpCallbackParam},b);g.headers=function(b){var c=a.headers,e=S({},b.headers),f,g,h,c=S({},c.common,c[K(b.method)]);a:for(f in c){g=K(f);for(h in e)if(K(h)===g)continue a;e[f]=c[f]}return d(e,ja(b))}(b);g.method=
vb(g.method);g.paramSerializer=C(g.paramSerializer)?m.get(g.paramSerializer):g.paramSerializer;e.$$incOutstandingRequestCount("$http");var h=[],k=[];b=l.resolve(g);r(v,function(a){(a.request||a.requestError)&&h.unshift(a.request,a.requestError);(a.response||a.responseError)&&k.push(a.response,a.responseError)});b=c(b,h);b=b.then(function(b){var c=b.headers,d=Bd(b.data,Ad(c),void 0,b.transformRequest);A(d)&&r(c,function(a,b){"content-type"===K(b)&&delete c[b]});A(b.withCredentials)&&!A(a.withCredentials)&&
(b.withCredentials=a.withCredentials);return s(b,d).then(f,f)});b=c(b,k);return b=b.finally(function(){e.$$completeOutstandingRequest(E,"$http")})}function s(c,d){function e(a){if(a){var c={};r(a,function(a,d){c[d]=function(c){function d(){a(c)}b?h.$applyAsync(d):h.$$phase?d():h.$apply(d)}});return c}}function k(a,c,d,e,f){function g(){m(c,a,d,e,f)}R&&(200<=a&&300>a?R.put(O,[a,c,zd(d),e,f]):R.remove(O));b?h.$applyAsync(g):(g(),h.$$phase||h.$apply())}function m(a,b,d,e,f){b=-1<=b?b:0;(200<=b&&300>
b?L.resolve:L.reject)({data:a,status:b,headers:Ad(d),config:c,statusText:e,xhrStatus:f})}function s(a){m(a.data,a.status,ja(a.headers()),a.statusText,a.xhrStatus)}function v(){var a=n.pendingRequests.indexOf(c);-1!==a&&n.pendingRequests.splice(a,1)}var L=l.defer(),u=L.promise,R,q,ma=c.headers,x="jsonp"===K(c.method),O=c.url;x?O=p.getTrustedResourceUrl(O):C(O)||(O=p.valueOf(O));O=G(O,c.paramSerializer(c.params));x&&(O=t(O,c.jsonpCallbackParam));n.pendingRequests.push(c);u.then(v,v);!c.cache&&!a.cache||
!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method||(R=D(c.cache)?c.cache:D(a.cache)?a.cache:N);R&&(q=R.get(O),w(q)?q&&B(q.then)?q.then(s,s):H(q)?m(q[1],q[0],ja(q[2]),q[3],q[4]):m(q,200,{},"OK","complete"):R.put(O,u));A(q)&&((q=kc(c.url)?g()[c.xsrfCookieName||a.xsrfCookieName]:void 0)&&(ma[c.xsrfHeaderName||a.xsrfHeaderName]=q),f(c.method,O,d,k,ma,c.timeout,c.withCredentials,c.responseType,e(c.eventHandlers),e(c.uploadEventHandlers)));return u}function G(a,b){0<b.length&&(a+=(-1===a.indexOf("?")?
"?":"&")+b);return a}function t(a,b){var c=a.split("?");if(2<c.length)throw Lb("badjsonp",a);c=hc(c[1]);r(c,function(c,d){if("JSON_CALLBACK"===c)throw Lb("badjsonp",a);if(d===b)throw Lb("badjsonp",b,a);});return a+=(-1===a.indexOf("?")?"?":"&")+b+"=JSON_CALLBACK"}var N=k("$http");a.paramSerializer=C(a.paramSerializer)?m.get(a.paramSerializer):a.paramSerializer;var v=[];r(d,function(a){v.unshift(C(a)?m.get(a):m.invoke(a))});var kc=Og(c);n.pendingRequests=[];(function(a){r(arguments,function(a){n[a]=
function(b,c){return n(S({},c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){r(arguments,function(a){n[a]=function(b,c,d){return n(S({},d||{},{method:a,url:b,data:c}))}})})("post","put","patch");n.defaults=a;return n}]}function Wf(){this.$get=function(){return function(){return new z.XMLHttpRequest}}}function Vf(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(a,b,d,c){return Pg(a,c,a.defer,b,d[0])}]}function Pg(a,b,d,c,e){function f(a,b,d){a=a.replace("JSON_CALLBACK",
b);var f=e.createElement("script"),m=null;f.type="text/javascript";f.src=a;f.async=!0;m=function(a){f.removeEventListener("load",m);f.removeEventListener("error",m);e.body.removeChild(f);f=null;var g=-1,s="unknown";a&&("load"!==a.type||c.wasCalled(b)||(a={type:"error"}),s=a.type,g="error"===a.type?404:200);d&&d(g,s)};f.addEventListener("load",m);f.addEventListener("error",m);e.body.appendChild(f);return m}return function(e,k,h,l,m,p,n,s,G,t){function N(a){J="timeout"===a;pa&&pa();y&&y.abort()}function v(a,
b,c,e,f,g){w(P)&&d.cancel(P);pa=y=null;a(b,c,e,f,g)}k=k||a.url();if("jsonp"===K(e))var q=c.createCallback(k),pa=f(k,q,function(a,b){var d=200===a&&c.getResponse(q);v(l,a,d,"",b,"complete");c.removeCallback(q)});else{var y=b(e,k),J=!1;y.open(e,k,!0);r(m,function(a,b){w(a)&&y.setRequestHeader(b,a)});y.onload=function(){var a=y.statusText||"",b="response"in y?y.response:y.responseText,c=1223===y.status?204:y.status;0===c&&(c=b?200:"file"===ga(k).protocol?404:0);v(l,c,b,y.getAllResponseHeaders(),a,"complete")};
y.onerror=function(){v(l,-1,null,null,"","error")};y.ontimeout=function(){v(l,-1,null,null,"","timeout")};y.onabort=function(){v(l,-1,null,null,"",J?"timeout":"abort")};r(G,function(a,b){y.addEventListener(b,a)});r(t,function(a,b){y.upload.addEventListener(b,a)});n&&(y.withCredentials=!0);if(s)try{y.responseType=s}catch(I){if("json"!==s)throw I;}y.send(A(h)?null:h)}if(0<p)var P=d(function(){N("timeout")},p);else p&&B(p.then)&&p.then(function(){N(w(p.$$timeoutId)?"timeout":"abort")})}}function Pf(){var a=
"{{",b="}}";this.startSymbol=function(b){return b?(a=b,this):a};this.endSymbol=function(a){return a?(b=a,this):b};this.$get=["$parse","$exceptionHandler","$sce",function(d,c,e){function f(a){return"\\\\\\"+a}function g(c){return c.replace(p,a).replace(n,b)}function k(a,b,c,d){var e=a.$watch(function(a){e();return d(a)},b,c);return e}function h(f,h,n,p){function v(a){try{return a=n&&!r?e.getTrusted(n,a):e.valueOf(a),p&&!w(a)?a:jc(a)}catch(b){c(Ma.interr(f,b))}}var r=n===e.URL||n===e.MEDIA_URL;if(!f.length||
-1===f.indexOf(a)){if(h)return;h=g(f);r&&(h=e.getTrusted(n,h));h=ia(h);h.exp=f;h.expressions=[];h.$$watchDelegate=k;return h}p=!!p;for(var q,y,J=0,I=[],P,Q=f.length,M=[],L=[],u;J<Q;)if(-1!==(q=f.indexOf(a,J))&&-1!==(y=f.indexOf(b,q+l)))J!==q&&M.push(g(f.substring(J,q))),J=f.substring(q+l,y),I.push(J),J=y+m,L.push(M.length),M.push("");else{J!==Q&&M.push(g(f.substring(J)));break}u=1===M.length&&1===L.length;var R=r&&u?void 0:v;P=I.map(function(a){return d(a,R)});if(!h||I.length){var x=function(a){for(var b=
0,c=I.length;b<c;b++){if(p&&A(a[b]))return;M[L[b]]=a[b]}if(r)return e.getTrusted(n,u?M[0]:M.join(""));n&&1<M.length&&Ma.throwNoconcat(f);return M.join("")};return S(function(a){var b=0,d=I.length,e=Array(d);try{for(;b<d;b++)e[b]=P[b](a);return x(e)}catch(g){c(Ma.interr(f,g))}},{exp:f,expressions:I,$$watchDelegate:function(a,b){var c;return a.$watchGroup(P,function(d,e){var f=x(d);b.call(this,f,d!==e?c:f,a);c=f})}})}}var l=a.length,m=b.length,p=new RegExp(a.replace(/./g,f),"g"),n=new RegExp(b.replace(/./g,
f),"g");h.startSymbol=function(){return a};h.endSymbol=function(){return b};return h}]}function Qf(){this.$get=["$$intervalFactory","$window",function(a,b){var d={},c=function(a){b.clearInterval(a);delete d[a]},e=a(function(a,c,e){a=b.setInterval(a,c);d[a]=e;return a},c);e.cancel=function(a){if(!a)return!1;if(!a.hasOwnProperty("$$intervalId"))throw Qg("badprom");if(!d.hasOwnProperty(a.$$intervalId))return!1;a=a.$$intervalId;var b=d[a],e=b.promise;e.$$state&&(e.$$state.pur=!0);b.reject("canceled");
c(a);return!0};return e}]}function Rf(){this.$get=["$browser","$q","$$q","$rootScope",function(a,b,d,c){return function(e,f){return function(g,k,h,l){function m(){p?g.apply(null,n):g(s)}var p=4<arguments.length,n=p?Ha.call(arguments,4):[],s=0,G=w(l)&&!l,t=(G?d:b).defer(),r=t.promise;h=w(h)?h:0;r.$$intervalId=e(function(){G?a.defer(m):c.$evalAsync(m);t.notify(s++);0<h&&s>=h&&(t.resolve(s),f(r.$$intervalId));G||c.$apply()},k,t,G);return r}}}]}function Cd(a,b){var d=ga(a);b.$$protocol=d.protocol;b.$$host=
d.hostname;b.$$port=fa(d.port)||Rg[d.protocol]||null}function Dd(a,b,d){if(Sg.test(a))throw kb("badpath",a);var c="/"!==a.charAt(0);c&&(a="/"+a);a=ga(a);for(var c=(c&&"/"===a.pathname.charAt(0)?a.pathname.substring(1):a.pathname).split("/"),e=c.length;e--;)c[e]=decodeURIComponent(c[e]),d&&(c[e]=c[e].replace(/\//g,"%2F"));d=c.join("/");b.$$path=d;b.$$search=hc(a.search);b.$$hash=decodeURIComponent(a.hash);b.$$path&&"/"!==b.$$path.charAt(0)&&(b.$$path="/"+b.$$path)}function yc(a,b){return a.slice(0,
b.length)===b}function ya(a,b){if(yc(b,a))return b.substr(a.length)}function Da(a){var b=a.indexOf("#");return-1===b?a:a.substr(0,b)}function zc(a,b,d){this.$$html5=!0;d=d||"";Cd(a,this);this.$$parse=function(a){var d=ya(b,a);if(!C(d))throw kb("ipthprfx",a,b);Dd(d,this,!0);this.$$path||(this.$$path="/");this.$$compose()};this.$$normalizeUrl=function(a){return b+a.substr(1)};this.$$parseLinkUrl=function(c,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;w(f=ya(a,c))?(g=f,g=d&&w(f=ya(d,f))?
b+(ya("/",f)||f):a+g):w(f=ya(b,c))?g=b+f:b===c+"/"&&(g=b);g&&this.$$parse(g);return!!g}}function Ac(a,b,d){Cd(a,this);this.$$parse=function(c){var e=ya(a,c)||ya(b,c),f;A(e)||"#"!==e.charAt(0)?this.$$html5?f=e:(f="",A(e)&&(a=c,this.replace())):(f=ya(d,e),A(f)&&(f=e));Dd(f,this,!1);c=this.$$path;var e=a,g=/^\/[A-Z]:(\/.*)/;yc(f,e)&&(f=f.replace(e,""));g.exec(f)||(c=(f=g.exec(c))?f[1]:c);this.$$path=c;this.$$compose()};this.$$normalizeUrl=function(b){return a+(b?d+b:"")};this.$$parseLinkUrl=function(b,
d){return Da(a)===Da(b)?(this.$$parse(b),!0):!1}}function Ed(a,b,d){this.$$html5=!0;Ac.apply(this,arguments);this.$$parseLinkUrl=function(c,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;a===Da(c)?f=c:(g=ya(b,c))?f=a+d+g:b===c+"/"&&(f=b);f&&this.$$parse(f);return!!f};this.$$normalizeUrl=function(b){return a+d+b}}function Mb(a){return function(){return this[a]}}function Fd(a,b){return function(d){if(A(d))return this[a];this[a]=b(d);this.$$compose();return this}}function Yf(){var a="!",
b={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(b){return w(b)?(a=b,this):a};this.html5Mode=function(a){if(Ga(a))return b.enabled=a,this;if(D(a)){Ga(a.enabled)&&(b.enabled=a.enabled);Ga(a.requireBase)&&(b.requireBase=a.requireBase);if(Ga(a.rewriteLinks)||C(a.rewriteLinks))b.rewriteLinks=a.rewriteLinks;return this}return b};this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(d,c,e,f,g){function k(a,b){return a===b||ga(a).href===ga(b).href}function h(a,
b,d){var e=m.url(),f=m.$$state;try{c.url(a,b,d),m.$$state=c.state()}catch(g){throw m.url(e),m.$$state=f,g;}}function l(a,b){d.$broadcast("$locationChangeSuccess",m.absUrl(),a,m.$$state,b)}var m,p;p=c.baseHref();var n=c.url(),s;if(b.enabled){if(!p&&b.requireBase)throw kb("nobase");s=n.substring(0,n.indexOf("/",n.indexOf("//")+2))+(p||"/");p=e.history?zc:Ed}else s=Da(n),p=Ac;var r=s.substr(0,Da(s).lastIndexOf("/")+1);m=new p(s,r,"#"+a);m.$$parseLinkUrl(n,n);m.$$state=c.state();var t=/^\s*(javascript|mailto):/i;
f.on("click",function(a){var e=b.rewriteLinks;if(e&&!a.ctrlKey&&!a.metaKey&&!a.shiftKey&&2!==a.which&&2!==a.button){for(var g=x(a.target);"a"!==ua(g[0]);)if(g[0]===f[0]||!(g=g.parent())[0])return;if(!C(e)||!A(g.attr(e))){var e=g.prop("href"),h=g.attr("href")||g.attr("xlink:href");D(e)&&"[object SVGAnimatedString]"===e.toString()&&(e=ga(e.animVal).href);t.test(e)||!e||g.attr("target")||a.isDefaultPrevented()||!m.$$parseLinkUrl(e,h)||(a.preventDefault(),m.absUrl()!==c.url()&&d.$apply())}}});m.absUrl()!==
n&&c.url(m.absUrl(),!0);var N=!0;c.onUrlChange(function(a,b){yc(a,r)?(d.$evalAsync(function(){var c=m.absUrl(),e=m.$$state,f;m.$$parse(a);m.$$state=b;f=d.$broadcast("$locationChangeStart",a,c,b,e).defaultPrevented;m.absUrl()===a&&(f?(m.$$parse(c),m.$$state=e,h(c,!1,e)):(N=!1,l(c,e)))}),d.$$phase||d.$digest()):g.location.href=a});d.$watch(function(){if(N||m.$$urlUpdatedByLocation){m.$$urlUpdatedByLocation=!1;var a=c.url(),b=m.absUrl(),f=c.state(),g=m.$$replace,n=!k(a,b)||m.$$html5&&e.history&&f!==
m.$$state;if(N||n)N=!1,d.$evalAsync(function(){var b=m.absUrl(),c=d.$broadcast("$locationChangeStart",b,a,m.$$state,f).defaultPrevented;m.absUrl()===b&&(c?(m.$$parse(a),m.$$state=f):(n&&h(b,g,f===m.$$state?null:m.$$state),l(a,f)))})}m.$$replace=!1});return m}]}function Zf(){var a=!0,b=this;this.debugEnabled=function(b){return w(b)?(a=b,this):a};this.$get=["$window",function(d){function c(a){dc(a)&&(a.stack&&f?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&
(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=d.console||{},e=b[a]||b.log||E;return function(){var a=[];r(arguments,function(b){a.push(c(b))});return Function.prototype.apply.call(e,b,a)}}var f=wa||/\bEdge\//.test(d.navigator&&d.navigator.userAgent);return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){a&&c.apply(b,arguments)}}()}}]}function Tg(a){return a+""}function Ug(a,b){return"undefined"!==typeof a?a:
b}function Gd(a,b){return"undefined"===typeof a?b:"undefined"===typeof b?a:a+b}function Vg(a,b){switch(a.type){case q.MemberExpression:if(a.computed)return!1;break;case q.UnaryExpression:return 1;case q.BinaryExpression:return"+"!==a.operator?1:!1;case q.CallExpression:return!1}return void 0===b?Hd:b}function Z(a,b,d){var c,e,f=a.isPure=Vg(a,d);switch(a.type){case q.Program:c=!0;r(a.body,function(a){Z(a.expression,b,f);c=c&&a.expression.constant});a.constant=c;break;case q.Literal:a.constant=!0;a.toWatch=
[];break;case q.UnaryExpression:Z(a.argument,b,f);a.constant=a.argument.constant;a.toWatch=a.argument.toWatch;break;case q.BinaryExpression:Z(a.left,b,f);Z(a.right,b,f);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.left.toWatch.concat(a.right.toWatch);break;case q.LogicalExpression:Z(a.left,b,f);Z(a.right,b,f);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.constant?[]:[a];break;case q.ConditionalExpression:Z(a.test,b,f);Z(a.alternate,b,f);Z(a.consequent,b,f);a.constant=a.test.constant&&
a.alternate.constant&&a.consequent.constant;a.toWatch=a.constant?[]:[a];break;case q.Identifier:a.constant=!1;a.toWatch=[a];break;case q.MemberExpression:Z(a.object,b,f);a.computed&&Z(a.property,b,f);a.constant=a.object.constant&&(!a.computed||a.property.constant);a.toWatch=a.constant?[]:[a];break;case q.CallExpression:c=d=a.filter?!b(a.callee.name).$stateful:!1;e=[];r(a.arguments,function(a){Z(a,b,f);c=c&&a.constant;e.push.apply(e,a.toWatch)});a.constant=c;a.toWatch=d?e:[a];break;case q.AssignmentExpression:Z(a.left,
b,f);Z(a.right,b,f);a.constant=a.left.constant&&a.right.constant;a.toWatch=[a];break;case q.ArrayExpression:c=!0;e=[];r(a.elements,function(a){Z(a,b,f);c=c&&a.constant;e.push.apply(e,a.toWatch)});a.constant=c;a.toWatch=e;break;case q.ObjectExpression:c=!0;e=[];r(a.properties,function(a){Z(a.value,b,f);c=c&&a.value.constant;e.push.apply(e,a.value.toWatch);a.computed&&(Z(a.key,b,!1),c=c&&a.key.constant,e.push.apply(e,a.key.toWatch))});a.constant=c;a.toWatch=e;break;case q.ThisExpression:a.constant=
!1;a.toWatch=[];break;case q.LocalsExpression:a.constant=!1,a.toWatch=[]}}function Id(a){if(1===a.length){a=a[0].expression;var b=a.toWatch;return 1!==b.length?b:b[0]!==a?b:void 0}}function Jd(a){return a.type===q.Identifier||a.type===q.MemberExpression}function Kd(a){if(1===a.body.length&&Jd(a.body[0].expression))return{type:q.AssignmentExpression,left:a.body[0].expression,right:{type:q.NGValueParameter},operator:"="}}function Ld(a){this.$filter=a}function Md(a){this.$filter=a}function Nb(a,b,d){this.ast=
new q(a,d);this.astCompiler=d.csp?new Md(b):new Ld(b)}function Bc(a){return B(a.valueOf)?a.valueOf():Wg.call(a)}function $f(){var a=T(),b={"true":!0,"false":!1,"null":null,undefined:void 0},d,c;this.addLiteral=function(a,c){b[a]=c};this.setIdentifierFns=function(a,b){d=a;c=b;return this};this.$get=["$filter",function(e){function f(b,c){var d,f;switch(typeof b){case "string":return f=b=b.trim(),d=a[f],d||(d=new Ob(G),d=(new Nb(d,e,G)).parse(b),a[f]=p(d)),s(d,c);case "function":return s(b,c);default:return s(E,
c)}}function g(a,b,c){return null==a||null==b?a===b:"object"!==typeof a||(a=Bc(a),"object"!==typeof a||c)?a===b||a!==a&&b!==b:!1}function k(a,b,c,d,e){var f=d.inputs,h;if(1===f.length){var k=g,f=f[0];return a.$watch(function(a){var b=f(a);g(b,k,f.isPure)||(h=d(a,void 0,void 0,[b]),k=b&&Bc(b));return h},b,c,e)}for(var l=[],m=[],n=0,p=f.length;n<p;n++)l[n]=g,m[n]=null;return a.$watch(function(a){for(var b=!1,c=0,e=f.length;c<e;c++){var k=f[c](a);if(b||(b=!g(k,l[c],f[c].isPure)))m[c]=k,l[c]=k&&Bc(k)}b&&
(h=d(a,void 0,void 0,m));return h},b,c,e)}function h(a,b,c,d,e){function f(){h(m)&&k()}function g(a,b,c,d){m=u&&d?d[0]:n(a,b,c,d);h(m)&&a.$$postDigest(f);return s(m)}var h=d.literal?l:w,k,m,n=d.$$intercepted||d,s=d.$$interceptor||Ta,u=d.inputs&&!n.inputs;g.literal=d.literal;g.constant=d.constant;g.inputs=d.inputs;p(g);return k=a.$watch(g,b,c,e)}function l(a){var b=!0;r(a,function(a){w(a)||(b=!1)});return b}function m(a,b,c,d){var e=a.$watch(function(a){e();return d(a)},b,c);return e}function p(a){a.constant?
a.$$watchDelegate=m:a.oneTime?a.$$watchDelegate=h:a.inputs&&(a.$$watchDelegate=k);return a}function n(a,b){function c(d){return b(a(d))}c.$stateful=a.$stateful||b.$stateful;c.$$pure=a.$$pure&&b.$$pure;return c}function s(a,b){if(!b)return a;a.$$interceptor&&(b=n(a.$$interceptor,b),a=a.$$intercepted);var c=!1,d=function(d,e,f,g){d=c&&g?g[0]:a(d,e,f,g);return b(d)};d.$$intercepted=a;d.$$interceptor=b;d.literal=a.literal;d.oneTime=a.oneTime;d.constant=a.constant;b.$stateful||(c=!a.inputs,d.inputs=a.inputs?
a.inputs:[a],b.$$pure||(d.inputs=d.inputs.map(function(a){return a.isPure===Hd?function(b){return a(b)}:a})));return p(d)}var G={csp:Ba().noUnsafeEval,literals:Ia(b),isIdentifierStart:B(d)&&d,isIdentifierContinue:B(c)&&c};f.$$getAst=function(a){var b=new Ob(G);return(new Nb(b,e,G)).getAst(a).ast};return f}]}function bg(){var a=!0;this.$get=["$rootScope","$exceptionHandler",function(b,d){return Nd(function(a){b.$evalAsync(a)},d,a)}];this.errorOnUnhandledRejections=function(b){return w(b)?(a=b,this):
a}}function cg(){var a=!0;this.$get=["$browser","$exceptionHandler",function(b,d){return Nd(function(a){b.defer(a)},d,a)}];this.errorOnUnhandledRejections=function(b){return w(b)?(a=b,this):a}}function Nd(a,b,d){function c(){return new e}function e(){var a=this.promise=new f;this.resolve=function(b){h(a,b)};this.reject=function(b){m(a,b)};this.notify=function(b){n(a,b)}}function f(){this.$$state={status:0}}function g(){for(;!w&&x.length;){var a=x.shift();if(!a.pur){a.pur=!0;var c=a.value,c="Possibly unhandled rejection: "+
("function"===typeof c?c.toString().replace(/ \{[\s\S]*$/,""):A(c)?"undefined":"string"!==typeof c?Ne(c,void 0):c);dc(a.value)?b(a.value,c):b(c)}}}function k(c){!d||c.pending||2!==c.status||c.pur||(0===w&&0===x.length&&a(g),x.push(c));!c.processScheduled&&c.pending&&(c.processScheduled=!0,++w,a(function(){var e,f,k;k=c.pending;c.processScheduled=!1;c.pending=void 0;try{for(var l=0,n=k.length;l<n;++l){c.pur=!0;f=k[l][0];e=k[l][c.status];try{B(e)?h(f,e(c.value)):1===c.status?h(f,c.value):m(f,c.value)}catch(p){m(f,
p),p&&!0===p.$$passToExceptionHandler&&b(p)}}}finally{--w,d&&0===w&&a(g)}}))}function h(a,b){a.$$state.status||(b===a?p(a,v("qcycle",b)):l(a,b))}function l(a,b){function c(b){g||(g=!0,l(a,b))}function d(b){g||(g=!0,p(a,b))}function e(b){n(a,b)}var f,g=!1;try{if(D(b)||B(b))f=b.then;B(f)?(a.$$state.status=-1,f.call(b,c,d,e)):(a.$$state.value=b,a.$$state.status=1,k(a.$$state))}catch(h){d(h)}}function m(a,b){a.$$state.status||p(a,b)}function p(a,b){a.$$state.value=b;a.$$state.status=2;k(a.$$state)}function n(c,
d){var e=c.$$state.pending;0>=c.$$state.status&&e&&e.length&&a(function(){for(var a,c,f=0,g=e.length;f<g;f++){c=e[f][0];a=e[f][3];try{n(c,B(a)?a(d):d)}catch(h){b(h)}}})}function s(a){var b=new f;m(b,a);return b}function G(a,b,c){var d=null;try{B(c)&&(d=c())}catch(e){return s(e)}return d&&B(d.then)?d.then(function(){return b(a)},s):b(a)}function t(a,b,c,d){var e=new f;h(e,a);return e.then(b,c,d)}function q(a){if(!B(a))throw v("norslvr",a);var b=new f;a(function(a){h(b,a)},function(a){m(b,a)});return b}
var v=F("$q",TypeError),w=0,x=[];S(f.prototype,{then:function(a,b,c){if(A(a)&&A(b)&&A(c))return this;var d=new f;this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([d,a,b,c]);0<this.$$state.status&&k(this.$$state);return d},"catch":function(a){return this.then(null,a)},"finally":function(a,b){return this.then(function(b){return G(b,y,a)},function(b){return G(b,s,a)},b)}});var y=t;q.prototype=f.prototype;q.defer=c;q.reject=s;q.when=t;q.resolve=y;q.all=function(a){var b=new f,c=
0,d=H(a)?[]:{};r(a,function(a,e){c++;t(a).then(function(a){d[e]=a;--c||h(b,d)},function(a){m(b,a)})});0===c&&h(b,d);return b};q.race=function(a){var b=c();r(a,function(a){t(a).then(b.resolve,b.reject)});return b.promise};return q}function mg(){this.$get=["$window","$timeout",function(a,b){var d=a.requestAnimationFrame||a.webkitRequestAnimationFrame,c=a.cancelAnimationFrame||a.webkitCancelAnimationFrame||a.webkitCancelRequestAnimationFrame,e=!!d,f=e?function(a){var b=d(a);return function(){c(b)}}:
function(a){var c=b(a,16.66,!1);return function(){b.cancel(c)}};f.supported=e;return f}]}function ag(){function a(a){function b(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=++qb;this.$$ChildScope=null;this.$$suspended=!1}b.prototype=a;return b}var b=10,d=F("$rootScope"),c=null,e=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$exceptionHandler","$parse","$browser",
function(f,g,k){function h(a){a.currentScope.$$destroyed=!0}function l(a){9===wa&&(a.$$childHead&&l(a.$$childHead),a.$$nextSibling&&l(a.$$nextSibling));a.$parent=a.$$nextSibling=a.$$prevSibling=a.$$childHead=a.$$childTail=a.$root=a.$$watchers=null}function m(){this.$id=++qb;this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$suspended=this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=
0;this.$$isolateBindings=null}function p(a){if(v.$$phase)throw d("inprog",v.$$phase);v.$$phase=a}function n(a,b){do a.$$watchersCount+=b;while(a=a.$parent)}function s(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function G(){}function t(){for(;y.length;)try{y.shift()()}catch(a){f(a)}e=null}function q(){null===e&&(e=k.defer(function(){v.$apply(t)},null,"$applyAsync"))}m.prototype={constructor:m,$new:function(b,c){var d;c=c||this;b?(d=new m,
d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=a(this)),d=new this.$$ChildScope);d.$parent=c;d.$$prevSibling=c.$$childTail;c.$$childHead?(c.$$childTail.$$nextSibling=d,c.$$childTail=d):c.$$childHead=c.$$childTail=d;(b||c!==this)&&d.$on("$destroy",h);return d},$watch:function(a,b,d,e){var f=g(a);b=B(b)?b:E;if(f.$$watchDelegate)return f.$$watchDelegate(this,b,d,f,a);var h=this,k=h.$$watchers,l={fn:b,last:G,get:f,exp:e||a,eq:!!d};c=null;k||(k=h.$$watchers=[],k.$$digestWatchIndex=-1);k.unshift(l);
k.$$digestWatchIndex++;n(this,1);return function(){var a=cb(k,l);0<=a&&(n(h,-1),a<k.$$digestWatchIndex&&k.$$digestWatchIndex--);c=null}},$watchGroup:function(a,b){function c(){h=!1;try{k?(k=!1,b(e,e,g)):b(e,d,g)}finally{for(var f=0;f<a.length;f++)d[f]=e[f]}}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,k=!0;if(!a.length){var l=!0;g.$evalAsync(function(){l&&b(e,e,g)});return function(){l=!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});r(a,function(a,
b){var d=g.$watch(a,function(a){e[b]=a;h||(h=!0,g.$evalAsync(c))});f.push(d)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,b){function c(a){e=a;var b,d,g,h;if(!A(e)){if(D(e))if(za(e))for(f!==n&&(f=n,t=f.length=0,l++),a=e.length,t!==a&&(l++,f.length=t=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(l++,f[b]=g);else{f!==p&&(f=p={},t=0,l++);a=0;for(b in e)ta.call(e,b)&&(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(l++,f[b]=g)):(t++,f[b]=g,l++));if(t>a)for(b in l++,
f)ta.call(e,b)||(t--,delete f[b])}else f!==e&&(f=e,l++);return l}}c.$$pure=g(a).literal;c.$stateful=!c.$$pure;var d=this,e,f,h,k=1<b.length,l=0,m=g(a,c),n=[],p={},s=!0,t=0;return this.$watch(m,function(){s?(s=!1,b(e,e,d)):b(e,h,d);if(k)if(D(e))if(za(e)){h=Array(e.length);for(var a=0;a<e.length;a++)h[a]=e[a]}else for(a in h={},e)ta.call(e,a)&&(h[a]=e[a]);else h=e})},$digest:function(){var a,g,h,l,m,n,s,r=b,q,y=w.length?v:this,N=[],A,z;p("$digest");k.$$checkUrlChange();this===v&&null!==e&&(k.defer.cancel(e),
t());c=null;do{s=!1;q=y;for(n=0;n<w.length;n++){try{z=w[n],l=z.fn,l(z.scope,z.locals)}catch(C){f(C)}c=null}w.length=0;a:do{if(n=!q.$$suspended&&q.$$watchers)for(n.$$digestWatchIndex=n.length;n.$$digestWatchIndex--;)try{if(a=n[n.$$digestWatchIndex])if(m=a.get,(g=m(q))!==(h=a.last)&&!(a.eq?va(g,h):Y(g)&&Y(h)))s=!0,c=a,a.last=a.eq?Ia(g,null):g,l=a.fn,l(g,h===G?g:h,q),5>r&&(A=4-r,N[A]||(N[A]=[]),N[A].push({msg:B(a.exp)?"fn: "+(a.exp.name||a.exp.toString()):a.exp,newVal:g,oldVal:h}));else if(a===c){s=
!1;break a}}catch(E){f(E)}if(!(n=!q.$$suspended&&q.$$watchersCount&&q.$$childHead||q!==y&&q.$$nextSibling))for(;q!==y&&!(n=q.$$nextSibling);)q=q.$parent}while(q=n);if((s||w.length)&&!r--)throw v.$$phase=null,d("infdig",b,N);}while(s||w.length);for(v.$$phase=null;J<x.length;)try{x[J++]()}catch(D){f(D)}x.length=J=0;k.$$checkUrlChange()},$suspend:function(){this.$$suspended=!0},$isSuspended:function(){return this.$$suspended},$resume:function(){this.$$suspended=!1},$destroy:function(){if(!this.$$destroyed){var a=
this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this===v&&k.$$applicationDestroyed();n(this,-this.$$watchersCount);for(var b in this.$$listenerCount)s(this,this.$$listenerCount[b],b);a&&a.$$childHead===this&&(a.$$childHead=this.$$nextSibling);a&&a.$$childTail===this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);this.$destroy=this.$digest=this.$apply=
this.$evalAsync=this.$applyAsync=E;this.$on=this.$watch=this.$watchGroup=function(){return E};this.$$listeners={};this.$$nextSibling=null;l(this)}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a,b){v.$$phase||w.length||k.defer(function(){w.length&&v.$digest()},null,"$evalAsync");w.push({scope:this,fn:g(a),locals:b})},$$postDigest:function(a){x.push(a)},$apply:function(a){try{p("$apply");try{return this.$eval(a)}finally{v.$$phase=null}}catch(b){f(b)}finally{try{v.$digest()}catch(c){throw f(c),
c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&y.push(b);a=g(a);q()},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(delete c[d],s(e,1,a))}},$emit:function(a,b){var c=[],d,e=this,g=!1,h={name:a,targetScope:e,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=
!0},defaultPrevented:!1},k=db([h],arguments,1),l,m;do{d=e.$$listeners[a]||c;h.currentScope=e;l=0;for(m=d.length;l<m;l++)if(d[l])try{d[l].apply(null,k)}catch(n){f(n)}else d.splice(l,1),l--,m--;if(g)break;e=e.$parent}while(e);h.currentScope=null;return h},$broadcast:function(a,b){var c=this,d=this,e={name:a,targetScope:this,preventDefault:function(){e.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return e;for(var g=db([e],arguments,1),h,k;c=d;){e.currentScope=c;d=c.$$listeners[a]||
[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){f(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}e.currentScope=null;return e}};var v=new m,w=v.$$asyncQueue=[],x=v.$$postDigestQueue=[],y=v.$$applyAsyncQueue=[],J=0;return v}]}function Qe(){var a=/^\s*(https?|s?ftp|mailto|tel|file):/,b=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationTrustedUrlList=function(b){return w(b)?
(a=b,this):a};this.imgSrcSanitizationTrustedUrlList=function(a){return w(a)?(b=a,this):b};this.$get=function(){return function(d,c){var e=c?b:a,f=ga(d&&d.trim()).href;return""===f||f.match(e)?d:"unsafe:"+f}}}function Xg(a){if("self"===a)return a;if(C(a)){if(-1<a.indexOf("***"))throw Ea("iwcard",a);a=Od(a).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*");return new RegExp("^"+a+"$")}if(ab(a))return new RegExp("^"+a.source+"$");throw Ea("imatcher");}function Pd(a){var b=[];w(a)&&r(a,function(a){b.push(Xg(a))});
return b}function eg(){this.SCE_CONTEXTS=W;var a=["self"],b=[];this.trustedResourceUrlList=function(b){arguments.length&&(a=Pd(b));return a};Object.defineProperty(this,"resourceUrlWhitelist",{get:function(){return this.trustedResourceUrlList},set:function(a){this.trustedResourceUrlList=a}});this.bannedResourceUrlList=function(a){arguments.length&&(b=Pd(a));return b};Object.defineProperty(this,"resourceUrlBlacklist",{get:function(){return this.bannedResourceUrlList},set:function(a){this.bannedResourceUrlList=
a}});this.$get=["$injector","$$sanitizeUri",function(d,c){function e(a,b){var c;"self"===a?(c=Cc(b,Qd))||(z.document.baseURI?c=z.document.baseURI:(Na||(Na=z.document.createElement("a"),Na.href=".",Na=Na.cloneNode(!1)),c=Na.href),c=Cc(b,c)):c=!!a.exec(b.href);return c}function f(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};
return b}var g=function(a){throw Ea("unsafe");};d.has("$sanitize")&&(g=d.get("$sanitize"));var k=f(),h={};h[W.HTML]=f(k);h[W.CSS]=f(k);h[W.MEDIA_URL]=f(k);h[W.URL]=f(h[W.MEDIA_URL]);h[W.JS]=f(k);h[W.RESOURCE_URL]=f(h[W.URL]);return{trustAs:function(a,b){var c=h.hasOwnProperty(a)?h[a]:null;if(!c)throw Ea("icontext",a,b);if(null===b||A(b)||""===b)return b;if("string"!==typeof b)throw Ea("itype",a);return new c(b)},getTrusted:function(d,f){if(null===f||A(f)||""===f)return f;var k=h.hasOwnProperty(d)?
h[d]:null;if(k&&f instanceof k)return f.$$unwrapTrustedValue();B(f.$$unwrapTrustedValue)&&(f=f.$$unwrapTrustedValue());if(d===W.MEDIA_URL||d===W.URL)return c(f.toString(),d===W.MEDIA_URL);if(d===W.RESOURCE_URL){var k=ga(f.toString()),n,s,r=!1;n=0;for(s=a.length;n<s;n++)if(e(a[n],k)){r=!0;break}if(r)for(n=0,s=b.length;n<s;n++)if(e(b[n],k)){r=!1;break}if(r)return f;throw Ea("insecurl",f.toString());}if(d===W.HTML)return g(f);throw Ea("unsafe");},valueOf:function(a){return a instanceof k?a.$$unwrapTrustedValue():
a}}}]}function dg(){var a=!0;this.enabled=function(b){arguments.length&&(a=!!b);return a};this.$get=["$parse","$sceDelegate",function(b,d){if(a&&8>wa)throw Ea("iequirks");var c=ja(W);c.isEnabled=function(){return a};c.trustAs=d.trustAs;c.getTrusted=d.getTrusted;c.valueOf=d.valueOf;a||(c.trustAs=c.getTrusted=function(a,b){return b},c.valueOf=Ta);c.parseAs=function(a,d){var e=b(d);return e.literal&&e.constant?e:b(d,function(b){return c.getTrusted(a,b)})};var e=c.parseAs,f=c.getTrusted,g=c.trustAs;r(W,
function(a,b){var d=K(b);c[("parse_as_"+d).replace(Dc,xb)]=function(b){return e(a,b)};c[("get_trusted_"+d).replace(Dc,xb)]=function(b){return f(a,b)};c[("trust_as_"+d).replace(Dc,xb)]=function(b){return g(a,b)}});return c}]}function fg(){this.$get=["$window","$document",function(a,b){var d={},c=!((!a.nw||!a.nw.process)&&a.chrome&&(a.chrome.app&&a.chrome.app.runtime||!a.chrome.app&&a.chrome.runtime&&a.chrome.runtime.id))&&a.history&&a.history.pushState,e=fa((/android (\d+)/.exec(K((a.navigator||{}).userAgent))||
[])[1]),f=/Boxee/i.test((a.navigator||{}).userAgent),g=b[0]||{},k=g.body&&g.body.style,h=!1,l=!1;k&&(h=!!("transition"in k||"webkitTransition"in k),l=!!("animation"in k||"webkitAnimation"in k));return{history:!(!c||4>e||f),hasEvent:function(a){if("input"===a&&wa)return!1;if(A(d[a])){var b=g.createElement("div");d[a]="on"+a in b}return d[a]},csp:Ba(),transitions:h,animations:l,android:e}}]}function gg(){this.$get=ia(function(a){return new Yg(a)})}function Yg(a){function b(){var a=e.pop();return a&&
a.cb}function d(a){for(var b=e.length-1;0<=b;--b){var c=e[b];if(c.type===a)return e.splice(b,1),c.cb}}var c={},e=[],f=this.ALL_TASKS_TYPE="$$all$$",g=this.DEFAULT_TASK_TYPE="$$default$$";this.completeTask=function(e,h){h=h||g;try{e()}finally{var l;l=h||g;c[l]&&(c[l]--,c[f]--);l=c[h];var m=c[f];if(!m||!l)for(l=m?d:b;m=l(h);)try{m()}catch(p){a.error(p)}}};this.incTaskCount=function(a){a=a||g;c[a]=(c[a]||0)+1;c[f]=(c[f]||0)+1};this.notifyWhenNoPendingTasks=function(a,b){b=b||f;c[b]?e.push({type:b,cb:a}):
a()}}function ig(){var a;this.httpOptions=function(b){return b?(a=b,this):a};this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(b,d,c,e,f){function g(k,h){g.totalPendingRequests++;if(!C(k)||A(d.get(k)))k=f.getTrustedResourceUrl(k);var l=c.defaults&&c.defaults.transformResponse;H(l)?l=l.filter(function(a){return a!==wc}):l===wc&&(l=null);return c.get(k,S({cache:d,transformResponse:l},a)).finally(function(){g.totalPendingRequests--}).then(function(a){return d.put(k,a.data)},
function(a){h||(a=Zg("tpload",k,a.status,a.statusText),b(a));return e.reject(a)})}g.totalPendingRequests=0;return g}]}function jg(){this.$get=["$rootScope","$browser","$location",function(a,b,d){return{findBindings:function(a,b,d){a=a.getElementsByClassName("ng-binding");var g=[];r(a,function(a){var c=ca.element(a).data("$binding");c&&r(c,function(c){d?(new RegExp("(^|\\s)"+Od(b)+"(\\s|\\||$)")).test(c)&&g.push(a):-1!==c.indexOf(b)&&g.push(a)})});return g},findModels:function(a,b,d){for(var g=["ng-",
"data-ng-","ng\\:"],k=0;k<g.length;++k){var h=a.querySelectorAll("["+g[k]+"model"+(d?"=":"*=")+'"'+b+'"]');if(h.length)return h}},getLocation:function(){return d.url()},setLocation:function(b){b!==d.url()&&(d.url(b),a.$digest())},whenStable:function(a){b.notifyWhenNoOutstandingRequests(a)}}}]}function kg(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(a,b,d,c,e){function f(f,h,l){B(f)||(l=h,h=f,f=E);var m=Ha.call(arguments,3),p=w(l)&&!l,n=(p?c:d).defer(),s=n.promise,r;
r=b.defer(function(){try{n.resolve(f.apply(null,m))}catch(b){n.reject(b),e(b)}finally{delete g[s.$$timeoutId]}p||a.$apply()},h,"$timeout");s.$$timeoutId=r;g[r]=n;return s}var g={};f.cancel=function(a){if(!a)return!1;if(!a.hasOwnProperty("$$timeoutId"))throw $g("badprom");if(!g.hasOwnProperty(a.$$timeoutId))return!1;a=a.$$timeoutId;var c=g[a],d=c.promise;d.$$state&&(d.$$state.pur=!0);c.reject("canceled");delete g[a];return b.defer.cancel(a)};return f}]}function ga(a){if(!C(a))return a;wa&&(aa.setAttribute("href",
a),a=aa.href);aa.setAttribute("href",a);a=aa.hostname;!ah&&-1<a.indexOf(":")&&(a="["+a+"]");return{href:aa.href,protocol:aa.protocol?aa.protocol.replace(/:$/,""):"",host:aa.host,search:aa.search?aa.search.replace(/^\?/,""):"",hash:aa.hash?aa.hash.replace(/^#/,""):"",hostname:a,port:aa.port,pathname:"/"===aa.pathname.charAt(0)?aa.pathname:"/"+aa.pathname}}function Og(a){var b=[Qd].concat(a.map(ga));return function(a){a=ga(a);return b.some(Cc.bind(null,a))}}function Cc(a,b){a=ga(a);b=ga(b);return a.protocol===
b.protocol&&a.host===b.host}function lg(){this.$get=ia(z)}function Rd(a){function b(a){try{return decodeURIComponent(a)}catch(b){return a}}var d=a[0]||{},c={},e="";return function(){var a,g,k,h,l;try{a=d.cookie||""}catch(m){a=""}if(a!==e)for(e=a,a=e.split("; "),c={},k=0;k<a.length;k++)g=a[k],h=g.indexOf("="),0<h&&(l=b(g.substring(0,h)),A(c[l])&&(c[l]=b(g.substring(h+1))));return c}}function pg(){this.$get=Rd}function fd(a){function b(d,c){if(D(d)){var e={};r(d,function(a,c){e[c]=b(c,a)});return e}return a.factory(d+
"Filter",c)}this.register=b;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];b("currency",Sd);b("date",Td);b("filter",bh);b("json",ch);b("limitTo",dh);b("lowercase",eh);b("number",Ud);b("orderBy",Vd);b("uppercase",fh)}function bh(){return function(a,b,d,c){if(!za(a)){if(null==a)return a;throw F("filter")("notarray",a);}c=c||"$";var e;switch(Ec(b)){case "function":break;case "boolean":case "null":case "number":case "string":e=!0;case "object":b=gh(b,d,c,e);break;default:return a}return Array.prototype.filter.call(a,
b)}}function gh(a,b,d,c){var e=D(a)&&d in a;!0===b?b=va:B(b)||(b=function(a,b){if(A(a))return!1;if(null===a||null===b)return a===b;if(D(b)||D(a)&&!cc(a))return!1;a=K(""+a);b=K(""+b);return-1!==a.indexOf(b)});return function(f){return e&&!D(f)?Fa(f,a[d],b,d,!1):Fa(f,a,b,d,c)}}function Fa(a,b,d,c,e,f){var g=Ec(a),k=Ec(b);if("string"===k&&"!"===b.charAt(0))return!Fa(a,b.substring(1),d,c,e);if(H(a))return a.some(function(a){return Fa(a,b,d,c,e)});switch(g){case "object":var h;if(e){for(h in a)if(h.charAt&&
"$"!==h.charAt(0)&&Fa(a[h],b,d,c,!0))return!0;return f?!1:Fa(a,b,d,c,!1)}if("object"===k){for(h in b)if(f=b[h],!B(f)&&!A(f)&&(g=h===c,!Fa(g?a:a[h],f,d,c,g,g)))return!1;return!0}return d(a,b);case "function":return!1;default:return d(a,b)}}function Ec(a){return null===a?"null":typeof a}function Sd(a){var b=a.NUMBER_FORMATS;return function(a,c,e){A(c)&&(c=b.CURRENCY_SYM);A(e)&&(e=b.PATTERNS[1].maxFrac);var f=c?/\u00A4/g:/\s*\u00A4\s*/g;return null==a?a:Wd(a,b.PATTERNS[1],b.GROUP_SEP,b.DECIMAL_SEP,e).replace(f,
c)}}function Ud(a){var b=a.NUMBER_FORMATS;return function(a,c){return null==a?a:Wd(a,b.PATTERNS[0],b.GROUP_SEP,b.DECIMAL_SEP,c)}}function hh(a){var b=0,d,c,e,f,g;-1<(c=a.indexOf(Xd))&&(a=a.replace(Xd,""));0<(e=a.search(/e/i))?(0>c&&(c=e),c+=+a.slice(e+1),a=a.substring(0,e)):0>c&&(c=a.length);for(e=0;a.charAt(e)===Fc;e++);if(e===(g=a.length))d=[0],c=1;else{for(g--;a.charAt(g)===Fc;)g--;c-=e;d=[];for(f=0;e<=g;e++,f++)d[f]=+a.charAt(e)}c>Yd&&(d=d.splice(0,Yd-1),b=c-1,c=1);return{d:d,e:b,i:c}}function ih(a,
b,d,c){var e=a.d,f=e.length-a.i;b=A(b)?Math.min(Math.max(d,f),c):+b;d=b+a.i;c=e[d];if(0<d){e.splice(Math.max(a.i,d));for(var g=d;g<e.length;g++)e[g]=0}else for(f=Math.max(0,f),a.i=1,e.length=Math.max(1,d=b+1),e[0]=0,g=1;g<d;g++)e[g]=0;if(5<=c)if(0>d-1){for(c=0;c>d;c--)e.unshift(0),a.i++;e.unshift(1);a.i++}else e[d-1]++;for(;f<Math.max(0,b);f++)e.push(0);if(b=e.reduceRight(function(a,b,c,d){b+=a;d[c]=b%10;return Math.floor(b/10)},0))e.unshift(b),a.i++}function Wd(a,b,d,c,e){if(!C(a)&&!X(a)||isNaN(a))return"";
var f=!isFinite(a),g=!1,k=Math.abs(a)+"",h="";if(f)h="\u221e";else{g=hh(k);ih(g,e,b.minFrac,b.maxFrac);h=g.d;k=g.i;e=g.e;f=[];for(g=h.reduce(function(a,b){return a&&!b},!0);0>k;)h.unshift(0),k++;0<k?f=h.splice(k,h.length):(f=h,h=[0]);k=[];for(h.length>=b.lgSize&&k.unshift(h.splice(-b.lgSize,h.length).join(""));h.length>b.gSize;)k.unshift(h.splice(-b.gSize,h.length).join(""));h.length&&k.unshift(h.join(""));h=k.join(d);f.length&&(h+=c+f.join(""));e&&(h+="e+"+e)}return 0>a&&!g?b.negPre+h+b.negSuf:b.posPre+
h+b.posSuf}function Pb(a,b,d,c){var e="";if(0>a||c&&0>=a)c?a=-a+1:(a=-a,e="-");for(a=""+a;a.length<b;)a=Fc+a;d&&(a=a.substr(a.length-b));return e+a}function ea(a,b,d,c,e){d=d||0;return function(f){f=f["get"+a]();if(0<d||f>-d)f+=d;0===f&&-12===d&&(f=12);return Pb(f,b,c,e)}}function lb(a,b,d){return function(c,e){var f=c["get"+a](),g=vb((d?"STANDALONE":"")+(b?"SHORT":"")+a);return e[g][f]}}function Zd(a){var b=(new Date(a,0,1)).getDay();return new Date(a,0,(4>=b?5:12)-b)}function $d(a){return function(b){var d=
Zd(b.getFullYear());b=+new Date(b.getFullYear(),b.getMonth(),b.getDate()+(4-b.getDay()))-+d;b=1+Math.round(b/6048E5);return Pb(b,a)}}function Gc(a,b){return 0>=a.getFullYear()?b.ERAS[0]:b.ERAS[1]}function Td(a){function b(a){var b;if(b=a.match(d)){a=new Date(0);var f=0,g=0,k=b[8]?a.setUTCFullYear:a.setFullYear,h=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=fa(b[9]+b[10]),g=fa(b[9]+b[11]));k.call(a,fa(b[1]),fa(b[2])-1,fa(b[3]));f=fa(b[4]||0)-f;g=fa(b[5]||0)-g;k=fa(b[6]||0);b=Math.round(1E3*parseFloat("0."+
(b[7]||0)));h.call(a,f,g,k,b)}return a}var d=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,d,f){var g="",k=[],h,l;d=d||"mediumDate";d=a.DATETIME_FORMATS[d]||d;C(c)&&(c=jh.test(c)?fa(c):b(c));X(c)&&(c=new Date(c));if(!ha(c)||!isFinite(c.getTime()))return c;for(;d;)(l=kh.exec(d))?(k=db(k,l,1),d=k.pop()):(k.push(d),d=null);var m=c.getTimezoneOffset();f&&(m=fc(f,m),c=gc(c,f,!0));r(k,function(b){h=lh[b];g+=h?h(c,a.DATETIME_FORMATS,
m):"''"===b?"'":b.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function ch(){return function(a,b){A(b)&&(b=2);return eb(a,b)}}function dh(){return function(a,b,d){b=Infinity===Math.abs(Number(b))?Number(b):fa(b);if(Y(b))return a;X(a)&&(a=a.toString());if(!za(a))return a;d=!d||isNaN(d)?0:fa(d);d=0>d?Math.max(0,a.length+d):d;return 0<=b?Hc(a,d,d+b):0===d?Hc(a,b,a.length):Hc(a,Math.max(0,d+b),d)}}function Hc(a,b,d){return C(a)?a.slice(b,d):Ha.call(a,b,d)}function Vd(a){function b(b){return b.map(function(b){var c=
1,d=Ta;if(B(b))d=b;else if(C(b)){if("+"===b.charAt(0)||"-"===b.charAt(0))c="-"===b.charAt(0)?-1:1,b=b.substring(1);if(""!==b&&(d=a(b),d.constant))var e=d(),d=function(a){return a[e]}}return{get:d,descending:c}})}function d(a){switch(typeof a){case "number":case "boolean":case "string":return!0;default:return!1}}function c(a,b){var c=0,d=a.type,h=b.type;if(d===h){var h=a.value,l=b.value;"string"===d?(h=h.toLowerCase(),l=l.toLowerCase()):"object"===d&&(D(h)&&(h=a.index),D(l)&&(l=b.index));h!==l&&(c=
h<l?-1:1)}else c="undefined"===d?1:"undefined"===h?-1:"null"===d?1:"null"===h?-1:d<h?-1:1;return c}return function(a,f,g,k){if(null==a)return a;if(!za(a))throw F("orderBy")("notarray",a);H(f)||(f=[f]);0===f.length&&(f=["+"]);var h=b(f),l=g?-1:1,m=B(k)?k:c;a=Array.prototype.map.call(a,function(a,b){return{value:a,tieBreaker:{value:b,type:"number",index:b},predicateValues:h.map(function(c){var e=c.get(a);c=typeof e;if(null===e)c="null";else if("object"===c)a:{if(B(e.valueOf)&&(e=e.valueOf(),d(e)))break a;
cc(e)&&(e=e.toString(),d(e))}return{value:e,type:c,index:b}})}});a.sort(function(a,b){for(var d=0,e=h.length;d<e;d++){var f=m(a.predicateValues[d],b.predicateValues[d]);if(f)return f*h[d].descending*l}return(m(a.tieBreaker,b.tieBreaker)||c(a.tieBreaker,b.tieBreaker))*l});return a=a.map(function(a){return a.value})}}function Ra(a){B(a)&&(a={link:a});a.restrict=a.restrict||"AC";return ia(a)}function Qb(a,b,d,c,e){this.$$controls=[];this.$error={};this.$$success={};this.$pending=void 0;this.$name=e(b.name||
b.ngForm||"")(d);this.$dirty=!1;this.$valid=this.$pristine=!0;this.$submitted=this.$invalid=!1;this.$$parentForm=mb;this.$$element=a;this.$$animate=c;ae(this)}function ae(a){a.$$classCache={};a.$$classCache[be]=!(a.$$classCache[nb]=a.$$element.hasClass(nb))}function ce(a){function b(a,b,c){c&&!a.$$classCache[b]?(a.$$animate.addClass(a.$$element,b),a.$$classCache[b]=!0):!c&&a.$$classCache[b]&&(a.$$animate.removeClass(a.$$element,b),a.$$classCache[b]=!1)}function d(a,c,d){c=c?"-"+Xc(c,"-"):"";b(a,nb+
c,!0===d);b(a,be+c,!1===d)}var c=a.set,e=a.unset;a.clazz.prototype.$setValidity=function(a,g,k){A(g)?(this.$pending||(this.$pending={}),c(this.$pending,a,k)):(this.$pending&&e(this.$pending,a,k),de(this.$pending)&&(this.$pending=void 0));Ga(g)?g?(e(this.$error,a,k),c(this.$$success,a,k)):(c(this.$error,a,k),e(this.$$success,a,k)):(e(this.$error,a,k),e(this.$$success,a,k));this.$pending?(b(this,"ng-pending",!0),this.$valid=this.$invalid=void 0,d(this,"",null)):(b(this,"ng-pending",!1),this.$valid=
de(this.$error),this.$invalid=!this.$valid,d(this,"",this.$valid));g=this.$pending&&this.$pending[a]?void 0:this.$error[a]?!1:this.$$success[a]?!0:null;d(this,a,g);this.$$parentForm.$setValidity(a,g,this)}}function de(a){if(a)for(var b in a)if(a.hasOwnProperty(b))return!1;return!0}function Ic(a){a.$formatters.push(function(b){return a.$isEmpty(b)?b:b.toString()})}function Sa(a,b,d,c,e,f){var g=K(b[0].type);if(!e.android){var k=!1;b.on("compositionstart",function(){k=!0});b.on("compositionupdate",
function(a){if(A(a.data)||""===a.data)k=!1});b.on("compositionend",function(){k=!1;l()})}var h,l=function(a){h&&(f.defer.cancel(h),h=null);if(!k){var e=b.val();a=a&&a.type;"password"===g||d.ngTrim&&"false"===d.ngTrim||(e=V(e));(c.$viewValue!==e||""===e&&c.$$hasNativeValidators)&&c.$setViewValue(e,a)}};if(e.hasEvent("input"))b.on("input",l);else{var m=function(a,b,c){h||(h=f.defer(function(){h=null;b&&b.value===c||l(a)}))};b.on("keydown",function(a){var b=a.keyCode;91===b||15<b&&19>b||37<=b&&40>=b||
m(a,this,this.value)});if(e.hasEvent("paste"))b.on("paste cut drop",m)}b.on("change",l);if(ee[g]&&c.$$hasNativeValidators&&g===d.type)b.on("keydown wheel mousedown",function(a){if(!h){var b=this.validity,c=b.badInput,d=b.typeMismatch;h=f.defer(function(){h=null;b.badInput===c&&b.typeMismatch===d||l(a)})}});c.$render=function(){var a=c.$isEmpty(c.$viewValue)?"":c.$viewValue;b.val()!==a&&b.val(a)}}function Rb(a,b){return function(d,c){var e,f;if(ha(d))return d;if(C(d)){'"'===d.charAt(0)&&'"'===d.charAt(d.length-
1)&&(d=d.substring(1,d.length-1));if(mh.test(d))return new Date(d);a.lastIndex=0;if(e=a.exec(d))return e.shift(),f=c?{yyyy:c.getFullYear(),MM:c.getMonth()+1,dd:c.getDate(),HH:c.getHours(),mm:c.getMinutes(),ss:c.getSeconds(),sss:c.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(e,function(a,c){c<b.length&&(f[b[c]]=+a)}),e=new Date(f.yyyy,f.MM-1,f.dd,f.HH,f.mm,f.ss||0,1E3*f.sss||0),100>f.yyyy&&e.setFullYear(f.yyyy),e}return NaN}}function ob(a,b,d,c){return function(e,f,g,k,h,l,m,
p){function n(a){return a&&!(a.getTime&&a.getTime()!==a.getTime())}function s(a){return w(a)&&!ha(a)?r(a)||void 0:a}function r(a,b){var c=k.$options.getOption("timezone");v&&v!==c&&(b=Uc(b,fc(v)));var e=d(a,b);!isNaN(e)&&c&&(e=gc(e,c));return e}Jc(e,f,g,k,a);Sa(e,f,g,k,h,l);var t="time"===a||"datetimelocal"===a,q,v;k.$parsers.push(function(c){if(k.$isEmpty(c))return null;if(b.test(c))return r(c,q);k.$$parserName=a});k.$formatters.push(function(a){if(a&&!ha(a))throw pb("datefmt",a);if(n(a)){q=a;var b=
k.$options.getOption("timezone");b&&(v=b,q=gc(q,b,!0));var d=c;t&&C(k.$options.getOption("timeSecondsFormat"))&&(d=c.replace("ss.sss",k.$options.getOption("timeSecondsFormat")).replace(/:$/,""));a=m("date")(a,d,b);t&&k.$options.getOption("timeStripZeroSeconds")&&(a=a.replace(/(?::00)?(?:\.000)?$/,""));return a}v=q=null;return""});if(w(g.min)||g.ngMin){var x=g.min||p(g.ngMin)(e),z=s(x);k.$validators.min=function(a){return!n(a)||A(z)||d(a)>=z};g.$observe("min",function(a){a!==x&&(z=s(a),x=a,k.$validate())})}if(w(g.max)||
g.ngMax){var y=g.max||p(g.ngMax)(e),J=s(y);k.$validators.max=function(a){return!n(a)||A(J)||d(a)<=J};g.$observe("max",function(a){a!==y&&(J=s(a),y=a,k.$validate())})}}}function Jc(a,b,d,c,e){(c.$$hasNativeValidators=D(b[0].validity))&&c.$parsers.push(function(a){var d=b.prop("validity")||{};if(d.badInput||d.typeMismatch)c.$$parserName=e;else return a})}function fe(a){a.$parsers.push(function(b){if(a.$isEmpty(b))return null;if(nh.test(b))return parseFloat(b);a.$$parserName="number"});a.$formatters.push(function(b){if(!a.$isEmpty(b)){if(!X(b))throw pb("numfmt",
b);b=b.toString()}return b})}function na(a){w(a)&&!X(a)&&(a=parseFloat(a));return Y(a)?void 0:a}function Kc(a){var b=a.toString(),d=b.indexOf(".");return-1===d?-1<a&&1>a&&(a=/e-(\d+)$/.exec(b))?Number(a[1]):0:b.length-d-1}function ge(a,b,d){a=Number(a);var c=(a|0)!==a,e=(b|0)!==b,f=(d|0)!==d;if(c||e||f){var g=c?Kc(a):0,k=e?Kc(b):0,h=f?Kc(d):0,g=Math.max(g,k,h),g=Math.pow(10,g);a*=g;b*=g;d*=g;c&&(a=Math.round(a));e&&(b=Math.round(b));f&&(d=Math.round(d))}return 0===(a-b)%d}function he(a,b,d,c,e){if(w(c)){a=
a(c);if(!a.constant)throw pb("constexpr",d,c);return a(b)}return e}function Lc(a,b){function d(a,b){if(!a||!a.length)return[];if(!b||!b.length)return a;var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],m=0;m<b.length;m++)if(e===b[m])continue a;c.push(e)}return c}function c(a){if(!a)return a;var b=a;H(a)?b=a.map(c).join(" "):D(a)?b=Object.keys(a).filter(function(b){return a[b]}).join(" "):C(a)||(b=a+"");return b}a="ngClass"+a;var e;return["$parse",function(f){return{restrict:"AC",link:function(g,
k,h){function l(a,b){var c=[];r(a,function(a){if(0<b||p[a])p[a]=(p[a]||0)+b,p[a]===+(0<b)&&c.push(a)});return c.join(" ")}function m(a){if(a===b){var c=s,c=l(c&&c.split(" "),1);h.$addClass(c)}else c=s,c=l(c&&c.split(" "),-1),h.$removeClass(c);n=a}var p=k.data("$classCounts"),n=!0,s;p||(p=T(),k.data("$classCounts",p));"ngClass"!==a&&(e||(e=f("$index",function(a){return a&1})),g.$watch(e,m));g.$watch(f(h[a],c),function(a){if(n===b){var c=s&&s.split(" "),e=a&&a.split(" "),f=d(c,e),c=d(e,c),f=l(f,-1),
c=l(c,1);h.$addClass(c);h.$removeClass(f)}s=a})}}}]}function sd(a,b,d,c,e,f){return{restrict:"A",compile:function(g,k){var h=a(k[c]);return function(a,c){c.on(e,function(c){var e=function(){h(a,{$event:c})};if(b.$$phase)if(f)a.$evalAsync(e);else try{e()}catch(g){d(g)}else a.$apply(e)})}}}}function Sb(a,b,d,c,e,f,g,k,h){this.$modelValue=this.$viewValue=Number.NaN;this.$$rawModelValue=void 0;this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=
[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success={};this.$pending=void 0;this.$name=h(d.name||"",!1)(a);this.$$parentForm=mb;this.$options=Tb;this.$$updateEvents="";this.$$updateEventHandler=this.$$updateEventHandler.bind(this);this.$$parsedNgModel=e(d.ngModel);this.$$parsedNgModelAssign=this.$$parsedNgModel.assign;this.$$ngModelGet=this.$$parsedNgModel;this.$$ngModelSet=this.$$parsedNgModelAssign;this.$$pendingDebounce=
null;this.$$parserValid=void 0;this.$$parserName="parse";this.$$currentValidationRunId=0;this.$$scope=a;this.$$rootScope=a.$root;this.$$attr=d;this.$$element=c;this.$$animate=f;this.$$timeout=g;this.$$parse=e;this.$$q=k;this.$$exceptionHandler=b;ae(this);oh(this)}function oh(a){a.$$scope.$watch(function(b){b=a.$$ngModelGet(b);b===a.$modelValue||a.$modelValue!==a.$modelValue&&b!==b||a.$$setModelValue(b);return b})}function Mc(a){this.$$options=a}function ie(a,b){r(b,function(b,c){w(a[c])||(a[c]=b)})}
function Oa(a,b){a.prop("selected",b);a.attr("selected",b)}function je(a,b,d){if(a){C(a)&&(a=new RegExp("^"+a+"$"));if(!a.test)throw F("ngPattern")("noregexp",b,a,Aa(d));return a}}function Ub(a){a=fa(a);return Y(a)?-1:a}var Xb={objectMaxDepth:5,urlErrorParamsEnabled:!0},ke=/^\/(.+)\/([a-z]*)$/,ta=Object.prototype.hasOwnProperty,K=function(a){return C(a)?a.toLowerCase():a},vb=function(a){return C(a)?a.toUpperCase():a},wa,x,sb,Ha=[].slice,Kg=[].splice,ph=[].push,la=Object.prototype.toString,Rc=Object.getPrototypeOf,
oa=F("ng"),ca=z.angular||(z.angular={}),lc,qb=0;wa=z.document.documentMode;var Y=Number.isNaN||function(a){return a!==a};E.$inject=[];Ta.$inject=[];var ze=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,V=function(a){return C(a)?a.trim():a},Od=function(a){return a.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ba=function(){if(!w(Ba.rules)){var a=z.document.querySelector("[ng-csp]")||z.document.querySelector("[data-ng-csp]");if(a){var b=
a.getAttribute("ng-csp")||a.getAttribute("data-ng-csp");Ba.rules={noUnsafeEval:!b||-1!==b.indexOf("no-unsafe-eval"),noInlineStyle:!b||-1!==b.indexOf("no-inline-style")}}else{a=Ba;try{new Function(""),b=!1}catch(d){b=!0}a.rules={noUnsafeEval:b,noInlineStyle:!1}}}return Ba.rules},rb=function(){if(w(rb.name_))return rb.name_;var a,b,d=Qa.length,c,e;for(b=0;b<d;++b)if(c=Qa[b],a=z.document.querySelector("["+c.replace(":","\\:")+"jq]")){e=a.getAttribute(c+"jq");break}return rb.name_=e},Be=/:/g,Qa=["ng-",
"data-ng-","ng:","x-ng-"],Fe=function(a){var b=a.currentScript;if(!b)return!0;if(!(b instanceof z.HTMLScriptElement||b instanceof z.SVGScriptElement))return!1;b=b.attributes;return[b.getNamedItem("src"),b.getNamedItem("href"),b.getNamedItem("xlink:href")].every(function(b){if(!b)return!0;if(!b.value)return!1;var c=a.createElement("a");c.href=b.value;if(a.location.origin===c.origin)return!0;switch(c.protocol){case "http:":case "https:":case "ftp:":case "blob:":case "file:":case "data:":return!0;default:return!1}})}(z.document),
Ie=/[A-Z]/g,Yc=!1,Pa=3,Pe={full:"1.8.2",major:1,minor:8,dot:2,codeName:"meteoric-mining"};U.expando="ng339";var Ka=U.cache={},ug=1;U._data=function(a){return this.cache[a[this.expando]]||{}};var qg=/-([a-z])/g,qh=/^-ms-/,Bb={mouseleave:"mouseout",mouseenter:"mouseover"},oc=F("jqLite"),tg=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,nc=/<|&#?\w+;/,rg=/<([\w:-]+)/,sg=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,qa={thead:["table"],col:["colgroup","table"],tr:["tbody","table"],td:["tr",
"tbody","table"]};qa.tbody=qa.tfoot=qa.colgroup=qa.caption=qa.thead;qa.th=qa.td;var hb={option:[1,'<select multiple="multiple">',"</select>"],_default:[0,"",""]},Nc;for(Nc in qa){var le=qa[Nc],me=le.slice().reverse();hb[Nc]=[me.length,"<"+me.join("><")+">","</"+le.join("></")+">"]}hb.optgroup=hb.option;var zg=z.Node.prototype.contains||function(a){return!!(this.compareDocumentPosition(a)&16)},Wa=U.prototype={ready:hd,toString:function(){var a=[];r(this,function(b){a.push(""+b)});return"["+a.join(", ")+
"]"},eq:function(a){return 0<=a?x(this[a]):x(this[this.length+a])},length:0,push:ph,sort:[].sort,splice:[].splice},Hb={};r("multiple selected checked disabled readOnly required open".split(" "),function(a){Hb[K(a)]=a});var od={};r("input select option textarea button form details".split(" "),function(a){od[a]=!0});var vd={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};r({data:sc,removeData:rc,hasData:function(a){for(var b in Ka[a.ng339])return!0;
return!1},cleanData:function(a){for(var b=0,d=a.length;b<d;b++)rc(a[b]),kd(a[b])}},function(a,b){U[b]=a});r({data:sc,inheritedData:Fb,scope:function(a){return x.data(a,"$scope")||Fb(a.parentNode||a,["$isolateScope","$scope"])},isolateScope:function(a){return x.data(a,"$isolateScope")||x.data(a,"$isolateScopeNoTemplate")},controller:ld,injector:function(a){return Fb(a,"$injector")},removeAttr:function(a,b){a.removeAttribute(b)},hasClass:Cb,css:function(a,b,d){b=yb(b.replace(qh,"ms-"));if(w(d))a.style[b]=
d;else return a.style[b]},attr:function(a,b,d){var c=a.nodeType;if(c!==Pa&&2!==c&&8!==c&&a.getAttribute){var c=K(b),e=Hb[c];if(w(d))null===d||!1===d&&e?a.removeAttribute(b):a.setAttribute(b,e?c:d);else return a=a.getAttribute(b),e&&null!==a&&(a=c),null===a?void 0:a}},prop:function(a,b,d){if(w(d))a[b]=d;else return a[b]},text:function(){function a(a,d){if(A(d)){var c=a.nodeType;return 1===c||c===Pa?a.textContent:""}a.textContent=d}a.$dv="";return a}(),val:function(a,b){if(A(b)){if(a.multiple&&"select"===
ua(a)){var d=[];r(a.options,function(a){a.selected&&d.push(a.value||a.text)});return d}return a.value}a.value=b},html:function(a,b){if(A(b))return a.innerHTML;zb(a,!0);a.innerHTML=b},empty:md},function(a,b){U.prototype[b]=function(b,c){var e,f,g=this.length;if(a!==md&&A(2===a.length&&a!==Cb&&a!==ld?b:c)){if(D(b)){for(e=0;e<g;e++)if(a===sc)a(this[e],b);else for(f in b)a(this[e],f,b[f]);return this}e=a.$dv;g=A(e)?Math.min(g,1):g;for(f=0;f<g;f++){var k=a(this[f],b,c);e=e?e+k:k}return e}for(e=0;e<g;e++)a(this[e],
b,c);return this}});r({removeData:rc,on:function(a,b,d,c){if(w(c))throw oc("onargs");if(mc(a)){c=Ab(a,!0);var e=c.events,f=c.handle;f||(f=c.handle=wg(a,e));c=0<=b.indexOf(" ")?b.split(" "):[b];for(var g=c.length,k=function(b,c,g){var k=e[b];k||(k=e[b]=[],k.specialHandlerWrapper=c,"$destroy"===b||g||a.addEventListener(b,f));k.push(d)};g--;)b=c[g],Bb[b]?(k(Bb[b],yg),k(b,void 0,!0)):k(b)}},off:kd,one:function(a,b,d){a=x(a);a.on(b,function e(){a.off(b,d);a.off(b,e)});a.on(b,d)},replaceWith:function(a,
b){var d,c=a.parentNode;zb(a);r(new U(b),function(b){d?c.insertBefore(b,d.nextSibling):c.replaceChild(b,a);d=b})},children:function(a){var b=[];r(a.childNodes,function(a){1===a.nodeType&&b.push(a)});return b},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,b){var d=a.nodeType;if(1===d||11===d){b=new U(b);for(var d=0,c=b.length;d<c;d++)a.appendChild(b[d])}},prepend:function(a,b){if(1===a.nodeType){var d=a.firstChild;r(new U(b),function(b){a.insertBefore(b,d)})}},
wrap:function(a,b){var d=x(b).eq(0).clone()[0],c=a.parentNode;c&&c.replaceChild(d,a);d.appendChild(a)},remove:Gb,detach:function(a){Gb(a,!0)},after:function(a,b){var d=a,c=a.parentNode;if(c){b=new U(b);for(var e=0,f=b.length;e<f;e++){var g=b[e];c.insertBefore(g,d.nextSibling);d=g}}},addClass:Eb,removeClass:Db,toggleClass:function(a,b,d){b&&r(b.split(" "),function(b){var e=d;A(e)&&(e=!Cb(a,b));(e?Eb:Db)(a,b)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},
find:function(a,b){return a.getElementsByTagName?a.getElementsByTagName(b):[]},clone:qc,triggerHandler:function(a,b,d){var c,e,f=b.type||b,g=Ab(a);if(g=(g=g&&g.events)&&g[f])c={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:E,type:f,target:a},b.type&&(c=S(c,
b)),b=ja(g),e=d?[c].concat(d):[c],r(b,function(b){c.isImmediatePropagationStopped()||b.apply(a,e)})}},function(a,b){U.prototype[b]=function(b,c,e){for(var f,g=0,k=this.length;g<k;g++)A(f)?(f=a(this[g],b,c,e),w(f)&&(f=x(f))):pc(f,a(this[g],b,c,e));return w(f)?f:this}});U.prototype.bind=U.prototype.on;U.prototype.unbind=U.prototype.off;var rh=Object.create(null);pd.prototype={_idx:function(a){a!==this._lastKey&&(this._lastKey=a,this._lastIndex=this._keys.indexOf(a));return this._lastIndex},_transformKey:function(a){return Y(a)?
rh:a},get:function(a){a=this._transformKey(a);a=this._idx(a);if(-1!==a)return this._values[a]},has:function(a){a=this._transformKey(a);return-1!==this._idx(a)},set:function(a,b){a=this._transformKey(a);var d=this._idx(a);-1===d&&(d=this._lastIndex=this._keys.length);this._keys[d]=a;this._values[d]=b},delete:function(a){a=this._transformKey(a);a=this._idx(a);if(-1===a)return!1;this._keys.splice(a,1);this._values.splice(a,1);this._lastKey=NaN;this._lastIndex=-1;return!0}};var Ib=pd,og=[function(){this.$get=
[function(){return Ib}]}],Bg=/^([^(]+?)=>/,Cg=/^[^(]*\(\s*([^)]*)\)/m,sh=/,/,th=/^\s*(_?)(\S+?)\1\s*$/,Ag=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Ca=F("$injector");fb.$$annotate=function(a,b,d){var c;if("function"===typeof a){if(!(c=a.$inject)){c=[];if(a.length){if(b)throw C(d)&&d||(d=a.name||Dg(a)),Ca("strictdi",d);b=qd(a);r(b[1].split(sh),function(a){a.replace(th,function(a,b,d){c.push(d)})})}a.$inject=c}}else H(a)?(b=a.length-1,tb(a[b],"fn"),c=a.slice(0,b)):tb(a,"fn",!0);return c};var ne=F("$animate"),
Ef=function(){this.$get=E},Ff=function(){var a=new Ib,b=[];this.$get=["$$AnimateRunner","$rootScope",function(d,c){function e(a,b,c){var d=!1;b&&(b=C(b)?b.split(" "):H(b)?b:[],r(b,function(b){b&&(d=!0,a[b]=c)}));return d}function f(){r(b,function(b){var c=a.get(b);if(c){var d=Eg(b.attr("class")),e="",f="";r(c,function(a,b){a!==!!d[b]&&(a?e+=(e.length?" ":"")+b:f+=(f.length?" ":"")+b)});r(b,function(a){e&&Eb(a,e);f&&Db(a,f)});a.delete(b)}});b.length=0}return{enabled:E,on:E,off:E,pin:E,push:function(g,
k,h,l){l&&l();h=h||{};h.from&&g.css(h.from);h.to&&g.css(h.to);if(h.addClass||h.removeClass)if(k=h.addClass,l=h.removeClass,h=a.get(g)||{},k=e(h,k,!0),l=e(h,l,!1),k||l)a.set(g,h),b.push(g),1===b.length&&c.$$postDigest(f);g=new d;g.complete();return g}}}]},Cf=["$provide",function(a){var b=this,d=null,c=null;this.$$registeredAnimations=Object.create(null);this.register=function(c,d){if(c&&"."!==c.charAt(0))throw ne("notcsel",c);var g=c+"-animation";b.$$registeredAnimations[c.substr(1)]=g;a.factory(g,
d)};this.customFilter=function(a){1===arguments.length&&(c=B(a)?a:null);return c};this.classNameFilter=function(a){if(1===arguments.length&&(d=a instanceof RegExp?a:null)&&/[(\s|\/)]ng-animate[(\s|\/)]/.test(d.toString()))throw d=null,ne("nongcls","ng-animate");return d};this.$get=["$$animateQueue",function(a){function b(a,c,d){if(d){var e;a:{for(e=0;e<d.length;e++){var f=d[e];if(1===f.nodeType){e=f;break a}}e=void 0}!e||e.parentNode||e.previousElementSibling||(d=null)}d?d.after(a):c.prepend(a)}return{on:a.on,
off:a.off,pin:a.pin,enabled:a.enabled,cancel:function(a){a.cancel&&a.cancel()},enter:function(c,d,h,l){d=d&&x(d);h=h&&x(h);d=d||h.parent();b(c,d,h);return a.push(c,"enter",ra(l))},move:function(c,d,h,l){d=d&&x(d);h=h&&x(h);d=d||h.parent();b(c,d,h);return a.push(c,"move",ra(l))},leave:function(b,c){return a.push(b,"leave",ra(c),function(){b.remove()})},addClass:function(b,c,d){d=ra(d);d.addClass=ib(d.addclass,c);return a.push(b,"addClass",d)},removeClass:function(b,c,d){d=ra(d);d.removeClass=ib(d.removeClass,
c);return a.push(b,"removeClass",d)},setClass:function(b,c,d,f){f=ra(f);f.addClass=ib(f.addClass,c);f.removeClass=ib(f.removeClass,d);return a.push(b,"setClass",f)},animate:function(b,c,d,f,m){m=ra(m);m.from=m.from?S(m.from,c):c;m.to=m.to?S(m.to,d):d;m.tempClasses=ib(m.tempClasses,f||"ng-inline-animate");return a.push(b,"animate",m)}}}]}],Hf=function(){this.$get=["$$rAF",function(a){function b(b){d.push(b);1<d.length||a(function(){for(var a=0;a<d.length;a++)d[a]();d=[]})}var d=[];return function(){var a=
!1;b(function(){a=!0});return function(d){a?d():b(d)}}}]},Gf=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(a,b,d,c,e){function f(a){this.setHost(a);var b=d();this._doneCallbacks=[];this._tick=function(a){c()?e(a,0,!1):b(a)};this._state=0}f.chain=function(a,b){function c(){if(d===a.length)b(!0);else a[d](function(a){!1===a?b(!1):(d++,c())})}var d=0;c()};f.all=function(a,b){function c(f){e=e&&f;++d===a.length&&b(e)}var d=0,e=!0;r(a,function(a){a.done(c)})};
f.prototype={setHost:function(a){this.host=a||{}},done:function(a){2===this._state?a():this._doneCallbacks.push(a)},progress:E,getPromise:function(){if(!this.promise){var b=this;this.promise=a(function(a,c){b.done(function(b){!1===b?c():a()})})}return this.promise},then:function(a,b){return this.getPromise().then(a,b)},"catch":function(a){return this.getPromise()["catch"](a)},"finally":function(a){return this.getPromise()["finally"](a)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&
this.host.resume()},end:function(){this.host.end&&this.host.end();this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel();this._resolve(!1)},complete:function(a){var b=this;0===b._state&&(b._state=1,b._tick(function(){b._resolve(a)}))},_resolve:function(a){2!==this._state&&(r(this._doneCallbacks,function(b){b(a)}),this._doneCallbacks.length=0,this._state=2)}};return f}]},Df=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(a,b,d){return function(b,e){function f(){a(function(){g.addClass&&
(b.addClass(g.addClass),g.addClass=null);g.removeClass&&(b.removeClass(g.removeClass),g.removeClass=null);g.to&&(b.css(g.to),g.to=null);k||h.complete();k=!0});return h}var g=e||{};g.$$prepared||(g=Ia(g));g.cleanupStyles&&(g.from=g.to=null);g.from&&(b.css(g.from),g.from=null);var k,h=new d;return{start:f,end:f}}}]},$=F("$compile"),uc=new function(){};Zc.$inject=["$provide","$$sanitizeUriProvider"];Kb.prototype.isFirstChange=function(){return this.previousValue===uc};var rd=/^((?:x|data)[:\-_])/i,Jg=
/[:\-_]+(.)/g,xd=F("$controller"),wd=/^(\S+)(\s+as\s+([\w$]+))?$/,Of=function(){this.$get=["$document",function(a){return function(b){b?!b.nodeType&&b instanceof x&&(b=b[0]):b=a[0].body;return b.offsetWidth+1}}]},yd="application/json",xc={"Content-Type":yd+";charset=utf-8"},Mg=/^\[|^\{(?!\{)/,Ng={"[":/]$/,"{":/}$/},Lg=/^\)]\}',?\n/,Lb=F("$http"),Ma=ca.$interpolateMinErr=F("$interpolate");Ma.throwNoconcat=function(a){throw Ma("noconcat",a);};Ma.interr=function(a,b){return Ma("interr",a,b.toString())};
var Qg=F("$interval"),Xf=function(){this.$get=function(){function a(a){var b=function(a){b.data=a;b.called=!0};b.id=a;return b}var b=ca.callbacks,d={};return{createCallback:function(c){c="_"+(b.$$counter++).toString(36);var e="angular.callbacks."+c,f=a(c);d[e]=b[c]=f;return e},wasCalled:function(a){return d[a].called},getResponse:function(a){return d[a].data},removeCallback:function(a){delete b[d[a].id];delete d[a]}}}},uh=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,Rg={http:80,https:443,ftp:21},kb=F("$location"),
Sg=/^\s*[\\/]{2,}/,vh={$$absUrl:"",$$html5:!1,$$replace:!1,$$compose:function(){for(var a=this.$$path,b=this.$$hash,d=Ce(this.$$search),b=b?"#"+ic(b):"",a=a.split("/"),c=a.length;c--;)a[c]=ic(a[c].replace(/%2F/g,"/"));this.$$url=a.join("/")+(d?"?"+d:"")+b;this.$$absUrl=this.$$normalizeUrl(this.$$url);this.$$urlUpdatedByLocation=!0},absUrl:Mb("$$absUrl"),url:function(a){if(A(a))return this.$$url;var b=uh.exec(a);(b[1]||""===a)&&this.path(decodeURIComponent(b[1]));(b[2]||b[1]||""===a)&&this.search(b[3]||
"");this.hash(b[5]||"");return this},protocol:Mb("$$protocol"),host:Mb("$$host"),port:Mb("$$port"),path:Fd("$$path",function(a){a=null!==a?a.toString():"";return"/"===a.charAt(0)?a:"/"+a}),search:function(a,b){switch(arguments.length){case 0:return this.$$search;case 1:if(C(a)||X(a))a=a.toString(),this.$$search=hc(a);else if(D(a))a=Ia(a,{}),r(a,function(b,c){null==b&&delete a[c]}),this.$$search=a;else throw kb("isrcharg");break;default:A(b)||null===b?delete this.$$search[a]:this.$$search[a]=b}this.$$compose();
return this},hash:Fd("$$hash",function(a){return null!==a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};r([Ed,Ac,zc],function(a){a.prototype=Object.create(vh);a.prototype.state=function(b){if(!arguments.length)return this.$$state;if(a!==zc||!this.$$html5)throw kb("nostate");this.$$state=A(b)?null:b;this.$$urlUpdatedByLocation=!0;return this}});var Ya=F("$parse"),Wg={}.constructor.prototype.valueOf,Vb=T();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(a){Vb[a]=
!0});var wh={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Ob=function(a){this.options=a};Ob.prototype={constructor:Ob,lex:function(a){this.text=a;this.index=0;for(this.tokens=[];this.index<this.text.length;)if(a=this.text.charAt(this.index),'"'===a||"'"===a)this.readString(a);else if(this.isNumber(a)||"."===a&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(a,"(){}[].,;:?"))this.tokens.push({index:this.index,
text:a}),this.index++;else if(this.isWhitespace(a))this.index++;else{var b=a+this.peek(),d=b+this.peek(2),c=Vb[b],e=Vb[d];Vb[a]||c||e?(a=e?d:c?b:a,this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a,b){return-1!==b.indexOf(a)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a&&"string"===
typeof a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdentifierStart:function(a){return this.options.isIdentifierStart?this.options.isIdentifierStart(a,this.codePointAt(a)):this.isValidIdentifierStart(a)},isValidIdentifierStart:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isIdentifierContinue:function(a){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(a,this.codePointAt(a)):this.isValidIdentifierContinue(a)},
isValidIdentifierContinue:function(a,b){return this.isValidIdentifierStart(a,b)||this.isNumber(a)},codePointAt:function(a){return 1===a.length?a.charCodeAt(0):(a.charCodeAt(0)<<10)+a.charCodeAt(1)-56613888},peekMultichar:function(){var a=this.text.charAt(this.index),b=this.peek();if(!b)return a;var d=a.charCodeAt(0),c=b.charCodeAt(0);return 55296<=d&&56319>=d&&56320<=c&&57343>=c?a+b:a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,b,d){d=d||this.index;b=
w(b)?"s "+b+"-"+this.index+" ["+this.text.substring(b,d)+"]":" "+d;throw Ya("lexerr",a,b,this.text);},readNumber:function(){for(var a="",b=this.index;this.index<this.text.length;){var d=K(this.text.charAt(this.index));if("."===d||this.isNumber(d))a+=d;else{var c=this.peek();if("e"===d&&this.isExpOperator(c))a+=d;else if(this.isExpOperator(d)&&c&&this.isNumber(c)&&"e"===a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||c&&this.isNumber(c)||"e"!==a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}this.tokens.push({index:b,
text:a,constant:!0,value:Number(a)})},readIdent:function(){var a=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var b=this.peekMultichar();if(!this.isIdentifierContinue(b))break;this.index+=b.length}this.tokens.push({index:a,text:this.text.slice(a,this.index),identifier:!0})},readString:function(a){var b=this.index;this.index++;for(var d="",c=a,e=!1;this.index<this.text.length;){var f=this.text.charAt(this.index),c=c+f;if(e)"u"===f?(e=this.text.substring(this.index+
1,this.index+5),e.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+e+"]"),this.index+=4,d+=String.fromCharCode(parseInt(e,16))):d+=wh[f]||f,e=!1;else if("\\"===f)e=!0;else{if(f===a){this.index++;this.tokens.push({index:b,text:c,constant:!0,value:d});return}d+=f}this.index++}this.throwError("Unterminated quote",b)}};var q=function(a,b){this.lexer=a;this.options=b};q.Program="Program";q.ExpressionStatement="ExpressionStatement";q.AssignmentExpression="AssignmentExpression";q.ConditionalExpression=
"ConditionalExpression";q.LogicalExpression="LogicalExpression";q.BinaryExpression="BinaryExpression";q.UnaryExpression="UnaryExpression";q.CallExpression="CallExpression";q.MemberExpression="MemberExpression";q.Identifier="Identifier";q.Literal="Literal";q.ArrayExpression="ArrayExpression";q.Property="Property";q.ObjectExpression="ObjectExpression";q.ThisExpression="ThisExpression";q.LocalsExpression="LocalsExpression";q.NGValueParameter="NGValueParameter";q.prototype={ast:function(a){this.text=
a;this.tokens=this.lexer.lex(a);a=this.program();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);return a},program:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.expressionStatement()),!this.expect(";"))return{type:q.Program,body:a}},expressionStatement:function(){return{type:q.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=this.filter(a);return a},
expression:function(){return this.assignment()},assignment:function(){var a=this.ternary();if(this.expect("=")){if(!Jd(a))throw Ya("lval");a={type:q.AssignmentExpression,left:a,right:this.assignment(),operator:"="}}return a},ternary:function(){var a=this.logicalOR(),b,d;return this.expect("?")&&(b=this.expression(),this.consume(":"))?(d=this.expression(),{type:q.ConditionalExpression,test:a,alternate:b,consequent:d}):a},logicalOR:function(){for(var a=this.logicalAND();this.expect("||");)a={type:q.LogicalExpression,
operator:"||",left:a,right:this.logicalAND()};return a},logicalAND:function(){for(var a=this.equality();this.expect("&&");)a={type:q.LogicalExpression,operator:"&&",left:a,right:this.equality()};return a},equality:function(){for(var a=this.relational(),b;b=this.expect("==","!=","===","!==");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.relational()};return a},relational:function(){for(var a=this.additive(),b;b=this.expect("<",">","<=",">=");)a={type:q.BinaryExpression,operator:b.text,
left:a,right:this.additive()};return a},additive:function(){for(var a=this.multiplicative(),b;b=this.expect("+","-");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.multiplicative()};return a},multiplicative:function(){for(var a=this.unary(),b;b=this.expect("*","/","%");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.unary()};return a},unary:function(){var a;return(a=this.expect("+","-","!"))?{type:q.UnaryExpression,operator:a.text,prefix:!0,argument:this.unary()}:this.primary()},
primary:function(){var a;this.expect("(")?(a=this.filterChain(),this.consume(")")):this.expect("[")?a=this.arrayDeclaration():this.expect("{")?a=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?a=Ia(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?a={type:q.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?a=this.identifier():this.peek().constant?a=this.constant():this.throwError("not a primary expression",
this.peek());for(var b;b=this.expect("(","[",".");)"("===b.text?(a={type:q.CallExpression,callee:a,arguments:this.parseArguments()},this.consume(")")):"["===b.text?(a={type:q.MemberExpression,object:a,property:this.expression(),computed:!0},this.consume("]")):"."===b.text?a={type:q.MemberExpression,object:a,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return a},filter:function(a){a=[a];for(var b={type:q.CallExpression,callee:this.identifier(),arguments:a,filter:!0};this.expect(":");)a.push(this.expression());
return b},parseArguments:function(){var a=[];if(")"!==this.peekToken().text){do a.push(this.filterChain());while(this.expect(","))}return a},identifier:function(){var a=this.consume();a.identifier||this.throwError("is not a valid identifier",a);return{type:q.Identifier,name:a.text}},constant:function(){return{type:q.Literal,value:this.consume().value}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;a.push(this.expression())}while(this.expect(","))}this.consume("]");
return{type:q.ArrayExpression,elements:a}},object:function(){var a=[],b;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;b={type:q.Property,kind:"init"};this.peek().constant?(b.key=this.constant(),b.computed=!1,this.consume(":"),b.value=this.expression()):this.peek().identifier?(b.key=this.identifier(),b.computed=!1,this.peek(":")?(this.consume(":"),b.value=this.expression()):b.value=b.key):this.peek("[")?(this.consume("["),b.key=this.expression(),this.consume("]"),b.computed=!0,this.consume(":"),
b.value=this.expression()):this.throwError("invalid key",this.peek());a.push(b)}while(this.expect(","))}this.consume("}");return{type:q.ObjectExpression,properties:a}},throwError:function(a,b){throw Ya("syntax",b.text,a,b.index+1,this.text,this.text.substring(b.index));},consume:function(a){if(0===this.tokens.length)throw Ya("ueoe",this.text);var b=this.expect(a);b||this.throwError("is unexpected, expecting ["+a+"]",this.peek());return b},peekToken:function(){if(0===this.tokens.length)throw Ya("ueoe",
this.text);return this.tokens[0]},peek:function(a,b,d,c){return this.peekAhead(0,a,b,d,c)},peekAhead:function(a,b,d,c,e){if(this.tokens.length>a){a=this.tokens[a];var f=a.text;if(f===b||f===d||f===c||f===e||!(b||d||c||e))return a}return!1},expect:function(a,b,d,c){return(a=this.peek(a,b,d,c))?(this.tokens.shift(),a):!1},selfReferential:{"this":{type:q.ThisExpression},$locals:{type:q.LocalsExpression}}};var Hd=2;Ld.prototype={compile:function(a){var b=this;this.state={nextId:0,filters:{},fn:{vars:[],
body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]};Z(a,b.$filter);var d="",c;this.stage="assign";if(c=Kd(a))this.state.computing="assign",d=this.nextId(),this.recurse(c,d),this.return_(d),d="fn.assign="+this.generateFunction("assign","s,v,l");c=Id(a.body);b.stage="inputs";r(c,function(a,c){var d="fn"+c;b.state[d]={vars:[],body:[],own:{}};b.state.computing=d;var k=b.nextId();b.recurse(a,k);b.return_(k);b.state.inputs.push({name:d,isPure:a.isPure});a.watchId=c});this.state.computing="fn";this.stage=
"main";this.recurse(a);a='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+d+this.watchFns()+"return fn;";a=(new Function("$filter","getStringValue","ifDefined","plus",a))(this.$filter,Tg,Ug,Gd);this.state=this.stage=void 0;return a},USE:"use",STRICT:"strict",watchFns:function(){var a=[],b=this.state.inputs,d=this;r(b,function(b){a.push("var "+b.name+"="+d.generateFunction(b.name,"s"));b.isPure&&a.push(b.name,".isPure="+JSON.stringify(b.isPure)+
";")});b.length&&a.push("fn.inputs=["+b.map(function(a){return a.name}).join(",")+"];");return a.join("")},generateFunction:function(a,b){return"function("+b+"){"+this.varsPrefix(a)+this.body(a)+"};"},filterPrefix:function(){var a=[],b=this;r(this.state.filters,function(d,c){a.push(d+"=$filter("+b.escape(c)+")")});return a.length?"var "+a.join(",")+";":""},varsPrefix:function(a){return this.state[a].vars.length?"var "+this.state[a].vars.join(",")+";":""},body:function(a){return this.state[a].body.join("")},
recurse:function(a,b,d,c,e,f){var g,k,h=this,l,m,p;c=c||E;if(!f&&w(a.watchId))b=b||this.nextId(),this.if_("i",this.lazyAssign(b,this.computedMember("i",a.watchId)),this.lazyRecurse(a,b,d,c,e,!0));else switch(a.type){case q.Program:r(a.body,function(b,c){h.recurse(b.expression,void 0,void 0,function(a){k=a});c!==a.body.length-1?h.current().body.push(k,";"):h.return_(k)});break;case q.Literal:m=this.escape(a.value);this.assign(b,m);c(b||m);break;case q.UnaryExpression:this.recurse(a.argument,void 0,
void 0,function(a){k=a});m=a.operator+"("+this.ifDefined(k,0)+")";this.assign(b,m);c(m);break;case q.BinaryExpression:this.recurse(a.left,void 0,void 0,function(a){g=a});this.recurse(a.right,void 0,void 0,function(a){k=a});m="+"===a.operator?this.plus(g,k):"-"===a.operator?this.ifDefined(g,0)+a.operator+this.ifDefined(k,0):"("+g+")"+a.operator+"("+k+")";this.assign(b,m);c(m);break;case q.LogicalExpression:b=b||this.nextId();h.recurse(a.left,b);h.if_("&&"===a.operator?b:h.not(b),h.lazyRecurse(a.right,
b));c(b);break;case q.ConditionalExpression:b=b||this.nextId();h.recurse(a.test,b);h.if_(b,h.lazyRecurse(a.alternate,b),h.lazyRecurse(a.consequent,b));c(b);break;case q.Identifier:b=b||this.nextId();d&&(d.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",a.name)+"?l:s"),d.computed=!1,d.name=a.name);h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",a.name)),function(){h.if_("inputs"===h.stage||"s",function(){e&&1!==e&&h.if_(h.isNull(h.nonComputedMember("s",a.name)),
h.lazyAssign(h.nonComputedMember("s",a.name),"{}"));h.assign(b,h.nonComputedMember("s",a.name))})},b&&h.lazyAssign(b,h.nonComputedMember("l",a.name)));c(b);break;case q.MemberExpression:g=d&&(d.context=this.nextId())||this.nextId();b=b||this.nextId();h.recurse(a.object,g,void 0,function(){h.if_(h.notNull(g),function(){a.computed?(k=h.nextId(),h.recurse(a.property,k),h.getStringValue(k),e&&1!==e&&h.if_(h.not(h.computedMember(g,k)),h.lazyAssign(h.computedMember(g,k),"{}")),m=h.computedMember(g,k),h.assign(b,
m),d&&(d.computed=!0,d.name=k)):(e&&1!==e&&h.if_(h.isNull(h.nonComputedMember(g,a.property.name)),h.lazyAssign(h.nonComputedMember(g,a.property.name),"{}")),m=h.nonComputedMember(g,a.property.name),h.assign(b,m),d&&(d.computed=!1,d.name=a.property.name))},function(){h.assign(b,"undefined")});c(b)},!!e);break;case q.CallExpression:b=b||this.nextId();a.filter?(k=h.filter(a.callee.name),l=[],r(a.arguments,function(a){var b=h.nextId();h.recurse(a,b);l.push(b)}),m=k+"("+l.join(",")+")",h.assign(b,m),c(b)):
(k=h.nextId(),g={},l=[],h.recurse(a.callee,k,g,function(){h.if_(h.notNull(k),function(){r(a.arguments,function(b){h.recurse(b,a.constant?void 0:h.nextId(),void 0,function(a){l.push(a)})});m=g.name?h.member(g.context,g.name,g.computed)+"("+l.join(",")+")":k+"("+l.join(",")+")";h.assign(b,m)},function(){h.assign(b,"undefined")});c(b)}));break;case q.AssignmentExpression:k=this.nextId();g={};this.recurse(a.left,void 0,g,function(){h.if_(h.notNull(g.context),function(){h.recurse(a.right,k);m=h.member(g.context,
g.name,g.computed)+a.operator+k;h.assign(b,m);c(b||m)})},1);break;case q.ArrayExpression:l=[];r(a.elements,function(b){h.recurse(b,a.constant?void 0:h.nextId(),void 0,function(a){l.push(a)})});m="["+l.join(",")+"]";this.assign(b,m);c(b||m);break;case q.ObjectExpression:l=[];p=!1;r(a.properties,function(a){a.computed&&(p=!0)});p?(b=b||this.nextId(),this.assign(b,"{}"),r(a.properties,function(a){a.computed?(g=h.nextId(),h.recurse(a.key,g)):g=a.key.type===q.Identifier?a.key.name:""+a.key.value;k=h.nextId();
h.recurse(a.value,k);h.assign(h.member(b,g,a.computed),k)})):(r(a.properties,function(b){h.recurse(b.value,a.constant?void 0:h.nextId(),void 0,function(a){l.push(h.escape(b.key.type===q.Identifier?b.key.name:""+b.key.value)+":"+a)})}),m="{"+l.join(",")+"}",this.assign(b,m));c(b||m);break;case q.ThisExpression:this.assign(b,"s");c(b||"s");break;case q.LocalsExpression:this.assign(b,"l");c(b||"l");break;case q.NGValueParameter:this.assign(b,"v"),c(b||"v")}},getHasOwnProperty:function(a,b){var d=a+"."+
b,c=this.current().own;c.hasOwnProperty(d)||(c[d]=this.nextId(!1,a+"&&("+this.escape(b)+" in "+a+")"));return c[d]},assign:function(a,b){if(a)return this.current().body.push(a,"=",b,";"),a},filter:function(a){this.state.filters.hasOwnProperty(a)||(this.state.filters[a]=this.nextId(!0));return this.state.filters[a]},ifDefined:function(a,b){return"ifDefined("+a+","+this.escape(b)+")"},plus:function(a,b){return"plus("+a+","+b+")"},return_:function(a){this.current().body.push("return ",a,";")},if_:function(a,
b,d){if(!0===a)b();else{var c=this.current().body;c.push("if(",a,"){");b();c.push("}");d&&(c.push("else{"),d(),c.push("}"))}},not:function(a){return"!("+a+")"},isNull:function(a){return a+"==null"},notNull:function(a){return a+"!=null"},nonComputedMember:function(a,b){var d=/[^$_a-zA-Z0-9]/g;return/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(b)?a+"."+b:a+'["'+b.replace(d,this.stringEscapeFn)+'"]'},computedMember:function(a,b){return a+"["+b+"]"},member:function(a,b,d){return d?this.computedMember(a,b):this.nonComputedMember(a,
b)},getStringValue:function(a){this.assign(a,"getStringValue("+a+")")},lazyRecurse:function(a,b,d,c,e,f){var g=this;return function(){g.recurse(a,b,d,c,e,f)}},lazyAssign:function(a,b){var d=this;return function(){d.assign(a,b)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)},escape:function(a){if(C(a))return"'"+a.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(X(a))return a.toString();if(!0===a)return"true";if(!1===
a)return"false";if(null===a)return"null";if("undefined"===typeof a)return"undefined";throw Ya("esc");},nextId:function(a,b){var d="v"+this.state.nextId++;a||this.current().vars.push(d+(b?"="+b:""));return d},current:function(){return this.state[this.state.computing]}};Md.prototype={compile:function(a){var b=this;Z(a,b.$filter);var d,c;if(d=Kd(a))c=this.recurse(d);d=Id(a.body);var e;d&&(e=[],r(d,function(a,c){var d=b.recurse(a);d.isPure=a.isPure;a.input=d;e.push(d);a.watchId=c}));var f=[];r(a.body,
function(a){f.push(b.recurse(a.expression))});a=0===a.body.length?E:1===a.body.length?f[0]:function(a,b){var c;r(f,function(d){c=d(a,b)});return c};c&&(a.assign=function(a,b,d){return c(a,d,b)});e&&(a.inputs=e);return a},recurse:function(a,b,d){var c,e,f=this,g;if(a.input)return this.inputs(a.input,a.watchId);switch(a.type){case q.Literal:return this.value(a.value,b);case q.UnaryExpression:return e=this.recurse(a.argument),this["unary"+a.operator](e,b);case q.BinaryExpression:return c=this.recurse(a.left),
e=this.recurse(a.right),this["binary"+a.operator](c,e,b);case q.LogicalExpression:return c=this.recurse(a.left),e=this.recurse(a.right),this["binary"+a.operator](c,e,b);case q.ConditionalExpression:return this["ternary?:"](this.recurse(a.test),this.recurse(a.alternate),this.recurse(a.consequent),b);case q.Identifier:return f.identifier(a.name,b,d);case q.MemberExpression:return c=this.recurse(a.object,!1,!!d),a.computed||(e=a.property.name),a.computed&&(e=this.recurse(a.property)),a.computed?this.computedMember(c,
e,b,d):this.nonComputedMember(c,e,b,d);case q.CallExpression:return g=[],r(a.arguments,function(a){g.push(f.recurse(a))}),a.filter&&(e=this.$filter(a.callee.name)),a.filter||(e=this.recurse(a.callee,!0)),a.filter?function(a,c,d,f){for(var p=[],n=0;n<g.length;++n)p.push(g[n](a,c,d,f));a=e.apply(void 0,p,f);return b?{context:void 0,name:void 0,value:a}:a}:function(a,c,d,f){var p=e(a,c,d,f),n;if(null!=p.value){n=[];for(var s=0;s<g.length;++s)n.push(g[s](a,c,d,f));n=p.value.apply(p.context,n)}return b?
{value:n}:n};case q.AssignmentExpression:return c=this.recurse(a.left,!0,1),e=this.recurse(a.right),function(a,d,f,g){var p=c(a,d,f,g);a=e(a,d,f,g);p.context[p.name]=a;return b?{value:a}:a};case q.ArrayExpression:return g=[],r(a.elements,function(a){g.push(f.recurse(a))}),function(a,c,d,e){for(var f=[],n=0;n<g.length;++n)f.push(g[n](a,c,d,e));return b?{value:f}:f};case q.ObjectExpression:return g=[],r(a.properties,function(a){a.computed?g.push({key:f.recurse(a.key),computed:!0,value:f.recurse(a.value)}):
g.push({key:a.key.type===q.Identifier?a.key.name:""+a.key.value,computed:!1,value:f.recurse(a.value)})}),function(a,c,d,e){for(var f={},n=0;n<g.length;++n)g[n].computed?f[g[n].key(a,c,d,e)]=g[n].value(a,c,d,e):f[g[n].key]=g[n].value(a,c,d,e);return b?{value:f}:f};case q.ThisExpression:return function(a){return b?{value:a}:a};case q.LocalsExpression:return function(a,c){return b?{value:c}:c};case q.NGValueParameter:return function(a,c,d){return b?{value:d}:d}}},"unary+":function(a,b){return function(d,
c,e,f){d=a(d,c,e,f);d=w(d)?+d:0;return b?{value:d}:d}},"unary-":function(a,b){return function(d,c,e,f){d=a(d,c,e,f);d=w(d)?-d:-0;return b?{value:d}:d}},"unary!":function(a,b){return function(d,c,e,f){d=!a(d,c,e,f);return b?{value:d}:d}},"binary+":function(a,b,d){return function(c,e,f,g){var k=a(c,e,f,g);c=b(c,e,f,g);k=Gd(k,c);return d?{value:k}:k}},"binary-":function(a,b,d){return function(c,e,f,g){var k=a(c,e,f,g);c=b(c,e,f,g);k=(w(k)?k:0)-(w(c)?c:0);return d?{value:k}:k}},"binary*":function(a,b,
d){return function(c,e,f,g){c=a(c,e,f,g)*b(c,e,f,g);return d?{value:c}:c}},"binary/":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)/b(c,e,f,g);return d?{value:c}:c}},"binary%":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)%b(c,e,f,g);return d?{value:c}:c}},"binary===":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)===b(c,e,f,g);return d?{value:c}:c}},"binary!==":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)!==b(c,e,f,g);return d?{value:c}:c}},"binary==":function(a,b,d){return function(c,
e,f,g){c=a(c,e,f,g)==b(c,e,f,g);return d?{value:c}:c}},"binary!=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)!=b(c,e,f,g);return d?{value:c}:c}},"binary<":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)<b(c,e,f,g);return d?{value:c}:c}},"binary>":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)>b(c,e,f,g);return d?{value:c}:c}},"binary<=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)<=b(c,e,f,g);return d?{value:c}:c}},"binary>=":function(a,b,d){return function(c,e,f,g){c=
a(c,e,f,g)>=b(c,e,f,g);return d?{value:c}:c}},"binary&&":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)&&b(c,e,f,g);return d?{value:c}:c}},"binary||":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)||b(c,e,f,g);return d?{value:c}:c}},"ternary?:":function(a,b,d,c){return function(e,f,g,k){e=a(e,f,g,k)?b(e,f,g,k):d(e,f,g,k);return c?{value:e}:e}},value:function(a,b){return function(){return b?{context:void 0,name:void 0,value:a}:a}},identifier:function(a,b,d){return function(c,e,f,g){c=
e&&a in e?e:c;d&&1!==d&&c&&null==c[a]&&(c[a]={});e=c?c[a]:void 0;return b?{context:c,name:a,value:e}:e}},computedMember:function(a,b,d,c){return function(e,f,g,k){var h=a(e,f,g,k),l,m;null!=h&&(l=b(e,f,g,k),l+="",c&&1!==c&&h&&!h[l]&&(h[l]={}),m=h[l]);return d?{context:h,name:l,value:m}:m}},nonComputedMember:function(a,b,d,c){return function(e,f,g,k){e=a(e,f,g,k);c&&1!==c&&e&&null==e[b]&&(e[b]={});f=null!=e?e[b]:void 0;return d?{context:e,name:b,value:f}:f}},inputs:function(a,b){return function(d,
c,e,f){return f?f[b]:a(d,c,e)}}};Nb.prototype={constructor:Nb,parse:function(a){a=this.getAst(a);var b=this.astCompiler.compile(a.ast),d=a.ast;b.literal=0===d.body.length||1===d.body.length&&(d.body[0].expression.type===q.Literal||d.body[0].expression.type===q.ArrayExpression||d.body[0].expression.type===q.ObjectExpression);b.constant=a.ast.constant;b.oneTime=a.oneTime;return b},getAst:function(a){var b=!1;a=a.trim();":"===a.charAt(0)&&":"===a.charAt(1)&&(b=!0,a=a.substring(2));return{ast:this.ast.ast(a),
oneTime:b}}};var Ea=F("$sce"),W={HTML:"html",CSS:"css",MEDIA_URL:"mediaUrl",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Dc=/_([a-z])/g,Zg=F("$templateRequest"),$g=F("$timeout"),aa=z.document.createElement("a"),Qd=ga(z.location.href),Na;aa.href="http://[::1]";var ah="[::1]"===aa.hostname;Rd.$inject=["$document"];fd.$inject=["$provide"];var Yd=22,Xd=".",Fc="0";Sd.$inject=["$locale"];Ud.$inject=["$locale"];var lh={yyyy:ea("FullYear",4,0,!1,!0),yy:ea("FullYear",2,0,!0,!0),y:ea("FullYear",1,0,!1,!0),
MMMM:lb("Month"),MMM:lb("Month",!0),MM:ea("Month",2,1),M:ea("Month",1,1),LLLL:lb("Month",!1,!0),dd:ea("Date",2),d:ea("Date",1),HH:ea("Hours",2),H:ea("Hours",1),hh:ea("Hours",2,-12),h:ea("Hours",1,-12),mm:ea("Minutes",2),m:ea("Minutes",1),ss:ea("Seconds",2),s:ea("Seconds",1),sss:ea("Milliseconds",3),EEEE:lb("Day"),EEE:lb("Day",!0),a:function(a,b){return 12>a.getHours()?b.AMPMS[0]:b.AMPMS[1]},Z:function(a,b,d){a=-1*d;return a=(0<=a?"+":"")+(Pb(Math[0<a?"floor":"ceil"](a/60),2)+Pb(Math.abs(a%60),2))},
ww:$d(2),w:$d(1),G:Gc,GG:Gc,GGG:Gc,GGGG:function(a,b){return 0>=a.getFullYear()?b.ERANAMES[0]:b.ERANAMES[1]}},kh=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,jh=/^-?\d+$/;Td.$inject=["$locale"];var eh=ia(K),fh=ia(vb);Vd.$inject=["$parse"];var Re=ia({restrict:"E",compile:function(a,b){if(!b.href&&!b.xlinkHref)return function(a,b){if("a"===b[0].nodeName.toLowerCase()){var e="[object SVGAnimatedString]"===la.call(b.prop("href"))?"xlink:href":"href";
b.on("click",function(a){b.attr(e)||a.preventDefault()})}}}}),wb={};r(Hb,function(a,b){function d(a,d,e){a.$watch(e[c],function(a){e.$set(b,!!a)})}if("multiple"!==a){var c=xa("ng-"+b),e=d;"checked"===a&&(e=function(a,b,e){e.ngModel!==e[c]&&d(a,b,e)});wb[c]=function(){return{restrict:"A",priority:100,link:e}}}});r(vd,function(a,b){wb[b]=function(){return{priority:100,link:function(a,c,e){if("ngPattern"===b&&"/"===e.ngPattern.charAt(0)&&(c=e.ngPattern.match(ke))){e.$set("ngPattern",new RegExp(c[1],
c[2]));return}a.$watch(e[b],function(a){e.$set(b,a)})}}}});r(["src","srcset","href"],function(a){var b=xa("ng-"+a);wb[b]=["$sce",function(d){return{priority:99,link:function(c,e,f){var g=a,k=a;"href"===a&&"[object SVGAnimatedString]"===la.call(e.prop("href"))&&(k="xlinkHref",f.$attr[k]="xlink:href",g=null);f.$set(b,d.getTrustedMediaUrl(f[b]));f.$observe(b,function(b){b?(f.$set(k,b),wa&&g&&e.prop(g,f[k])):"href"===a&&f.$set(k,null)})}}}]});var mb={$addControl:E,$getControls:ia([]),$$renameControl:function(a,
b){a.$name=b},$removeControl:E,$setValidity:E,$setDirty:E,$setPristine:E,$setSubmitted:E,$$setSubmitted:E};Qb.$inject=["$element","$attrs","$scope","$animate","$interpolate"];Qb.prototype={$rollbackViewValue:function(){r(this.$$controls,function(a){a.$rollbackViewValue()})},$commitViewValue:function(){r(this.$$controls,function(a){a.$commitViewValue()})},$addControl:function(a){Ja(a.$name,"input");this.$$controls.push(a);a.$name&&(this[a.$name]=a);a.$$parentForm=this},$getControls:function(){return ja(this.$$controls)},
$$renameControl:function(a,b){var d=a.$name;this[d]===a&&delete this[d];this[b]=a;a.$name=b},$removeControl:function(a){a.$name&&this[a.$name]===a&&delete this[a.$name];r(this.$pending,function(b,d){this.$setValidity(d,null,a)},this);r(this.$error,function(b,d){this.$setValidity(d,null,a)},this);r(this.$$success,function(b,d){this.$setValidity(d,null,a)},this);cb(this.$$controls,a);a.$$parentForm=mb},$setDirty:function(){this.$$animate.removeClass(this.$$element,Za);this.$$animate.addClass(this.$$element,
Wb);this.$dirty=!0;this.$pristine=!1;this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Za,Wb+" ng-submitted");this.$dirty=!1;this.$pristine=!0;this.$submitted=!1;r(this.$$controls,function(a){a.$setPristine()})},$setUntouched:function(){r(this.$$controls,function(a){a.$setUntouched()})},$setSubmitted:function(){for(var a=this;a.$$parentForm&&a.$$parentForm!==mb;)a=a.$$parentForm;a.$$setSubmitted()},$$setSubmitted:function(){this.$$animate.addClass(this.$$element,
"ng-submitted");this.$submitted=!0;r(this.$$controls,function(a){a.$$setSubmitted&&a.$$setSubmitted()})}};ce({clazz:Qb,set:function(a,b,d){var c=a[b];c?-1===c.indexOf(d)&&c.push(d):a[b]=[d]},unset:function(a,b,d){var c=a[b];c&&(cb(c,d),0===c.length&&delete a[b])}});var oe=function(a){return["$timeout","$parse",function(b,d){function c(a){return""===a?d('this[""]').assign:d(a).assign||E}return{name:"form",restrict:a?"EAC":"E",require:["form","^^?form"],controller:Qb,compile:function(d,f){d.addClass(Za).addClass(nb);
var g=f.name?"name":a&&f.ngForm?"ngForm":!1;return{pre:function(a,d,e,f){var p=f[0];if(!("action"in e)){var n=function(b){a.$apply(function(){p.$commitViewValue();p.$setSubmitted()});b.preventDefault()};d[0].addEventListener("submit",n);d.on("$destroy",function(){b(function(){d[0].removeEventListener("submit",n)},0,!1)})}(f[1]||p.$$parentForm).$addControl(p);var s=g?c(p.$name):E;g&&(s(a,p),e.$observe(g,function(b){p.$name!==b&&(s(a,void 0),p.$$parentForm.$$renameControl(p,b),s=c(p.$name),s(a,p))}));
d.on("$destroy",function(){p.$$parentForm.$removeControl(p);s(a,void 0);S(p,mb)})}}}}}]},Se=oe(),df=oe(!0),mh=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,xh=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,yh=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,
nh=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,pe=/^(\d{4,})-(\d{2})-(\d{2})$/,qe=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Oc=/^(\d{4,})-W(\d\d)$/,re=/^(\d{4,})-(\d\d)$/,se=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ee=T();r(["date","datetime-local","month","time","week"],function(a){ee[a]=!0});var te={text:function(a,b,d,c,e,f){Sa(a,b,d,c,e,f);Ic(c)},date:ob("date",pe,Rb(pe,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":ob("datetimelocal",qe,Rb(qe,"yyyy MM dd HH mm ss sss".split(" ")),
"yyyy-MM-ddTHH:mm:ss.sss"),time:ob("time",se,Rb(se,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:ob("week",Oc,function(a,b){if(ha(a))return a;if(C(a)){Oc.lastIndex=0;var d=Oc.exec(a);if(d){var c=+d[1],e=+d[2],f=d=0,g=0,k=0,h=Zd(c),e=7*(e-1);b&&(d=b.getHours(),f=b.getMinutes(),g=b.getSeconds(),k=b.getMilliseconds());return new Date(c,0,h.getDate()+e,d,f,g,k)}}return NaN},"yyyy-Www"),month:ob("month",re,Rb(re,["yyyy","MM"]),"yyyy-MM"),number:function(a,b,d,c,e,f,g,k){Jc(a,b,d,c,"number");fe(c);Sa(a,
b,d,c,e,f);var h;if(w(d.min)||d.ngMin){var l=d.min||k(d.ngMin)(a);h=na(l);c.$validators.min=function(a,b){return c.$isEmpty(b)||A(h)||b>=h};d.$observe("min",function(a){a!==l&&(h=na(a),l=a,c.$validate())})}if(w(d.max)||d.ngMax){var m=d.max||k(d.ngMax)(a),p=na(m);c.$validators.max=function(a,b){return c.$isEmpty(b)||A(p)||b<=p};d.$observe("max",function(a){a!==m&&(p=na(a),m=a,c.$validate())})}if(w(d.step)||d.ngStep){var n=d.step||k(d.ngStep)(a),s=na(n);c.$validators.step=function(a,b){return c.$isEmpty(b)||
A(s)||ge(b,h||0,s)};d.$observe("step",function(a){a!==n&&(s=na(a),n=a,c.$validate())})}},url:function(a,b,d,c,e,f){Sa(a,b,d,c,e,f);Ic(c);c.$validators.url=function(a,b){var d=a||b;return c.$isEmpty(d)||xh.test(d)}},email:function(a,b,d,c,e,f){Sa(a,b,d,c,e,f);Ic(c);c.$validators.email=function(a,b){var d=a||b;return c.$isEmpty(d)||yh.test(d)}},radio:function(a,b,d,c){var e=!d.ngTrim||"false"!==V(d.ngTrim);A(d.name)&&b.attr("name",++qb);b.on("change",function(a){var g;b[0].checked&&(g=d.value,e&&(g=
V(g)),c.$setViewValue(g,a&&a.type))});c.$render=function(){var a=d.value;e&&(a=V(a));b[0].checked=a===c.$viewValue};d.$observe("value",c.$render)},range:function(a,b,d,c,e,f){function g(a,c){b.attr(a,d[a]);var e=d[a];d.$observe(a,function(a){a!==e&&(e=a,c(a))})}function k(a){p=na(a);Y(c.$modelValue)||(m?(a=b.val(),p>a&&(a=p,b.val(a)),c.$setViewValue(a)):c.$validate())}function h(a){n=na(a);Y(c.$modelValue)||(m?(a=b.val(),n<a&&(b.val(n),a=n<p?p:n),c.$setViewValue(a)):c.$validate())}function l(a){s=
na(a);Y(c.$modelValue)||(m?c.$viewValue!==b.val()&&c.$setViewValue(b.val()):c.$validate())}Jc(a,b,d,c,"range");fe(c);Sa(a,b,d,c,e,f);var m=c.$$hasNativeValidators&&"range"===b[0].type,p=m?0:void 0,n=m?100:void 0,s=m?1:void 0,r=b[0].validity;a=w(d.min);e=w(d.max);f=w(d.step);var q=c.$render;c.$render=m&&w(r.rangeUnderflow)&&w(r.rangeOverflow)?function(){q();c.$setViewValue(b.val())}:q;a&&(p=na(d.min),c.$validators.min=m?function(){return!0}:function(a,b){return c.$isEmpty(b)||A(p)||b>=p},g("min",k));
e&&(n=na(d.max),c.$validators.max=m?function(){return!0}:function(a,b){return c.$isEmpty(b)||A(n)||b<=n},g("max",h));f&&(s=na(d.step),c.$validators.step=m?function(){return!r.stepMismatch}:function(a,b){return c.$isEmpty(b)||A(s)||ge(b,p||0,s)},g("step",l))},checkbox:function(a,b,d,c,e,f,g,k){var h=he(k,a,"ngTrueValue",d.ngTrueValue,!0),l=he(k,a,"ngFalseValue",d.ngFalseValue,!1);b.on("change",function(a){c.$setViewValue(b[0].checked,a&&a.type)});c.$render=function(){b[0].checked=c.$viewValue};c.$isEmpty=
function(a){return!1===a};c.$formatters.push(function(a){return va(a,h)});c.$parsers.push(function(a){return a?h:l})},hidden:E,button:E,submit:E,reset:E,file:E},$c=["$browser","$sniffer","$filter","$parse",function(a,b,d,c){return{restrict:"E",require:["?ngModel"],link:{pre:function(e,f,g,k){k[0]&&(te[K(g.type)]||te.text)(e,f,g,k[0],b,a,d,c)}}}}],Af=function(){var a={configurable:!0,enumerable:!1,get:function(){return this.getAttribute("value")||""},set:function(a){this.setAttribute("value",a)}};
return{restrict:"E",priority:200,compile:function(b,d){if("hidden"===K(d.type))return{pre:function(b,d,f,g){b=d[0];b.parentNode&&b.parentNode.insertBefore(b,b.nextSibling);Object.defineProperty&&Object.defineProperty(b,"value",a)}}}}},zh=/^(true|false|\d+)$/,xf=function(){function a(a,d,c){var e=w(c)?c:9===wa?"":null;a.prop("value",e);d.$set("value",c)}return{restrict:"A",priority:100,compile:function(b,d){return zh.test(d.ngValue)?function(b,d,f){b=b.$eval(f.ngValue);a(d,f,b)}:function(b,d,f){b.$watch(f.ngValue,
function(b){a(d,f,b)})}}}},We=["$compile",function(a){return{restrict:"AC",compile:function(b){a.$$addBindingClass(b);return function(b,c,e){a.$$addBindingInfo(c,e.ngBind);c=c[0];b.$watch(e.ngBind,function(a){c.textContent=jc(a)})}}}}],Ye=["$interpolate","$compile",function(a,b){return{compile:function(d){b.$$addBindingClass(d);return function(c,d,f){c=a(d.attr(f.$attr.ngBindTemplate));b.$$addBindingInfo(d,c.expressions);d=d[0];f.$observe("ngBindTemplate",function(a){d.textContent=A(a)?"":a})}}}}],
Xe=["$sce","$parse","$compile",function(a,b,d){return{restrict:"A",compile:function(c,e){var f=b(e.ngBindHtml),g=b(e.ngBindHtml,function(b){return a.valueOf(b)});d.$$addBindingClass(c);return function(b,c,e){d.$$addBindingInfo(c,e.ngBindHtml);b.$watch(g,function(){var d=f(b);c.html(a.getTrustedHtml(d)||"")})}}}}],wf=ia({restrict:"A",require:"ngModel",link:function(a,b,d,c){c.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),Ze=Lc("",!0),af=Lc("Odd",0),$e=Lc("Even",1),bf=Ra({compile:function(a,
b){b.$set("ngCloak",void 0);a.removeClass("ng-cloak")}}),cf=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],ed={},Ah={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var b=xa("ng-"+a);ed[b]=["$parse","$rootScope","$exceptionHandler",function(d,c,e){return sd(d,c,e,b,a,Ah[a])}]});var ff=["$animate","$compile",function(a,b){return{multiElement:!0,
transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(d,c,e,f,g){var k,h,l;d.$watch(e.ngIf,function(d){d?h||g(function(d,f){h=f;d[d.length++]=b.$$createComment("end ngIf",e.ngIf);k={clone:d};a.enter(d,c.parent(),c)}):(l&&(l.remove(),l=null),h&&(h.$destroy(),h=null),k&&(l=ub(k.clone),a.leave(l).done(function(a){!1!==a&&(l=null)}),k=null))})}}}],gf=["$templateRequest","$anchorScroll","$animate",function(a,b,d){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",
controller:ca.noop,compile:function(c,e){var f=e.ngInclude||e.src,g=e.onload||"",k=e.autoscroll;return function(c,e,m,p,n){var r=0,q,t,x,v=function(){t&&(t.remove(),t=null);q&&(q.$destroy(),q=null);x&&(d.leave(x).done(function(a){!1!==a&&(t=null)}),t=x,x=null)};c.$watch(f,function(f){var m=function(a){!1===a||!w(k)||k&&!c.$eval(k)||b()},t=++r;f?(a(f,!0).then(function(a){if(!c.$$destroyed&&t===r){var b=c.$new();p.template=a;a=n(b,function(a){v();d.enter(a,null,e).done(m)});q=b;x=a;q.$emit("$includeContentLoaded",
f);c.$eval(g)}},function(){c.$$destroyed||t!==r||(v(),c.$emit("$includeContentError",f))}),c.$emit("$includeContentRequested",f)):(v(),p.template=null)})}}}}],zf=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(b,d,c,e){la.call(d[0]).match(/SVG/)?(d.empty(),a(gd(e.template,z.document).childNodes)(b,function(a){d.append(a)},{futureParentElement:d})):(d.html(e.template),a(d.contents())(b))}}}],hf=Ra({priority:450,compile:function(){return{pre:function(a,
b,d){a.$eval(d.ngInit)}}}}),vf=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(a,b,d,c){var e=d.ngList||", ",f="false"!==d.ngTrim,g=f?V(e):e;c.$parsers.push(function(a){if(!A(a)){var b=[];a&&r(a.split(g),function(a){a&&b.push(f?V(a):a)});return b}});c.$formatters.push(function(a){if(H(a))return a.join(e)});c.$isEmpty=function(a){return!a||!a.length}}}},nb="ng-valid",be="ng-invalid",Za="ng-pristine",Wb="ng-dirty",pb=F("ngModel");Sb.$inject="$scope $exceptionHandler $attrs $element $parse $animate $timeout $q $interpolate".split(" ");
Sb.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var a=this.$$parse(this.$$attr.ngModel+"()"),b=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(b){var c=this.$$parsedNgModel(b);B(c)&&(c=a(b));return c};this.$$ngModelSet=function(a,c){B(this.$$parsedNgModel(a))?b(a,{$$$p:c}):this.$$parsedNgModelAssign(a,c)}}else if(!this.$$parsedNgModel.assign)throw pb("nonassign",this.$$attr.ngModel,Aa(this.$$element));},$render:E,$isEmpty:function(a){return A(a)||
""===a||null===a||a!==a},$$updateEmptyClasses:function(a){this.$isEmpty(a)?(this.$$animate.removeClass(this.$$element,"ng-not-empty"),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,"ng-not-empty"))},$setPristine:function(){this.$dirty=!1;this.$pristine=!0;this.$$animate.removeClass(this.$$element,Wb);this.$$animate.addClass(this.$$element,Za)},$setDirty:function(){this.$dirty=!0;this.$pristine=!1;this.$$animate.removeClass(this.$$element,
Za);this.$$animate.addClass(this.$$element,Wb);this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1;this.$untouched=!0;this.$$animate.setClass(this.$$element,"ng-untouched","ng-touched")},$setTouched:function(){this.$touched=!0;this.$untouched=!1;this.$$animate.setClass(this.$$element,"ng-touched","ng-untouched")},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce);this.$viewValue=this.$$lastCommittedViewValue;this.$render()},$validate:function(){if(!Y(this.$modelValue)){var a=
this.$$lastCommittedViewValue,b=this.$$rawModelValue,d=this.$valid,c=this.$modelValue,e=this.$options.getOption("allowInvalid"),f=this;this.$$runValidators(b,a,function(a){e||d===a||(f.$modelValue=a?b:void 0,f.$modelValue!==c&&f.$$writeModelToScope())})}},$$runValidators:function(a,b,d){function c(){var c=!0;r(h.$validators,function(d,e){var g=Boolean(d(a,b));c=c&&g;f(e,g)});return c?!0:(r(h.$asyncValidators,function(a,b){f(b,null)}),!1)}function e(){var c=[],d=!0;r(h.$asyncValidators,function(e,
g){var h=e(a,b);if(!h||!B(h.then))throw pb("nopromise",h);f(g,void 0);c.push(h.then(function(){f(g,!0)},function(){d=!1;f(g,!1)}))});c.length?h.$$q.all(c).then(function(){g(d)},E):g(!0)}function f(a,b){k===h.$$currentValidationRunId&&h.$setValidity(a,b)}function g(a){k===h.$$currentValidationRunId&&d(a)}this.$$currentValidationRunId++;var k=this.$$currentValidationRunId,h=this;(function(){var a=h.$$parserName;if(A(h.$$parserValid))f(a,null);else return h.$$parserValid||(r(h.$validators,function(a,
b){f(b,null)}),r(h.$asyncValidators,function(a,b){f(b,null)})),f(a,h.$$parserValid),h.$$parserValid;return!0})()?c()?e():g(!1):g(!1)},$commitViewValue:function(){var a=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce);if(this.$$lastCommittedViewValue!==a||""===a&&this.$$hasNativeValidators)this.$$updateEmptyClasses(a),this.$$lastCommittedViewValue=a,this.$pristine&&this.$setDirty(),this.$$parseAndValidate()},$$parseAndValidate:function(){var a=this.$$lastCommittedViewValue,b=this;this.$$parserValid=
A(a)?void 0:!0;this.$setValidity(this.$$parserName,null);this.$$parserName="parse";if(this.$$parserValid)for(var d=0;d<this.$parsers.length;d++)if(a=this.$parsers[d](a),A(a)){this.$$parserValid=!1;break}Y(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var c=this.$modelValue,e=this.$options.getOption("allowInvalid");this.$$rawModelValue=a;e&&(this.$modelValue=a,b.$modelValue!==c&&b.$$writeModelToScope());this.$$runValidators(a,this.$$lastCommittedViewValue,function(d){e||(b.$modelValue=
d?a:void 0,b.$modelValue!==c&&b.$$writeModelToScope())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue);r(this.$viewChangeListeners,function(a){try{a()}catch(b){this.$$exceptionHandler(b)}},this)},$setViewValue:function(a,b){this.$viewValue=a;this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(b)},$$debounceViewValueCommit:function(a){var b=this.$options.getOption("debounce");X(b[a])?b=b[a]:X(b["default"])&&-1===this.$options.getOption("updateOn").indexOf(a)?
b=b["default"]:X(b["*"])&&(b=b["*"]);this.$$timeout.cancel(this.$$pendingDebounce);var d=this;0<b?this.$$pendingDebounce=this.$$timeout(function(){d.$commitViewValue()},b):this.$$rootScope.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){d.$commitViewValue()})},$overrideModelOptions:function(a){this.$options=this.$options.createChild(a);this.$$setUpdateOnEvents()},$processModelValue:function(){var a=this.$$format();this.$viewValue!==a&&(this.$$updateEmptyClasses(a),this.$viewValue=this.$$lastCommittedViewValue=
a,this.$render(),this.$$runValidators(this.$modelValue,this.$viewValue,E))},$$format:function(){for(var a=this.$formatters,b=a.length,d=this.$modelValue;b--;)d=a[b](d);return d},$$setModelValue:function(a){this.$modelValue=this.$$rawModelValue=a;this.$$parserValid=void 0;this.$processModelValue()},$$setUpdateOnEvents:function(){this.$$updateEvents&&this.$$element.off(this.$$updateEvents,this.$$updateEventHandler);if(this.$$updateEvents=this.$options.getOption("updateOn"))this.$$element.on(this.$$updateEvents,
this.$$updateEventHandler)},$$updateEventHandler:function(a){this.$$debounceViewValueCommit(a&&a.type)}};ce({clazz:Sb,set:function(a,b){a[b]=!0},unset:function(a,b){delete a[b]}});var uf=["$rootScope",function(a){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Sb,priority:1,compile:function(b){b.addClass(Za).addClass("ng-untouched").addClass(nb);return{pre:function(a,b,e,f){var g=f[0];b=f[1]||g.$$parentForm;if(f=f[2])g.$options=f.$options;g.$$initGetterSetters();b.$addControl(g);
e.$observe("name",function(a){g.$name!==a&&g.$$parentForm.$$renameControl(g,a)});a.$on("$destroy",function(){g.$$parentForm.$removeControl(g)})},post:function(b,c,e,f){function g(){k.$setTouched()}var k=f[0];k.$$setUpdateOnEvents();c.on("blur",function(){k.$touched||(a.$$phase?b.$evalAsync(g):b.$apply(g))})}}}}}],Tb,Bh=/(\s+|^)default(\s+|$)/;Mc.prototype={getOption:function(a){return this.$$options[a]},createChild:function(a){var b=!1;a=S({},a);r(a,function(d,c){"$inherit"===d?"*"===c?b=!0:(a[c]=
this.$$options[c],"updateOn"===c&&(a.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===c&&(a.updateOnDefault=!1,a[c]=V(d.replace(Bh,function(){a.updateOnDefault=!0;return" "})))},this);b&&(delete a["*"],ie(a,this.$$options));ie(a,Tb.$$options);return new Mc(a)}};Tb=new Mc({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var yf=function(){function a(a,d){this.$$attrs=a;this.$$scope=d}a.$inject=["$attrs","$scope"];a.prototype={$onInit:function(){var a=
this.parentCtrl?this.parentCtrl.$options:Tb,d=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=a.createChild(d)}};return{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:a}},jf=Ra({terminal:!0,priority:1E3}),Ch=F("ngOptions"),Dh=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
sf=["$compile","$document","$parse",function(a,b,d){function c(a,b,c){function e(a,b,c,d,f){this.selectValue=a;this.viewValue=b;this.label=c;this.group=d;this.disabled=f}function f(a){var b;if(!r&&za(a))b=a;else{b=[];for(var c in a)a.hasOwnProperty(c)&&"$"!==c.charAt(0)&&b.push(c)}return b}var p=a.match(Dh);if(!p)throw Ch("iexp",a,Aa(b));var n=p[5]||p[7],r=p[6];a=/ as /.test(p[0])&&p[1];var q=p[9];b=d(p[2]?p[1]:n);var t=a&&d(a)||b,w=q&&d(q),v=q?function(a,b){return w(c,b)}:function(a){return La(a)},
x=function(a,b){return v(a,B(a,b))},A=d(p[2]||p[1]),y=d(p[3]||""),J=d(p[4]||""),I=d(p[8]),z={},B=r?function(a,b){z[r]=b;z[n]=a;return z}:function(a){z[n]=a;return z};return{trackBy:q,getTrackByValue:x,getWatchables:d(I,function(a){var b=[];a=a||[];for(var d=f(a),e=d.length,g=0;g<e;g++){var k=a===d?g:d[g],l=a[k],k=B(l,k),l=v(l,k);b.push(l);if(p[2]||p[1])l=A(c,k),b.push(l);p[4]&&(k=J(c,k),b.push(k))}return b}),getOptions:function(){for(var a=[],b={},d=I(c)||[],g=f(d),k=g.length,n=0;n<k;n++){var p=d===
g?n:g[n],r=B(d[p],p),s=t(c,r),p=v(s,r),w=A(c,r),z=y(c,r),r=J(c,r),s=new e(p,s,w,z,r);a.push(s);b[p]=s}return{items:a,selectValueMap:b,getOptionFromViewValue:function(a){return b[x(a)]},getViewValueFromOption:function(a){return q?Ia(a.viewValue):a.viewValue}}}}}var e=z.document.createElement("option"),f=z.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(a,b,c,d){d[0].registerOption=E},post:function(d,k,h,l){function m(a){var b=(a=v.getOptionFromViewValue(a))&&
a.element;b&&!b.selected&&(b.selected=!0);return a}function p(a,b){a.element=b;b.disabled=a.disabled;a.label!==b.label&&(b.label=a.label,b.textContent=a.label);b.value=a.selectValue}var n=l[0],q=l[1],A=h.multiple;l=0;for(var t=k.children(),z=t.length;l<z;l++)if(""===t[l].value){n.hasEmptyOption=!0;n.emptyOption=t.eq(l);break}k.empty();l=!!n.emptyOption;x(e.cloneNode(!1)).val("?");var v,B=c(h.ngOptions,k,d),C=b[0].createDocumentFragment();n.generateUnknownOptionValue=function(a){return"?"};A?(n.writeValue=
function(a){if(v){var b=a&&a.map(m)||[];v.items.forEach(function(a){a.element.selected&&-1===Array.prototype.indexOf.call(b,a)&&(a.element.selected=!1)})}},n.readValue=function(){var a=k.val()||[],b=[];r(a,function(a){(a=v.selectValueMap[a])&&!a.disabled&&b.push(v.getViewValueFromOption(a))});return b},B.trackBy&&d.$watchCollection(function(){if(H(q.$viewValue))return q.$viewValue.map(function(a){return B.getTrackByValue(a)})},function(){q.$render()})):(n.writeValue=function(a){if(v){var b=k[0].options[k[0].selectedIndex],
c=v.getOptionFromViewValue(a);b&&b.removeAttribute("selected");c?(k[0].value!==c.selectValue&&(n.removeUnknownOption(),k[0].value=c.selectValue,c.element.selected=!0),c.element.setAttribute("selected","selected")):n.selectUnknownOrEmptyOption(a)}},n.readValue=function(){var a=v.selectValueMap[k.val()];return a&&!a.disabled?(n.unselectEmptyOption(),n.removeUnknownOption(),v.getViewValueFromOption(a)):null},B.trackBy&&d.$watch(function(){return B.getTrackByValue(q.$viewValue)},function(){q.$render()}));
l&&(a(n.emptyOption)(d),k.prepend(n.emptyOption),8===n.emptyOption[0].nodeType?(n.hasEmptyOption=!1,n.registerOption=function(a,b){""===b.val()&&(n.hasEmptyOption=!0,n.emptyOption=b,n.emptyOption.removeClass("ng-scope"),q.$render(),b.on("$destroy",function(){var a=n.$isEmptyOptionSelected();n.hasEmptyOption=!1;n.emptyOption=void 0;a&&q.$render()}))}):n.emptyOption.removeClass("ng-scope"));d.$watchCollection(B.getWatchables,function(){var a=v&&n.readValue();if(v)for(var b=v.items.length-1;0<=b;b--){var c=
v.items[b];w(c.group)?Gb(c.element.parentNode):Gb(c.element)}v=B.getOptions();var d={};v.items.forEach(function(a){var b;if(w(a.group)){b=d[a.group];b||(b=f.cloneNode(!1),C.appendChild(b),b.label=null===a.group?"null":a.group,d[a.group]=b);var c=e.cloneNode(!1);b.appendChild(c);p(a,c)}else b=e.cloneNode(!1),C.appendChild(b),p(a,b)});k[0].appendChild(C);q.$render();q.$isEmpty(a)||(b=n.readValue(),(B.trackBy||A?va(a,b):a===b)||(q.$setViewValue(b),q.$render()))})}}}}],kf=["$locale","$interpolate","$log",
function(a,b,d){var c=/{}/g,e=/^when(Minus)?(.+)$/;return{link:function(f,g,k){function h(a){g.text(a||"")}var l=k.count,m=k.$attr.when&&g.attr(k.$attr.when),p=k.offset||0,n=f.$eval(m)||{},q={},w=b.startSymbol(),t=b.endSymbol(),x=w+l+"-"+p+t,v=ca.noop,z;r(k,function(a,b){var c=e.exec(b);c&&(c=(c[1]?"-":"")+K(c[2]),n[c]=g.attr(k.$attr[b]))});r(n,function(a,d){q[d]=b(a.replace(c,x))});f.$watch(l,function(b){var c=parseFloat(b),e=Y(c);e||c in n||(c=a.pluralCat(c-p));c===z||e&&Y(z)||(v(),e=q[c],A(e)?
(null!=b&&d.debug("ngPluralize: no rule defined for '"+c+"' in "+m),v=E,h()):v=f.$watch(e,h),z=c)})}}}],ue=F("ngRef"),lf=["$parse",function(a){return{priority:-1,restrict:"A",compile:function(b,d){var c=xa(ua(b)),e=a(d.ngRef),f=e.assign||function(){throw ue("nonassign",d.ngRef);};return function(a,b,h){var l;if(h.hasOwnProperty("ngRefRead"))if("$element"===h.ngRefRead)l=b;else{if(l=b.data("$"+h.ngRefRead+"Controller"),!l)throw ue("noctrl",h.ngRefRead,d.ngRef);}else l=b.data("$"+c+"Controller");l=
l||b;f(a,l);b.on("$destroy",function(){e(a)===l&&f(a,null)})}}}}],mf=["$parse","$animate","$compile",function(a,b,d){var c=F("ngRepeat"),e=function(a,b,c,d,e,f,g){a[c]=d;e&&(a[e]=f);a.$index=b;a.$first=0===b;a.$last=b===g-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(b&1))},f=function(a,b,c){return La(c)},g=function(a,b){return b};return{restrict:"A",multiElement:!0,transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,compile:function(k,h){var l=h.ngRepeat,m=d.$$createComment("end ngRepeat",
l),p=l.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!p)throw c("iexp",l);var n=p[1],q=p[2],w=p[3],t=p[4],p=n.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);if(!p)throw c("iidexp",n);var x=p[3]||p[1],v=p[2];if(w&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(w)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(w)))throw c("badident",w);var A;if(t){var z={$id:La},y=a(t);A=function(a,b,c,d){v&&
(z[v]=b);z[x]=c;z.$index=d;return y(a,z)}}return function(a,d,h,k,n){var p=T();a.$watchCollection(q,function(h){var k,q,t=d[0],s,y=T(),B,C,E,D,H,F,K;w&&(a[w]=h);if(za(h))H=h,q=A||f;else for(K in q=A||g,H=[],h)ta.call(h,K)&&"$"!==K.charAt(0)&&H.push(K);B=H.length;K=Array(B);for(k=0;k<B;k++)if(C=h===H?k:H[k],E=h[C],D=q(a,C,E,k),p[D])F=p[D],delete p[D],y[D]=F,K[k]=F;else{if(y[D])throw r(K,function(a){a&&a.scope&&(p[a.id]=a)}),c("dupes",l,D,E);K[k]={id:D,scope:void 0,clone:void 0};y[D]=!0}z&&(z[x]=void 0);
for(s in p){F=p[s];D=ub(F.clone);b.leave(D);if(D[0].parentNode)for(k=0,q=D.length;k<q;k++)D[k].$$NG_REMOVED=!0;F.scope.$destroy()}for(k=0;k<B;k++)if(C=h===H?k:H[k],E=h[C],F=K[k],F.scope){s=t;do s=s.nextSibling;while(s&&s.$$NG_REMOVED);F.clone[0]!==s&&b.move(ub(F.clone),null,t);t=F.clone[F.clone.length-1];e(F.scope,k,x,E,v,C,B)}else n(function(a,c){F.scope=c;var d=m.cloneNode(!1);a[a.length++]=d;b.enter(a,null,t);t=d;F.clone=a;y[F.id]=F;e(F.scope,k,x,E,v,C,B)});p=y})}}}}],nf=["$animate",function(a){return{restrict:"A",
multiElement:!0,link:function(b,d,c){b.$watch(c.ngShow,function(b){a[b?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],ef=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngHide,function(b){a[b?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],of=Ra(function(a,b,d){a.$watchCollection(d.ngStyle,function(a,d){d&&a!==d&&r(d,function(a,c){b.css(c,"")});a&&b.css(a)})}),pf=["$animate","$compile",function(a,
b){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(d,c,e,f){var g=[],k=[],h=[],l=[],m=function(a,b){return function(c){!1!==c&&a.splice(b,1)}};d.$watch(e.ngSwitch||e.on,function(c){for(var d,e;h.length;)a.cancel(h.pop());d=0;for(e=l.length;d<e;++d){var q=ub(k[d].clone);l[d].$destroy();(h[d]=a.leave(q)).done(m(h,d))}k.length=0;l.length=0;(g=f.cases["!"+c]||f.cases["?"])&&r(g,function(c){c.transclude(function(d,e){l.push(e);var f=c.element;d[d.length++]=b.$$createComment("end ngSwitchWhen");
k.push({clone:d});a.enter(d,f.parent(),f)})})})}}}],qf=Ra({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,b,d,c,e){a=d.ngSwitchWhen.split(d.ngSwitchWhenSeparator).sort().filter(function(a,b,c){return c[b-1]!==a});r(a,function(a){c.cases["!"+a]=c.cases["!"+a]||[];c.cases["!"+a].push({transclude:e,element:b})})}}),rf=Ra({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,b,d,c,e){c.cases["?"]=c.cases["?"]||[];c.cases["?"].push({transclude:e,
element:b})}}),Eh=F("ngTransclude"),tf=["$compile",function(a){return{restrict:"EAC",compile:function(b){var d=a(b.contents());b.empty();return function(a,b,f,g,k){function h(){d(a,function(a){b.append(a)})}if(!k)throw Eh("orphan",Aa(b));f.ngTransclude===f.$attr.ngTransclude&&(f.ngTransclude="");f=f.ngTransclude||f.ngTranscludeSlot;k(function(a,c){var d;if(d=a.length)a:{d=0;for(var f=a.length;d<f;d++){var g=a[d];if(g.nodeType!==Pa||g.nodeValue.trim()){d=!0;break a}}d=void 0}d?b.append(a):(h(),c.$destroy())},
null,f);f&&!k.isSlotFilled(f)&&h()}}}}],Te=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(b,d){"text/ng-template"===d.type&&a.put(d.id,b[0].text)}}}],Fh={$setViewValue:E,$render:E},Gh=["$element","$scope",function(a,b){function d(){g||(g=!0,b.$$postDigest(function(){g=!1;e.ngModelCtrl.$render()}))}function c(a){k||(k=!0,b.$$postDigest(function(){b.$$destroyed||(k=!1,e.ngModelCtrl.$setViewValue(e.readValue()),a&&e.ngModelCtrl.$render())}))}var e=this,f=new Ib;e.selectValueMap=
{};e.ngModelCtrl=Fh;e.multiple=!1;e.unknownOption=x(z.document.createElement("option"));e.hasEmptyOption=!1;e.emptyOption=void 0;e.renderUnknownOption=function(b){b=e.generateUnknownOptionValue(b);e.unknownOption.val(b);a.prepend(e.unknownOption);Oa(e.unknownOption,!0);a.val(b)};e.updateUnknownOption=function(b){b=e.generateUnknownOptionValue(b);e.unknownOption.val(b);Oa(e.unknownOption,!0);a.val(b)};e.generateUnknownOptionValue=function(a){return"? "+La(a)+" ?"};e.removeUnknownOption=function(){e.unknownOption.parent()&&
e.unknownOption.remove()};e.selectEmptyOption=function(){e.emptyOption&&(a.val(""),Oa(e.emptyOption,!0))};e.unselectEmptyOption=function(){e.hasEmptyOption&&Oa(e.emptyOption,!1)};b.$on("$destroy",function(){e.renderUnknownOption=E});e.readValue=function(){var b=a.val(),b=b in e.selectValueMap?e.selectValueMap[b]:b;return e.hasOption(b)?b:null};e.writeValue=function(b){var c=a[0].options[a[0].selectedIndex];c&&Oa(x(c),!1);e.hasOption(b)?(e.removeUnknownOption(),c=La(b),a.val(c in e.selectValueMap?
c:b),Oa(x(a[0].options[a[0].selectedIndex]),!0)):e.selectUnknownOrEmptyOption(b)};e.addOption=function(a,b){if(8!==b[0].nodeType){Ja(a,'"option value"');""===a&&(e.hasEmptyOption=!0,e.emptyOption=b);var c=f.get(a)||0;f.set(a,c+1);d()}};e.removeOption=function(a){var b=f.get(a);b&&(1===b?(f.delete(a),""===a&&(e.hasEmptyOption=!1,e.emptyOption=void 0)):f.set(a,b-1))};e.hasOption=function(a){return!!f.get(a)};e.$hasEmptyOption=function(){return e.hasEmptyOption};e.$isUnknownOptionSelected=function(){return a[0].options[0]===
e.unknownOption[0]};e.$isEmptyOptionSelected=function(){return e.hasEmptyOption&&a[0].options[a[0].selectedIndex]===e.emptyOption[0]};e.selectUnknownOrEmptyOption=function(a){null==a&&e.emptyOption?(e.removeUnknownOption(),e.selectEmptyOption()):e.unknownOption.parent().length?e.updateUnknownOption(a):e.renderUnknownOption(a)};var g=!1,k=!1;e.registerOption=function(a,b,f,g,k){if(f.$attr.ngValue){var q,r;f.$observe("value",function(a){var d,f=b.prop("selected");w(r)&&(e.removeOption(q),delete e.selectValueMap[r],
d=!0);r=La(a);q=a;e.selectValueMap[r]=a;e.addOption(a,b);b.attr("value",r);d&&f&&c()})}else g?f.$observe("value",function(a){e.readValue();var d,f=b.prop("selected");w(q)&&(e.removeOption(q),d=!0);q=a;e.addOption(a,b);d&&f&&c()}):k?a.$watch(k,function(a,d){f.$set("value",a);var g=b.prop("selected");d!==a&&e.removeOption(d);e.addOption(a,b);d&&g&&c()}):e.addOption(f.value,b);f.$observe("disabled",function(a){if("true"===a||a&&b.prop("selected"))e.multiple?c(!0):(e.ngModelCtrl.$setViewValue(null),e.ngModelCtrl.$render())});
b.on("$destroy",function(){var a=e.readValue(),b=f.value;e.removeOption(b);d();(e.multiple&&a&&-1!==a.indexOf(b)||a===b)&&c(!0)})}}],Ue=function(){return{restrict:"E",require:["select","?ngModel"],controller:Gh,priority:1,link:{pre:function(a,b,d,c){var e=c[0],f=c[1];if(f){if(e.ngModelCtrl=f,b.on("change",function(){e.removeUnknownOption();a.$apply(function(){f.$setViewValue(e.readValue())})}),d.multiple){e.multiple=!0;e.readValue=function(){var a=[];r(b.find("option"),function(b){b.selected&&!b.disabled&&
(b=b.value,a.push(b in e.selectValueMap?e.selectValueMap[b]:b))});return a};e.writeValue=function(a){r(b.find("option"),function(b){var c=!!a&&(-1!==Array.prototype.indexOf.call(a,b.value)||-1!==Array.prototype.indexOf.call(a,e.selectValueMap[b.value]));c!==b.selected&&Oa(x(b),c)})};var g,k=NaN;a.$watch(function(){k!==f.$viewValue||va(g,f.$viewValue)||(g=ja(f.$viewValue),f.$render());k=f.$viewValue});f.$isEmpty=function(a){return!a||0===a.length}}}else e.registerOption=E},post:function(a,b,d,c){var e=
c[1];if(e){var f=c[0];e.$render=function(){f.writeValue(e.$viewValue)}}}}}},Ve=["$interpolate",function(a){return{restrict:"E",priority:100,compile:function(b,d){var c,e;w(d.ngValue)||(w(d.value)?c=a(d.value,!0):(e=a(b.text(),!0))||d.$set("value",b.text()));return function(a,b,d){var h=b.parent();(h=h.data("$selectController")||h.parent().data("$selectController"))&&h.registerOption(a,b,d,c,e)}}}}],bd=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(b,d,c,e){if(e){var f=
c.hasOwnProperty("required")||a(c.ngRequired)(b);c.ngRequired||(c.required=!0);e.$validators.required=function(a,b){return!f||!e.$isEmpty(b)};c.$observe("required",function(a){f!==a&&(f=a,e.$validate())})}}}}],ad=["$parse",function(a){return{restrict:"A",require:"?ngModel",compile:function(b,d){var c,e;d.ngPattern&&(c=d.ngPattern,e="/"===d.ngPattern.charAt(0)&&ke.test(d.ngPattern)?function(){return d.ngPattern}:a(d.ngPattern));return function(a,b,d,h){if(h){var l=d.pattern;d.ngPattern?l=e(a):c=d.pattern;
var m=je(l,c,b);d.$observe("pattern",function(a){var d=m;m=je(a,c,b);(d&&d.toString())!==(m&&m.toString())&&h.$validate()});h.$validators.pattern=function(a,b){return h.$isEmpty(b)||A(m)||m.test(b)}}}}}}],dd=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(b,d,c,e){if(e){var f=c.maxlength||a(c.ngMaxlength)(b),g=Ub(f);c.$observe("maxlength",function(a){f!==a&&(g=Ub(a),f=a,e.$validate())});e.$validators.maxlength=function(a,b){return 0>g||e.$isEmpty(b)||b.length<=g}}}}}],cd=
["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(b,d,c,e){if(e){var f=c.minlength||a(c.ngMinlength)(b),g=Ub(f)||-1;c.$observe("minlength",function(a){f!==a&&(g=Ub(a)||-1,f=a,e.$validate())});e.$validators.minlength=function(a,b){return e.$isEmpty(b)||b.length>=g}}}}}];z.angular.bootstrap?z.console&&console.log("WARNING: Tried to load AngularJS more than once."):(Je(),Oe(ca),ca.module("ngLocale",[],["$provide",function(a){function b(a){a+="";var b=a.indexOf(".");return-1==
b?0:a.length-b-1}a.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),
WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-\u00a4",negSuf:"",posPre:"\u00a4",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(a,
c){var e=a|0,f=c;void 0===f&&(f=Math.min(b(a),3));Math.pow(10,f);return 1==e&&0==f?"one":"other"}})}]),x(function(){Ee(z.document,Wc)}))})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend(window.angular.element("<style>").text('@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}'));
//# sourceMappingURL=angular.min.js.map

/*
 AngularJS v1.8.2
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
*/
(function(z,l){'use strict';function q(n){return["$animate",function(u){return{restrict:"AE",transclude:"element",priority:1,terminal:!0,require:"^^ngMessages",link:function(m,f,a,e,r){var b,h,s;if(!n){b=f[0];s=a.ngMessage||a.when;a=a.ngMessageExp||a.whenExp;var k=function(c){h=c?v(c)?c:c.split(/[\s,]+/):null;e.reRender()};a?(k(m.$eval(a)),m.$watchCollection(a,k)):k(s)}var g,t;e.register(b,t={test:function(c){var b=h;c=b?v(b)?0<=b.indexOf(c):b.hasOwnProperty(c):void 0;return c},attach:function(){g||
r(function(c,a){u.enter(c,null,f);g=c;var d=g.$$attachId=e.getAttachId();g.on("$destroy",function(){g&&g.$$attachId===d&&(e.deregister(b,n),t.detach());a.$destroy()})})},detach:function(){if(g){var c=g;g=null;u.leave(c)}}},n);m.$on("$destroy",function(){e.deregister(b,n)})}}}]}var x,v,p,y;l.module("ngMessages",[],function(){x=l.forEach;v=l.isArray;p=l.isString;y=l.element}).info({angularVersion:"1.8.2"}).directive("ngMessages",["$animate",function(n){function u(f,a){return p(a)&&0===a.length||m(f.$eval(a))}
function m(f){return p(f)?f.length:!!f}return{require:"ngMessages",restrict:"AE",controller:["$element","$scope","$attrs",function(f,a,e){function r(c,b){for(var d=b,a=[];d&&d!==c;){var e=d.$$ngMessageNode;if(e&&e.length)return k[e];d.childNodes.length&&-1===a.indexOf(d)?(a.push(d),d=d.childNodes[d.childNodes.length-1]):d.previousSibling?d=d.previousSibling:(d=d.parentNode,a.push(d))}}var b=this,h=0,s=0;this.getAttachId=function(){return s++};var k=this.messages={},g,t;this.render=function(c){c=c||
{};g=!1;t=c;for(var w=u(a,e.ngMessagesMultiple)||u(a,e.multiple),d=[],r={},h=0,k=b.head,s=!1,l=0;null!=k;){l++;var p=k.message,q=!1;s||x(c,function(b,c){m(b)&&!q&&(h++,p.test(c)&&!r[c]&&(q=r[c]=!0,p.attach()))});q?s=!w:d.push(p);k=k.next}x(d,function(c){c.detach()});c=d.length!==l;(w=b.default&&!c&&0<h)?b.default.attach():b.default&&b.default.detach();c||w?n.setClass(f,"ng-active","ng-inactive"):n.setClass(f,"ng-inactive","ng-active")};a.$watchCollection(e.ngMessages||e["for"],b.render);this.reRender=
function(){g||(g=!0,a.$evalAsync(function(){g&&t&&b.render(t)}))};this.register=function(c,a,d){if(d)b.default=a;else{d=h.toString();k[d]={message:a};var e=f[0];a=k[d];b.head?(e=r(e,c))?(a.next=e.next,e.next=a):(a.next=b.head,b.head=a):b.head=a;c.$$ngMessageNode=d;h++}b.reRender()};this.deregister=function(a,e){if(e)delete b.default;else{var d=a.$$ngMessageNode;delete a.$$ngMessageNode;var g=k[d];if(g){var h=r(f[0],a);h?h.next=g.next:b.head=g.next}delete k[d]}b.reRender()}}]}}]).directive("ngMessagesInclude",
["$templateRequest","$document","$compile",function(n,l,m){function f(a,e){var f=m.$$createComment?m.$$createComment("ngMessagesInclude",e):l[0].createComment(" ngMessagesInclude: "+e+" "),f=y(f);a.after(f);a.remove()}return{restrict:"AE",require:"^^ngMessages",link:function(a,e,l){var b=l.ngMessagesInclude||l.src;n(b).then(function(h){a.$$destroyed||(p(h)&&!h.trim()?f(e,b):m(h)(a,function(a){e.after(a);f(e,b)}))})}}}]).directive("ngMessage",q()).directive("ngMessageExp",q()).directive("ngMessageDefault",
q(!0))})(window,window.angular);
//# sourceMappingURL=angular-messages.min.js.map

/*
 AngularJS v1.8.2
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
*/
(function(s,e){'use strict';function O(e){var g=[];B(g,D).chars(e);return g.join("")}var C=e.$$minErr("$sanitize"),E,g,F,G,H,q,D,I,J,B;e.module("ngSanitize",[]).provider("$sanitize",function(){function h(a,d){return A(a.split(","),d)}function A(a,d){var c={},b;for(b=0;b<a.length;b++)c[d?q(a[b]):a[b]]=!0;return c}function t(a,d){d&&d.length&&g(a,A(d))}function P(a){for(var d={},c=0,b=a.length;c<b;c++){var k=a[c];d[k.name]=k.value}return d}function K(a){return a.replace(/&/g,"&amp;").replace(Q,function(a){var c=
a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(c-55296)+(a-56320)+65536)+";"}).replace(u,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function z(a){for(;a;){if(a.nodeType===s.Node.ELEMENT_NODE)for(var d=a.attributes,c=0,b=d.length;c<b;c++){var k=d[c],f=k.name.toLowerCase();if("xmlns:ns1"===f||0===f.lastIndexOf("ns1:",0))a.removeAttributeNode(k),c--,b--}(d=a.firstChild)&&z(d);a=v("nextSibling",a)}}function v(a,d){var c=d[a];if(c&&I.call(d,c))throw C("elclob",
d.outerHTML||d.outerText);return c}var y=!1,f=!1;this.$get=["$$sanitizeUri",function(a){y=!0;f&&g(m,l);return function(d){var c=[];J(d,B(c,function(b,c){return!/^unsafe:/.test(a(b,c))}));return c.join("")}}];this.enableSvg=function(a){return H(a)?(f=a,this):f};this.addValidElements=function(a){y||(G(a)&&(a={htmlElements:a}),t(l,a.svgElements),t(r,a.htmlVoidElements),t(m,a.htmlVoidElements),t(m,a.htmlElements));return this};this.addValidAttrs=function(a){y||g(L,A(a,!0));return this};E=e.bind;g=e.extend;
F=e.forEach;G=e.isArray;H=e.isDefined;q=e.$$lowercase;D=e.noop;J=function(a,d){null===a||void 0===a?a="":"string"!==typeof a&&(a=""+a);var c=M(a);if(!c)return"";var b=5;do{if(0===b)throw C("uinput");b--;a=c.innerHTML;c=M(a)}while(a!==c.innerHTML);for(b=c.firstChild;b;){switch(b.nodeType){case 1:d.start(b.nodeName.toLowerCase(),P(b.attributes));break;case 3:d.chars(b.textContent)}var k;if(!(k=b.firstChild)&&(1===b.nodeType&&d.end(b.nodeName.toLowerCase()),k=v("nextSibling",b),!k))for(;null==k;){b=
v("parentNode",b);if(b===c)break;k=v("nextSibling",b);1===b.nodeType&&d.end(b.nodeName.toLowerCase())}b=k}for(;b=c.firstChild;)c.removeChild(b)};B=function(a,d){var c=!1,b=E(a,a.push);return{start:function(a,f){a=q(a);!c&&w[a]&&(c=a);c||!0!==m[a]||(b("<"),b(a),F(f,function(c,f){var e=q(f),h="img"===a&&"src"===e||"background"===e;!0!==L[e]||!0===N[e]&&!d(c,h)||(b(" "),b(f),b('="'),b(K(c)),b('"'))}),b(">"))},end:function(a){a=q(a);c||!0!==m[a]||!0===r[a]||(b("</"),b(a),b(">"));a==c&&(c=!1)},chars:function(a){c||
b(K(a))}}};I=s.Node.prototype.contains||function(a){return!!(this.compareDocumentPosition(a)&16)};var Q=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,u=/([^#-~ |!])/g,r=h("area,br,col,hr,img,wbr"),x=h("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),p=h("rp,rt"),n=g({},p,x),x=g({},x,h("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),p=g({},p,h("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),
l=h("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),w=h("script,style"),m=g({},r,x,p,n),N=h("background,cite,href,longdesc,src,xlink:href,xml:base"),n=h("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),
p=h("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",
!0),L=g({},N,p,n),M=function(a,d){function c(b){b="<remove></remove>"+b;try{var c=(new a.DOMParser).parseFromString(b,"text/html").body;c.firstChild.remove();return c}catch(d){}}var b;try{b=!!c("")}catch(f){b=!1}if(b)return c;if(!d||!d.implementation)throw C("noinert");b=d.implementation.createHTMLDocument("inert");var e=(b.documentElement||b.getDocumentElement()).querySelector("body");return function(a){e.innerHTML=a;d.documentMode&&z(e);return e}}(s,s.document)}).info({angularVersion:"1.8.2"});
e.module("ngSanitize").filter("linky",["$sanitize",function(h){var g=/((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,t=/^mailto:/i,q=e.$$minErr("linky"),s=e.isDefined,z=e.isFunction,v=e.isObject,y=e.isString;return function(f,e,u){function r(e){e&&l.push(O(e))}function x(f,h){var g,a=p(f);l.push("<a ");for(g in a)l.push(g+'="'+a[g]+'" ');!s(e)||"target"in a||l.push('target="',e,'" ');l.push('href="',f.replace(/"/g,"&quot;"),'">');r(h);l.push("</a>")}if(null==
f||""===f)return f;if(!y(f))throw q("notstring",f);for(var p=z(u)?u:v(u)?function(){return u}:function(){return{}},n=f,l=[],w,m;f=n.match(g);)w=f[0],f[2]||f[4]||(w=(f[3]?"http://":"mailto:")+w),m=f.index,r(n.substr(0,m)),x(w,f[0].replace(t,"")),n=n.substring(m+f[0].length);r(n);return h(l.join(""))}}])})(window,window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map

/*
 AngularJS v1.8.2
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
*/
(function(Y,z){'use strict';function Fa(a,b,c){if(!a)throw Pa("areq",b||"?",c||"required");return a}function Ga(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;Z(a)&&(a=a.join(" "));Z(b)&&(b=b.join(" "));return a+" "+b}function Qa(a){var b={};a&&(a.to||a.from)&&(b.to=a.to,b.from=a.from);return b}function $(a,b,c){var d="";a=Z(a)?a:a&&G(a)&&a.length?a.split(/\s+/):[];s(a,function(a,k){a&&0<a.length&&(d+=0<k?" ":"",d+=c?b+a:a+b)});return d}function Ha(a){if(a instanceof A)switch(a.length){case 0:return a;
case 1:if(1===a[0].nodeType)return a;break;default:return A(va(a))}if(1===a.nodeType)return A(a)}function va(a){if(!a[0])return a;for(var b=0;b<a.length;b++){var c=a[b];if(1===c.nodeType)return c}}function Ra(a,b,c){s(b,function(b){a.addClass(b,c)})}function Sa(a,b,c){s(b,function(b){a.removeClass(b,c)})}function aa(a){return function(b,c){c.addClass&&(Ra(a,b,c.addClass),c.addClass=null);c.removeClass&&(Sa(a,b,c.removeClass),c.removeClass=null)}}function pa(a){a=a||{};if(!a.$$prepared){var b=a.domOperation||
N;a.domOperation=function(){a.$$domOperationFired=!0;b();b=N};a.$$prepared=!0}return a}function ha(a,b){Ia(a,b);Ja(a,b)}function Ia(a,b){b.from&&(a.css(b.from),b.from=null)}function Ja(a,b){b.to&&(a.css(b.to),b.to=null)}function T(a,b,c){var d=b.options||{};c=c.options||{};var f=(d.addClass||"")+" "+(c.addClass||""),k=(d.removeClass||"")+" "+(c.removeClass||"");a=Ta(a.attr("class"),f,k);c.preparationClasses&&(d.preparationClasses=ba(c.preparationClasses,d.preparationClasses),delete c.preparationClasses);
f=d.domOperation!==N?d.domOperation:null;wa(d,c);f&&(d.domOperation=f);d.addClass=a.addClass?a.addClass:null;d.removeClass=a.removeClass?a.removeClass:null;b.addClass=d.addClass;b.removeClass=d.removeClass;return d}function Ta(a,b,c){function d(a){G(a)&&(a=a.split(" "));var c={};s(a,function(a){a.length&&(c[a]=!0)});return c}var f={};a=d(a);b=d(b);s(b,function(a,c){f[c]=1});c=d(c);s(c,function(a,c){f[c]=1===f[c]?null:-1});var k={addClass:"",removeClass:""};s(f,function(c,b){var d,f;1===c?(d="addClass",
f=!a[b]||a[b+"-remove"]):-1===c&&(d="removeClass",f=a[b]||a[b+"-add"]);f&&(k[d].length&&(k[d]+=" "),k[d]+=b)});return k}function K(a){return a instanceof A?a[0]:a}function Ua(a,b,c,d){a="";c&&(a=$(c,"ng-",!0));d.addClass&&(a=ba(a,$(d.addClass,"-add")));d.removeClass&&(a=ba(a,$(d.removeClass,"-remove")));a.length&&(d.preparationClasses=a,b.addClass(a))}function xa(a,b){var c=b?"paused":"",d=ca+"PlayState";ma(a,[d,c]);return[d,c]}function ma(a,b){a.style[b[0]]=b[1]}function ba(a,b){return a?b?a+" "+
b:a:b}function Ka(a,b,c){var d=Object.create(null),f=a.getComputedStyle(b)||{};s(c,function(a,c){var b=f[a];if(b){var L=b.charAt(0);if("-"===L||"+"===L||0<=L)b=Va(b);0===b&&(b=null);d[c]=b}});return d}function Va(a){var b=0;a=a.split(/\s*,\s*/);s(a,function(a){"s"===a.charAt(a.length-1)&&(a=a.substring(0,a.length-1));a=parseFloat(a)||0;b=b?Math.max(a,b):a});return b}function ya(a){return 0===a||null!=a}function La(a,b){var c=M,d=a+"s";b?c+="Duration":d+=" linear all";return[c,d]}function Ma(a,b,c){s(c,
function(c){a[c]=za(a[c])?a[c]:b.style.getPropertyValue(c)})}var M,Aa,ca,Ba;void 0===Y.ontransitionend&&void 0!==Y.onwebkittransitionend?(M="WebkitTransition",Aa="webkitTransitionEnd transitionend"):(M="transition",Aa="transitionend");void 0===Y.onanimationend&&void 0!==Y.onwebkitanimationend?(ca="WebkitAnimation",Ba="webkitAnimationEnd animationend"):(ca="animation",Ba="animationend");var qa=ca+"Delay",Ca=ca+"Duration",na=M+"Delay",Na=M+"Duration",Pa=z.$$minErr("ng"),ra={blockTransitions:function(a,
b){var c=b?"-"+b+"s":"";ma(a,[na,c]);return[na,c]}},Wa={transitionDuration:Na,transitionDelay:na,transitionProperty:M+"Property",animationDuration:Ca,animationDelay:qa,animationIterationCount:ca+"IterationCount"},Xa={transitionDuration:Na,transitionDelay:na,animationDuration:Ca,animationDelay:qa},Da,wa,s,Z,za,sa,Ea,ta,G,R,A,N;z.module("ngAnimate",[],function(){N=z.noop;Da=z.copy;wa=z.extend;A=z.element;s=z.forEach;Z=z.isArray;G=z.isString;ta=z.isObject;R=z.isUndefined;za=z.isDefined;Ea=z.isFunction;
sa=z.isElement}).info({angularVersion:"1.8.2"}).directive("ngAnimateSwap",["$animate",function(a){return{restrict:"A",transclude:"element",terminal:!0,priority:550,link:function(b,c,d,f,k){var e,Q;b.$watchCollection(d.ngAnimateSwap||d["for"],function(b){e&&a.leave(e);Q&&(Q.$destroy(),Q=null);(b||0===b)&&k(function(b,d){e=b;Q=d;a.enter(b,null,c)})})}}}]).directive("ngAnimateChildren",["$interpolate",function(a){return{link:function(b,c,d){function f(a){c.data("$$ngAnimateChildren","on"===a||"true"===
a)}var k=d.ngAnimateChildren;G(k)&&0===k.length?c.data("$$ngAnimateChildren",!0):(f(a(k)(b)),d.$observe("ngAnimateChildren",f))}}}]).factory("$$rAFScheduler",["$$rAF",function(a){function b(a){d=d.concat(a);c()}function c(){if(d.length){for(var b=d.shift(),e=0;e<b.length;e++)b[e]();f||a(function(){f||c()})}}var d,f;d=b.queue=[];b.waitUntilQuiet=function(b){f&&f();f=a(function(){f=null;b();c()})};return b}]).provider("$$animateQueue",["$animateProvider",function(a){function b(a){return{addClass:a.addClass,
removeClass:a.removeClass,from:a.from,to:a.to}}function c(a){if(!a)return null;a=a.split(" ");var b=Object.create(null);s(a,function(a){b[a]=!0});return b}function d(a,b){if(a&&b){var d=c(b);return a.split(" ").some(function(a){return d[a]})}}function f(a,b,c){return e[a].some(function(a){return a(b,c)})}function k(a,b){var c=0<(a.addClass||"").length,d=0<(a.removeClass||"").length;return b?c&&d:c||d}var e=this.rules={skip:[],cancel:[],join:[]};e.join.push(function(a,b){return!a.structural&&k(a)});
e.skip.push(function(a,b){return!a.structural&&!k(a)});e.skip.push(function(a,b){return"leave"===b.event&&a.structural});e.skip.push(function(a,b){return b.structural&&2===b.state&&!a.structural});e.cancel.push(function(a,b){return b.structural&&a.structural});e.cancel.push(function(a,b){return 2===b.state&&a.structural});e.cancel.push(function(a,b){if(b.structural)return!1;var c=a.addClass,f=a.removeClass,k=b.addClass,e=b.removeClass;return R(c)&&R(f)||R(k)&&R(e)?!1:d(c,e)||d(f,k)});this.$get=["$$rAF",
"$rootScope","$rootElement","$document","$$Map","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow","$$isDocumentHidden",function(c,d,e,C,U,oa,H,u,t,I,da){function ia(a){O.delete(a.target)}function v(){var a=!1;return function(b){a?b():d.$$postDigest(function(){a=!0;b()})}}function ua(a,b,c){var g=[],l=m[c];l&&s(l,function(l){Oa.call(l.node,b)?g.push(l.callback):"leave"===c&&Oa.call(l.node,a)&&g.push(l.callback)});return g}function h(a,b,c){var l=va(b);return a.filter(function(a){return!(a.node===
l&&(!c||a.callback===c))})}function q(a,J,w){function e(a,b,l,g){u(function(){var a=ua(ia,m,b);a.length?c(function(){s(a,function(a){a(h,l,g)});"close"!==l||m.parentNode||D.off(m)}):"close"!==l||m.parentNode||D.off(m)});a.progress(b,l,g)}function I(a){var b=h,c=n;c.preparationClasses&&(b.removeClass(c.preparationClasses),c.preparationClasses=null);c.activeClasses&&(b.removeClass(c.activeClasses),c.activeClasses=null);W(h,n);ha(h,n);n.domOperation();q.complete(!a)}var n=Da(w),h=Ha(a),m=K(h),ia=m&&
m.parentNode,n=pa(n),q=new H,u=v();Z(n.addClass)&&(n.addClass=n.addClass.join(" "));n.addClass&&!G(n.addClass)&&(n.addClass=null);Z(n.removeClass)&&(n.removeClass=n.removeClass.join(" "));n.removeClass&&!G(n.removeClass)&&(n.removeClass=null);n.from&&!ta(n.from)&&(n.from=null);n.to&&!ta(n.to)&&(n.to=null);if(!(B&&m&&fa(m,J,w)&&Ya(m,n)))return I(),q;var x=0<=["enter","move","leave"].indexOf(J),r=da(),P=r||O.get(m);w=!P&&y.get(m)||{};var p=!!w.state;P||p&&1===w.state||(P=!E(m,ia,J));if(P)return r&&
e(q,J,"start",b(n)),I(),r&&e(q,J,"close",b(n)),q;x&&F(m);r={structural:x,element:h,event:J,addClass:n.addClass,removeClass:n.removeClass,close:I,options:n,runner:q};if(p){if(f("skip",r,w)){if(2===w.state)return I(),q;T(h,w,r);return w.runner}if(f("cancel",r,w))if(2===w.state)w.runner.end();else if(w.structural)w.close();else return T(h,w,r),w.runner;else if(f("join",r,w))if(2===w.state)T(h,r,{});else return Ua(t,h,x?J:null,n),J=r.event=w.event,n=T(h,w,r),w.runner}else T(h,r,{});(p=r.structural)||
(p="animate"===r.event&&0<Object.keys(r.options.to||{}).length||k(r));if(!p)return I(),g(m),q;var C=(w.counter||0)+1;r.counter=C;l(m,1,r);d.$$postDigest(function(){h=Ha(a);var c=y.get(m),d=!c,c=c||{},t=0<(h.parent()||[]).length&&("animate"===c.event||c.structural||k(c));if(d||c.counter!==C||!t){d&&(W(h,n),ha(h,n));if(d||x&&c.event!==J)n.domOperation(),q.end();t||g(m)}else J=!c.structural&&k(c,!0)?"setClass":c.event,l(m,2),c=oa(h,J,c.options),q.setHost(c),e(q,J,"start",b(n)),c.done(function(a){I(!a);
(a=y.get(m))&&a.counter===C&&g(m);e(q,J,"close",b(n))})});return q}function F(a){a=a.querySelectorAll("[data-ng-animate]");s(a,function(a){var b=parseInt(a.getAttribute("data-ng-animate"),10),c=y.get(a);if(c)switch(b){case 2:c.runner.end();case 1:y.delete(a)}})}function g(a){a.removeAttribute("data-ng-animate");y.delete(a)}function E(a,b,c){c=C[0].body;var l=K(e),g=a===c||"HTML"===a.nodeName,d=a===l,t=!1,m=O.get(a),h;for((a=A.data(a,"$ngAnimatePin"))&&(b=K(a));b;){d||(d=b===l);if(1!==b.nodeType)break;
a=y.get(b)||{};if(!t){var f=O.get(b);if(!0===f&&!1!==m){m=!0;break}else!1===f&&(m=!1);t=a.structural}if(R(h)||!0===h)a=A.data(b,"$$ngAnimateChildren"),za(a)&&(h=a);if(t&&!1===h)break;g||(g=b===c);if(g&&d)break;if(!d&&(a=A.data(b,"$ngAnimatePin"))){b=K(a);continue}b=b.parentNode}return(!t||h)&&!0!==m&&d&&g}function l(a,b,c){c=c||{};c.state=b;a.setAttribute("data-ng-animate",b);c=(b=y.get(a))?wa(b,c):c;y.set(a,c)}var y=new U,O=new U,B=null,P=d.$watch(function(){return 0===u.totalPendingRequests},function(a){a&&
(P(),d.$$postDigest(function(){d.$$postDigest(function(){null===B&&(B=!0)})}))}),m=Object.create(null);U=a.customFilter();var la=a.classNameFilter();I=function(){return!0};var fa=U||I,Ya=la?function(a,b){var c=[a.getAttribute("class"),b.addClass,b.removeClass].join(" ");return la.test(c)}:I,W=aa(t),Oa=Y.Node.prototype.contains||function(a){return this===a||!!(this.compareDocumentPosition(a)&16)},D={on:function(a,b,c){var l=va(b);m[a]=m[a]||[];m[a].push({node:l,callback:c});A(b).on("$destroy",function(){y.get(l)||
D.off(a,b,c)})},off:function(a,b,c){if(1!==arguments.length||G(arguments[0])){var l=m[a];l&&(m[a]=1===arguments.length?null:h(l,b,c))}else for(l in b=arguments[0],m)m[l]=h(m[l],b)},pin:function(a,b){Fa(sa(a),"element","not an element");Fa(sa(b),"parentElement","not an element");a.data("$ngAnimatePin",b)},push:function(a,b,c,l){c=c||{};c.domOperation=l;return q(a,b,c)},enabled:function(a,b){var c=arguments.length;if(0===c)b=!!B;else if(sa(a)){var l=K(a);if(1===c)b=!O.get(l);else{if(!O.has(l))A(a).on("$destroy",
ia);O.set(l,!b)}}else b=B=!!a;return b}};return D}]}]).provider("$$animateCache",function(){var a=0,b=Object.create(null);this.$get=[function(){return{cacheKey:function(b,d,f,k){var e=b.parentNode;b=[e.$$ngAnimateParentKey||(e.$$ngAnimateParentKey=++a),d,b.getAttribute("class")];f&&b.push(f);k&&b.push(k);return b.join(" ")},containsCachedAnimationWithoutDuration:function(a){return(a=b[a])&&!a.isValid||!1},flush:function(){b=Object.create(null)},count:function(a){return(a=b[a])?a.total:0},get:function(a){return(a=
b[a])&&a.value},put:function(a,d,f){b[a]?(b[a].total++,b[a].value=d):b[a]={total:1,value:d,isValid:f}}}}]}).provider("$$animation",["$animateProvider",function(a){var b=this.drivers=[];this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$Map","$$rAFScheduler","$$animateCache",function(a,d,f,k,e,Q,L){function x(a){function b(a){if(a.processed)return a;a.processed=!0;var d=a.domNode,t=d.parentNode;f.set(d,a);for(var h;t;){if(h=f.get(t)){h.processed||(h=b(h));break}t=t.parentNode}(h||
c).children.push(a);return a}var c={children:[]},d,f=new e;for(d=0;d<a.length;d++){var da=a[d];f.set(da.domNode,a[d]={domNode:da.domNode,element:da.element,fn:da.fn,children:[]})}for(d=0;d<a.length;d++)b(a[d]);return function(a){var b=[],c=[],d;for(d=0;d<a.children.length;d++)c.push(a.children[d]);a=c.length;var t=0,f=[];for(d=0;d<c.length;d++){var g=c[d];0>=a&&(a=t,t=0,b.push(f),f=[]);f.push(g);g.children.forEach(function(a){t++;c.push(a)});a--}f.length&&b.push(f);return b}(c)}var C=[],U=aa(a);return function(e,
H,u){function t(a){a=a.hasAttribute("ng-animate-ref")?[a]:a.querySelectorAll("[ng-animate-ref]");var b=[];s(a,function(a){var c=a.getAttribute("ng-animate-ref");c&&c.length&&b.push(a)});return b}function I(a){var b=[],c={};s(a,function(a,d){var l=K(a.element),g=0<=["enter","move"].indexOf(a.event),l=a.structural?t(l):[];if(l.length){var f=g?"to":"from";s(l,function(a){var b=a.getAttribute("ng-animate-ref");c[b]=c[b]||{};c[b][f]={animationID:d,element:A(a)}})}else b.push(a)});var d={},g={};s(c,function(c,
t){var f=c.from,e=c.to;if(f&&e){var h=a[f.animationID],k=a[e.animationID],E=f.animationID.toString();if(!g[E]){var I=g[E]={structural:!0,beforeStart:function(){h.beforeStart();k.beforeStart()},close:function(){h.close();k.close()},classes:da(h.classes,k.classes),from:h,to:k,anchors:[]};I.classes.length?b.push(I):(b.push(h),b.push(k))}g[E].anchors.push({out:f.element,"in":e.element})}else f=f?f.animationID:e.animationID,e=f.toString(),d[e]||(d[e]=!0,b.push(a[f]))});return b}function da(a,b){a=a.split(" ");
b=b.split(" ");for(var c=[],d=0;d<a.length;d++){var g=a[d];if("ng-"!==g.substring(0,3))for(var t=0;t<b.length;t++)if(g===b[t]){c.push(g);break}}return c.join(" ")}function ia(a){for(var c=b.length-1;0<=c;c--){var d=f.get(b[c])(a);if(d)return d}}function v(a,b){function c(a){(a=a.data("$$animationRunner"))&&a.setHost(b)}a.from&&a.to?(c(a.from.element),c(a.to.element)):c(a.element)}function ua(){var a=e.data("$$animationRunner");!a||"leave"===H&&u.$$domOperationFired||a.end()}function h(b){e.off("$destroy",
ua);e.removeData("$$animationRunner");U(e,u);ha(e,u);u.domOperation();E&&a.removeClass(e,E);F.complete(!b)}u=pa(u);var q=0<=["enter","move","leave"].indexOf(H),F=new k({end:function(){h()},cancel:function(){h(!0)}});if(!b.length)return h(),F;var g=Ga(e.attr("class"),Ga(u.addClass,u.removeClass)),E=u.tempClasses;E&&(g+=" "+E,u.tempClasses=null);q&&e.data("$$animatePrepareClasses","ng-"+H+"-prepare");e.data("$$animationRunner",F);C.push({element:e,classes:g,event:H,structural:q,options:u,beforeStart:function(){E=
(E?E+" ":"")+"ng-animate";a.addClass(e,E);var b=e.data("$$animatePrepareClasses");b&&a.removeClass(e,b)},close:h});e.on("$destroy",ua);if(1<C.length)return F;d.$$postDigest(function(){var b=[];s(C,function(a){a.element.data("$$animationRunner")?b.push(a):a.close()});C.length=0;var d=I(b),g=[];s(d,function(a){var b=a.from?a.from.element:a.element,c=u.addClass,d=L.cacheKey(b[0],a.event,(c?c+" ":"")+"ng-animate",u.removeClass);g.push({element:b,domNode:K(b),fn:function(){var b,c=a.close;if(L.containsCachedAnimationWithoutDuration(d))c();
else{a.beforeStart();if((a.anchors?a.from.element||a.to.element:a.element).data("$$animationRunner")){var g=ia(a);g&&(b=g.start)}b?(b=b(),b.done(function(a){c(!a)}),v(a,b)):c()}}})});for(var d=x(g),t=0;t<d.length;t++)for(var f=d[t],e=0;e<f.length;e++){var h=f[e],k=h.element;d[t][e]=h.fn;0===t?k.removeData("$$animatePrepareClasses"):(h=k.data("$$animatePrepareClasses"))&&a.addClass(k,h)}Q(d)});return F}}]}]).provider("$animateCss",["$animateProvider",function(a){this.$get=["$window","$$jqLite","$$AnimateRunner",
"$timeout","$$animateCache","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(a,c,d,f,k,e,Q,L,x){function C(d,f,e,x){var v,s="stagger-"+e;0<k.count(e)&&(v=k.get(s),v||(f=$(f,"-stagger"),c.addClass(d,f),v=Ka(a,d,x),v.animationDuration=Math.max(v.animationDuration,0),v.transitionDuration=Math.max(v.transitionDuration,0),c.removeClass(d,f),k.put(s,v,!0)));return v||{}}function U(a){u.push(a);L.waitUntilQuiet(function(){k.flush();for(var a=e(),b=0;b<u.length;b++)u[b](a);u.length=0})}
function z(c,d,f,e){d=k.get(f);d||(d=Ka(a,c,Wa),"infinite"===d.animationIterationCount&&(d.animationIterationCount=1));k.put(f,d,e||0<d.transitionDuration||0<d.animationDuration);c=d;f=c.animationDelay;e=c.transitionDelay;c.maxDelay=f&&e?Math.max(f,e):f||e;c.maxDuration=Math.max(c.animationDuration*c.animationIterationCount,c.transitionDuration);return c}var H=aa(c),u=[];return function(a,b){function e(){v()}function L(){v(!0)}function v(b){if(!(P||la&&m)){P=!0;m=!1;V&&!g.$$skipPreparationClasses&&
c.removeClass(a,V);ba&&c.removeClass(a,ba);xa(l,!1);ra.blockTransitions(l,!1);s(y,function(a){l.style[a[0]]=""});H(a,g);ha(a,g);Object.keys(E).length&&s(E,function(a,b){a?l.style.setProperty(b,a):l.style.removeProperty(b)});if(g.onDone)g.onDone();w&&w.length&&a.off(w.join(" "),q);var d=a.data("$$animateCss");d&&(f.cancel(d[0].timer),a.removeData("$$animateCss"));fa&&fa.complete(!b)}}function u(a){p.blockTransition&&ra.blockTransitions(l,a);p.blockKeyframeAnimation&&xa(l,!!a)}function h(){fa=new d({end:e,
cancel:L});U(N);v();return{$$willAnimate:!1,start:function(){return fa},end:e}}function q(a){a.stopPropagation();var b=a.originalEvent||a;b.target===l&&(a=b.$manualTimeStamp||Date.now(),b=parseFloat(b.elapsedTime.toFixed(3)),Math.max(a-J,0)>=G&&b>=D&&(la=!0,v()))}function F(){function b(){if(!P){u(!1);s(y,function(a){l.style[a[0]]=a[1]});H(a,g);c.addClass(a,ba);if(p.recalculateTimingStyles){T=l.getAttribute("class")+" "+V;ka=k.cacheKey(l,ja,g.addClass,g.removeClass);r=z(l,T,ka,!1);ga=r.maxDelay;W=
Math.max(ga,0);D=r.maxDuration;if(0===D){v();return}p.hasTransitions=0<r.transitionDuration;p.hasAnimations=0<r.animationDuration}p.applyAnimationDelay&&(ga="boolean"!==typeof g.delay&&ya(g.delay)?parseFloat(g.delay):ga,W=Math.max(ga,0),r.animationDelay=ga,ea=[qa,ga+"s"],y.push(ea),l.style[ea[0]]=ea[1]);G=1E3*W;R=1E3*D;if(g.easing){var e,h=g.easing;p.hasTransitions&&(e=M+"TimingFunction",y.push([e,h]),l.style[e]=h);p.hasAnimations&&(e=ca+"TimingFunction",y.push([e,h]),l.style[e]=h)}r.transitionDuration&&
w.push(Aa);r.animationDuration&&w.push(Ba);J=Date.now();var m=G+1.5*R;e=J+m;var h=a.data("$$animateCss")||[],F=!0;if(h.length){var n=h[0];(F=e>n.expectedEndTime)?f.cancel(n.timer):h.push(v)}F&&(m=f(d,m,!1),h[0]={timer:m,expectedEndTime:e},h.push(v),a.data("$$animateCss",h));if(w.length)a.on(w.join(" "),q);g.to&&(g.cleanupStyles&&Ma(E,l,Object.keys(g.to)),Ja(a,g))}}function d(){var b=a.data("$$animateCss");if(b){for(var c=1;c<b.length;c++)b[c]();a.removeData("$$animateCss")}}if(!P)if(l.parentNode){var e=
function(a){if(la)m&&a&&(m=!1,v());else if(m=!a,r.animationDuration)if(a=xa(l,m),m)y.push(a);else{var b=y,c=b.indexOf(a);0<=a&&b.splice(c,1)}},h=0<aa&&(r.transitionDuration&&0===X.transitionDuration||r.animationDuration&&0===X.animationDuration)&&Math.max(X.animationDelay,X.transitionDelay);h?f(b,Math.floor(h*aa*1E3),!1):b();A.resume=function(){e(!0)};A.pause=function(){e(!1)}}else v()}var g=b||{};g.$$prepared||(g=pa(Da(g)));var E={},l=K(a);if(!l||!l.parentNode||!x.enabled())return h();var y=[],O=
a.attr("class"),B=Qa(g),P,m,la,fa,A,W,G,D,R,J,w=[];if(0===g.duration||!Q.animations&&!Q.transitions)return h();var ja=g.event&&Z(g.event)?g.event.join(" "):g.event,Y=ja&&g.structural,n="",S="";Y?n=$(ja,"ng-",!0):ja&&(n=ja);g.addClass&&(S+=$(g.addClass,"-add"));g.removeClass&&(S.length&&(S+=" "),S+=$(g.removeClass,"-remove"));g.applyClassesEarly&&S.length&&H(a,g);var V=[n,S].join(" ").trim(),T=O+" "+V,O=B.to&&0<Object.keys(B.to).length;if(!(0<(g.keyframeStyle||"").length||O||V))return h();var X,ka=
k.cacheKey(l,ja,g.addClass,g.removeClass);if(k.containsCachedAnimationWithoutDuration(ka))return V=null,h();0<g.stagger?(B=parseFloat(g.stagger),X={transitionDelay:B,animationDelay:B,transitionDuration:0,animationDuration:0}):X=C(l,V,ka,Xa);g.$$skipPreparationClasses||c.addClass(a,V);g.transitionStyle&&(B=[M,g.transitionStyle],ma(l,B),y.push(B));0<=g.duration&&(B=0<l.style[M].length,B=La(g.duration,B),ma(l,B),y.push(B));g.keyframeStyle&&(B=[ca,g.keyframeStyle],ma(l,B),y.push(B));var aa=X?0<=g.staggerIndex?
g.staggerIndex:k.count(ka):0;(n=0===aa)&&!g.skipBlocking&&ra.blockTransitions(l,9999);var r=z(l,T,ka,!Y),ga=r.maxDelay;W=Math.max(ga,0);D=r.maxDuration;var p={};p.hasTransitions=0<r.transitionDuration;p.hasAnimations=0<r.animationDuration;p.hasTransitionAll=p.hasTransitions&&"all"===r.transitionProperty;p.applyTransitionDuration=O&&(p.hasTransitions&&!p.hasTransitionAll||p.hasAnimations&&!p.hasTransitions);p.applyAnimationDuration=g.duration&&p.hasAnimations;p.applyTransitionDelay=ya(g.delay)&&(p.applyTransitionDuration||
p.hasTransitions);p.applyAnimationDelay=ya(g.delay)&&p.hasAnimations;p.recalculateTimingStyles=0<S.length;if(p.applyTransitionDuration||p.applyAnimationDuration)D=g.duration?parseFloat(g.duration):D,p.applyTransitionDuration&&(p.hasTransitions=!0,r.transitionDuration=D,B=0<l.style[M+"Property"].length,y.push(La(D,B))),p.applyAnimationDuration&&(p.hasAnimations=!0,r.animationDuration=D,y.push([Ca,D+"s"]));if(0===D&&!p.recalculateTimingStyles)return h();var ba=$(V,"-active");if(null!=g.delay){var ea;
"boolean"!==typeof g.delay&&(ea=parseFloat(g.delay),W=Math.max(ea,0));p.applyTransitionDelay&&y.push([na,ea+"s"]);p.applyAnimationDelay&&y.push([qa,ea+"s"])}null==g.duration&&0<r.transitionDuration&&(p.recalculateTimingStyles=p.recalculateTimingStyles||n);G=1E3*W;R=1E3*D;g.skipBlocking||(p.blockTransition=0<r.transitionDuration,p.blockKeyframeAnimation=0<r.animationDuration&&0<X.animationDelay&&0===X.animationDuration);g.from&&(g.cleanupStyles&&Ma(E,l,Object.keys(g.from)),Ia(a,g));p.blockTransition||
p.blockKeyframeAnimation?u(D):g.skipBlocking||ra.blockTransitions(l,!1);return{$$willAnimate:!0,end:e,start:function(){if(!P)return A={end:e,cancel:L,resume:null,pause:null},fa=new d(A),U(F),fa}}}}]}]).provider("$$animateCssDriver",["$$animationProvider",function(a){a.drivers.push("$$animateCssDriver");this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(a,c,d,f,k,e,Q){function L(a){return a.replace(/\bng-\S+\b/g,"")}function x(a,b){G(a)&&
(a=a.split(" "));G(b)&&(b=b.split(" "));return a.filter(function(a){return-1===b.indexOf(a)}).join(" ")}function C(c,e,f){function k(a){var b={},c=K(a).getBoundingClientRect();s(["width","height","top","left"],function(a){var d=c[a];switch(a){case "top":d+=H.scrollTop;break;case "left":d+=H.scrollLeft}b[a]=Math.floor(d)+"px"});return b}function v(){var c=L(f.attr("class")||""),d=x(c,q),c=x(q,c),d=a(h,{to:k(f),addClass:"ng-anchor-in "+d,removeClass:"ng-anchor-out "+c,delay:!0});return d.$$willAnimate?
d:null}function C(){h.remove();e.removeClass("ng-animate-shim");f.removeClass("ng-animate-shim")}var h=A(K(e).cloneNode(!0)),q=L(h.attr("class")||"");e.addClass("ng-animate-shim");f.addClass("ng-animate-shim");h.addClass("ng-anchor");u.append(h);var F;c=function(){var c=a(h,{addClass:"ng-anchor-out",delay:!0,from:k(e)});return c.$$willAnimate?c:null}();if(!c&&(F=v(),!F))return C();var g=c||F;return{start:function(){function a(){c&&c.end()}var b,c=g.start();c.done(function(){c=null;if(!F&&(F=v()))return c=
F.start(),c.done(function(){c=null;C();b.complete()}),c;C();b.complete()});return b=new d({end:a,cancel:a})}}}function z(a,b,c,e){var f=oa(a,N),k=oa(b,N),h=[];s(e,function(a){(a=C(c,a.out,a["in"]))&&h.push(a)});if(f||k||0!==h.length)return{start:function(){function a(){s(b,function(a){a.end()})}var b=[];f&&b.push(f.start());k&&b.push(k.start());s(h,function(a){b.push(a.start())});var c=new d({end:a,cancel:a});d.all(b,function(a){c.complete(a)});return c}}}function oa(c){var d=c.element,e=c.options||
{};c.structural&&(e.event=c.event,e.structural=!0,e.applyClassesEarly=!0,"leave"===c.event&&(e.onDone=e.domOperation));e.preparationClasses&&(e.event=ba(e.event,e.preparationClasses));c=a(d,e);return c.$$willAnimate?c:null}if(!k.animations&&!k.transitions)return N;var H=Q[0].body;c=K(f);var u=A(c.parentNode&&11===c.parentNode.nodeType||H.contains(c)?c:H);return function(a){return a.from&&a.to?z(a.from,a.to,a.classes,a.anchors):oa(a)}}]}]).provider("$$animateJs",["$animateProvider",function(a){this.$get=
["$injector","$$AnimateRunner","$$jqLite",function(b,c,d){function f(c){c=Z(c)?c:c.split(" ");for(var d=[],f={},k=0;k<c.length;k++){var s=c[k],z=a.$$registeredAnimations[s];z&&!f[s]&&(d.push(b.get(z)),f[s]=!0)}return d}var k=aa(d);return function(a,b,d,x){function C(){x.domOperation();k(a,x)}function z(a,b,d,f,e){switch(d){case "animate":b=[b,f.from,f.to,e];break;case "setClass":b=[b,t,I,e];break;case "addClass":b=[b,t,e];break;case "removeClass":b=[b,I,e];break;default:b=[b,e]}b.push(f);if(a=a.apply(a,
b))if(Ea(a.start)&&(a=a.start()),a instanceof c)a.done(e);else if(Ea(a))return a;return N}function A(a,b,d,e,f){var h=[];s(e,function(e){var l=e[f];l&&h.push(function(){var e,f,h=!1,k=function(a){h||(h=!0,(f||N)(a),e.complete(!a))};e=new c({end:function(){k()},cancel:function(){k(!0)}});f=z(l,a,b,d,function(a){k(!1===a)});return e})});return h}function H(a,b,d,e,f){var h=A(a,b,d,e,f);if(0===h.length){var k,q;"beforeSetClass"===f?(k=A(a,"removeClass",d,e,"beforeRemoveClass"),q=A(a,"addClass",d,e,"beforeAddClass")):
"setClass"===f&&(k=A(a,"removeClass",d,e,"removeClass"),q=A(a,"addClass",d,e,"addClass"));k&&(h=h.concat(k));q&&(h=h.concat(q))}if(0!==h.length)return function(a){var b=[];h.length&&s(h,function(a){b.push(a())});b.length?c.all(b,a):a();return function(a){s(b,function(b){a?b.cancel():b.end()})}}}var u=!1;3===arguments.length&&ta(d)&&(x=d,d=null);x=pa(x);d||(d=a.attr("class")||"",x.addClass&&(d+=" "+x.addClass),x.removeClass&&(d+=" "+x.removeClass));var t=x.addClass,I=x.removeClass,G=f(d),K,v;if(G.length){var M,
h;"leave"===b?(h="leave",M="afterLeave"):(h="before"+b.charAt(0).toUpperCase()+b.substr(1),M=b);"enter"!==b&&"move"!==b&&(K=H(a,b,x,G,h));v=H(a,b,x,G,M)}if(K||v){var q;return{$$willAnimate:!0,end:function(){q?q.end():(u=!0,C(),ha(a,x),q=new c,q.complete(!0));return q},start:function(){function b(c){u=!0;C();ha(a,x);q.complete(c)}if(q)return q;q=new c;var d,f=[];K&&f.push(function(a){d=K(a)});f.length?f.push(function(a){C();a(!0)}):C();v&&f.push(function(a){d=v(a)});q.setHost({end:function(){u||((d||
N)(void 0),b(void 0))},cancel:function(){u||((d||N)(!0),b(!0))}});c.chain(f,b);return q}}}}}]}]).provider("$$animateJsDriver",["$$animationProvider",function(a){a.drivers.push("$$animateJsDriver");this.$get=["$$animateJs","$$AnimateRunner",function(a,c){function d(c){return a(c.element,c.event,c.classes,c.options)}return function(a){if(a.from&&a.to){var b=d(a.from),e=d(a.to);if(b||e)return{start:function(){function a(){return function(){s(d,function(a){a.end()})}}var d=[];b&&d.push(b.start());e&&
d.push(e.start());c.all(d,function(a){f.complete(a)});var f=new c({end:a(),cancel:a()});return f}}}else return d(a)}}]}])})(window,window.angular);
//# sourceMappingURL=angular-animate.min.js.map

/*
 AngularJS v1.8.3
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
*/
(function(n,e){'use strict';function m(d,k,l){var a=l.baseHref(),h=d[0];return function(f,b,c){var d,g;c=c||{};g=c.expires;d=e.isDefined(c.path)?c.path:a;e.isUndefined(b)&&(g="Thu, 01 Jan 1970 00:00:00 GMT",b="");e.isString(g)&&(g=new Date(g));b=encodeURIComponent(f)+"="+encodeURIComponent(b);b=b+(d?";path="+d:"")+(c.domain?";domain="+c.domain:"");b+=g?";expires="+g.toUTCString():"";b+=c.secure?";secure":"";b+=c.samesite?";samesite="+c.samesite:"";c=b.length+1;4096<c&&k.warn("Cookie '"+f+"' possibly not set or overflowed because it was too large ("+
c+" > 4096 bytes)!");h.cookie=b}}e.module("ngCookies",["ng"]).info({angularVersion:"1.8.3"}).provider("$cookies",[function(){var d=this.defaults={};this.$get=["$$cookieReader","$$cookieWriter",function(k,l){return{get:function(a){return k()[a]},getObject:function(a){return(a=this.get(a))?e.fromJson(a):a},getAll:function(){return k()},put:function(a,h,f){l(a,h,f?e.extend({},d,f):d)},putObject:function(a,d,f){this.put(a,e.toJson(d),f)},remove:function(a,h){l(a,void 0,h?e.extend({},d,h):d)}}}]}]);m.$inject=
["$document","$log","$browser"];e.module("ngCookies").provider("$$cookieWriter",function(){this.$get=m})})(window,window.angular);
//# sourceMappingURL=angular-cookies.min.js.map

/*
 AngularJS v1.8.2
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
*/
(function(t,p){'use strict';function q(g,h,s){n.directive(g,["$parse","$swipe",function(a,b){return function(c,e,f){function k(a){if(!d)return!1;var b=Math.abs(a.y-d.y);a=(a.x-d.x)*h;return l&&75>b&&0<a&&30<a&&.3>b/a}var m=a(f[g]),d,l,r=["touch"];p.isDefined(f.ngSwipeDisableMouse)||r.push("mouse");b.bind(e,{start:function(a,b){d=a;l=!0},cancel:function(a){l=!1},end:function(a,b){k(a)&&c.$apply(function(){e.triggerHandler(s);m(c,{$event:b})})}},r)}}])}var n=p.module("ngTouch",[]);n.info({angularVersion:"1.8.2"});
n.factory("$swipe",[function(){function g(a){a=a.originalEvent||a;var b=a.touches&&a.touches.length?a.touches:[a];a=a.changedTouches&&a.changedTouches[0]||b[0];return{x:a.clientX,y:a.clientY}}function h(a,b){var c=[];p.forEach(a,function(a){(a=n[a][b])&&c.push(a)});return c.join(" ")}var n={mouse:{start:"mousedown",move:"mousemove",end:"mouseup"},touch:{start:"touchstart",move:"touchmove",end:"touchend",cancel:"touchcancel"},pointer:{start:"pointerdown",move:"pointermove",end:"pointerup",cancel:"pointercancel"}};
return{bind:function(a,b,c){var e,f,k,m,d=!1;c=c||["mouse","touch","pointer"];a.on(h(c,"start"),function(a){k=g(a);d=!0;f=e=0;m=k;b.start&&b.start(k,a)});var l=h(c,"cancel");if(l)a.on(l,function(a){d=!1;b.cancel&&b.cancel(a)});a.on(h(c,"move"),function(a){if(d&&k){var c=g(a);e+=Math.abs(c.x-m.x);f+=Math.abs(c.y-m.y);m=c;10>e&&10>f||(f>e?(d=!1,b.cancel&&b.cancel(a)):(a.preventDefault(),b.move&&b.move(c,a)))}});a.on(h(c,"end"),function(a){d&&(d=!1,b.end&&b.end(g(a),a))})}}}]);q("ngSwipeLeft",-1,"swipeleft");
q("ngSwipeRight",1,"swiperight")})(window,window.angular);
//# sourceMappingURL=angular-touch.min.js.map

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 2.5.6 - 2017-10-14
 * License: MIT
 */angular.module("ui.bootstrap", ["ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.multiMap","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
angular.module('ui.bootstrap.collapse', [])

  .directive('uibCollapse', ['$animate', '$q', '$parse', '$injector', function($animate, $q, $parse, $injector) {
    var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null;
    return {
      link: function(scope, element, attrs) {
        var expandingExpr = $parse(attrs.expanding),
          expandedExpr = $parse(attrs.expanded),
          collapsingExpr = $parse(attrs.collapsing),
          collapsedExpr = $parse(attrs.collapsed),
          horizontal = false,
          css = {},
          cssTo = {};

        init();

        function init() {
          horizontal = !!('horizontal' in attrs);
          if (horizontal) {
            css = {
              width: ''
            };
            cssTo = {width: '0'};
          } else {
            css = {
              height: ''
            };
            cssTo = {height: '0'};
          }
          if (!scope.$eval(attrs.uibCollapse)) {
            element.addClass('in')
              .addClass('collapse')
              .attr('aria-expanded', true)
              .attr('aria-hidden', false)
              .css(css);
          }
        }

        function getScrollFromElement(element) {
          if (horizontal) {
            return {width: element.scrollWidth + 'px'};
          }
          return {height: element.scrollHeight + 'px'};
        }

        function expand() {
          if (element.hasClass('collapse') && element.hasClass('in')) {
            return;
          }

          $q.resolve(expandingExpr(scope))
            .then(function() {
              element.removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', true)
                .attr('aria-hidden', false);

              if ($animateCss) {
                $animateCss(element, {
                  addClass: 'in',
                  easing: 'ease',
                  css: {
                    overflow: 'hidden'
                  },
                  to: getScrollFromElement(element[0])
                }).start()['finally'](expandDone);
              } else {
                $animate.addClass(element, 'in', {
                  css: {
                    overflow: 'hidden'
                  },
                  to: getScrollFromElement(element[0])
                }).then(expandDone);
              }
            }, angular.noop);
        }

        function expandDone() {
          element.removeClass('collapsing')
            .addClass('collapse')
            .css(css);
          expandedExpr(scope);
        }

        function collapse() {
          if (!element.hasClass('collapse') && !element.hasClass('in')) {
            return collapseDone();
          }

          $q.resolve(collapsingExpr(scope))
            .then(function() {
              element
              // IMPORTANT: The width must be set before adding "collapsing" class.
              // Otherwise, the browser attempts to animate from width 0 (in
              // collapsing class) to the given width here.
                .css(getScrollFromElement(element[0]))
                // initially all panel collapse have the collapse class, this removal
                // prevents the animation from jumping to collapsed state
                .removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', false)
                .attr('aria-hidden', true);

              if ($animateCss) {
                $animateCss(element, {
                  removeClass: 'in',
                  to: cssTo
                }).start()['finally'](collapseDone);
              } else {
                $animate.removeClass(element, 'in', {
                  to: cssTo
                }).then(collapseDone);
              }
            }, angular.noop);
        }

        function collapseDone() {
          element.css(cssTo); // Required so that collapse works when animation is disabled
          element.removeClass('collapsing')
            .addClass('collapse');
          collapsedExpr(scope);
        }

        scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ui.bootstrap.tabindex', [])

.directive('uibTabindexToggle', function() {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      attrs.$observe('disabled', function(disabled) {
        attrs.$set('tabindex', disabled ? -1 : null);
      });
    }
  };
});

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse', 'ui.bootstrap.tabindex'])

.constant('uibAccordionConfig', {
  closeOthers: true
})

.controller('UibAccordionController', ['$scope', '$attrs', 'uibAccordionConfig', function($scope, $attrs, accordionConfig) {
  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ?
      $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if (closeOthers) {
      angular.forEach(this.groups, function(group) {
        if (group !== openGroup) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function(event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if (index !== -1) {
      this.groups.splice(index, 1);
    }
  };
}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('uibAccordion', function() {
  return {
    controller: 'UibAccordionController',
    controllerAs: 'accordion',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/accordion/accordion.html';
    }
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('uibAccordionGroup', function() {
  return {
    require: '^uibAccordion',         // We need this directive to be inside an accordion
    transclude: true,              // It transcludes the contents of the directive into the template
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/accordion/accordion-group.html';
    },
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      panelClass: '@?',           // Ditto with panelClass
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      element.addClass('panel');
      accordionCtrl.addGroup(scope);

      scope.openClass = attrs.openClass || 'panel-open';
      scope.panelClass = attrs.panelClass || 'panel-default';
      scope.$watch('isOpen', function(value) {
        element.toggleClass(scope.openClass, !!value);
        if (value) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function($event) {
        if (!scope.isDisabled) {
          if (!$event || $event.which === 32) {
            scope.isOpen = !scope.isOpen;
          }
        }
      };

      var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
      scope.headingId = id + '-tab';
      scope.panelId = id + '-panel';
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
.directive('uibAccordionHeading', function() {
  return {
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^uibAccordionGroup',
    link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
.directive('uibAccordionTransclude', function() {
  return {
    require: '^uibAccordionGroup',
    link: function(scope, element, attrs, controller) {
      scope.$watch(function() { return controller[attrs.uibAccordionTransclude]; }, function(heading) {
        if (heading) {
          var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
          elem.html('');
          elem.append(heading);
        }
      });
    }
  };

  function getHeaderSelectors() {
      return 'uib-accordion-header,' +
          'data-uib-accordion-header,' +
          'x-uib-accordion-header,' +
          'uib\\:accordion-header,' +
          '[uib-accordion-header],' +
          '[data-uib-accordion-header],' +
          '[x-uib-accordion-header]';
  }
});

angular.module('ui.bootstrap.alert', [])

.controller('UibAlertController', ['$scope', '$element', '$attrs', '$interpolate', '$timeout', function($scope, $element, $attrs, $interpolate, $timeout) {
  $scope.closeable = !!$attrs.close;
  $element.addClass('alert');
  $attrs.$set('role', 'alert');
  if ($scope.closeable) {
    $element.addClass('alert-dismissible');
  }

  var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ?
    $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;

  if (dismissOnTimeout) {
    $timeout(function() {
      $scope.close();
    }, parseInt(dismissOnTimeout, 10));
  }
}])

.directive('uibAlert', function() {
  return {
    controller: 'UibAlertController',
    controllerAs: 'alert',
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/alert/alert.html';
    },
    transclude: true,
    scope: {
      close: '&'
    }
  };
});

angular.module('ui.bootstrap.buttons', [])

.constant('uibButtonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('UibButtonsController', ['uibButtonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('uibBtnRadio', ['$parse', function($parse) {
  return {
    require: ['uibBtnRadio', 'ngModel'],
    controller: 'UibButtonsController',
    controllerAs: 'buttons',
    link: function(scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      var uncheckableExpr = $parse(attrs.uibUncheckable);

      element.find('input').css({display: 'none'});

      //model -> UI
      ngModelCtrl.$render = function() {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
      };

      //ui->model
      element.on(buttonsCtrl.toggleEvent, function() {
        if (attrs.disabled) {
          return;
        }

        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function() {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
            ngModelCtrl.$render();
          });
        }
      });

      if (attrs.uibUncheckable) {
        scope.$watch(uncheckableExpr, function(uncheckable) {
          attrs.$set('uncheckable', uncheckable ? '' : undefined);
        });
      }
    }
  };
}])

.directive('uibBtnCheckbox', function() {
  return {
    require: ['uibBtnCheckbox', 'ngModel'],
    controller: 'UibButtonsController',
    controllerAs: 'button',
    link: function(scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      element.find('input').css({display: 'none'});

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attribute, defaultValue) {
        return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function() {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.on(buttonsCtrl.toggleEvent, function() {
        if (attrs.disabled) {
          return;
        }

        scope.$apply(function() {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

angular.module('ui.bootstrap.carousel', [])

.controller('UibCarouselController', ['$scope', '$element', '$interval', '$timeout', '$animate', function($scope, $element, $interval, $timeout, $animate) {
  var self = this,
    slides = self.slides = $scope.slides = [],
    SLIDE_DIRECTION = 'uib-slideDirection',
    currentIndex = $scope.active,
    currentInterval, isPlaying;

  var destroyed = false;
  $element.addClass('carousel');

  self.addSlide = function(slide, element) {
    slides.push({
      slide: slide,
      element: element
    });
    slides.sort(function(a, b) {
      return +a.slide.index - +b.slide.index;
    });
    //if this is the first slide or the slide is set to active, select it
    if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
      if ($scope.$currentTransition) {
        $scope.$currentTransition = null;
      }

      currentIndex = slide.index;
      $scope.active = slide.index;
      setActive(currentIndex);
      self.select(slides[findSlideIndex(slide)]);
      if (slides.length === 1) {
        $scope.play();
      }
    }
  };

  self.getCurrentIndex = function() {
    for (var i = 0; i < slides.length; i++) {
      if (slides[i].slide.index === currentIndex) {
        return i;
      }
    }
  };

  self.next = $scope.next = function() {
    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

    if (newIndex === 0 && $scope.noWrap()) {
      $scope.pause();
      return;
    }

    return self.select(slides[newIndex], 'next');
  };

  self.prev = $scope.prev = function() {
    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

    if ($scope.noWrap() && newIndex === slides.length - 1) {
      $scope.pause();
      return;
    }

    return self.select(slides[newIndex], 'prev');
  };

  self.removeSlide = function(slide) {
    var index = findSlideIndex(slide);

    //get the index of the slide inside the carousel
    slides.splice(index, 1);
    if (slides.length > 0 && currentIndex === index) {
      if (index >= slides.length) {
        currentIndex = slides.length - 1;
        $scope.active = currentIndex;
        setActive(currentIndex);
        self.select(slides[slides.length - 1]);
      } else {
        currentIndex = index;
        $scope.active = currentIndex;
        setActive(currentIndex);
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
      $scope.active = currentIndex;
    }

    //clean the active value when no more slide
    if (slides.length === 0) {
      currentIndex = null;
      $scope.active = null;
    }
  };

  /* direction: "prev" or "next" */
  self.select = $scope.select = function(nextSlide, direction) {
    var nextIndex = findSlideIndex(nextSlide.slide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
    }
    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (nextSlide.slide.index !== currentIndex &&
      !$scope.$currentTransition) {
      goNext(nextSlide.slide, nextIndex, direction);
    }
  };

  /* Allow outside people to call indexOf on slides array */
  $scope.indexOfSlide = function(slide) {
    return +slide.slide.index;
  };

  $scope.isActive = function(slide) {
    return $scope.active === slide.slide.index;
  };

  $scope.isPrevDisabled = function() {
    return $scope.active === 0 && $scope.noWrap();
  };

  $scope.isNextDisabled = function() {
    return $scope.active === slides.length - 1 && $scope.noWrap();
  };

  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      resetTimer();
    }
  };

  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };

  $element.on('mouseenter', $scope.pause);
  $element.on('mouseleave', $scope.play);

  $scope.$on('$destroy', function() {
    destroyed = true;
    resetTimer();
  });

  $scope.$watch('noTransition', function(noTransition) {
    $animate.enabled($element, !noTransition);
  });

  $scope.$watch('interval', restartTimer);

  $scope.$watchCollection('slides', resetTransition);

  $scope.$watch('active', function(index) {
    if (angular.isNumber(index) && currentIndex !== index) {
      for (var i = 0; i < slides.length; i++) {
        if (slides[i].slide.index === index) {
          index = i;
          break;
        }
      }

      var slide = slides[index];
      if (slide) {
        setActive(index);
        self.select(slides[index]);
        currentIndex = index;
      }
    }
  });

  function getSlideByIndex(index) {
    for (var i = 0, l = slides.length; i < l; ++i) {
      if (slides[i].index === index) {
        return slides[i];
      }
    }
  }

  function setActive(index) {
    for (var i = 0; i < slides.length; i++) {
      slides[i].slide.active = i === index;
    }
  }

  function goNext(slide, index, direction) {
    if (destroyed) {
      return;
    }

    angular.extend(slide, {direction: direction});
    angular.extend(slides[currentIndex].slide || {}, {direction: direction});
    if ($animate.enabled($element) && !$scope.$currentTransition &&
      slides[index].element && self.slides.length > 1) {
      slides[index].element.data(SLIDE_DIRECTION, slide.direction);
      var currentIdx = self.getCurrentIndex();

      if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
      }

      $scope.$currentTransition = true;
      $animate.on('addClass', slides[index].element, function(element, phase) {
        if (phase === 'close') {
          $scope.$currentTransition = null;
          $animate.off('addClass', element);
        }
      });
    }

    $scope.active = slide.index;
    currentIndex = slide.index;
    setActive(index);

    //every time you change slides, reset the timer
    restartTimer();
  }

  function findSlideIndex(slide) {
    for (var i = 0; i < slides.length; i++) {
      if (slides[i].slide === slide) {
        return i;
      }
    }
  }

  function resetTimer() {
    if (currentInterval) {
      $interval.cancel(currentInterval);
      currentInterval = null;
    }
  }

  function resetTransition(slides) {
    if (!slides.length) {
      $scope.$currentTransition = null;
    }
  }

  function restartTimer() {
    resetTimer();
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval > 0) {
      currentInterval = $interval(timerFn, interval);
    }
  }

  function timerFn() {
    var interval = +$scope.interval;
    if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
      $scope.next();
    } else {
      $scope.pause();
    }
  }
}])

.directive('uibCarousel', function() {
  return {
    transclude: true,
    controller: 'UibCarouselController',
    controllerAs: 'carousel',
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/carousel/carousel.html';
    },
    scope: {
      active: '=',
      interval: '=',
      noTransition: '=',
      noPause: '=',
      noWrap: '&'
    }
  };
})

.directive('uibSlide', ['$animate', function($animate) {
  return {
    require: '^uibCarousel',
    restrict: 'A',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/carousel/slide.html';
    },
    scope: {
      actual: '=?',
      index: '=?'
    },
    link: function (scope, element, attrs, carouselCtrl) {
      element.addClass('item');
      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        $animate[active ? 'addClass' : 'removeClass'](element, 'active');
      });
    }
  };
}])

.animation('.item', ['$animateCss',
function($animateCss) {
  var SLIDE_DIRECTION = 'uib-slideDirection';

  function removeClass(element, className, callback) {
    element.removeClass(className);
    if (callback) {
      callback();
    }
  }

  return {
    beforeAddClass: function(element, className, done) {
      if (className === 'active') {
        var stopped = false;
        var direction = element.data(SLIDE_DIRECTION);
        var directionClass = direction === 'next' ? 'left' : 'right';
        var removeClassFn = removeClass.bind(this, element,
          directionClass + ' ' + direction, done);
        element.addClass(direction);

        $animateCss(element, {addClass: directionClass})
          .start()
          .done(removeClassFn);

        return function() {
          stopped = true;
        };
      }
      done();
    },
    beforeRemoveClass: function (element, className, done) {
      if (className === 'active') {
        var stopped = false;
        var direction = element.data(SLIDE_DIRECTION);
        var directionClass = direction === 'next' ? 'left' : 'right';
        var removeClassFn = removeClass.bind(this, element, directionClass, done);

        $animateCss(element, {addClass: directionClass})
          .start()
          .done(removeClassFn);

        return function() {
          stopped = true;
        };
      }
      done();
    }
  };
}]);

angular.module('ui.bootstrap.dateparser', [])

.service('uibDateParser', ['$log', '$locale', 'dateFilter', 'orderByFilter', 'filterFilter', function($log, $locale, dateFilter, orderByFilter, filterFilter) {
  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

  var localeId;
  var formatCodeToRegex;

  this.init = function() {
    localeId = $locale.id;

    this.parsers = {};
    this.formatters = {};

    formatCodeToRegex = [
      {
        key: 'yyyy',
        regex: '\\d{4}',
        apply: function(value) { this.year = +value; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'yyyy');
        }
      },
      {
        key: 'yy',
        regex: '\\d{2}',
        apply: function(value) { value = +value; this.year = value < 69 ? value + 2000 : value + 1900; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'yy');
        }
      },
      {
        key: 'y',
        regex: '\\d{1,4}',
        apply: function(value) { this.year = +value; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'y');
        }
      },
      {
        key: 'M!',
        regex: '0?[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) {
          var value = date.getMonth();
          if (/^[0-9]$/.test(value)) {
            return dateFilter(date, 'MM');
          }

          return dateFilter(date, 'M');
        }
      },
      {
        key: 'MMMM',
        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'MMMM'); }
      },
      {
        key: 'MMM',
        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'MMM'); }
      },
      {
        key: 'MM',
        regex: '0[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) { return dateFilter(date, 'MM'); }
      },
      {
        key: 'M',
        regex: '[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) { return dateFilter(date, 'M'); }
      },
      {
        key: 'd!',
        regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) {
          var value = date.getDate();
          if (/^[1-9]$/.test(value)) {
            return dateFilter(date, 'dd');
          }

          return dateFilter(date, 'd');
        }
      },
      {
        key: 'dd',
        regex: '[0-2][0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) { return dateFilter(date, 'dd'); }
      },
      {
        key: 'd',
        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) { return dateFilter(date, 'd'); }
      },
      {
        key: 'EEEE',
        regex: $locale.DATETIME_FORMATS.DAY.join('|'),
        formatter: function(date) { return dateFilter(date, 'EEEE'); }
      },
      {
        key: 'EEE',
        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
        formatter: function(date) { return dateFilter(date, 'EEE'); }
      },
      {
        key: 'HH',
        regex: '(?:0|1)[0-9]|2[0-3]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'HH'); }
      },
      {
        key: 'hh',
        regex: '0[0-9]|1[0-2]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'hh'); }
      },
      {
        key: 'H',
        regex: '1?[0-9]|2[0-3]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'H'); }
      },
      {
        key: 'h',
        regex: '[0-9]|1[0-2]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'h'); }
      },
      {
        key: 'mm',
        regex: '[0-5][0-9]',
        apply: function(value) { this.minutes = +value; },
        formatter: function(date) { return dateFilter(date, 'mm'); }
      },
      {
        key: 'm',
        regex: '[0-9]|[1-5][0-9]',
        apply: function(value) { this.minutes = +value; },
        formatter: function(date) { return dateFilter(date, 'm'); }
      },
      {
        key: 'sss',
        regex: '[0-9][0-9][0-9]',
        apply: function(value) { this.milliseconds = +value; },
        formatter: function(date) { return dateFilter(date, 'sss'); }
      },
      {
        key: 'ss',
        regex: '[0-5][0-9]',
        apply: function(value) { this.seconds = +value; },
        formatter: function(date) { return dateFilter(date, 'ss'); }
      },
      {
        key: 's',
        regex: '[0-9]|[1-5][0-9]',
        apply: function(value) { this.seconds = +value; },
        formatter: function(date) { return dateFilter(date, 's'); }
      },
      {
        key: 'a',
        regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
        apply: function(value) {
          if (this.hours === 12) {
            this.hours = 0;
          }

          if (value === 'PM') {
            this.hours += 12;
          }
        },
        formatter: function(date) { return dateFilter(date, 'a'); }
      },
      {
        key: 'Z',
        regex: '[+-]\\d{4}',
        apply: function(value) {
          var matches = value.match(/([+-])(\d{2})(\d{2})/),
            sign = matches[1],
            hours = matches[2],
            minutes = matches[3];
          this.hours += toInt(sign + hours);
          this.minutes += toInt(sign + minutes);
        },
        formatter: function(date) {
          return dateFilter(date, 'Z');
        }
      },
      {
        key: 'ww',
        regex: '[0-4][0-9]|5[0-3]',
        formatter: function(date) { return dateFilter(date, 'ww'); }
      },
      {
        key: 'w',
        regex: '[0-9]|[1-4][0-9]|5[0-3]',
        formatter: function(date) { return dateFilter(date, 'w'); }
      },
      {
        key: 'GGGG',
        regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
        formatter: function(date) { return dateFilter(date, 'GGGG'); }
      },
      {
        key: 'GGG',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'GGG'); }
      },
      {
        key: 'GG',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'GG'); }
      },
      {
        key: 'G',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'G'); }
      }
    ];

    if (angular.version.major >= 1 && angular.version.minor > 4) {
      formatCodeToRegex.push({
        key: 'LLLL',
        regex: $locale.DATETIME_FORMATS.STANDALONEMONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.STANDALONEMONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'LLLL'); }
      });
    }
  };

  this.init();

  function getFormatCodeToRegex(key) {
    return filterFilter(formatCodeToRegex, {key: key}, true)[0];
  }

  this.getParser = function (key) {
    var f = getFormatCodeToRegex(key);
    return f && f.apply || null;
  };

  this.overrideParser = function (key, parser) {
    var f = getFormatCodeToRegex(key);
    if (f && angular.isFunction(parser)) {
      this.parsers = {};
      f.apply = parser;
    }
  }.bind(this);

  function createParser(format) {
    var map = [], regex = format.split('');

    // check for literal values
    var quoteIndex = format.indexOf('\'');
    if (quoteIndex > -1) {
      var inLiteral = false;
      format = format.split('');
      for (var i = quoteIndex; i < format.length; i++) {
        if (inLiteral) {
          if (format[i] === '\'') {
            if (i + 1 < format.length && format[i+1] === '\'') { // escaped single quote
              format[i+1] = '$';
              regex[i+1] = '';
            } else { // end of literal
              regex[i] = '';
              inLiteral = false;
            }
          }
          format[i] = '$';
        } else {
          if (format[i] === '\'') { // start of literal
            format[i] = '$';
            regex[i] = '';
            inLiteral = true;
          }
        }
      }

      format = format.join('');
    }

    angular.forEach(formatCodeToRegex, function(data) {
      var index = format.indexOf(data.key);

      if (index > -1) {
        format = format.split('');

        regex[index] = '(' + data.regex + ')';
        format[index] = '$'; // Custom symbol to define consumed part of format
        for (var i = index + 1, n = index + data.key.length; i < n; i++) {
          regex[i] = '';
          format[i] = '$';
        }
        format = format.join('');

        map.push({
          index: index,
          key: data.key,
          apply: data.apply,
          matcher: data.regex
        });
      }
    });

    return {
      regex: new RegExp('^' + regex.join('') + '$'),
      map: orderByFilter(map, 'index')
    };
  }

  function createFormatter(format) {
    var formatters = [];
    var i = 0;
    var formatter, literalIdx;
    while (i < format.length) {
      if (angular.isNumber(literalIdx)) {
        if (format.charAt(i) === '\'') {
          if (i + 1 >= format.length || format.charAt(i + 1) !== '\'') {
            formatters.push(constructLiteralFormatter(format, literalIdx, i));
            literalIdx = null;
          }
        } else if (i === format.length) {
          while (literalIdx < format.length) {
            formatter = constructFormatterFromIdx(format, literalIdx);
            formatters.push(formatter);
            literalIdx = formatter.endIdx;
          }
        }

        i++;
        continue;
      }

      if (format.charAt(i) === '\'') {
        literalIdx = i;
        i++;
        continue;
      }

      formatter = constructFormatterFromIdx(format, i);

      formatters.push(formatter.parser);
      i = formatter.endIdx;
    }

    return formatters;
  }

  function constructLiteralFormatter(format, literalIdx, endIdx) {
    return function() {
      return format.substr(literalIdx + 1, endIdx - literalIdx - 1);
    };
  }

  function constructFormatterFromIdx(format, i) {
    var currentPosStr = format.substr(i);
    for (var j = 0; j < formatCodeToRegex.length; j++) {
      if (new RegExp('^' + formatCodeToRegex[j].key).test(currentPosStr)) {
        var data = formatCodeToRegex[j];
        return {
          endIdx: i + data.key.length,
          parser: data.formatter
        };
      }
    }

    return {
      endIdx: i + 1,
      parser: function() {
        return currentPosStr.charAt(0);
      }
    };
  }

  this.filter = function(date, format) {
    if (!angular.isDate(date) || isNaN(date) || !format) {
      return '';
    }

    format = $locale.DATETIME_FORMATS[format] || format;

    if ($locale.id !== localeId) {
      this.init();
    }

    if (!this.formatters[format]) {
      this.formatters[format] = createFormatter(format);
    }

    var formatters = this.formatters[format];

    return formatters.reduce(function(str, formatter) {
      return str + formatter(date);
    }, '');
  };

  this.parse = function(input, format, baseDate) {
    if (!angular.isString(input) || !format) {
      return input;
    }

    format = $locale.DATETIME_FORMATS[format] || format;
    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

    if ($locale.id !== localeId) {
      this.init();
    }

    if (!this.parsers[format]) {
      this.parsers[format] = createParser(format, 'apply');
    }

    var parser = this.parsers[format],
        regex = parser.regex,
        map = parser.map,
        results = input.match(regex),
        tzOffset = false;
    if (results && results.length) {
      var fields, dt;
      if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
        fields = {
          year: baseDate.getFullYear(),
          month: baseDate.getMonth(),
          date: baseDate.getDate(),
          hours: baseDate.getHours(),
          minutes: baseDate.getMinutes(),
          seconds: baseDate.getSeconds(),
          milliseconds: baseDate.getMilliseconds()
        };
      } else {
        if (baseDate) {
          $log.warn('dateparser:', 'baseDate is not a valid date');
        }
        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
      }

      for (var i = 1, n = results.length; i < n; i++) {
        var mapper = map[i - 1];
        if (mapper.matcher === 'Z') {
          tzOffset = true;
        }

        if (mapper.apply) {
          mapper.apply.call(fields, results[i]);
        }
      }

      var datesetter = tzOffset ? Date.prototype.setUTCFullYear :
        Date.prototype.setFullYear;
      var timesetter = tzOffset ? Date.prototype.setUTCHours :
        Date.prototype.setHours;

      if (isValid(fields.year, fields.month, fields.date)) {
        if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
          dt = new Date(baseDate);
          datesetter.call(dt, fields.year, fields.month, fields.date);
          timesetter.call(dt, fields.hours, fields.minutes,
            fields.seconds, fields.milliseconds);
        } else {
          dt = new Date(0);
          datesetter.call(dt, fields.year, fields.month, fields.date);
          timesetter.call(dt, fields.hours || 0, fields.minutes || 0,
            fields.seconds || 0, fields.milliseconds || 0);
        }
      }

      return dt;
    }
  };

  // Check if date is valid for specific month (and year for February).
  // Month: 0 = Jan, 1 = Feb, etc
  function isValid(year, month, date) {
    if (date < 1) {
      return false;
    }

    if (month === 1 && date > 28) {
      return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
    }

    if (month === 3 || month === 5 || month === 8 || month === 10) {
      return date < 31;
    }

    return true;
  }

  function toInt(str) {
    return parseInt(str, 10);
  }

  this.toTimezone = toTimezone;
  this.fromTimezone = fromTimezone;
  this.timezoneToOffset = timezoneToOffset;
  this.addDateMinutes = addDateMinutes;
  this.convertTimezoneToLocal = convertTimezoneToLocal;

  function toTimezone(date, timezone) {
    return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
  }

  function fromTimezone(date, timezone) {
    return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
  }

  //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207
  function timezoneToOffset(timezone, fallback) {
    timezone = timezone.replace(/:/g, '');
    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
  }

  function addDateMinutes(date, minutes) {
    date = new Date(date.getTime());
    date.setMinutes(date.getMinutes() + minutes);
    return date;
  }

  function convertTimezoneToLocal(date, timezone, reverse) {
    reverse = reverse ? -1 : 1;
    var dateTimezoneOffset = date.getTimezoneOffset();
    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
  }
}]);

// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
// at most one element.
angular.module('ui.bootstrap.isClass', [])
.directive('uibIsClass', [
         '$animate',
function ($animate) {
  //                    11111111          22222222
  var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
  //                    11111111           22222222
  var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;

  var dataPerTracked = {};

  return {
    restrict: 'A',
    compile: function(tElement, tAttrs) {
      var linkedScopes = [];
      var instances = [];
      var expToData = {};
      var lastActivated = null;
      var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
      var onExp = onExpMatches[2];
      var expsStr = onExpMatches[1];
      var exps = expsStr.split(',');

      return linkFn;

      function linkFn(scope, element, attrs) {
        linkedScopes.push(scope);
        instances.push({
          scope: scope,
          element: element
        });

        exps.forEach(function(exp, k) {
          addForExp(exp, scope);
        });

        scope.$on('$destroy', removeScope);
      }

      function addForExp(exp, scope) {
        var matches = exp.match(IS_REGEXP);
        var clazz = scope.$eval(matches[1]);
        var compareWithExp = matches[2];
        var data = expToData[exp];
        if (!data) {
          var watchFn = function(compareWithVal) {
            var newActivated = null;
            instances.some(function(instance) {
              var thisVal = instance.scope.$eval(onExp);
              if (thisVal === compareWithVal) {
                newActivated = instance;
                return true;
              }
            });
            if (data.lastActivated !== newActivated) {
              if (data.lastActivated) {
                $animate.removeClass(data.lastActivated.element, clazz);
              }
              if (newActivated) {
                $animate.addClass(newActivated.element, clazz);
              }
              data.lastActivated = newActivated;
            }
          };
          expToData[exp] = data = {
            lastActivated: null,
            scope: scope,
            watchFn: watchFn,
            compareWithExp: compareWithExp,
            watcher: scope.$watch(compareWithExp, watchFn)
          };
        }
        data.watchFn(scope.$eval(compareWithExp));
      }

      function removeScope(e) {
        var removedScope = e.targetScope;
        var index = linkedScopes.indexOf(removedScope);
        linkedScopes.splice(index, 1);
        instances.splice(index, 1);
        if (linkedScopes.length) {
          var newWatchScope = linkedScopes[0];
          angular.forEach(expToData, function(data) {
            if (data.scope === removedScope) {
              data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
              data.scope = newWatchScope;
            }
          });
        } else {
          expToData = {};
        }
      }
    }
  };
}]);
angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

.value('$datepickerSuppressError', false)

.value('$datepickerLiteralWarning', true)

.constant('uibDatepickerConfig', {
  datepickerMode: 'day',
  formatDay: 'dd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'EEE',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  maxDate: null,
  maxMode: 'year',
  minDate: null,
  minMode: 'day',
  monthColumns: 3,
  ngModelOptions: {},
  shortcutPropagation: false,
  showWeeks: true,
  yearColumns: 5,
  yearRows: 4
})

.controller('UibDatepickerController', ['$scope', '$element', '$attrs', '$parse', '$interpolate', '$locale', '$log', 'dateFilter', 'uibDatepickerConfig', '$datepickerLiteralWarning', '$datepickerSuppressError', 'uibDateParser',
  function($scope, $element, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
      ngModelOptions = {},
      watchListeners = [];

  $element.addClass('uib-datepicker');
  $attrs.$set('role', 'application');

  if (!$scope.datepickerOptions) {
    $scope.datepickerOptions = {};
  }

  // Modes chain
  this.modes = ['day', 'month', 'year'];

  [
    'customClass',
    'dateDisabled',
    'datepickerMode',
    'formatDay',
    'formatDayHeader',
    'formatDayTitle',
    'formatMonth',
    'formatMonthTitle',
    'formatYear',
    'maxDate',
    'maxMode',
    'minDate',
    'minMode',
    'monthColumns',
    'showWeeks',
    'shortcutPropagation',
    'startingDay',
    'yearColumns',
    'yearRows'
  ].forEach(function(key) {
    switch (key) {
      case 'customClass':
      case 'dateDisabled':
        $scope[key] = $scope.datepickerOptions[key] || angular.noop;
        break;
      case 'datepickerMode':
        $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ?
          $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
        break;
      case 'formatDay':
      case 'formatDayHeader':
      case 'formatDayTitle':
      case 'formatMonth':
      case 'formatMonthTitle':
      case 'formatYear':
        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
          $interpolate($scope.datepickerOptions[key])($scope.$parent) :
          datepickerConfig[key];
        break;
      case 'monthColumns':
      case 'showWeeks':
      case 'shortcutPropagation':
      case 'yearColumns':
      case 'yearRows':
        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
          $scope.datepickerOptions[key] : datepickerConfig[key];
        break;
      case 'startingDay':
        if (angular.isDefined($scope.datepickerOptions.startingDay)) {
          self.startingDay = $scope.datepickerOptions.startingDay;
        } else if (angular.isNumber(datepickerConfig.startingDay)) {
          self.startingDay = datepickerConfig.startingDay;
        } else {
          self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
        }

        break;
      case 'maxDate':
      case 'minDate':
        $scope.$watch('datepickerOptions.' + key, function(value) {
          if (value) {
            if (angular.isDate(value)) {
              self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.getOption('timezone'));
            } else {
              if ($datepickerLiteralWarning) {
                $log.warn('Literal date support has been deprecated, please switch to date object usage');
              }

              self[key] = new Date(dateFilter(value, 'medium'));
            }
          } else {
            self[key] = datepickerConfig[key] ?
              dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.getOption('timezone')) :
              null;
          }

          self.refreshView();
        });

        break;
      case 'maxMode':
      case 'minMode':
        if ($scope.datepickerOptions[key]) {
          $scope.$watch(function() { return $scope.datepickerOptions[key]; }, function(value) {
            self[key] = $scope[key] = angular.isDefined(value) ? value : $scope.datepickerOptions[key];
            if (key === 'minMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) ||
              key === 'maxMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
              $scope.datepickerMode = self[key];
              $scope.datepickerOptions.datepickerMode = self[key];
            }
          });
        } else {
          self[key] = $scope[key] = datepickerConfig[key] || null;
        }

        break;
    }
  });

  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

  $scope.disabled = angular.isDefined($attrs.disabled) || false;
  if (angular.isDefined($attrs.ngDisabled)) {
    watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
      $scope.disabled = disabled;
      self.refreshView();
    }));
  }

  $scope.isActive = function(dateObject) {
    if (self.compare(dateObject.date, self.activeDate) === 0) {
      $scope.activeDateId = dateObject.uid;
      return true;
    }
    return false;
  };

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelOptions = extractOptions(ngModelCtrl);

    if ($scope.datepickerOptions.initDate) {
      self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.getOption('timezone')) || new Date();
      $scope.$watch('datepickerOptions.initDate', function(initDate) {
        if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
          self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.getOption('timezone'));
          self.refreshView();
        }
      });
    } else {
      self.activeDate = new Date();
    }

    var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
    this.activeDate = !isNaN(date) ?
      dateParser.fromTimezone(date, ngModelOptions.getOption('timezone')) :
      dateParser.fromTimezone(new Date(), ngModelOptions.getOption('timezone'));

    ngModelCtrl.$render = function() {
      self.render();
    };
  };

  this.render = function() {
    if (ngModelCtrl.$viewValue) {
      var date = new Date(ngModelCtrl.$viewValue),
          isValid = !isNaN(date);

      if (isValid) {
        this.activeDate = dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'));
      } else if (!$datepickerSuppressError) {
        $log.error('Datepicker directive: "ng-model" value must be a Date object');
      }
    }
    this.refreshView();
  };

  this.refreshView = function() {
    if (this.element) {
      $scope.selectedDt = null;
      this._refreshView();
      if ($scope.activeDt) {
        $scope.activeDateId = $scope.activeDt.uid;
      }

      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
      date = dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'));
      ngModelCtrl.$setValidity('dateDisabled', !date ||
        this.element && !this.isDisabled(date));
    }
  };

  this.createDateObject = function(date, format) {
    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
    model = dateParser.fromTimezone(model, ngModelOptions.getOption('timezone'));
    var today = new Date();
    today = dateParser.fromTimezone(today, ngModelOptions.getOption('timezone'));
    var time = this.compare(date, today);
    var dt = {
      date: date,
      label: dateParser.filter(date, format),
      selected: model && this.compare(date, model) === 0,
      disabled: this.isDisabled(date),
      past: time < 0,
      current: time === 0,
      future: time > 0,
      customClass: this.customClass(date) || null
    };

    if (model && this.compare(date, model) === 0) {
      $scope.selectedDt = dt;
    }

    if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
      $scope.activeDt = dt;
    }

    return dt;
  };

  this.isDisabled = function(date) {
    return $scope.disabled ||
      this.minDate && this.compare(date, this.minDate) < 0 ||
      this.maxDate && this.compare(date, this.maxDate) > 0 ||
      $scope.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode});
  };

  this.customClass = function(date) {
    return $scope.customClass({date: date, mode: $scope.datepickerMode});
  };

  // Split array into smaller arrays
  this.split = function(arr, size) {
    var arrays = [];
    while (arr.length > 0) {
      arrays.push(arr.splice(0, size));
    }
    return arrays;
  };

  $scope.select = function(date) {
    if ($scope.datepickerMode === self.minMode) {
      var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.getOption('timezone')) : new Date(0, 0, 0, 0, 0, 0, 0);
      dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
      dt = dateParser.toTimezone(dt, ngModelOptions.getOption('timezone'));
      ngModelCtrl.$setViewValue(dt);
      ngModelCtrl.$render();
    } else {
      self.activeDate = date;
      setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);

      $scope.$emit('uib:datepicker.mode');
    }

    $scope.$broadcast('uib:datepicker.focus');
  };

  $scope.move = function(direction) {
    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
    self.activeDate.setFullYear(year, month, 1);
    self.refreshView();
  };

  $scope.toggleMode = function(direction) {
    direction = direction || 1;

    if ($scope.datepickerMode === self.maxMode && direction === 1 ||
      $scope.datepickerMode === self.minMode && direction === -1) {
      return;
    }

    setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);

    $scope.$emit('uib:datepicker.mode');
  };

  // Key event mapper
  $scope.keys = { 13: 'enter', 32: 'space', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 37: 'left', 38: 'up', 39: 'right', 40: 'down' };

  var focusElement = function() {
    self.element[0].focus();
  };

  // Listen for focus requests from popup directive
  $scope.$on('uib:datepicker.focus', focusElement);

  $scope.keydown = function(evt) {
    var key = $scope.keys[evt.which];

    if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
      return;
    }

    evt.preventDefault();
    if (!self.shortcutPropagation) {
      evt.stopPropagation();
    }

    if (key === 'enter' || key === 'space') {
      if (self.isDisabled(self.activeDate)) {
        return; // do nothing
      }
      $scope.select(self.activeDate);
    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
      $scope.toggleMode(key === 'up' ? 1 : -1);
    } else {
      self.handleKeyDown(key, evt);
      self.refreshView();
    }
  };

  $element.on('keydown', function(evt) {
    $scope.$apply(function() {
      $scope.keydown(evt);
    });
  });

  $scope.$on('$destroy', function() {
    //Clear all watch listeners on destroy
    while (watchListeners.length) {
      watchListeners.shift()();
    }
  });

  function setMode(mode) {
    $scope.datepickerMode = mode;
    $scope.datepickerOptions.datepickerMode = mode;
  }

  function extractOptions(ngModelCtrl) {
    var ngModelOptions;

    if (angular.version.minor < 6) { // in angular < 1.6 $options could be missing
      // guarantee a value
      ngModelOptions = ngModelCtrl.$options ||
        $scope.datepickerOptions.ngModelOptions ||
        datepickerConfig.ngModelOptions ||
        {};

      // mimic 1.6+ api
      ngModelOptions.getOption = function (key) {
        return ngModelOptions[key];
      };
    } else { // in angular >=1.6 $options is always present
      // ng-model-options defaults timezone to null; don't let its precedence squash a non-null value
      var timezone = ngModelCtrl.$options.getOption('timezone') ||
        ($scope.datepickerOptions.ngModelOptions ? $scope.datepickerOptions.ngModelOptions.timezone : null) ||
        (datepickerConfig.ngModelOptions ? datepickerConfig.ngModelOptions.timezone : null);

      // values passed to createChild override existing values
      ngModelOptions = ngModelCtrl.$options // start with a ModelOptions instance
        .createChild(datepickerConfig.ngModelOptions) // lowest precedence
        .createChild($scope.datepickerOptions.ngModelOptions)
        .createChild(ngModelCtrl.$options) // highest precedence
        .createChild({timezone: timezone}); // to keep from squashing a non-null value
    }

    return ngModelOptions;
  }
}])

.controller('UibDaypickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

  this.step = { months: 1 };
  this.element = $element;
  function getDaysInMonth(year, month) {
    return month === 1 && year % 4 === 0 &&
      (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
  }

  this.init = function(ctrl) {
    angular.extend(ctrl, this);
    scope.showWeeks = ctrl.showWeeks;
    ctrl.refreshView();
  };

  this.getDates = function(startDate, n) {
    var dates = new Array(n), current = new Date(startDate), i = 0, date;
    while (i < n) {
      date = new Date(current);
      dates[i++] = date;
      current.setDate(current.getDate() + 1);
    }
    return dates;
  };

  this._refreshView = function() {
    var year = this.activeDate.getFullYear(),
      month = this.activeDate.getMonth(),
      firstDayOfMonth = new Date(this.activeDate);

    firstDayOfMonth.setFullYear(year, month, 1);

    var difference = this.startingDay - firstDayOfMonth.getDay(),
      numDisplayedFromPreviousMonth = difference > 0 ?
        7 - difference : - difference,
      firstDate = new Date(firstDayOfMonth);

    if (numDisplayedFromPreviousMonth > 0) {
      firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
    }

    // 42 is the number of days on a six-week calendar
    var days = this.getDates(firstDate, 42);
    for (var i = 0; i < 42; i ++) {
      days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
        secondary: days[i].getMonth() !== month,
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.labels = new Array(7);
    for (var j = 0; j < 7; j++) {
      scope.labels[j] = {
        abbr: dateFilter(days[j].date, this.formatDayHeader),
        full: dateFilter(days[j].date, 'EEEE')
      };
    }

    scope.title = dateFilter(this.activeDate, this.formatDayTitle);
    scope.rows = this.split(days, 7);

    if (scope.showWeeks) {
      scope.weekNumbers = [];
      var thursdayIndex = (4 + 7 - this.startingDay) % 7,
          numWeeks = scope.rows.length;
      for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
        scope.weekNumbers.push(
          getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
      }
    }
  };

  this.compare = function(date1, date2) {
    var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
    var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
    _date1.setFullYear(date1.getFullYear());
    _date2.setFullYear(date2.getFullYear());
    return _date1 - _date2;
  };

  function getISO8601WeekNumber(date) {
    var checkDate = new Date(date);
    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
    var time = checkDate.getTime();
    checkDate.setMonth(0); // Compare with Jan 1
    checkDate.setDate(1);
    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
  }

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getDate();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - 7;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + 7;
    } else if (key === 'pageup' || key === 'pagedown') {
      var month = this.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
      this.activeDate.setMonth(month, 1);
      date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
    } else if (key === 'home') {
      date = 1;
    } else if (key === 'end') {
      date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
    }
    this.activeDate.setDate(date);
  };
}])

.controller('UibMonthpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  this.step = { years: 1 };
  this.element = $element;

  this.init = function(ctrl) {
    angular.extend(ctrl, this);
    ctrl.refreshView();
  };

  this._refreshView = function() {
    var months = new Array(12),
        year = this.activeDate.getFullYear(),
        date;

    for (var i = 0; i < 12; i++) {
      date = new Date(this.activeDate);
      date.setFullYear(year, i, 1);
      months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
    scope.rows = this.split(months, this.monthColumns);
    scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1;
  };

  this.compare = function(date1, date2) {
    var _date1 = new Date(date1.getFullYear(), date1.getMonth());
    var _date2 = new Date(date2.getFullYear(), date2.getMonth());
    _date1.setFullYear(date1.getFullYear());
    _date2.setFullYear(date2.getFullYear());
    return _date1 - _date2;
  };

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getMonth();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - this.monthColumns;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + this.monthColumns;
    } else if (key === 'pageup' || key === 'pagedown') {
      var year = this.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
      this.activeDate.setFullYear(year);
    } else if (key === 'home') {
      date = 0;
    } else if (key === 'end') {
      date = 11;
    }
    this.activeDate.setMonth(date);
  };
}])

.controller('UibYearpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  var columns, range;
  this.element = $element;

  function getStartingYear(year) {
    return parseInt((year - 1) / range, 10) * range + 1;
  }

  this.yearpickerInit = function() {
    columns = this.yearColumns;
    range = this.yearRows * columns;
    this.step = { years: range };
  };

  this._refreshView = function() {
    var years = new Array(range), date;

    for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
      date = new Date(this.activeDate);
      date.setFullYear(start + i, 0, 1);
      years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.title = [years[0].label, years[range - 1].label].join(' - ');
    scope.rows = this.split(years, columns);
    scope.columns = columns;
  };

  this.compare = function(date1, date2) {
    return date1.getFullYear() - date2.getFullYear();
  };

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getFullYear();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - columns;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + columns;
    } else if (key === 'pageup' || key === 'pagedown') {
      date += (key === 'pageup' ? - 1 : 1) * range;
    } else if (key === 'home') {
      date = getStartingYear(this.activeDate.getFullYear());
    } else if (key === 'end') {
      date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
    }
    this.activeDate.setFullYear(date);
  };
}])

.directive('uibDatepicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/datepicker.html';
    },
    scope: {
      datepickerOptions: '=?'
    },
    require: ['uibDatepicker', '^ngModel'],
    restrict: 'A',
    controller: 'UibDatepickerController',
    controllerAs: 'datepicker',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      datepickerCtrl.init(ngModelCtrl);
    }
  };
})

.directive('uibDaypicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/day.html';
    },
    require: ['^uibDatepicker', 'uibDaypicker'],
    restrict: 'A',
    controller: 'UibDaypickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0],
        daypickerCtrl = ctrls[1];

      daypickerCtrl.init(datepickerCtrl);
    }
  };
})

.directive('uibMonthpicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/month.html';
    },
    require: ['^uibDatepicker', 'uibMonthpicker'],
    restrict: 'A',
    controller: 'UibMonthpickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0],
        monthpickerCtrl = ctrls[1];

      monthpickerCtrl.init(datepickerCtrl);
    }
  };
})

.directive('uibYearpicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/year.html';
    },
    require: ['^uibDatepicker', 'uibYearpicker'],
    restrict: 'A',
    controller: 'UibYearpickerController',
    link: function(scope, element, attrs, ctrls) {
      var ctrl = ctrls[0];
      angular.extend(ctrl, ctrls[1]);
      ctrl.yearpickerInit();

      ctrl.refreshView();
    }
  };
});

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods for working with the DOM.
 * It is meant to be used where we need to absolute-position elements in
 * relation to another element (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
    /**
     * Used by scrollbarWidth() function to cache scrollbar's width.
     * Do not access this variable directly, use scrollbarWidth() instead.
     */
    var SCROLLBAR_WIDTH;
    /**
     * scrollbar on body and html element in IE and Edge overlay
     * content and should be considered 0 width.
     */
    var BODY_SCROLLBAR_WIDTH;
    var OVERFLOW_REGEX = {
      normal: /(auto|scroll)/,
      hidden: /(auto|scroll|hidden)/
    };
    var PLACEMENT_REGEX = {
      auto: /\s?auto?\s?/i,
      primary: /^(top|bottom|left|right)$/,
      secondary: /^(top|bottom|left|right|center)$/,
      vertical: /^(top|bottom)$/
    };
    var BODY_REGEX = /(HTML|BODY)/;

    return {

      /**
       * Provides a raw DOM element from a jQuery/jQLite element.
       *
       * @param {element} elem - The element to convert.
       *
       * @returns {element} A HTML element.
       */
      getRawNode: function(elem) {
        return elem.nodeName ? elem : elem[0] || elem;
      },

      /**
       * Provides a parsed number for a style property.  Strips
       * units and casts invalid numbers to 0.
       *
       * @param {string} value - The style value to parse.
       *
       * @returns {number} A valid number.
       */
      parseStyle: function(value) {
        value = parseFloat(value);
        return isFinite(value) ? value : 0;
      },

      /**
       * Provides the closest positioned ancestor.
       *
       * @param {element} element - The element to get the offest parent for.
       *
       * @returns {element} The closest positioned ancestor.
       */
      offsetParent: function(elem) {
        elem = this.getRawNode(elem);

        var offsetParent = elem.offsetParent || $document[0].documentElement;

        function isStaticPositioned(el) {
          return ($window.getComputedStyle(el).position || 'static') === 'static';
        }

        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || $document[0].documentElement;
      },

      /**
       * Provides the scrollbar width, concept from TWBS measureScrollbar()
       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
       * In IE and Edge, scollbar on body and html element overlay and should
       * return a width of 0.
       *
       * @returns {number} The width of the browser scollbar.
       */
      scrollbarWidth: function(isBody) {
        if (isBody) {
          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
            var bodyElem = $document.find('body');
            bodyElem.addClass('uib-position-body-scrollbar-measure');
            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
            bodyElem.removeClass('uib-position-body-scrollbar-measure');
          }
          return BODY_SCROLLBAR_WIDTH;
        }

        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
          $document.find('body').append(scrollElem);
          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
          scrollElem.remove();
        }

        return SCROLLBAR_WIDTH;
      },

      /**
       * Provides the padding required on an element to replace the scrollbar.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
       *     <li>**widthOverflow**: whether the the width is overflowing</li>
       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
       *     <li>**heightOverflow**: whether the the height is overflowing</li>
       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
       *   </ul>
       */
      scrollbarPadding: function(elem) {
        elem = this.getRawNode(elem);

        var elemStyle = $window.getComputedStyle(elem);
        var paddingRight = this.parseStyle(elemStyle.paddingRight);
        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
        var scrollParent = this.scrollParent(elem, false, true);
        var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName));

        return {
          scrollbarWidth: scrollbarWidth,
          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
          right: paddingRight + scrollbarWidth,
          originalRight: paddingRight,
          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
          bottom: paddingBottom + scrollbarWidth,
          originalBottom: paddingBottom
         };
      },

      /**
       * Checks to see if the element is scrollable.
       *
       * @param {element} elem - The element to check.
       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
       *   default is false.
       *
       * @returns {boolean} Whether the element is scrollable.
       */
      isScrollable: function(elem, includeHidden) {
        elem = this.getRawNode(elem);

        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
        var elemStyle = $window.getComputedStyle(elem);
        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
      },

      /**
       * Provides the closest scrollable ancestor.
       * A port of the jQuery UI scrollParent method:
       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
       *
       * @param {element} elem - The element to find the scroll parent of.
       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
       *   default is false.
       * @param {boolean=} [includeSelf=false] - Should the element being passed be
       * included in the scrollable llokup.
       *
       * @returns {element} A HTML element.
       */
      scrollParent: function(elem, includeHidden, includeSelf) {
        elem = this.getRawNode(elem);

        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
        var documentEl = $document[0].documentElement;
        var elemStyle = $window.getComputedStyle(elem);
        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
          return elem;
        }
        var excludeStatic = elemStyle.position === 'absolute';
        var scrollParent = elem.parentElement || documentEl;

        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
          return documentEl;
        }

        while (scrollParent.parentElement && scrollParent !== documentEl) {
          var spStyle = $window.getComputedStyle(scrollParent);
          if (excludeStatic && spStyle.position !== 'static') {
            excludeStatic = false;
          }

          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
            break;
          }
          scrollParent = scrollParent.parentElement;
        }

        return scrollParent;
      },

      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/ - distance to closest positioned
       * ancestor.  Does not account for margins by default like jQuery position.
       *
       * @param {element} elem - The element to caclulate the position on.
       * @param {boolean=} [includeMargins=false] - Should margins be accounted
       * for, default is false.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**width**: the width of the element</li>
       *     <li>**height**: the height of the element</li>
       *     <li>**top**: distance to top edge of offset parent</li>
       *     <li>**left**: distance to left edge of offset parent</li>
       *   </ul>
       */
      position: function(elem, includeMagins) {
        elem = this.getRawNode(elem);

        var elemOffset = this.offset(elem);
        if (includeMagins) {
          var elemStyle = $window.getComputedStyle(elem);
          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
        }
        var parent = this.offsetParent(elem);
        var parentOffset = {top: 0, left: 0};

        if (parent !== $document[0].documentElement) {
          parentOffset = this.offset(parent);
          parentOffset.top += parent.clientTop - parent.scrollTop;
          parentOffset.left += parent.clientLeft - parent.scrollLeft;
        }

        return {
          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
          top: Math.round(elemOffset.top - parentOffset.top),
          left: Math.round(elemOffset.left - parentOffset.left)
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/ - distance to viewport.  Does
       * not account for borders, margins, or padding on the body
       * element.
       *
       * @param {element} elem - The element to calculate the offset on.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**width**: the width of the element</li>
       *     <li>**height**: the height of the element</li>
       *     <li>**top**: distance to top edge of viewport</li>
       *     <li>**right**: distance to bottom edge of viewport</li>
       *   </ul>
       */
      offset: function(elem) {
        elem = this.getRawNode(elem);

        var elemBCR = elem.getBoundingClientRect();
        return {
          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
        };
      },

      /**
       * Provides offset distance to the closest scrollable ancestor
       * or viewport.  Accounts for border and scrollbar width.
       *
       * Right and bottom dimensions represent the distance to the
       * respective edge of the viewport element.  If the element
       * edge extends beyond the viewport, a negative value will be
       * reported.
       *
       * @param {element} elem - The element to get the viewport offset for.
       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
       * of the first scrollable element, default is false.
       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
       * be accounted for, default is true.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**top**: distance to the top content edge of viewport element</li>
       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
       *     <li>**left**: distance to the left content edge of viewport element</li>
       *     <li>**right**: distance to the right content edge of viewport element</li>
       *   </ul>
       */
      viewportOffset: function(elem, useDocument, includePadding) {
        elem = this.getRawNode(elem);
        includePadding = includePadding !== false ? true : false;

        var elemBCR = elem.getBoundingClientRect();
        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
        var offsetParentBCR = offsetParent.getBoundingClientRect();

        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
        if (offsetParent === $document[0].documentElement) {
          offsetBCR.top += $window.pageYOffset;
          offsetBCR.left += $window.pageXOffset;
        }
        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

        if (includePadding) {
          var offsetParentStyle = $window.getComputedStyle(offsetParent);
          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
        }

        return {
          top: Math.round(elemBCR.top - offsetBCR.top),
          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
          left: Math.round(elemBCR.left - offsetBCR.left),
          right: Math.round(offsetBCR.right - elemBCR.right)
        };
      },

      /**
       * Provides an array of placement values parsed from a placement string.
       * Along with the 'auto' indicator, supported placement strings are:
       *   <ul>
       *     <li>top: element on top, horizontally centered on host element.</li>
       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
       *     <li>left: element on left, vertically centered on host element.</li>
       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
       *     <li>right: element on right, vertically centered on host element.</li>
       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
       *   </ul>
       * A placement string with an 'auto' indicator is expected to be
       * space separated from the placement, i.e: 'auto bottom-left'  If
       * the primary and secondary placement values do not match 'top,
       * bottom, left, right' then 'top' will be the primary placement and
       * 'center' will be the secondary placement.  If 'auto' is passed, true
       * will be returned as the 3rd value of the array.
       *
       * @param {string} placement - The placement string to parse.
       *
       * @returns {array} An array with the following values
       * <ul>
       *   <li>**[0]**: The primary placement.</li>
       *   <li>**[1]**: The secondary placement.</li>
       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
       * </ul>
       */
      parsePlacement: function(placement) {
        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
        if (autoPlace) {
          placement = placement.replace(PLACEMENT_REGEX.auto, '');
        }

        placement = placement.split('-');

        placement[0] = placement[0] || 'top';
        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
          placement[0] = 'top';
        }

        placement[1] = placement[1] || 'center';
        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
          placement[1] = 'center';
        }

        if (autoPlace) {
          placement[2] = true;
        } else {
          placement[2] = false;
        }

        return placement;
      },

      /**
       * Provides coordinates for an element to be positioned relative to
       * another element.  Passing 'auto' as part of the placement parameter
       * will enable smart placement - where the element fits. i.e:
       * 'auto left-top' will check to see if there is enough space to the left
       * of the hostElem to fit the targetElem, if not place right (same for secondary
       * top placement).  Available space is calculated using the viewportOffset
       * function.
       *
       * @param {element} hostElem - The element to position against.
       * @param {element} targetElem - The element to position.
       * @param {string=} [placement=top] - The placement for the targetElem,
       *   default is 'top'. 'center' is assumed as secondary placement for
       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
       *   <ul>
       *     <li>top</li>
       *     <li>top-right</li>
       *     <li>top-left</li>
       *     <li>bottom</li>
       *     <li>bottom-left</li>
       *     <li>bottom-right</li>
       *     <li>left</li>
       *     <li>left-top</li>
       *     <li>left-bottom</li>
       *     <li>right</li>
       *     <li>right-top</li>
       *     <li>right-bottom</li>
       *   </ul>
       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
       *   be calculated from the body element, default is false.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**top**: Value for targetElem top.</li>
       *     <li>**left**: Value for targetElem left.</li>
       *     <li>**placement**: The resolved placement.</li>
       *   </ul>
       */
      positionElements: function(hostElem, targetElem, placement, appendToBody) {
        hostElem = this.getRawNode(hostElem);
        targetElem = this.getRawNode(targetElem);

        // need to read from prop to support tests.
        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

        placement = this.parsePlacement(placement);

        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
        var targetElemPos = {top: 0, left: 0, placement: ''};

        if (placement[2]) {
          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

          var targetElemStyle = $window.getComputedStyle(targetElem);
          var adjustedSize = {
            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
          };

          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
                         placement[0];

          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
                         placement[1];

          if (placement[1] === 'center') {
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
                placement[1] = 'left';
              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
                placement[1] = 'right';
              }
            } else {
              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
                placement[1] = 'top';
              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
                placement[1] = 'bottom';
              }
            }
          }
        }

        switch (placement[0]) {
          case 'top':
            targetElemPos.top = hostElemPos.top - targetHeight;
            break;
          case 'bottom':
            targetElemPos.top = hostElemPos.top + hostElemPos.height;
            break;
          case 'left':
            targetElemPos.left = hostElemPos.left - targetWidth;
            break;
          case 'right':
            targetElemPos.left = hostElemPos.left + hostElemPos.width;
            break;
        }

        switch (placement[1]) {
          case 'top':
            targetElemPos.top = hostElemPos.top;
            break;
          case 'bottom':
            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
            break;
          case 'left':
            targetElemPos.left = hostElemPos.left;
            break;
          case 'right':
            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
            break;
          case 'center':
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
            } else {
              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
            }
            break;
        }

        targetElemPos.top = Math.round(targetElemPos.top);
        targetElemPos.left = Math.round(targetElemPos.left);
        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

        return targetElemPos;
      },

      /**
       * Provides a way to adjust the top positioning after first
       * render to correctly align element to top after content
       * rendering causes resized element height
       *
       * @param {array} placementClasses - The array of strings of classes
       * element should have.
       * @param {object} containerPosition - The object with container
       * position information
       * @param {number} initialHeight - The initial height for the elem.
       * @param {number} currentHeight - The current height for the elem.
       */
      adjustTop: function(placementClasses, containerPosition, initialHeight, currentHeight) {
        if (placementClasses.indexOf('top') !== -1 && initialHeight !== currentHeight) {
          return {
            top: containerPosition.top - currentHeight + 'px'
          };
        }
      },

      /**
       * Provides a way for positioning tooltip & dropdown
       * arrows when using placement options beyond the standard
       * left, right, top, or bottom.
       *
       * @param {element} elem - The tooltip/dropdown element.
       * @param {string} placement - The placement for the elem.
       */
      positionArrow: function(elem, placement) {
        elem = this.getRawNode(elem);

        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
        if (!innerElem) {
          return;
        }

        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
        if (!arrowElem) {
          return;
        }

        var arrowCss = {
          top: '',
          bottom: '',
          left: '',
          right: ''
        };

        placement = this.parsePlacement(placement);
        if (placement[1] === 'center') {
          // no adjustment necessary - just reset styles
          angular.element(arrowElem).css(arrowCss);
          return;
        }

        var borderProp = 'border-' + placement[0] + '-width';
        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

        var borderRadiusProp = 'border-';
        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
          borderRadiusProp += placement[0] + '-' + placement[1];
        } else {
          borderRadiusProp += placement[1] + '-' + placement[0];
        }
        borderRadiusProp += '-radius';
        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

        switch (placement[0]) {
          case 'top':
            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'bottom':
            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'left':
            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'right':
            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
            break;
        }

        arrowCss[placement[1]] = borderRadius;

        angular.element(arrowElem).css(arrowCss);
      }
    };
  }]);

angular.module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

.value('$datepickerPopupLiteralWarning', true)

.constant('uibDatepickerPopupConfig', {
  altInputFormats: [],
  appendToBody: false,
  clearText: 'Clear',
  closeOnDateSelection: true,
  closeText: 'Done',
  currentText: 'Today',
  datepickerPopup: 'yyyy-MM-dd',
  datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
  datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
  html5Types: {
    date: 'yyyy-MM-dd',
    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
    'month': 'yyyy-MM'
  },
  onOpenFocus: true,
  showButtonBar: true,
  placement: 'auto bottom-left'
})

.controller('UibDatepickerPopupController', ['$scope', '$element', '$attrs', '$compile', '$log', '$parse', '$window', '$document', '$rootScope', '$uibPosition', 'dateFilter', 'uibDateParser', 'uibDatepickerPopupConfig', '$timeout', 'uibDatepickerConfig', '$datepickerPopupLiteralWarning',
function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
  var cache = {},
    isHtml5DateInput = false;
  var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus,
    datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl,
    ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [];

  this.init = function(_ngModel_) {
    ngModel = _ngModel_;
    ngModelOptions = extractOptions(ngModel);
    closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ?
      $scope.$parent.$eval($attrs.closeOnDateSelection) :
      datepickerPopupConfig.closeOnDateSelection;
    appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ?
      $scope.$parent.$eval($attrs.datepickerAppendToBody) :
      datepickerPopupConfig.appendToBody;
    onOpenFocus = angular.isDefined($attrs.onOpenFocus) ?
      $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
    datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ?
      $attrs.datepickerPopupTemplateUrl :
      datepickerPopupConfig.datepickerPopupTemplateUrl;
    datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ?
      $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
    altInputFormats = angular.isDefined($attrs.altInputFormats) ?
      $scope.$parent.$eval($attrs.altInputFormats) :
      datepickerPopupConfig.altInputFormats;

    $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ?
      $scope.$parent.$eval($attrs.showButtonBar) :
      datepickerPopupConfig.showButtonBar;

    if (datepickerPopupConfig.html5Types[$attrs.type]) {
      dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
      isHtml5DateInput = true;
    } else {
      dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
      $attrs.$observe('uibDatepickerPopup', function(value, oldValue) {
        var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
        // Invalidate the $modelValue to ensure that formatters re-run
        // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
        if (newDateFormat !== dateFormat) {
          dateFormat = newDateFormat;
          ngModel.$modelValue = null;

          if (!dateFormat) {
            throw new Error('uibDatepickerPopup must have a date format specified.');
          }
        }
      });
    }

    if (!dateFormat) {
      throw new Error('uibDatepickerPopup must have a date format specified.');
    }

    if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
      throw new Error('HTML5 date input types do not support custom formats.');
    }

    // popup element used to display calendar
    popupEl = angular.element('<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>');

    popupEl.attr({
      'ng-model': 'date',
      'ng-change': 'dateSelection(date)',
      'template-url': datepickerPopupTemplateUrl
    });

    // datepicker element
    datepickerEl = angular.element(popupEl.children()[0]);
    datepickerEl.attr('template-url', datepickerTemplateUrl);

    if (!$scope.datepickerOptions) {
      $scope.datepickerOptions = {};
    }

    if (isHtml5DateInput) {
      if ($attrs.type === 'month') {
        $scope.datepickerOptions.datepickerMode = 'month';
        $scope.datepickerOptions.minMode = 'month';
      }
    }

    datepickerEl.attr('datepicker-options', 'datepickerOptions');

    if (!isHtml5DateInput) {
      // Internal API to maintain the correct ng-invalid-[key] class
      ngModel.$$parserName = 'date';
      ngModel.$validators.date = validator;
      ngModel.$parsers.unshift(parseDate);
      ngModel.$formatters.push(function(value) {
        if (ngModel.$isEmpty(value)) {
          $scope.date = value;
          return value;
        }

        if (angular.isNumber(value)) {
          value = new Date(value);
        }

        $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption('timezone'));

        return dateParser.filter($scope.date, dateFormat);
      });
    } else {
      ngModel.$formatters.push(function(value) {
        $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption('timezone'));
        return value;
      });
    }

    // Detect changes in the view from the text box
    ngModel.$viewChangeListeners.push(function() {
      $scope.date = parseDateString(ngModel.$viewValue);
    });

    $element.on('keydown', inputKeydownBind);

    $popup = $compile(popupEl)($scope);
    // Prevent jQuery cache memory leak (template is now redundant after linking)
    popupEl.remove();

    if (appendToBody) {
      $document.find('body').append($popup);
    } else {
      $element.after($popup);
    }

    $scope.$on('$destroy', function() {
      if ($scope.isOpen === true) {
        if (!$rootScope.$$phase) {
          $scope.$apply(function() {
            $scope.isOpen = false;
          });
        }
      }

      $popup.remove();
      $element.off('keydown', inputKeydownBind);
      $document.off('click', documentClickBind);
      if (scrollParentEl) {
        scrollParentEl.off('scroll', positionPopup);
      }
      angular.element($window).off('resize', positionPopup);

      //Clear all watch listeners on destroy
      while (watchListeners.length) {
        watchListeners.shift()();
      }
    });
  };

  $scope.getText = function(key) {
    return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
  };

  $scope.isDisabled = function(date) {
    if (date === 'today') {
      date = dateParser.fromTimezone(new Date(), ngModelOptions.getOption('timezone'));
    }

    var dates = {};
    angular.forEach(['minDate', 'maxDate'], function(key) {
      if (!$scope.datepickerOptions[key]) {
        dates[key] = null;
      } else if (angular.isDate($scope.datepickerOptions[key])) {
        dates[key] = new Date($scope.datepickerOptions[key]);
      } else {
        if ($datepickerPopupLiteralWarning) {
          $log.warn('Literal date support has been deprecated, please switch to date object usage');
        }

        dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'));
      }
    });

    return $scope.datepickerOptions &&
      dates.minDate && $scope.compare(date, dates.minDate) < 0 ||
      dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
  };

  $scope.compare = function(date1, date2) {
    return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
  };

  // Inner change
  $scope.dateSelection = function(dt) {
    $scope.date = dt;
    var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
    $element.val(date);
    ngModel.$setViewValue(date);

    if (closeOnDateSelection) {
      $scope.isOpen = false;
      $element[0].focus();
    }
  };

  $scope.keydown = function(evt) {
    if (evt.which === 27) {
      evt.stopPropagation();
      $scope.isOpen = false;
      $element[0].focus();
    }
  };

  $scope.select = function(date, evt) {
    evt.stopPropagation();

    if (date === 'today') {
      var today = new Date();
      if (angular.isDate($scope.date)) {
        date = new Date($scope.date);
        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
      } else {
        date = dateParser.fromTimezone(today, ngModelOptions.getOption('timezone'));
        date.setHours(0, 0, 0, 0);
      }
    }
    $scope.dateSelection(date);
  };

  $scope.close = function(evt) {
    evt.stopPropagation();

    $scope.isOpen = false;
    $element[0].focus();
  };

  $scope.disabled = angular.isDefined($attrs.disabled) || false;
  if ($attrs.ngDisabled) {
    watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
      $scope.disabled = disabled;
    }));
  }

  $scope.$watch('isOpen', function(value) {
    if (value) {
      if (!$scope.disabled) {
        $timeout(function() {
          positionPopup();

          if (onOpenFocus) {
            $scope.$broadcast('uib:datepicker.focus');
          }

          $document.on('click', documentClickBind);

          var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
          if (appendToBody || $position.parsePlacement(placement)[2]) {
            scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
            if (scrollParentEl) {
              scrollParentEl.on('scroll', positionPopup);
            }
          } else {
            scrollParentEl = null;
          }

          angular.element($window).on('resize', positionPopup);
        }, 0, false);
      } else {
        $scope.isOpen = false;
      }
    } else {
      $document.off('click', documentClickBind);
      if (scrollParentEl) {
        scrollParentEl.off('scroll', positionPopup);
      }
      angular.element($window).off('resize', positionPopup);
    }
  });

  function cameltoDash(string) {
    return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
  }

  function parseDateString(viewValue) {
    var date = dateParser.parse(viewValue, dateFormat, $scope.date);
    if (isNaN(date)) {
      for (var i = 0; i < altInputFormats.length; i++) {
        date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
        if (!isNaN(date)) {
          return date;
        }
      }
    }
    return date;
  }

  function parseDate(viewValue) {
    if (angular.isNumber(viewValue)) {
      // presumably timestamp to date object
      viewValue = new Date(viewValue);
    }

    if (!viewValue) {
      return null;
    }

    if (angular.isDate(viewValue) && !isNaN(viewValue)) {
      return viewValue;
    }

    if (angular.isString(viewValue)) {
      var date = parseDateString(viewValue);
      if (!isNaN(date)) {
        return dateParser.toTimezone(date, ngModelOptions.getOption('timezone'));
      }
    }

    return ngModelOptions.getOption('allowInvalid') ? viewValue : undefined;
  }

  function validator(modelValue, viewValue) {
    var value = modelValue || viewValue;

    if (!$attrs.ngRequired && !value) {
      return true;
    }

    if (angular.isNumber(value)) {
      value = new Date(value);
    }

    if (!value) {
      return true;
    }

    if (angular.isDate(value) && !isNaN(value)) {
      return true;
    }

    if (angular.isString(value)) {
      return !isNaN(parseDateString(value));
    }

    return false;
  }

  function documentClickBind(event) {
    if (!$scope.isOpen && $scope.disabled) {
      return;
    }

    var popup = $popup[0];
    var dpContainsTarget = $element[0].contains(event.target);
    // The popup node may not be an element node
    // In some browsers (IE) only element nodes have the 'contains' function
    var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
    if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
      $scope.$apply(function() {
        $scope.isOpen = false;
      });
    }
  }

  function inputKeydownBind(evt) {
    if (evt.which === 27 && $scope.isOpen) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.$apply(function() {
        $scope.isOpen = false;
      });
      $element[0].focus();
    } else if (evt.which === 40 && !$scope.isOpen) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.$apply(function() {
        $scope.isOpen = true;
      });
    }
  }

  function positionPopup() {
    if ($scope.isOpen) {
      var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'));
      var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
      var position = $position.positionElements($element, dpElement, placement, appendToBody);
      dpElement.css({top: position.top + 'px', left: position.left + 'px'});
      if (dpElement.hasClass('uib-position-measure')) {
        dpElement.removeClass('uib-position-measure');
      }
    }
  }

  function extractOptions(ngModelCtrl) {
    var ngModelOptions;

    if (angular.version.minor < 6) { // in angular < 1.6 $options could be missing
      // guarantee a value
      ngModelOptions = angular.isObject(ngModelCtrl.$options) ?
        ngModelCtrl.$options :
        {
          timezone: null
        };

      // mimic 1.6+ api
      ngModelOptions.getOption = function (key) {
        return ngModelOptions[key];
      };
    } else { // in angular >=1.6 $options is always present
      ngModelOptions = ngModelCtrl.$options;
    }

    return ngModelOptions;
  }

  $scope.$on('uib:datepicker.mode', function() {
    $timeout(positionPopup, 0, false);
  });
}])

.directive('uibDatepickerPopup', function() {
  return {
    require: ['ngModel', 'uibDatepickerPopup'],
    controller: 'UibDatepickerPopupController',
    scope: {
      datepickerOptions: '=?',
      isOpen: '=?',
      currentText: '@',
      clearText: '@',
      closeText: '@'
    },
    link: function(scope, element, attrs, ctrls) {
      var ngModel = ctrls[0],
        ctrl = ctrls[1];

      ctrl.init(ngModel);
    }
  };
})

.directive('uibDatepickerPopupWrap', function() {
  return {
    restrict: 'A',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html';
    }
  };
});

angular.module('ui.bootstrap.debounce', [])
/**
 * A helper, internal service that debounces a function
 */
  .factory('$$debounce', ['$timeout', function($timeout) {
    return function(callback, debounceTime) {
      var timeoutPromise;

      return function() {
        var self = this;
        var args = Array.prototype.slice.call(arguments);
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }

        timeoutPromise = $timeout(function() {
          callback.apply(self, args);
        }, debounceTime);
      };
    };
  }]);

angular.module('ui.bootstrap.multiMap', [])
/**
 * A helper, internal data structure that stores all references attached to key
 */
  .factory('$$multiMap', function() {
    return {
      createNew: function() {
        var map = {};

        return {
          entries: function() {
            return Object.keys(map).map(function(key) {
              return {
                key: key,
                value: map[key]
              };
            });
          },
          get: function(key) {
            return map[key];
          },
          hasKey: function(key) {
            return !!map[key];
          },
          keys: function() {
            return Object.keys(map);
          },
          put: function(key, value) {
            if (!map[key]) {
              map[key] = [];
            }

            map[key].push(value);
          },
          remove: function(key, value) {
            var values = map[key];

            if (!values) {
              return;
            }

            var idx = values.indexOf(value);

            if (idx !== -1) {
              values.splice(idx, 1);
            }

            if (!values.length) {
              delete map[key];
            }
          }
        };
      }
    };
  });

angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.multiMap', 'ui.bootstrap.position'])

.constant('uibDropdownConfig', {
  appendToOpenClass: 'uib-dropdown-open',
  openClass: 'open'
})

.service('uibDropdownService', ['$document', '$rootScope', '$$multiMap', function($document, $rootScope, $$multiMap) {
  var openScope = null;
  var openedContainers = $$multiMap.createNew();

  this.isOnlyOpen = function(dropdownScope, appendTo) {
    var openedDropdowns = openedContainers.get(appendTo);
    if (openedDropdowns) {
      var openDropdown = openedDropdowns.reduce(function(toClose, dropdown) {
        if (dropdown.scope === dropdownScope) {
          return dropdown;
        }

        return toClose;
      }, {});
      if (openDropdown) {
        return openedDropdowns.length === 1;
      }
    }

    return false;
  };

  this.open = function(dropdownScope, element, appendTo) {
    if (!openScope) {
      $document.on('click', closeDropdown);
    }

    if (openScope && openScope !== dropdownScope) {
      openScope.isOpen = false;
    }

    openScope = dropdownScope;

    if (!appendTo) {
      return;
    }

    var openedDropdowns = openedContainers.get(appendTo);
    if (openedDropdowns) {
      var openedScopes = openedDropdowns.map(function(dropdown) {
        return dropdown.scope;
      });
      if (openedScopes.indexOf(dropdownScope) === -1) {
        openedContainers.put(appendTo, {
          scope: dropdownScope
        });
      }
    } else {
      openedContainers.put(appendTo, {
        scope: dropdownScope
      });
    }
  };

  this.close = function(dropdownScope, element, appendTo) {
    if (openScope === dropdownScope) {
      $document.off('click', closeDropdown);
      $document.off('keydown', this.keybindFilter);
      openScope = null;
    }

    if (!appendTo) {
      return;
    }

    var openedDropdowns = openedContainers.get(appendTo);
    if (openedDropdowns) {
      var dropdownToClose = openedDropdowns.reduce(function(toClose, dropdown) {
        if (dropdown.scope === dropdownScope) {
          return dropdown;
        }

        return toClose;
      }, {});
      if (dropdownToClose) {
        openedContainers.remove(appendTo, dropdownToClose);
      }
    }
  };

  var closeDropdown = function(evt) {
    // This method may still be called during the same mouse event that
    // unbound this event handler. So check openScope before proceeding.
    if (!openScope || !openScope.isOpen) { return; }

    if (evt && openScope.getAutoClose() === 'disabled') { return; }

    if (evt && evt.which === 3) { return; }

    var toggleElement = openScope.getToggleElement();
    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
      return;
    }

    var dropdownElement = openScope.getDropdownElement();
    if (evt && openScope.getAutoClose() === 'outsideClick' &&
      dropdownElement && dropdownElement[0].contains(evt.target)) {
      return;
    }

    openScope.focusToggleElement();
    openScope.isOpen = false;

    if (!$rootScope.$$phase) {
      openScope.$apply();
    }
  };

  this.keybindFilter = function(evt) {
    if (!openScope) {
      // see this.close as ESC could have been pressed which kills the scope so we can not proceed
      return;
    }

    var dropdownElement = openScope.getDropdownElement();
    var toggleElement = openScope.getToggleElement();
    var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target);
    var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target);
    if (evt.which === 27) {
      evt.stopPropagation();
      openScope.focusToggleElement();
      closeDropdown();
    } else if (openScope.isKeynavEnabled() && [38, 40].indexOf(evt.which) !== -1 && openScope.isOpen && (dropdownElementTargeted || toggleElementTargeted)) {
      evt.preventDefault();
      evt.stopPropagation();
      openScope.focusDropdownEntry(evt.which);
    }
  };
}])

.controller('UibDropdownController', ['$scope', '$element', '$attrs', '$parse', 'uibDropdownConfig', 'uibDropdownService', '$animate', '$uibPosition', '$document', '$compile', '$templateRequest', function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
  var self = this,
    scope = $scope.$new(), // create a child scope so we are not polluting original one
    templateScope,
    appendToOpenClass = dropdownConfig.appendToOpenClass,
    openClass = dropdownConfig.openClass,
    getIsOpen,
    setIsOpen = angular.noop,
    toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
    keynavEnabled = false,
    selectedOption = null,
    body = $document.find('body');

  $element.addClass('dropdown');

  this.init = function() {
    if ($attrs.isOpen) {
      getIsOpen = $parse($attrs.isOpen);
      setIsOpen = getIsOpen.assign;

      $scope.$watch(getIsOpen, function(value) {
        scope.isOpen = !!value;
      });
    }

    keynavEnabled = angular.isDefined($attrs.keyboardNav);
  };

  this.toggle = function(open) {
    scope.isOpen = arguments.length ? !!open : !scope.isOpen;
    if (angular.isFunction(setIsOpen)) {
      setIsOpen(scope, scope.isOpen);
    }

    return scope.isOpen;
  };

  // Allow other directives to watch status
  this.isOpen = function() {
    return scope.isOpen;
  };

  scope.getToggleElement = function() {
    return self.toggleElement;
  };

  scope.getAutoClose = function() {
    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
  };

  scope.getElement = function() {
    return $element;
  };

  scope.isKeynavEnabled = function() {
    return keynavEnabled;
  };

  scope.focusDropdownEntry = function(keyCode) {
    var elems = self.dropdownMenu ? //If append to body is used.
      angular.element(self.dropdownMenu).find('a') :
      $element.find('ul').eq(0).find('a');

    switch (keyCode) {
      case 40: {
        if (!angular.isNumber(self.selectedOption)) {
          self.selectedOption = 0;
        } else {
          self.selectedOption = self.selectedOption === elems.length - 1 ?
            self.selectedOption :
            self.selectedOption + 1;
        }
        break;
      }
      case 38: {
        if (!angular.isNumber(self.selectedOption)) {
          self.selectedOption = elems.length - 1;
        } else {
          self.selectedOption = self.selectedOption === 0 ?
            0 : self.selectedOption - 1;
        }
        break;
      }
    }
    elems[self.selectedOption].focus();
  };

  scope.getDropdownElement = function() {
    return self.dropdownMenu;
  };

  scope.focusToggleElement = function() {
    if (self.toggleElement) {
      self.toggleElement[0].focus();
    }
  };

  function removeDropdownMenu() {
    $element.append(self.dropdownMenu);
  }

  scope.$watch('isOpen', function(isOpen, wasOpen) {
    var appendTo = null,
      appendToBody = false;

    if (angular.isDefined($attrs.dropdownAppendTo)) {
      var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
      if (appendToEl) {
        appendTo = angular.element(appendToEl);
      }
    }

    if (angular.isDefined($attrs.dropdownAppendToBody)) {
      var appendToBodyValue = $parse($attrs.dropdownAppendToBody)(scope);
      if (appendToBodyValue !== false) {
        appendToBody = true;
      }
    }

    if (appendToBody && !appendTo) {
      appendTo = body;
    }

    if (appendTo && self.dropdownMenu) {
      if (isOpen) {
        appendTo.append(self.dropdownMenu);
        $element.on('$destroy', removeDropdownMenu);
      } else {
        $element.off('$destroy', removeDropdownMenu);
        removeDropdownMenu();
      }
    }

    if (appendTo && self.dropdownMenu) {
      var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
        css,
        rightalign,
        scrollbarPadding,
        scrollbarWidth = 0;

      css = {
        top: pos.top + 'px',
        display: isOpen ? 'block' : 'none'
      };

      rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
      if (!rightalign) {
        css.left = pos.left + 'px';
        css.right = 'auto';
      } else {
        css.left = 'auto';
        scrollbarPadding = $position.scrollbarPadding(appendTo);

        if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
          scrollbarWidth = scrollbarPadding.scrollbarWidth;
        }

        css.right = window.innerWidth - scrollbarWidth -
          (pos.left + $element.prop('offsetWidth')) + 'px';
      }

      // Need to adjust our positioning to be relative to the appendTo container
      // if it's not the body element
      if (!appendToBody) {
        var appendOffset = $position.offset(appendTo);

        css.top = pos.top - appendOffset.top + 'px';

        if (!rightalign) {
          css.left = pos.left - appendOffset.left + 'px';
        } else {
          css.right = window.innerWidth -
            (pos.left - appendOffset.left + $element.prop('offsetWidth')) + 'px';
        }
      }

      self.dropdownMenu.css(css);
    }

    var openContainer = appendTo ? appendTo : $element;
    var dropdownOpenClass = appendTo ? appendToOpenClass : openClass;
    var hasOpenClass = openContainer.hasClass(dropdownOpenClass);
    var isOnlyOpen = uibDropdownService.isOnlyOpen($scope, appendTo);

    if (hasOpenClass === !isOpen) {
      var toggleClass;
      if (appendTo) {
        toggleClass = !isOnlyOpen ? 'addClass' : 'removeClass';
      } else {
        toggleClass = isOpen ? 'addClass' : 'removeClass';
      }
      $animate[toggleClass](openContainer, dropdownOpenClass).then(function() {
        if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
          toggleInvoker($scope, { open: !!isOpen });
        }
      });
    }

    if (isOpen) {
      if (self.dropdownMenuTemplateUrl) {
        $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
          templateScope = scope.$new();
          $compile(tplContent.trim())(templateScope, function(dropdownElement) {
            var newEl = dropdownElement;
            self.dropdownMenu.replaceWith(newEl);
            self.dropdownMenu = newEl;
            $document.on('keydown', uibDropdownService.keybindFilter);
          });
        });
      } else {
        $document.on('keydown', uibDropdownService.keybindFilter);
      }

      scope.focusToggleElement();
      uibDropdownService.open(scope, $element, appendTo);
    } else {
      uibDropdownService.close(scope, $element, appendTo);
      if (self.dropdownMenuTemplateUrl) {
        if (templateScope) {
          templateScope.$destroy();
        }
        var newEl = angular.element('<ul class="dropdown-menu"></ul>');
        self.dropdownMenu.replaceWith(newEl);
        self.dropdownMenu = newEl;
      }

      self.selectedOption = null;
    }

    if (angular.isFunction(setIsOpen)) {
      setIsOpen($scope, isOpen);
    }
  });
}])

.directive('uibDropdown', function() {
  return {
    controller: 'UibDropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init();
    }
  };
})

.directive('uibDropdownMenu', function() {
  return {
    restrict: 'A',
    require: '?^uibDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
        return;
      }

      element.addClass('dropdown-menu');

      var tplUrl = attrs.templateUrl;
      if (tplUrl) {
        dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
      }

      if (!dropdownCtrl.dropdownMenu) {
        dropdownCtrl.dropdownMenu = element;
      }
    }
  };
})

.directive('uibDropdownToggle', function() {
  return {
    require: '?^uibDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl) {
        return;
      }

      element.addClass('dropdown-toggle');

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if (!element.hasClass('disabled') && !attrs.disabled) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.on('click', toggleDropdown);

      // WAI-ARIA
      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.off('click', toggleDropdown);
      });
    }
  };
});

angular.module('ui.bootstrap.stackedMap', [])
/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function() {
    return {
      createNew: function() {
        var stack = [];

        return {
          add: function(key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function(key) {
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function() {
            return stack[stack.length - 1];
          },
          remove: function(key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function() {
            return stack.pop();
          },
          length: function() {
            return stack.length;
          }
        };
      }
    };
  });
angular.module('ui.bootstrap.modal', ['ui.bootstrap.multiMap', 'ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
/**
 * Pluggable resolve mechanism for the modal resolve resolution
 * Supports UI Router's $resolve service
 */
  .provider('$uibResolve', function() {
    var resolve = this;
    this.resolver = null;

    this.setResolver = function(resolver) {
      this.resolver = resolver;
    };

    this.$get = ['$injector', '$q', function($injector, $q) {
      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
      return {
        resolve: function(invocables, locals, parent, self) {
          if (resolver) {
            return resolver.resolve(invocables, locals, parent, self);
          }

          var promises = [];

          angular.forEach(invocables, function(value) {
            if (angular.isFunction(value) || angular.isArray(value)) {
              promises.push($q.resolve($injector.invoke(value)));
            } else if (angular.isString(value)) {
              promises.push($q.resolve($injector.get(value)));
            } else {
              promises.push($q.resolve(value));
            }
          });

          return $q.all(promises).then(function(resolves) {
            var resolveObj = {};
            var resolveIter = 0;
            angular.forEach(invocables, function(value, key) {
              resolveObj[key] = resolves[resolveIter++];
            });

            return resolveObj;
          });
        }
      };
    }];
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
  function($animate, $injector, $modalStack) {
    return {
      restrict: 'A',
      compile: function(tElement, tAttrs) {
        tElement.addClass(tAttrs.backdropClass);
        return linkFn;
      }
    };

    function linkFn(scope, element, attrs) {
      if (attrs.modalInClass) {
        $animate.addClass(element, attrs.modalInClass);

        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
          var done = setIsAsync();
          if (scope.modalOptions.animation) {
            $animate.removeClass(element, attrs.modalInClass).then(done);
          } else {
            done();
          }
        });
      }
    }
  }])

  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
  function($modalStack, $q, $animateCss, $document) {
    return {
      scope: {
        index: '@'
      },
      restrict: 'A',
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || 'uib/template/modal/window.html';
      },
      link: function(scope, element, attrs) {
        element.addClass(attrs.windowTopClass || '');
        scope.size = attrs.size;

        scope.close = function(evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop &&
            modal.value.backdrop !== 'static' &&
            evt.target === evt.currentTarget) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };

        // moved from template to fix issue #2280
        element.on('click', scope.close);

        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
        // We can detect that by using this property in the template associated with this directive and then use
        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
        scope.$isRendered = true;

        // Deferred object that will be resolved when this modal is rendered.
        var modalRenderDeferObj = $q.defer();
        // Resolve render promise post-digest
        scope.$$postDigest(function() {
          modalRenderDeferObj.resolve();
        });

        modalRenderDeferObj.promise.then(function() {
          var animationPromise = null;

          if (attrs.modalInClass) {
            animationPromise = $animateCss(element, {
              addClass: attrs.modalInClass
            }).start();

            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
              var done = setIsAsync();
              $animateCss(element, {
                removeClass: attrs.modalInClass
              }).start().then(done);
            });
          }


          $q.when(animationPromise).then(function() {
            // Notify {@link $modalStack} that modal is rendered.
            var modal = $modalStack.getTop();
            if (modal) {
              $modalStack.modalRendered(modal.key);
            }

            /**
             * If something within the freshly-opened modal already has focus (perhaps via a
             * directive that causes focus) then there's no need to try to focus anything.
             */
            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
              var inputWithAutofocus = element[0].querySelector('[autofocus]');
              /**
               * Auto-focusing of a freshly-opened modal element causes any child elements
               * with the autofocus attribute to lose focus. This is an issue on touch
               * based devices which will show and then hide the onscreen keyboard.
               * Attempts to refocus the autofocus element via JavaScript will not reopen
               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
               * the modal element if the modal does not contain an autofocus element.
               */
              if (inputWithAutofocus) {
                inputWithAutofocus.focus();
              } else {
                element[0].focus();
              }
            }
          });
        });
      }
    };
  }])

  .directive('uibModalAnimationClass', function() {
    return {
      compile: function(tElement, tAttrs) {
        if (tAttrs.modalAnimation) {
          tElement.addClass(tAttrs.uibModalAnimationClass);
        }
      }
    };
  })

  .directive('uibModalTransclude', ['$animate', function($animate) {
    return {
      link: function(scope, element, attrs, controller, transclude) {
        transclude(scope.$parent, function(clone) {
          element.empty();
          $animate.enter(clone, element);
        });
      }
    };
  }])

  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var openedClasses = $$multiMap.createNew();
      var $modalStack = {
        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
      };
      var topModalIndex = 0;
      var previousTopOpenedModal = null;
      var ARIA_HIDDEN_ATTRIBUTE_NAME = 'data-bootstrap-modal-aria-hidden-count';

      //Modal focus behavior
      var tabbableSelector = 'a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']), ' +
        'button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']), textarea:not([disabled]):not([tabindex=\'-1\']), ' +
        'iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]';
      var scrollbarPadding;
      var SNAKE_CASE_REGEXP = /[A-Z]/g;

      // TODO: extract into common dependency with tooltip
      function snake_case(name) {
        var separator = '-';
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
          return (pos ? separator : '') + letter.toLowerCase();
        });
      }

      function isVisible(element) {
        return !!(element.offsetWidth ||
          element.offsetHeight ||
          element.getClientRects().length);
      }

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }

        // If any backdrop exist, ensure that it's index is always
        // right below the top modal
        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
          topBackdropIndex = topModalIndex;
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var modalWindow = openedWindows.get(modalInstance).value;
        var appendToElement = modalWindow.appendTo;

        //clean up the stack
        openedWindows.remove(modalInstance);
        previousTopOpenedModal = openedWindows.top();
        if (previousTopOpenedModal) {
          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
        }

        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
          openedClasses.remove(modalBodyClass, modalInstance);
          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
            if (scrollbarPadding.originalRight) {
              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
            } else {
              appendToElement.css({paddingRight: ''});
            }
            scrollbarPadding = null;
          }
          toggleTopWindowClass(true);
        }, modalWindow.closedDeferred);
        checkRemoveBackdrop();

        //move focus to specified element if available, or else to body
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
          elementToReceiveFocus.focus();
        } else if (appendToElement.focus) {
          appendToElement.focus();
        }
      }

      // Add or remove "windowTopClass" from the top window in the stack
      function toggleTopWindowClass(toggleSwitch) {
        var modalWindow;

        if (openedWindows.length() > 0) {
          modalWindow = openedWindows.top().value;
          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
        }
      }

      function checkRemoveBackdrop() {
        //remove backdrop if no longer needed
        if (backdropDomEl && backdropIndex() === -1) {
          var backdropScopeRef = backdropScope;
          removeAfterAnimate(backdropDomEl, backdropScope, function() {
            backdropScopeRef = null;
          });
          backdropDomEl = undefined;
          backdropScope = undefined;
        }
      }

      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
        var asyncDeferred;
        var asyncPromise = null;
        var setIsAsync = function() {
          if (!asyncDeferred) {
            asyncDeferred = $q.defer();
            asyncPromise = asyncDeferred.promise;
          }

          return function asyncDone() {
            asyncDeferred.resolve();
          };
        };
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

        // Note that it's intentional that asyncPromise might be null.
        // That's when setIsAsync has not been called during the
        // NOW_CLOSING_EVENT broadcast.
        return $q.when(asyncPromise).then(afterAnimating);

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          $animate.leave(domEl).then(function() {
            if (done) {
              done();
            }

            domEl.remove();
            if (closedDeferred) {
              closedDeferred.resolve();
            }
          });

          scope.$destroy();
        }
      }

      $document.on('keydown', keydownListener);

      $rootScope.$on('$destroy', function() {
        $document.off('keydown', keydownListener);
      });

      function keydownListener(evt) {
        if (evt.isDefaultPrevented()) {
          return evt;
        }

        var modal = openedWindows.top();
        if (modal) {
          switch (evt.which) {
            case 27: {
              if (modal.value.keyboard) {
                evt.preventDefault();
                $rootScope.$apply(function() {
                  $modalStack.dismiss(modal.key, 'escape key press');
                });
              }
              break;
            }
            case 9: {
              var list = $modalStack.loadFocusElementList(modal);
              var focusChanged = false;
              if (evt.shiftKey) {
                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
                  focusChanged = $modalStack.focusLastFocusableElement(list);
                }
              } else {
                if ($modalStack.isFocusInLastItem(evt, list)) {
                  focusChanged = $modalStack.focusFirstFocusableElement(list);
                }
              }

              if (focusChanged) {
                evt.preventDefault();
                evt.stopPropagation();
              }

              break;
            }
          }
        }
      }

      $modalStack.open = function(modalInstance, modal) {
        var modalOpener = $document[0].activeElement,
          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

        toggleTopWindowClass(false);

        // Store the current top first, to determine what index we ought to use
        // for the current top modal
        previousTopOpenedModal = openedWindows.top();

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          renderDeferred: modal.renderDeferred,
          closedDeferred: modal.closedDeferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard,
          openedClass: modal.openedClass,
          windowTopClass: modal.windowTopClass,
          animation: modal.animation,
          appendTo: modal.appendTo
        });

        openedClasses.put(modalBodyClass, modalInstance);

        var appendToElement = modal.appendTo,
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.modalOptions = modal;
          backdropScope.index = currBackdropIndex;
          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
          backdropDomEl.attr({
            'class': 'modal-backdrop',
            'ng-style': '{\'z-index\': 1040 + (index && 1 || 0) + index*10}',
            'uib-modal-animation-class': 'fade',
            'modal-in-class': 'in'
          });
          if (modal.backdropClass) {
            backdropDomEl.addClass(modal.backdropClass);
          }

          if (modal.animation) {
            backdropDomEl.attr('modal-animation', 'true');
          }
          $compile(backdropDomEl)(backdropScope);
          $animate.enter(backdropDomEl, appendToElement);
          if ($uibPosition.isScrollable(appendToElement)) {
            scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
            if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
              appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
            }
          }
        }

        var content;
        if (modal.component) {
          content = document.createElement(snake_case(modal.component.name));
          content = angular.element(content);
          content.attr({
            resolve: '$resolve',
            'modal-instance': '$uibModalInstance',
            close: '$close($value)',
            dismiss: '$dismiss($value)'
          });
        } else {
          content = modal.content;
        }

        // Set the top modal index based on the index of the previous top modal
        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
        angularDomEl.attr({
          'class': 'modal',
          'template-url': modal.windowTemplateUrl,
          'window-top-class': modal.windowTopClass,
          'role': 'dialog',
          'aria-labelledby': modal.ariaLabelledBy,
          'aria-describedby': modal.ariaDescribedBy,
          'size': modal.size,
          'index': topModalIndex,
          'animate': 'animate',
          'ng-style': '{\'z-index\': 1050 + $$topModalIndex*10, display: \'block\'}',
          'tabindex': -1,
          'uib-modal-animation-class': 'fade',
          'modal-in-class': 'in'
        }).append(content);
        if (modal.windowClass) {
          angularDomEl.addClass(modal.windowClass);
        }

        if (modal.animation) {
          angularDomEl.attr('modal-animation', 'true');
        }

        appendToElement.addClass(modalBodyClass);
        if (modal.scope) {
          // we need to explicitly add the modal index to the modal scope
          // because it is needed by ngStyle to compute the zIndex property.
          modal.scope.$$topModalIndex = topModalIndex;
        }
        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

        openedWindows.top().value.modalDomEl = angularDomEl;
        openedWindows.top().value.modalOpener = modalOpener;

        applyAriaHidden(angularDomEl);

        function applyAriaHidden(el) {
          if (!el || el[0].tagName === 'BODY') {
            return;
          }

          getSiblings(el).forEach(function(sibling) {
            var elemIsAlreadyHidden = sibling.getAttribute('aria-hidden') === 'true',
              ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10);

            if (!ariaHiddenCount) {
              ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0;
            }

            sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1);
            sibling.setAttribute('aria-hidden', 'true');
          });

          return applyAriaHidden(el.parent());

          function getSiblings(el) {
            var children = el.parent() ? el.parent().children() : [];

            return Array.prototype.filter.call(children, function(child) {
              return child !== el[0];
            });
          }
        }
      };

      function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
      }

      function unhideBackgroundElements() {
        Array.prototype.forEach.call(
          document.querySelectorAll('[' + ARIA_HIDDEN_ATTRIBUTE_NAME + ']'),
          function(hiddenEl) {
            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10),
              newHiddenCount = ariaHiddenCount - 1;
            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount);

            if (!newHiddenCount) {
              hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME);
              hiddenEl.removeAttribute('aria-hidden');
            }
          }
        );
      }

      $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
          return true;
        }

        return !modalWindow;
      };

      $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
          return true;
        }
        return !modalWindow;
      };

      $modalStack.dismissAll = function(reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function() {
        return openedWindows.top();
      };

      $modalStack.modalRendered = function(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.renderDeferred.resolve();
        }
      };

      $modalStack.focusFirstFocusableElement = function(list) {
        if (list.length > 0) {
          list[0].focus();
          return true;
        }
        return false;
      };

      $modalStack.focusLastFocusableElement = function(list) {
        if (list.length > 0) {
          list[list.length - 1].focus();
          return true;
        }
        return false;
      };

      $modalStack.isModalFocused = function(evt, modalWindow) {
        if (evt && modalWindow) {
          var modalDomEl = modalWindow.value.modalDomEl;
          if (modalDomEl && modalDomEl.length) {
            return (evt.target || evt.srcElement) === modalDomEl[0];
          }
        }
        return false;
      };

      $modalStack.isFocusInFirstItem = function(evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[0];
        }
        return false;
      };

      $modalStack.isFocusInLastItem = function(evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[list.length - 1];
        }
        return false;
      };

      $modalStack.loadFocusElementList = function(modalWindow) {
        if (modalWindow) {
          var modalDomE1 = modalWindow.value.modalDomEl;
          if (modalDomE1 && modalDomE1.length) {
            var elements = modalDomE1[0].querySelectorAll(tabbableSelector);
            return elements ?
              Array.prototype.filter.call(elements, function(element) {
                return isVisible(element);
              }) : elements;
          }
        }
      };

      return $modalStack;
    }])

  .provider('$uibModal', function() {
    var $modalProvider = {
      options: {
        animation: true,
        backdrop: true, //can also be false or 'static'
        keyboard: true
      },
      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $templateRequest(angular.isFunction(options.templateUrl) ?
                options.templateUrl() : options.templateUrl);
          }

          var promiseChain = null;
          $modal.getPromiseChain = function() {
            return promiseChain;
          };

          $modal.open = function(modalOptions) {
            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();
            var modalClosedDeferred = $q.defer();
            var modalRenderDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              closed: modalClosedDeferred.promise,
              rendered: modalRenderDeferred.promise,
              close: function (result) {
                return $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                return $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};
            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

            if (!modalOptions.appendTo.length) {
              throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
            }

            //verify options
            if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of component or template or templateUrl options is required.');
            }

            var templateAndResolvePromise;
            if (modalOptions.component) {
              templateAndResolvePromise = $q.when($uibResolve.resolve(modalOptions.resolve, {}, null, null));
            } else {
              templateAndResolvePromise =
                $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);
            }

            function resolveWithTemplate() {
              return templateAndResolvePromise;
            }

            // Wait for the resolution of the existing promise chain.
            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
            // Then add to $modalStack and resolve opened.
            // Finally clean up the chain variable if no subsequent modal has overwritten it.
            var samePromise;
            samePromise = promiseChain = $q.all([promiseChain])
              .then(resolveWithTemplate, resolveWithTemplate)
              .then(function resolveSuccess(tplAndVars) {
                var providedScope = modalOptions.scope || $rootScope;

                var modalScope = providedScope.$new();
                modalScope.$close = modalInstance.close;
                modalScope.$dismiss = modalInstance.dismiss;

                modalScope.$on('$destroy', function() {
                  if (!modalScope.$$uibDestructionScheduled) {
                    modalScope.$dismiss('$uibUnscheduledDestruction');
                  }
                });

                var modal = {
                  scope: modalScope,
                  deferred: modalResultDeferred,
                  renderDeferred: modalRenderDeferred,
                  closedDeferred: modalClosedDeferred,
                  animation: modalOptions.animation,
                  backdrop: modalOptions.backdrop,
                  keyboard: modalOptions.keyboard,
                  backdropClass: modalOptions.backdropClass,
                  windowTopClass: modalOptions.windowTopClass,
                  windowClass: modalOptions.windowClass,
                  windowTemplateUrl: modalOptions.windowTemplateUrl,
                  ariaLabelledBy: modalOptions.ariaLabelledBy,
                  ariaDescribedBy: modalOptions.ariaDescribedBy,
                  size: modalOptions.size,
                  openedClass: modalOptions.openedClass,
                  appendTo: modalOptions.appendTo
                };

                var component = {};
                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

                if (modalOptions.component) {
                  constructLocals(component, false, true, false);
                  component.name = modalOptions.component;
                  modal.component = component;
                } else if (modalOptions.controller) {
                  constructLocals(ctrlLocals, true, false, true);

                  // the third param will make the controller instantiate later,private api
                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
                  if (modalOptions.controllerAs && modalOptions.bindToController) {
                    ctrlInstance = ctrlInstantiate.instance;
                    ctrlInstance.$close = modalScope.$close;
                    ctrlInstance.$dismiss = modalScope.$dismiss;
                    angular.extend(ctrlInstance, {
                      $resolve: ctrlLocals.$scope.$resolve
                    }, providedScope);
                  }

                  ctrlInstance = ctrlInstantiate();

                  if (angular.isFunction(ctrlInstance.$onInit)) {
                    ctrlInstance.$onInit();
                  }
                }

                if (!modalOptions.component) {
                  modal.content = tplAndVars[0];
                }

                $modalStack.open(modalInstance, modal);
                modalOpenedDeferred.resolve(true);

                function constructLocals(obj, template, instanceOnScope, injectable) {
                  obj.$scope = modalScope;
                  obj.$scope.$resolve = {};
                  if (instanceOnScope) {
                    obj.$scope.$uibModalInstance = modalInstance;
                  } else {
                    obj.$uibModalInstance = modalInstance;
                  }

                  var resolves = template ? tplAndVars[1] : tplAndVars;
                  angular.forEach(resolves, function(value, key) {
                    if (injectable) {
                      obj[key] = value;
                    }

                    obj.$scope.$resolve[key] = value;
                  });
                }
            }, function resolveError(reason) {
              modalOpenedDeferred.reject(reason);
              modalResultDeferred.reject(reason);
            })['finally'](function() {
              if (promiseChain === samePromise) {
                promiseChain = null;
              }
            });

            return modalInstance;
          };

          return $modal;
        }
      ]
    };

    return $modalProvider;
  });

angular.module('ui.bootstrap.paging', [])
/**
 * Helper internal service for generating common controller code between the
 * pager and pagination components
 */
.factory('uibPaging', ['$parse', function($parse) {
  return {
    create: function(ctrl, $scope, $attrs) {
      ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
      ctrl.ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl
      ctrl._watchers = [];

      ctrl.init = function(ngModelCtrl, config) {
        ctrl.ngModelCtrl = ngModelCtrl;
        ctrl.config = config;

        ngModelCtrl.$render = function() {
          ctrl.render();
        };

        if ($attrs.itemsPerPage) {
          ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
            ctrl.itemsPerPage = parseInt(value, 10);
            $scope.totalPages = ctrl.calculateTotalPages();
            ctrl.updatePage();
          }));
        } else {
          ctrl.itemsPerPage = config.itemsPerPage;
        }

        $scope.$watch('totalItems', function(newTotal, oldTotal) {
          if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
            $scope.totalPages = ctrl.calculateTotalPages();
            ctrl.updatePage();
          }
        });
      };

      ctrl.calculateTotalPages = function() {
        var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
        return Math.max(totalPages || 0, 1);
      };

      ctrl.render = function() {
        $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
      };

      $scope.selectPage = function(page, evt) {
        if (evt) {
          evt.preventDefault();
        }

        var clickAllowed = !$scope.ngDisabled || !evt;
        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
          if (evt && evt.target) {
            evt.target.blur();
          }
          ctrl.ngModelCtrl.$setViewValue(page);
          ctrl.ngModelCtrl.$render();
        }
      };

      $scope.getText = function(key) {
        return $scope[key + 'Text'] || ctrl.config[key + 'Text'];
      };

      $scope.noPrevious = function() {
        return $scope.page === 1;
      };

      $scope.noNext = function() {
        return $scope.page === $scope.totalPages;
      };

      ctrl.updatePage = function() {
        ctrl.setNumPages($scope.$parent, $scope.totalPages); // Readonly variable

        if ($scope.page > $scope.totalPages) {
          $scope.selectPage($scope.totalPages);
        } else {
          ctrl.ngModelCtrl.$render();
        }
      };

      $scope.$on('$destroy', function() {
        while (ctrl._watchers.length) {
          ctrl._watchers.shift()();
        }
      });
    }
  };
}]);

angular.module('ui.bootstrap.pager', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])

.controller('UibPagerController', ['$scope', '$attrs', 'uibPaging', 'uibPagerConfig', function($scope, $attrs, uibPaging, uibPagerConfig) {
  $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;

  uibPaging.create(this, $scope, $attrs);
}])

.constant('uibPagerConfig', {
  itemsPerPage: 10,
  previousText: '« Previous',
  nextText: 'Next »',
  align: true
})

.directive('uibPager', ['uibPagerConfig', function(uibPagerConfig) {
  return {
    scope: {
      totalItems: '=',
      previousText: '@',
      nextText: '@',
      ngDisabled: '='
    },
    require: ['uibPager', '?ngModel'],
    restrict: 'A',
    controller: 'UibPagerController',
    controllerAs: 'pager',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/pager/pager.html';
    },
    link: function(scope, element, attrs, ctrls) {
      element.addClass('pager');
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
        return; // do nothing if no ng-model
      }

      paginationCtrl.init(ngModelCtrl, uibPagerConfig);
    }
  };
}]);

angular.module('ui.bootstrap.pagination', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])
.controller('UibPaginationController', ['$scope', '$attrs', '$parse', 'uibPaging', 'uibPaginationConfig', function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
  var ctrl = this;
  // Setup configuration parameters
  var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize,
    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate,
    forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses,
    boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers,
    pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) { return $scope.$parent.$eval($attrs.pageLabel, {$page: idx}); } : angular.identity;
  $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
  $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;
  $attrs.$set('role', 'menu');

  uibPaging.create(this, $scope, $attrs);

  if ($attrs.maxSize) {
    ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
      maxSize = parseInt(value, 10);
      ctrl.render();
    }));
  }

  // Create page object used in template
  function makePage(number, text, isActive) {
    return {
      number: number,
      text: text,
      active: isActive
    };
  }

  function getPages(currentPage, totalPages) {
    var pages = [];

    // Default page limits
    var startPage = 1, endPage = totalPages;
    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

    // recompute if maxSize
    if (isMaxSized) {
      if (rotate) {
        // Current page is displayed in the middle of the visible ones
        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
        endPage = startPage + maxSize - 1;

        // Adjust if limit is exceeded
        if (endPage > totalPages) {
          endPage = totalPages;
          startPage = endPage - maxSize + 1;
        }
      } else {
        // Visible pages are paginated with maxSize
        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;

        // Adjust last page if limit is exceeded
        endPage = Math.min(startPage + maxSize - 1, totalPages);
      }
    }

    // Add page number links
    for (var number = startPage; number <= endPage; number++) {
      var page = makePage(number, pageLabel(number), number === currentPage);
      pages.push(page);
    }

    // Add links to move between page sets
    if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
      if (startPage > 1) {
        if (!boundaryLinkNumbers || startPage > 3) { //need ellipsis for all options unless range is too close to beginning
        var previousPageSet = makePage(startPage - 1, '...', false);
        pages.unshift(previousPageSet);
      }
        if (boundaryLinkNumbers) {
          if (startPage === 3) { //need to replace ellipsis when the buttons would be sequential
            var secondPageLink = makePage(2, '2', false);
            pages.unshift(secondPageLink);
          }
          //add the first page
          var firstPageLink = makePage(1, '1', false);
          pages.unshift(firstPageLink);
        }
      }

      if (endPage < totalPages) {
        if (!boundaryLinkNumbers || endPage < totalPages - 2) { //need ellipsis for all options unless range is too close to end
        var nextPageSet = makePage(endPage + 1, '...', false);
        pages.push(nextPageSet);
      }
        if (boundaryLinkNumbers) {
          if (endPage === totalPages - 2) { //need to replace ellipsis when the buttons would be sequential
            var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
            pages.push(secondToLastPageLink);
          }
          //add the last page
          var lastPageLink = makePage(totalPages, totalPages, false);
          pages.push(lastPageLink);
        }
      }
    }
    return pages;
  }

  var originalRender = this.render;
  this.render = function() {
    originalRender();
    if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
      $scope.pages = getPages($scope.page, $scope.totalPages);
    }
  };
}])

.constant('uibPaginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  boundaryLinkNumbers: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true,
  forceEllipses: false
})

.directive('uibPagination', ['$parse', 'uibPaginationConfig', function($parse, uibPaginationConfig) {
  return {
    scope: {
      totalItems: '=',
      firstText: '@',
      previousText: '@',
      nextText: '@',
      lastText: '@',
      ngDisabled:'='
    },
    require: ['uibPagination', '?ngModel'],
    restrict: 'A',
    controller: 'UibPaginationController',
    controllerAs: 'pagination',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/pagination/pagination.html';
    },
    link: function(scope, element, attrs, ctrls) {
      element.addClass('pagination');
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider('$uibTooltip', function() {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    placementClassPrefix: '',
    animation: true,
    popupDelay: 0,
    popupCloseDelay: 0,
    useContentExp: false
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'outsideClick': 'outsideClick',
    'focus': 'blur',
    'none': ''
  };

  // The options specified to the provider globally.
  var globalOptions = {};

  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function(value) {
		angular.extend(globalOptions, value);
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
   */
  this.setTriggers = function setTriggers(triggers) {
    angular.extend(triggerMap, triggers);
  };

  /**
   * This is a helper function for translating camel-case to snake_case.
   */
  function snake_case(name) {
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = ['$window', '$compile', '$timeout', '$document', '$uibPosition', '$interpolate', '$rootScope', '$parse', '$$stackedMap', function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
    var openedTooltips = $$stackedMap.createNew();
    $document.on('keyup', keypressListener);

    $rootScope.$on('$destroy', function() {
      $document.off('keyup', keypressListener);
    });

    function keypressListener(e) {
      if (e.which === 27) {
        var last = openedTooltips.top();
        if (last) {
          last.value.close();
          last = null;
        }
      }
    }

    return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
      options = angular.extend({}, defaultOptions, globalOptions, options);

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers(trigger) {
        var show = (trigger || options.trigger || defaultTriggerShow).split(' ');
        var hide = show.map(function(trigger) {
          return triggerMap[trigger] || trigger;
        });
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case(ttType);

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template =
        '<div '+ directiveName + '-popup ' +
          'uib-title="' + startSym + 'title' + endSym + '" ' +
          (options.useContentExp ?
            'content-exp="contentExp()" ' :
            'content="' + startSym + 'content' + endSym + '" ') +
          'origin-scope="origScope" ' +
          'class="uib-position-measure ' + prefix + '" ' +
          'tooltip-animation-class="fade"' +
          'uib-tooltip-classes ' +
          'ng-class="{ in: isOpen }" ' +
          '>' +
        '</div>';

      return {
        compile: function(tElem, tAttrs) {
          var tooltipLinker = $compile(template);

          return function link(scope, element, attrs, tooltipCtrl) {
            var tooltip;
            var tooltipLinkedScope;
            var transitionTimeout;
            var showTimeout;
            var hideTimeout;
            var positionTimeout;
            var adjustmentTimeout;
            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
            var triggers = getTriggers(undefined);
            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
            var ttScope = scope.$new(true);
            var repositionScheduled = false;
            var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen']) ? $parse(attrs[prefix + 'IsOpen']) : false;
            var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
            var observers = [];
            var lastPlacement;

            var positionTooltip = function() {
              // check if tooltip exists and is not empty
              if (!tooltip || !tooltip.html()) { return; }

              if (!positionTimeout) {
                positionTimeout = $timeout(function() {
                  var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
                  var initialHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
                  var elementPos = appendToBody ? $position.offset(element) : $position.position(element);
                  tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' });
                  var placementClasses = ttPosition.placement.split('-');

                  if (!tooltip.hasClass(placementClasses[0])) {
                    tooltip.removeClass(lastPlacement.split('-')[0]);
                    tooltip.addClass(placementClasses[0]);
                  }

                  if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
                    tooltip.removeClass(options.placementClassPrefix + lastPlacement);
                    tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
                  }

                  adjustmentTimeout = $timeout(function() {
                    var currentHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
                    var adjustment = $position.adjustTop(placementClasses, elementPos, initialHeight, currentHeight);
                    if (adjustment) {
                      tooltip.css(adjustment);
                    }
                    adjustmentTimeout = null;
                  }, 0, false);

                  // first time through tt element will have the
                  // uib-position-measure class or if the placement
                  // has changed we need to position the arrow.
                  if (tooltip.hasClass('uib-position-measure')) {
                    $position.positionArrow(tooltip, ttPosition.placement);
                    tooltip.removeClass('uib-position-measure');
                  } else if (lastPlacement !== ttPosition.placement) {
                    $position.positionArrow(tooltip, ttPosition.placement);
                  }
                  lastPlacement = ttPosition.placement;

                  positionTimeout = null;
                }, 0, false);
              }
            };

            // Set up the correct scope to allow transclusion later
            ttScope.origScope = scope;

            // By default, the tooltip is not open.
            // TODO add ability to start tooltip opened
            ttScope.isOpen = false;

            function toggleTooltipBind() {
              if (!ttScope.isOpen) {
                showTooltipBind();
              } else {
                hideTooltipBind();
              }
            }

            // Show the tooltip with delay if specified, otherwise show it immediately
            function showTooltipBind() {
              if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
                return;
              }

              cancelHide();
              prepareTooltip();

              if (ttScope.popupDelay) {
                // Do nothing if the tooltip was already scheduled to pop-up.
                // This happens if show is triggered multiple times before any hide is triggered.
                if (!showTimeout) {
                  showTimeout = $timeout(show, ttScope.popupDelay, false);
                }
              } else {
                show();
              }
            }

            function hideTooltipBind() {
              cancelShow();

              if (ttScope.popupCloseDelay) {
                if (!hideTimeout) {
                  hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
                }
              } else {
                hide();
              }
            }

            // Show the tooltip popup element.
            function show() {
              cancelShow();
              cancelHide();

              // Don't show empty tooltips.
              if (!ttScope.content) {
                return angular.noop;
              }

              createTooltip();

              // And show the tooltip.
              ttScope.$evalAsync(function() {
                ttScope.isOpen = true;
                assignIsOpen(true);
                positionTooltip();
              });
            }

            function cancelShow() {
              if (showTimeout) {
                $timeout.cancel(showTimeout);
                showTimeout = null;
              }

              if (positionTimeout) {
                $timeout.cancel(positionTimeout);
                positionTimeout = null;
              }
            }

            // Hide the tooltip popup element.
            function hide() {
              if (!ttScope) {
                return;
              }

              // First things first: we don't show it anymore.
              ttScope.$evalAsync(function() {
                if (ttScope) {
                  ttScope.isOpen = false;
                  assignIsOpen(false);
                  // And now we remove it from the DOM. However, if we have animation, we
                  // need to wait for it to expire beforehand.
                  // FIXME: this is a placeholder for a port of the transitions library.
                  // The fade transition in TWBS is 150ms.
                  if (ttScope.animation) {
                    if (!transitionTimeout) {
                      transitionTimeout = $timeout(removeTooltip, 150, false);
                    }
                  } else {
                    removeTooltip();
                  }
                }
              });
            }

            function cancelHide() {
              if (hideTimeout) {
                $timeout.cancel(hideTimeout);
                hideTimeout = null;
              }

              if (transitionTimeout) {
                $timeout.cancel(transitionTimeout);
                transitionTimeout = null;
              }
            }

            function createTooltip() {
              // There can only be one tooltip element per directive shown at once.
              if (tooltip) {
                return;
              }

              tooltipLinkedScope = ttScope.$new();
              tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
                if (appendToBody) {
                  $document.find('body').append(tooltip);
                } else {
                  element.after(tooltip);
                }
              });

              openedTooltips.add(ttScope, {
                close: hide
              });

              prepObservers();
            }

            function removeTooltip() {
              cancelShow();
              cancelHide();
              unregisterObservers();

              if (tooltip) {
                tooltip.remove();
                
                tooltip = null;
                if (adjustmentTimeout) {
                  $timeout.cancel(adjustmentTimeout);
                }
              }

              openedTooltips.remove(ttScope);
              
              if (tooltipLinkedScope) {
                tooltipLinkedScope.$destroy();
                tooltipLinkedScope = null;
              }
            }

            /**
             * Set the initial scope values. Once
             * the tooltip is created, the observers
             * will be added to keep things in sync.
             */
            function prepareTooltip() {
              ttScope.title = attrs[prefix + 'Title'];
              if (contentParse) {
                ttScope.content = contentParse(scope);
              } else {
                ttScope.content = attrs[ttType];
              }

              ttScope.popupClass = attrs[prefix + 'Class'];
              ttScope.placement = angular.isDefined(attrs[prefix + 'Placement']) ? attrs[prefix + 'Placement'] : options.placement;
              var placement = $position.parsePlacement(ttScope.placement);
              lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0];

              var delay = parseInt(attrs[prefix + 'PopupDelay'], 10);
              var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10);
              ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
              ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
            }

            function assignIsOpen(isOpen) {
              if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
                isOpenParse.assign(scope, isOpen);
              }
            }

            ttScope.contentExp = function() {
              return ttScope.content;
            };

            /**
             * Observe the relevant attributes.
             */
            attrs.$observe('disabled', function(val) {
              if (val) {
                cancelShow();
              }

              if (val && ttScope.isOpen) {
                hide();
              }
            });

            if (isOpenParse) {
              scope.$watch(isOpenParse, function(val) {
                if (ttScope && !val === ttScope.isOpen) {
                  toggleTooltipBind();
                }
              });
            }

            function prepObservers() {
              observers.length = 0;

              if (contentParse) {
                observers.push(
                  scope.$watch(contentParse, function(val) {
                    ttScope.content = val;
                    if (!val && ttScope.isOpen) {
                      hide();
                    }
                  })
                );

                observers.push(
                  tooltipLinkedScope.$watch(function() {
                    if (!repositionScheduled) {
                      repositionScheduled = true;
                      tooltipLinkedScope.$$postDigest(function() {
                        repositionScheduled = false;
                        if (ttScope && ttScope.isOpen) {
                          positionTooltip();
                        }
                      });
                    }
                  })
                );
              } else {
                observers.push(
                  attrs.$observe(ttType, function(val) {
                    ttScope.content = val;
                    if (!val && ttScope.isOpen) {
                      hide();
                    } else {
                      positionTooltip();
                    }
                  })
                );
              }

              observers.push(
                attrs.$observe(prefix + 'Title', function(val) {
                  ttScope.title = val;
                  if (ttScope.isOpen) {
                    positionTooltip();
                  }
                })
              );

              observers.push(
                attrs.$observe(prefix + 'Placement', function(val) {
                  ttScope.placement = val ? val : options.placement;
                  if (ttScope.isOpen) {
                    positionTooltip();
                  }
                })
              );
            }

            function unregisterObservers() {
              if (observers.length) {
                angular.forEach(observers, function(observer) {
                  observer();
                });
                observers.length = 0;
              }
            }

            // hide tooltips/popovers for outsideClick trigger
            function bodyHideTooltipBind(e) {
              if (!ttScope || !ttScope.isOpen || !tooltip) {
                return;
              }
              // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
              if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
                hideTooltipBind();
              }
            }

            // KeyboardEvent handler to hide the tooltip on Escape key press
            function hideOnEscapeKey(e) {
              if (e.which === 27) {
                hideTooltipBind();
              }
            }

            var unregisterTriggers = function() {
              triggers.show.forEach(function(trigger) {
                if (trigger === 'outsideClick') {
                  element.off('click', toggleTooltipBind);
                } else {
                  element.off(trigger, showTooltipBind);
                  element.off(trigger, toggleTooltipBind);
                }
                element.off('keypress', hideOnEscapeKey);
              });
              triggers.hide.forEach(function(trigger) {
                if (trigger === 'outsideClick') {
                  $document.off('click', bodyHideTooltipBind);
                } else {
                  element.off(trigger, hideTooltipBind);
                }
              });
            };

            function prepTriggers() {
              var showTriggers = [], hideTriggers = [];
              var val = scope.$eval(attrs[prefix + 'Trigger']);
              unregisterTriggers();

              if (angular.isObject(val)) {
                Object.keys(val).forEach(function(key) {
                  showTriggers.push(key);
                  hideTriggers.push(val[key]);
                });
                triggers = {
                  show: showTriggers,
                  hide: hideTriggers
                };
              } else {
                triggers = getTriggers(val);
              }

              if (triggers.show !== 'none') {
                triggers.show.forEach(function(trigger, idx) {
                  if (trigger === 'outsideClick') {
                    element.on('click', toggleTooltipBind);
                    $document.on('click', bodyHideTooltipBind);
                  } else if (trigger === triggers.hide[idx]) {
                    element.on(trigger, toggleTooltipBind);
                  } else if (trigger) {
                    element.on(trigger, showTooltipBind);
                    element.on(triggers.hide[idx], hideTooltipBind);
                  }
                  element.on('keypress', hideOnEscapeKey);
                });
              }
            }

            prepTriggers();

            var animation = scope.$eval(attrs[prefix + 'Animation']);
            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

            var appendToBodyVal;
            var appendKey = prefix + 'AppendToBody';
            if (appendKey in attrs && attrs[appendKey] === undefined) {
              appendToBodyVal = true;
            } else {
              appendToBodyVal = scope.$eval(attrs[appendKey]);
            }

            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

            // Make sure tooltip is destroyed and removed.
            scope.$on('$destroy', function onDestroyTooltip() {
              unregisterTriggers();
              removeTooltip();
              ttScope = null;
            });
          };
        }
      };
    };
  }];
})

// This is mostly ngInclude code but with a custom scope
.directive('uibTooltipTemplateTransclude', [
         '$animate', '$sce', '$compile', '$templateRequest',
function ($animate, $sce, $compile, $templateRequest) {
  return {
    link: function(scope, elem, attrs) {
      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

      var changeCounter = 0,
        currentScope,
        previousElement,
        currentElement;

      var cleanupLastIncludeContent = function() {
        if (previousElement) {
          previousElement.remove();
          previousElement = null;
        }

        if (currentScope) {
          currentScope.$destroy();
          currentScope = null;
        }

        if (currentElement) {
          $animate.leave(currentElement).then(function() {
            previousElement = null;
          });
          previousElement = currentElement;
          currentElement = null;
        }
      };

      scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
        var thisChangeId = ++changeCounter;

        if (src) {
          //set the 2nd param to true to ignore the template request error so that the inner
          //contents and scope can be cleaned up.
          $templateRequest(src, true).then(function(response) {
            if (thisChangeId !== changeCounter) { return; }
            var newScope = origScope.$new();
            var template = response;

            var clone = $compile(template)(newScope, function(clone) {
              cleanupLastIncludeContent();
              $animate.enter(clone, elem);
            });

            currentScope = newScope;
            currentElement = clone;

            currentScope.$emit('$includeContentLoaded', src);
          }, function() {
            if (thisChangeId === changeCounter) {
              cleanupLastIncludeContent();
              scope.$emit('$includeContentError', src);
            }
          });
          scope.$emit('$includeContentRequested', src);
        } else {
          cleanupLastIncludeContent();
        }
      });

      scope.$on('$destroy', cleanupLastIncludeContent);
    }
  };
}])

/**
 * Note that it's intentional that these classes are *not* applied through $animate.
 * They must not be animated as they're expected to be present on the tooltip on
 * initialization.
 */
.directive('uibTooltipClasses', ['$uibPosition', function($uibPosition) {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      // need to set the primary position so the
      // arrow has space during position measure.
      // tooltip.positionTooltip()
      if (scope.placement) {
        // // There are no top-left etc... classes
        // // in TWBS, so we need the primary position.
        var position = $uibPosition.parsePlacement(scope.placement);
        element.addClass(position[0]);
      }

      if (scope.popupClass) {
        element.addClass(scope.popupClass);
      }

      if (scope.animation) {
        element.addClass(attrs.tooltipAnimationClass);
      }
    }
  };
}])

.directive('uibTooltipPopup', function() {
  return {
    restrict: 'A',
    scope: { content: '@' },
    templateUrl: 'uib/template/tooltip/tooltip-popup.html'
  };
})

.directive('uibTooltip', [ '$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter');
}])

.directive('uibTooltipTemplatePopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&', originScope: '&' },
    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'
  };
})

.directive('uibTooltipTemplate', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}])

.directive('uibTooltipHtmlPopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&' },
    templateUrl: 'uib/template/tooltip/tooltip-html-popup.html'
  };
})

.directive('uibTooltipHtml', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, and selector delegatation.
 */
angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

.directive('uibPopoverTemplatePopup', function() {
  return {
    restrict: 'A',
    scope: { uibTitle: '@', contentExp: '&', originScope: '&' },
    templateUrl: 'uib/template/popover/popover-template.html'
  };
})

.directive('uibPopoverTemplate', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
    useContentExp: true
  });
}])

.directive('uibPopoverHtmlPopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&', uibTitle: '@' },
    templateUrl: 'uib/template/popover/popover-html.html'
  };
})

.directive('uibPopoverHtml', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
    useContentExp: true
  });
}])

.directive('uibPopoverPopup', function() {
  return {
    restrict: 'A',
    scope: { uibTitle: '@', content: '@' },
    templateUrl: 'uib/template/popover/popover.html'
  };
})

.directive('uibPopover', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopover', 'popover', 'click');
}]);

angular.module('ui.bootstrap.progressbar', [])

.constant('uibProgressConfig', {
  animate: true,
  max: 100
})

.controller('UibProgressController', ['$scope', '$attrs', 'uibProgressConfig', function($scope, $attrs, progressConfig) {
  var self = this,
      animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

  this.bars = [];
  $scope.max = getMaxOrDefault();

  this.addBar = function(bar, element, attrs) {
    if (!animate) {
      element.css({'transition': 'none'});
    }

    this.bars.push(bar);

    bar.max = getMaxOrDefault();
    bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar';

    bar.$watch('value', function(value) {
      bar.recalculatePercentage();
    });

    bar.recalculatePercentage = function() {
      var totalPercentage = self.bars.reduce(function(total, bar) {
        bar.percent = +(100 * bar.value / bar.max).toFixed(2);
        return total + bar.percent;
      }, 0);

      if (totalPercentage > 100) {
        bar.percent -= totalPercentage - 100;
      }
    };

    bar.$on('$destroy', function() {
      element = null;
      self.removeBar(bar);
    });
  };

  this.removeBar = function(bar) {
    this.bars.splice(this.bars.indexOf(bar), 1);
    this.bars.forEach(function (bar) {
      bar.recalculatePercentage();
    });
  };

  //$attrs.$observe('maxParam', function(maxParam) {
  $scope.$watch('maxParam', function(maxParam) {
    self.bars.forEach(function(bar) {
      bar.max = getMaxOrDefault();
      bar.recalculatePercentage();
    });
  });

  function getMaxOrDefault () {
    return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
  }
}])

.directive('uibProgress', function() {
  return {
    replace: true,
    transclude: true,
    controller: 'UibProgressController',
    require: 'uibProgress',
    scope: {
      maxParam: '=?max'
    },
    templateUrl: 'uib/template/progressbar/progress.html'
  };
})

.directive('uibBar', function() {
  return {
    replace: true,
    transclude: true,
    require: '^uibProgress',
    scope: {
      value: '=',
      type: '@'
    },
    templateUrl: 'uib/template/progressbar/bar.html',
    link: function(scope, element, attrs, progressCtrl) {
      progressCtrl.addBar(scope, element, attrs);
    }
  };
})

.directive('uibProgressbar', function() {
  return {
    replace: true,
    transclude: true,
    controller: 'UibProgressController',
    scope: {
      value: '=',
      maxParam: '=?max',
      type: '@'
    },
    templateUrl: 'uib/template/progressbar/progressbar.html',
    link: function(scope, element, attrs, progressCtrl) {
      progressCtrl.addBar(scope, angular.element(element.children()[0]), {title: attrs.title});
    }
  };
});

angular.module('ui.bootstrap.rating', [])

.constant('uibRatingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null,
  enableReset: true,
  titles: ['one', 'two', 'three', 'four', 'five']
})

.controller('UibRatingController', ['$scope', '$attrs', 'uibRatingConfig', function($scope, $attrs, ratingConfig) {
  var ngModelCtrl = { $setViewValue: angular.noop },
    self = this;

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.push(function(value) {
      if (angular.isNumber(value) && value << 0 !== value) {
        value = Math.round(value);
      }

      return value;
    });

    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
    this.enableReset = angular.isDefined($attrs.enableReset) ?
      $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
    var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
    this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
      tmpTitles : ratingConfig.titles;

    var ratingStates = angular.isDefined($attrs.ratingStates) ?
      $scope.$parent.$eval($attrs.ratingStates) :
      new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
    $scope.range = this.buildTemplateObjects(ratingStates);
  };

  this.buildTemplateObjects = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) }, states[i]);
    }
    return states;
  };

  this.getTitle = function(index) {
    if (index >= this.titles.length) {
      return index + 1;
    }

    return this.titles[index];
  };

  $scope.rate = function(value) {
    if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
      var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
      ngModelCtrl.$setViewValue(newViewValue);
      ngModelCtrl.$render();
    }
  };

  $scope.enter = function(value) {
    if (!$scope.readonly) {
      $scope.value = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.onLeave();
  };

  $scope.onKeydown = function(evt) {
    if (/(37|38|39|40)/.test(evt.which)) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
    }
  };

  this.render = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.title = self.getTitle($scope.value - 1);
  };
}])

.directive('uibRating', function() {
  return {
    require: ['uibRating', 'ngModel'],
    restrict: 'A',
    scope: {
      readonly: '=?readOnly',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'UibRatingController',
    templateUrl: 'uib/template/rating/rating.html',
    link: function(scope, element, attrs, ctrls) {
      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      ratingCtrl.init(ngModelCtrl);
    }
  };
});

angular.module('ui.bootstrap.tabs', [])

.controller('UibTabsetController', ['$scope', function ($scope) {
  var ctrl = this,
    oldIndex;
  ctrl.tabs = [];

  ctrl.select = function(index, evt) {
    if (!destroyed) {
      var previousIndex = findTabIndex(oldIndex);
      var previousSelected = ctrl.tabs[previousIndex];
      if (previousSelected) {
        previousSelected.tab.onDeselect({
          $event: evt,
          $selectedIndex: index
        });
        if (evt && evt.isDefaultPrevented()) {
          return;
        }
        previousSelected.tab.active = false;
      }

      var selected = ctrl.tabs[index];
      if (selected) {
        selected.tab.onSelect({
          $event: evt
        });
        selected.tab.active = true;
        ctrl.active = selected.index;
        oldIndex = selected.index;
      } else if (!selected && angular.isDefined(oldIndex)) {
        ctrl.active = null;
        oldIndex = null;
      }
    }
  };

  ctrl.addTab = function addTab(tab) {
    ctrl.tabs.push({
      tab: tab,
      index: tab.index
    });
    ctrl.tabs.sort(function(t1, t2) {
      if (t1.index > t2.index) {
        return 1;
      }

      if (t1.index < t2.index) {
        return -1;
      }

      return 0;
    });

    if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
      var newActiveIndex = findTabIndex(tab.index);
      ctrl.select(newActiveIndex);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index;
    for (var i = 0; i < ctrl.tabs.length; i++) {
      if (ctrl.tabs[i].tab === tab) {
        index = i;
        break;
      }
    }

    if (ctrl.tabs[index].index === ctrl.active) {
      var newActiveTabIndex = index === ctrl.tabs.length - 1 ?
        index - 1 : index + 1 % ctrl.tabs.length;
      ctrl.select(newActiveTabIndex);
    }

    ctrl.tabs.splice(index, 1);
  };

  $scope.$watch('tabset.active', function(val) {
    if (angular.isDefined(val) && val !== oldIndex) {
      ctrl.select(findTabIndex(val));
    }
  });

  var destroyed;
  $scope.$on('$destroy', function() {
    destroyed = true;
  });

  function findTabIndex(index) {
    for (var i = 0; i < ctrl.tabs.length; i++) {
      if (ctrl.tabs[i].index === index) {
        return i;
      }
    }
  }
}])

.directive('uibTabset', function() {
  return {
    transclude: true,
    replace: true,
    scope: {},
    bindToController: {
      active: '=?',
      type: '@'
    },
    controller: 'UibTabsetController',
    controllerAs: 'tabset',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/tabs/tabset.html';
    },
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ?
        scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ?
        scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

.directive('uibTab', ['$parse', function($parse) {
  return {
    require: '^uibTabset',
    replace: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/tabs/tab.html';
    },
    transclude: true,
    scope: {
      heading: '@',
      index: '=?',
      classes: '@?',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    controllerAs: 'tab',
    link: function(scope, elm, attrs, tabsetCtrl, transclude) {
      scope.disabled = false;
      if (attrs.disable) {
        scope.$parent.$watch($parse(attrs.disable), function(value) {
          scope.disabled = !! value;
        });
      }

      if (angular.isUndefined(attrs.index)) {
        if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
          scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) { return t.index; })) + 1;
        } else {
          scope.index = 0;
        }
      }

      if (angular.isUndefined(attrs.classes)) {
        scope.classes = '';
      }

      scope.select = function(evt) {
        if (!scope.disabled) {
          var index;
          for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
            if (tabsetCtrl.tabs[i].tab === scope) {
              index = i;
              break;
            }
          }

          tabsetCtrl.select(index, evt);
        }
      };

      tabsetCtrl.addTab(scope);
      scope.$on('$destroy', function() {
        tabsetCtrl.removeTab(scope);
      });

      //We need to transclude later, once the content container is ready.
      //when this link happens, we're inside a tab heading.
      scope.$transcludeFn = transclude;
    }
  };
}])

.directive('uibTabHeadingTransclude', function() {
  return {
    restrict: 'A',
    require: '^uibTab',
    link: function(scope, elm) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
})

.directive('uibTabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^uibTabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.uibTabContentTransclude).tab;

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };

  function isTabHeading(node) {
    return node.tagName && (
      node.hasAttribute('uib-tab-heading') ||
      node.hasAttribute('data-uib-tab-heading') ||
      node.hasAttribute('x-uib-tab-heading') ||
      node.tagName.toLowerCase() === 'uib-tab-heading' ||
      node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
      node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
      node.tagName.toLowerCase() === 'uib:tab-heading'
    );
  }
});

angular.module('ui.bootstrap.timepicker', [])

.constant('uibTimepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  secondStep: 1,
  showMeridian: true,
  showSeconds: false,
  meridians: null,
  readonlyInput: false,
  mousewheel: true,
  arrowkeys: true,
  showSpinners: true,
  templateUrl: 'uib/template/timepicker/timepicker.html'
})

.controller('UibTimepickerController', ['$scope', '$element', '$attrs', '$parse', '$log', '$locale', 'uibTimepickerConfig', function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
  var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl;
  var selected = new Date(),
    watchers = [],
    ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
    meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
    padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;

  $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
  $element.removeAttr('tabindex');

  this.init = function(ngModelCtrl_, inputs) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.unshift(function(modelValue) {
      return modelValue ? new Date(modelValue) : null;
    });

    var hoursInputEl = inputs.eq(0),
        minutesInputEl = inputs.eq(1),
        secondsInputEl = inputs.eq(2);

    hoursModelCtrl = hoursInputEl.controller('ngModel');
    minutesModelCtrl = minutesInputEl.controller('ngModel');
    secondsModelCtrl = secondsInputEl.controller('ngModel');

    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;

    if (mousewheel) {
      this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    }

    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
    if (arrowkeys) {
      this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    }

    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
    this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
  };

  var hourStep = timepickerConfig.hourStep;
  if ($attrs.hourStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
      hourStep = +value;
    }));
  }

  var minuteStep = timepickerConfig.minuteStep;
  if ($attrs.minuteStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
      minuteStep = +value;
    }));
  }

  var min;
  watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
    var dt = new Date(value);
    min = isNaN(dt) ? undefined : dt;
  }));

  var max;
  watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
    var dt = new Date(value);
    max = isNaN(dt) ? undefined : dt;
  }));

  var disabled = false;
  if ($attrs.ngDisabled) {
    watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
      disabled = value;
    }));
  }

  $scope.noIncrementHours = function() {
    var incrementedSelected = addMinutes(selected, hourStep * 60);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementHours = function() {
    var decrementedSelected = addMinutes(selected, -hourStep * 60);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noIncrementMinutes = function() {
    var incrementedSelected = addMinutes(selected, minuteStep);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementMinutes = function() {
    var decrementedSelected = addMinutes(selected, -minuteStep);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noIncrementSeconds = function() {
    var incrementedSelected = addSeconds(selected, secondStep);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementSeconds = function() {
    var decrementedSelected = addSeconds(selected, -secondStep);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noToggleMeridian = function() {
    if (selected.getHours() < 12) {
      return disabled || addMinutes(selected, 12 * 60) > max;
    }

    return disabled || addMinutes(selected, -12 * 60) < min;
  };

  var secondStep = timepickerConfig.secondStep;
  if ($attrs.secondStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
      secondStep = +value;
    }));
  }

  $scope.showSeconds = timepickerConfig.showSeconds;
  if ($attrs.showSeconds) {
    watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
      $scope.showSeconds = !!value;
    }));
  }

  // 12H / 24H mode
  $scope.showMeridian = timepickerConfig.showMeridian;
  if ($attrs.showMeridian) {
    watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
      $scope.showMeridian = !!value;

      if (ngModelCtrl.$error.time) {
        // Evaluate from template
        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
        if (angular.isDefined(hours) && angular.isDefined(minutes)) {
          selected.setHours(hours);
          refresh();
        }
      } else {
        updateTemplate();
      }
    }));
  }

  // Get $scope.hours in 24H mode if valid
  function getHoursFromTemplate() {
    var hours = +$scope.hours;
    var valid = $scope.showMeridian ? hours > 0 && hours < 13 :
      hours >= 0 && hours < 24;
    if (!valid || $scope.hours === '') {
      return undefined;
    }

    if ($scope.showMeridian) {
      if (hours === 12) {
        hours = 0;
      }
      if ($scope.meridian === meridians[1]) {
        hours = hours + 12;
      }
    }
    return hours;
  }

  function getMinutesFromTemplate() {
    var minutes = +$scope.minutes;
    var valid = minutes >= 0 && minutes < 60;
    if (!valid || $scope.minutes === '') {
      return undefined;
    }
    return minutes;
  }

  function getSecondsFromTemplate() {
    var seconds = +$scope.seconds;
    return seconds >= 0 && seconds < 60 ? seconds : undefined;
  }

  function pad(value, noPad) {
    if (value === null) {
      return '';
    }

    return angular.isDefined(value) && value.toString().length < 2 && !noPad ?
      '0' + value : value.toString();
  }

  // Respond on mousewheel spin
  this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    var isScrollingUp = function(e) {
      if (e.originalEvent) {
        e = e.originalEvent;
      }
      //pick correct delta variable depending on event
      var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
      return e.detail || delta > 0;
    };

    hoursInputEl.on('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
      }
      e.preventDefault();
    });

    minutesInputEl.on('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
      }
      e.preventDefault();
    });

     secondsInputEl.on('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
      }
      e.preventDefault();
    });
  };

  // Respond on up/down arrowkeys
  this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    hoursInputEl.on('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementHours();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementHours();
          $scope.$apply();
        }
      }
    });

    minutesInputEl.on('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementMinutes();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementMinutes();
          $scope.$apply();
        }
      }
    });

    secondsInputEl.on('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementSeconds();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementSeconds();
          $scope.$apply();
        }
      }
    });
  };

  this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    if ($scope.readonlyInput) {
      $scope.updateHours = angular.noop;
      $scope.updateMinutes = angular.noop;
      $scope.updateSeconds = angular.noop;
      return;
    }

    var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
      ngModelCtrl.$setViewValue(null);
      ngModelCtrl.$setValidity('time', false);
      if (angular.isDefined(invalidHours)) {
        $scope.invalidHours = invalidHours;
        if (hoursModelCtrl) {
          hoursModelCtrl.$setValidity('hours', false);
        }
      }

      if (angular.isDefined(invalidMinutes)) {
        $scope.invalidMinutes = invalidMinutes;
        if (minutesModelCtrl) {
          minutesModelCtrl.$setValidity('minutes', false);
        }
      }

      if (angular.isDefined(invalidSeconds)) {
        $scope.invalidSeconds = invalidSeconds;
        if (secondsModelCtrl) {
          secondsModelCtrl.$setValidity('seconds', false);
        }
      }
    };

    $scope.updateHours = function() {
      var hours = getHoursFromTemplate(),
        minutes = getMinutesFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(hours) && angular.isDefined(minutes)) {
        selected.setHours(hours);
        selected.setMinutes(minutes);
        if (selected < min || selected > max) {
          invalidate(true);
        } else {
          refresh('h');
        }
      } else {
        invalidate(true);
      }
    };

    hoursInputEl.on('blur', function(e) {
      ngModelCtrl.$setTouched();
      if (modelIsEmpty()) {
        makeValid();
      } else if ($scope.hours === null || $scope.hours === '') {
        invalidate(true);
      } else if (!$scope.invalidHours && $scope.hours < 10) {
        $scope.$apply(function() {
          $scope.hours = pad($scope.hours, !padHours);
        });
      }
    });

    $scope.updateMinutes = function() {
      var minutes = getMinutesFromTemplate(),
        hours = getHoursFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
        selected.setHours(hours);
        selected.setMinutes(minutes);
        if (selected < min || selected > max) {
          invalidate(undefined, true);
        } else {
          refresh('m');
        }
      } else {
        invalidate(undefined, true);
      }
    };

    minutesInputEl.on('blur', function(e) {
      ngModelCtrl.$setTouched();
      if (modelIsEmpty()) {
        makeValid();
      } else if ($scope.minutes === null) {
        invalidate(undefined, true);
      } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
        $scope.$apply(function() {
          $scope.minutes = pad($scope.minutes);
        });
      }
    });

    $scope.updateSeconds = function() {
      var seconds = getSecondsFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(seconds)) {
        selected.setSeconds(seconds);
        refresh('s');
      } else {
        invalidate(undefined, undefined, true);
      }
    };

    secondsInputEl.on('blur', function(e) {
      if (modelIsEmpty()) {
        makeValid();
      } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
        $scope.$apply( function() {
          $scope.seconds = pad($scope.seconds);
        });
      }
    });

  };

  this.render = function() {
    var date = ngModelCtrl.$viewValue;

    if (isNaN(date)) {
      ngModelCtrl.$setValidity('time', false);
      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
    } else {
      if (date) {
        selected = date;
      }

      if (selected < min || selected > max) {
        ngModelCtrl.$setValidity('time', false);
        $scope.invalidHours = true;
        $scope.invalidMinutes = true;
      } else {
        makeValid();
      }
      updateTemplate();
    }
  };

  // Call internally when we know that model is valid.
  function refresh(keyboardChange) {
    makeValid();
    ngModelCtrl.$setViewValue(new Date(selected));
    updateTemplate(keyboardChange);
  }

  function makeValid() {
    if (hoursModelCtrl) {
      hoursModelCtrl.$setValidity('hours', true);
    }

    if (minutesModelCtrl) {
      minutesModelCtrl.$setValidity('minutes', true);
    }

    if (secondsModelCtrl) {
      secondsModelCtrl.$setValidity('seconds', true);
    }

    ngModelCtrl.$setValidity('time', true);
    $scope.invalidHours = false;
    $scope.invalidMinutes = false;
    $scope.invalidSeconds = false;
  }

  function updateTemplate(keyboardChange) {
    if (!ngModelCtrl.$modelValue) {
      $scope.hours = null;
      $scope.minutes = null;
      $scope.seconds = null;
      $scope.meridian = meridians[0];
    } else {
      var hours = selected.getHours(),
        minutes = selected.getMinutes(),
        seconds = selected.getSeconds();

      if ($scope.showMeridian) {
        hours = hours === 0 || hours === 12 ? 12 : hours % 12; // Convert 24 to 12 hour system
      }

      $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours);
      if (keyboardChange !== 'm') {
        $scope.minutes = pad(minutes);
      }
      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];

      if (keyboardChange !== 's') {
        $scope.seconds = pad(seconds);
      }
      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
    }
  }

  function addSecondsToSelected(seconds) {
    selected = addSeconds(selected, seconds);
    refresh();
  }

  function addMinutes(selected, minutes) {
    return addSeconds(selected, minutes*60);
  }

  function addSeconds(date, seconds) {
    var dt = new Date(date.getTime() + seconds * 1000);
    var newDate = new Date(date);
    newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
    return newDate;
  }

  function modelIsEmpty() {
    return ($scope.hours === null || $scope.hours === '') &&
      ($scope.minutes === null || $scope.minutes === '') &&
      (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ''));
  }

  $scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
    $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

  $scope.incrementHours = function() {
    if (!$scope.noIncrementHours()) {
      addSecondsToSelected(hourStep * 60 * 60);
    }
  };

  $scope.decrementHours = function() {
    if (!$scope.noDecrementHours()) {
      addSecondsToSelected(-hourStep * 60 * 60);
    }
  };

  $scope.incrementMinutes = function() {
    if (!$scope.noIncrementMinutes()) {
      addSecondsToSelected(minuteStep * 60);
    }
  };

  $scope.decrementMinutes = function() {
    if (!$scope.noDecrementMinutes()) {
      addSecondsToSelected(-minuteStep * 60);
    }
  };

  $scope.incrementSeconds = function() {
    if (!$scope.noIncrementSeconds()) {
      addSecondsToSelected(secondStep);
    }
  };

  $scope.decrementSeconds = function() {
    if (!$scope.noDecrementSeconds()) {
      addSecondsToSelected(-secondStep);
    }
  };

  $scope.toggleMeridian = function() {
    var minutes = getMinutesFromTemplate(),
        hours = getHoursFromTemplate();

    if (!$scope.noToggleMeridian()) {
      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
        addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
      } else {
        $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
      }
    }
  };

  $scope.blur = function() {
    ngModelCtrl.$setTouched();
  };

  $scope.$on('$destroy', function() {
    while (watchers.length) {
      watchers.shift()();
    }
  });
}])

.directive('uibTimepicker', ['uibTimepickerConfig', function(uibTimepickerConfig) {
  return {
    require: ['uibTimepicker', '?^ngModel'],
    restrict: 'A',
    controller: 'UibTimepickerController',
    controllerAs: 'timepicker',
    scope: {},
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || uibTimepickerConfig.templateUrl;
    },
    link: function(scope, element, attrs, ctrls) {
      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (ngModelCtrl) {
        timepickerCtrl.init(ngModelCtrl, element.find('input'));
      }
    }
  };
}]);

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('uibTypeaheadParser', ['$parse', function($parse) {
    //                      000001111111100000000000002222222200000000000000003333333333333330000000000044444444000
    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
    return {
      parse: function(input) {
        var match = input.match(TYPEAHEAD_REGEXP);
        if (!match) {
          throw new Error(
            'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
              ' but got "' + input + '".');
        }

        return {
          itemName: match[3],
          source: $parse(match[4]),
          viewMapper: $parse(match[2] || match[1]),
          modelMapper: $parse(match[1])
        };
      }
    };
  }])

  .controller('UibTypeaheadController', ['$scope', '$element', '$attrs', '$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$$debounce', '$uibPosition', 'uibTypeaheadParser',
    function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
    var HOT_KEYS = [9, 13, 27, 38, 40];
    var eventDebounceTime = 200;
    var modelCtrl, ngModelOptions;
    //SUPPORTED ATTRIBUTES (OPTIONS)

    //minimal no of characters that needs to be entered before typeahead kicks-in
    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
    if (!minLength && minLength !== 0) {
      minLength = 1;
    }

    originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
        minLength = !newVal && newVal !== 0 ? 1 : newVal;
    });

    //minimal wait time after last character typed before typeahead kicks-in
    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

    //should it restrict model values to the ones selected from the popup only?
    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
    originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
      isEditable = newVal !== false;
    });

    //binding to a variable that indicates if matches are being retrieved asynchronously
    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

    //a function to determine if an event should cause selection
    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
      var evt = vals.$event;
      return evt.which === 13 || evt.which === 9;
    };

    //a callback executed when a match is selected
    var onSelectCallback = $parse(attrs.typeaheadOnSelect);

    //should it select highlighted popup value when losing focus?
    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

    //binding to a variable that indicates if there were no results after the query is completed
    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

    var appendTo = attrs.typeaheadAppendTo ?
      originalScope.$eval(attrs.typeaheadAppendTo) : null;

    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

    //If input matches an item of the list exactly, select it automatically
    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

    //binding to a variable that indicates if dropdown is open
    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;

    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;

    //INTERNAL VARIABLES

    //model setter executed upon match selection
    var parsedModel = $parse(attrs.ngModel);
    var invokeModelSetter = $parse(attrs.ngModel + '($$$p)');
    var $setModelValue = function(scope, newValue) {
      if (angular.isFunction(parsedModel(originalScope)) &&
        ngModelOptions.getOption('getterSetter')) {
        return invokeModelSetter(scope, {$$$p: newValue});
      }

      return parsedModel.assign(scope, newValue);
    };

    //expressions used by typeahead
    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);

    var hasFocus;

    //Used to avoid bug in iOS webview where iOS keyboard does not fire
    //mousedown & mouseup events
    //Issue #3699
    var selected;

    //create a child scope for the typeahead directive so we are not polluting original scope
    //with typeahead-specific data (matches, query etc.)
    var scope = originalScope.$new();
    var offDestroy = originalScope.$on('$destroy', function() {
      scope.$destroy();
    });
    scope.$on('$destroy', offDestroy);

    // WAI-ARIA
    var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
    element.attr({
      'aria-autocomplete': 'list',
      'aria-expanded': false,
      'aria-owns': popupId
    });

    var inputsContainer, hintInputElem;
    //add read-only input to show hint
    if (showHint) {
      inputsContainer = angular.element('<div></div>');
      inputsContainer.css('position', 'relative');
      element.after(inputsContainer);
      hintInputElem = element.clone();
      hintInputElem.attr('placeholder', '');
      hintInputElem.attr('tabindex', '-1');
      hintInputElem.val('');
      hintInputElem.css({
        'position': 'absolute',
        'top': '0px',
        'left': '0px',
        'border-color': 'transparent',
        'box-shadow': 'none',
        'opacity': 1,
        'background': 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
        'color': '#999'
      });
      element.css({
        'position': 'relative',
        'vertical-align': 'top',
        'background-color': 'transparent'
      });

      if (hintInputElem.attr('id')) {
        hintInputElem.removeAttr('id'); // remove duplicate id if present.
      }
      inputsContainer.append(hintInputElem);
      hintInputElem.after(element);
    }

    //pop-up element used to display matches
    var popUpEl = angular.element('<div uib-typeahead-popup></div>');
    popUpEl.attr({
      id: popupId,
      matches: 'matches',
      active: 'activeIdx',
      select: 'select(activeIdx, evt)',
      'move-in-progress': 'moveInProgress',
      query: 'query',
      position: 'position',
      'assign-is-open': 'assignIsOpen(isOpen)',
      debounce: 'debounceUpdate'
    });
    //custom item template
    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
      popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
    }

    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
      popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl);
    }

    var resetHint = function() {
      if (showHint) {
        hintInputElem.val('');
      }
    };

    var resetMatches = function() {
      scope.matches = [];
      scope.activeIdx = -1;
      element.attr('aria-expanded', false);
      resetHint();
    };

    var getMatchId = function(index) {
      return popupId + '-option-' + index;
    };

    // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
    // This attribute is added or removed automatically when the `activeIdx` changes.
    scope.$watch('activeIdx', function(index) {
      if (index < 0) {
        element.removeAttr('aria-activedescendant');
      } else {
        element.attr('aria-activedescendant', getMatchId(index));
      }
    });

    var inputIsExactMatch = function(inputValue, index) {
      if (scope.matches.length > index && inputValue) {
        return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
      }

      return false;
    };

    var getMatchesAsync = function(inputValue, evt) {
      var locals = {$viewValue: inputValue};
      isLoadingSetter(originalScope, true);
      isNoResultsSetter(originalScope, false);
      $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
        //it might happen that several async queries were in progress if a user were typing fast
        //but we are interested only in responses that correspond to the current view value
        var onCurrentRequest = inputValue === modelCtrl.$viewValue;
        if (onCurrentRequest && hasFocus) {
          if (matches && matches.length > 0) {
            scope.activeIdx = focusFirst ? 0 : -1;
            isNoResultsSetter(originalScope, false);
            scope.matches.length = 0;

            //transform labels
            for (var i = 0; i < matches.length; i++) {
              locals[parserResult.itemName] = matches[i];
              scope.matches.push({
                id: getMatchId(i),
                label: parserResult.viewMapper(scope, locals),
                model: matches[i]
              });
            }

            scope.query = inputValue;
            //position pop-up with matches - we need to re-calculate its position each time we are opening a window
            //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
            //due to other elements being rendered
            recalculatePosition();

            element.attr('aria-expanded', true);

            //Select the single remaining option if user input matches
            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                $$debounce(function() {
                  scope.select(0, evt);
                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
              } else {
                scope.select(0, evt);
              }
            }

            if (showHint) {
              var firstLabel = scope.matches[0].label;
              if (angular.isString(inputValue) &&
                inputValue.length > 0 &&
                firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
                hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
              } else {
                hintInputElem.val('');
              }
            }
          } else {
            resetMatches();
            isNoResultsSetter(originalScope, true);
          }
        }
        if (onCurrentRequest) {
          isLoadingSetter(originalScope, false);
        }
      }, function() {
        resetMatches();
        isLoadingSetter(originalScope, false);
        isNoResultsSetter(originalScope, true);
      });
    };

    // bind events only if appendToBody params exist - performance feature
    if (appendToBody) {
      angular.element($window).on('resize', fireRecalculating);
      $document.find('body').on('scroll', fireRecalculating);
    }

    // Declare the debounced function outside recalculating for
    // proper debouncing
    var debouncedRecalculate = $$debounce(function() {
      // if popup is visible
      if (scope.matches.length) {
        recalculatePosition();
      }

      scope.moveInProgress = false;
    }, eventDebounceTime);

    // Default progress type
    scope.moveInProgress = false;

    function fireRecalculating() {
      if (!scope.moveInProgress) {
        scope.moveInProgress = true;
        scope.$digest();
      }

      debouncedRecalculate();
    }

    // recalculate actual position and set new values to scope
    // after digest loop is popup in right position
    function recalculatePosition() {
      scope.position = appendToBody ? $position.offset(element) : $position.position(element);
      scope.position.top += element.prop('offsetHeight');
    }

    //we need to propagate user's query so we can higlight matches
    scope.query = undefined;

    //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
    var timeoutPromise;

    var scheduleSearchWithTimeout = function(inputValue) {
      timeoutPromise = $timeout(function() {
        getMatchesAsync(inputValue);
      }, waitTime);
    };

    var cancelPreviousTimeout = function() {
      if (timeoutPromise) {
        $timeout.cancel(timeoutPromise);
      }
    };

    resetMatches();

    scope.assignIsOpen = function (isOpen) {
      isOpenSetter(originalScope, isOpen);
    };

    scope.select = function(activeIdx, evt) {
      //called from within the $digest() cycle
      var locals = {};
      var model, item;

      selected = true;
      locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
      model = parserResult.modelMapper(originalScope, locals);
      $setModelValue(originalScope, model);
      modelCtrl.$setValidity('editable', true);
      modelCtrl.$setValidity('parse', true);

      onSelectCallback(originalScope, {
        $item: item,
        $model: model,
        $label: parserResult.viewMapper(originalScope, locals),
        $event: evt
      });

      resetMatches();

      //return focus to the input element if a match was selected via a mouse click event
      // use timeout to avoid $rootScope:inprog error
      if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
        $timeout(function() { element[0].focus(); }, 0, false);
      }
    };

    //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
    element.on('keydown', function(evt) {
      //typeahead is open and an "interesting" key was pressed
      if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
        return;
      }

      var shouldSelect = isSelectEvent(originalScope, {$event: evt});

      /**
       * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
       * or
       * shift + tab is pressed to bring focus to the previous element
       * then clear the results
       */
      if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
        resetMatches();
        scope.$digest();
        return;
      }

      evt.preventDefault();
      var target;
      switch (evt.which) {
        case 27: // escape
          evt.stopPropagation();

          resetMatches();
          originalScope.$digest();
          break;
        case 38: // up arrow
          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();
          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
          target.parentNode.scrollTop = target.offsetTop;
          break;
        case 40: // down arrow
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();
          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
          target.parentNode.scrollTop = target.offsetTop;
          break;
        default:
          if (shouldSelect) {
            scope.$apply(function() {
              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                $$debounce(function() {
                  scope.select(scope.activeIdx, evt);
                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
              } else {
                scope.select(scope.activeIdx, evt);
              }
            });
          }
      }
    });

    element.on('focus', function (evt) {
      hasFocus = true;
      if (minLength === 0 && !modelCtrl.$viewValue) {
        $timeout(function() {
          getMatchesAsync(modelCtrl.$viewValue, evt);
        }, 0);
      }
    });

    element.on('blur', function(evt) {
      if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
        selected = true;
        scope.$apply(function() {
          if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
            $$debounce(function() {
              scope.select(scope.activeIdx, evt);
            }, scope.debounceUpdate.blur);
          } else {
            scope.select(scope.activeIdx, evt);
          }
        });
      }
      if (!isEditable && modelCtrl.$error.editable) {
        modelCtrl.$setViewValue();
        scope.$apply(function() {
          // Reset validity as we are clearing
          modelCtrl.$setValidity('editable', true);
          modelCtrl.$setValidity('parse', true);
        });
        element.val('');
      }
      hasFocus = false;
      selected = false;
    });

    // Keep reference to click handler to unbind it.
    var dismissClickHandler = function(evt) {
      // Issue #3973
      // Firefox treats right click as a click on document
      if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
        resetMatches();
        if (!$rootScope.$$phase) {
          originalScope.$digest();
        }
      }
    };

    $document.on('click', dismissClickHandler);

    originalScope.$on('$destroy', function() {
      $document.off('click', dismissClickHandler);
      if (appendToBody || appendTo) {
        $popup.remove();
      }

      if (appendToBody) {
        angular.element($window).off('resize', fireRecalculating);
        $document.find('body').off('scroll', fireRecalculating);
      }
      // Prevent jQuery cache memory leak
      popUpEl.remove();

      if (showHint) {
          inputsContainer.remove();
      }
    });

    var $popup = $compile(popUpEl)(scope);

    if (appendToBody) {
      $document.find('body').append($popup);
    } else if (appendTo) {
      angular.element(appendTo).eq(0).append($popup);
    } else {
      element.after($popup);
    }

    this.init = function(_modelCtrl) {
      modelCtrl = _modelCtrl;
      ngModelOptions = extractOptions(modelCtrl);

      scope.debounceUpdate = $parse(ngModelOptions.getOption('debounce'))(originalScope);

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function(inputValue) {
        hasFocus = true;

        if (minLength === 0 || inputValue && inputValue.length >= minLength) {
          if (waitTime > 0) {
            cancelPreviousTimeout();
            scheduleSearchWithTimeout(inputValue);
          } else {
            getMatchesAsync(inputValue);
          }
        } else {
          isLoadingSetter(originalScope, false);
          cancelPreviousTimeout();
          resetMatches();
        }

        if (isEditable) {
          return inputValue;
        }

        if (!inputValue) {
          // Reset in case user had typed something previously.
          modelCtrl.$setValidity('editable', true);
          return null;
        }

        modelCtrl.$setValidity('editable', false);
        return undefined;
      });

      modelCtrl.$formatters.push(function(modelValue) {
        var candidateViewValue, emptyViewValue;
        var locals = {};

        // The validity may be set to false via $parsers (see above) if
        // the model is restricted to selected values. If the model
        // is set manually it is considered to be valid.
        if (!isEditable) {
          modelCtrl.$setValidity('editable', true);
        }

        if (inputFormatter) {
          locals.$model = modelValue;
          return inputFormatter(originalScope, locals);
        }

        //it might happen that we don't have enough info to properly render input value
        //we need to check for this situation and simply return model value if we can't apply custom formatting
        locals[parserResult.itemName] = modelValue;
        candidateViewValue = parserResult.viewMapper(originalScope, locals);
        locals[parserResult.itemName] = undefined;
        emptyViewValue = parserResult.viewMapper(originalScope, locals);

        return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
      });
    };

    function extractOptions(ngModelCtrl) {
      var ngModelOptions;

      if (angular.version.minor < 6) { // in angular < 1.6 $options could be missing
        // guarantee a value
        ngModelOptions = ngModelCtrl.$options || {};

        // mimic 1.6+ api
        ngModelOptions.getOption = function (key) {
          return ngModelOptions[key];
        };
      } else { // in angular >=1.6 $options is always present
        ngModelOptions = ngModelCtrl.$options;
      }

      return ngModelOptions;
    }
  }])

  .directive('uibTypeahead', function() {
    return {
      controller: 'UibTypeaheadController',
      require: ['ngModel', 'uibTypeahead'],
      link: function(originalScope, element, attrs, ctrls) {
        ctrls[1].init(ctrls[0]);
      }
    };
  })

  .directive('uibTypeaheadPopup', ['$$debounce', function($$debounce) {
    return {
      scope: {
        matches: '=',
        query: '=',
        active: '=',
        position: '&',
        moveInProgress: '=',
        select: '&',
        assignIsOpen: '&',
        debounce: '&'
      },
      replace: true,
      templateUrl: function(element, attrs) {
        return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html';
      },
      link: function(scope, element, attrs) {
        scope.templateUrl = attrs.templateUrl;

        scope.isOpen = function() {
          var isDropdownOpen = scope.matches.length > 0;
          scope.assignIsOpen({ isOpen: isDropdownOpen });
          return isDropdownOpen;
        };

        scope.isActive = function(matchIdx) {
          return scope.active === matchIdx;
        };

        scope.selectActive = function(matchIdx) {
          scope.active = matchIdx;
        };

        scope.selectMatch = function(activeIdx, evt) {
          var debounce = scope.debounce();
          if (angular.isNumber(debounce) || angular.isObject(debounce)) {
            $$debounce(function() {
              scope.select({activeIdx: activeIdx, evt: evt});
            }, angular.isNumber(debounce) ? debounce : debounce['default']);
          } else {
            scope.select({activeIdx: activeIdx, evt: evt});
          }
        };
      }
    };
  }])

  .directive('uibTypeaheadMatch', ['$templateRequest', '$compile', '$parse', function($templateRequest, $compile, $parse) {
    return {
      scope: {
        index: '=',
        match: '=',
        query: '='
      },
      link: function(scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'uib/template/typeahead/typeahead-match.html';
        $templateRequest(tplUrl).then(function(tplContent) {
          var tplEl = angular.element(tplContent.trim());
          element.replaceWith(tplEl);
          $compile(tplEl)(scope);
        });
      }
    };
  }])

  .filter('uibTypeaheadHighlight', ['$sce', '$injector', '$log', function($sce, $injector, $log) {
    var isSanitizePresent;
    isSanitizePresent = $injector.has('$sanitize');

    function escapeRegexp(queryToEscape) {
      // Regex: capture the whole query string and replace it with the string that will be used to match
      // the results, for example if the capture is "a" the result will be \a
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }

    function containsHtml(matchItem) {
      return /<.*>/g.test(matchItem);
    }

    return function(matchItem, query) {
      if (!isSanitizePresent && containsHtml(matchItem)) {
        $log.warn('Unsafe use of typeahead please use ngSanitize'); // Warn the user about the danger
      }
      matchItem = query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem; // Replaces the capture string with a the same string inside of a "strong" tag
      if (!isSanitizePresent) {
        matchItem = $sce.trustAsHtml(matchItem); // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
      }
      return matchItem;
    };
  }]);
angular.module('ui.bootstrap.carousel').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'); angular.$$uibCarouselCss = true; });
angular.module('ui.bootstrap.datepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'); angular.$$uibDatepickerCss = true; });
angular.module('ui.bootstrap.position').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'); angular.$$uibPositionCss = true; });
angular.module('ui.bootstrap.datepickerPopup').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'); angular.$$uibDatepickerpopupCss = true; });
angular.module('ui.bootstrap.tooltip').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'); angular.$$uibTooltipCss = true; });
angular.module('ui.bootstrap.timepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-time input{width:50px;}</style>'); angular.$$uibTimepickerCss = true; });
angular.module('ui.bootstrap.typeahead').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'); angular.$$uibTypeaheadCss = true; });
/**
 * State-based routing for AngularJS 1.x
 * NOTICE: This monolithic bundle also bundles the @uirouter/core code.
 *         This causes it to be incompatible with plugins that depend on @uirouter/core.
 *         We recommend switching to the ui-router-core.js and ui-router-angularjs.js bundles instead.
 *         For more information, see https://ui-router.github.io/blog/uirouter-for-angularjs-umd-bundles
 * @version v1.0.30
 * @link https://ui-router.github.io
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("angular")):"function"==typeof define&&define.amd?define(["exports","angular"],e):e((t=t||self)["@uirouter/angularjs"]={},t.angular)}(this,(function(t,e){"use strict";
yn.$inject = ["t"];
Dn.$inject = ["t"];var r=angular,n=e&&e.module?e:r,i=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)n[i]=o[a];return n};function o(t){return function e(){if(arguments.length>=t.length)return t.apply(this,arguments);var r=Array.prototype.slice.call(arguments);return e.bind.apply(e,i([this],r))}}function a(){var t=arguments,e=t.length-1;return function(){for(var r=e,n=t[e].apply(this,arguments);r--;)n=t[r].call(this,n);return n}}function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return a.apply(null,[].slice.call(arguments).reverse())}var s=function(t){return function(e){return e&&e[t]}},c=o((function(t,e,r){return r&&r[t]===e})),f=function(t){return u.apply(null,t.split(".").map(s))},l=function(t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return!t.apply(null,e)}};function h(t,e){return function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return t.apply(null,r)&&e.apply(null,r)}}function p(t,e){return function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return t.apply(null,r)||e.apply(null,r)}}var v=function(t){return function(e){return e.reduce((function(e,r){return e&&!!t(r)}),!0)}},d=function(t){return function(e){return e.reduce((function(e,r){return e||!!t(r)}),!1)}},m=function(t){return function(e){return null!=e&&e.constructor===t||e instanceof t}},g=function(t){return function(e){return t===e}},y=function(t){return function(){return t}};function w(t,e){return function(r){return r[t].apply(r,e)}}function _(t){return function(e){for(var r=0;r<t.length;r++)if(t[r][0](e))return t[r][1](e)}}var S=Object.prototype.toString,$=function(t){return function(e){return typeof e===t}},b=$("undefined"),R=l(b),E=function(t){return null===t},C=p(E,b),P=$("function"),T=$("number"),k=$("string"),O=function(t){return null!==t&&"object"==typeof t},x=Array.isArray,j=function(t){return"[object Date]"===S.call(t)},V=function(t){return"[object RegExp]"===S.call(t)};function I(t){if(x(t)&&t.length){var e=t.slice(0,-1),r=t.slice(-1);return!(e.filter(l(k)).length||r.filter(l(P)).length)}return P(t)}var H=h(O,u(s("then"),P)),A=function(t,e){return e.reduce((function(e,r){return e[r]=(n=t+"."+r+"()",function(){throw new Error("No implementation for "+n+". The framework specific code did not implement this method.")}),e;var n}),{})},D={$q:void 0,$injector:void 0},q=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)n[i]=o[a];return n},U="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||void 0,N=U.angular||{},F=N.fromJson||JSON.parse.bind(JSON),L=N.toJson||JSON.stringify.bind(JSON),M=N.forEach||function(t,e,r){if(x(t))return t.forEach(e,r);Object.keys(t).forEach((function(r){return e(t[r],r)}))},B=Object.assign||Ot,G=N.equals||xt;function z(t){return t}function W(){}function J(t,e,r,n,i){void 0===i&&(i=!1);var o=function(e){return t()[e].bind(r())};return(n=n||Object.keys(t())).reduce((function(t,r){var n;return t[r]=i?(n=r,function(){return e[n]=o(n),e[n].apply(null,arguments)}):o(r),t}),e)}var Q=function(t,e){return B(Object.create(t),e)},K=o(Y);function Y(t,e){return-1!==t.indexOf(e)}var Z=o(X);function X(t,e){var r=t.indexOf(e);return r>=0&&t.splice(r,1),t}var tt=o(et);function et(t,e){return t.push(e),e}var rt=function(t){return t.slice().forEach((function(e){"function"==typeof e&&e(),Z(t,e)}))};function nt(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=B.apply(void 0,q([{}],e.reverse()));return B(n,at(t||{},Object.keys(n)))}var it=function(t,e){return B(t,e)};function ot(t,e){var r=[];for(var n in t.path){if(t.path[n]!==e.path[n])break;r.push(t.path[n])}return r}function at(t,e){var r={};for(var n in t)-1!==e.indexOf(n)&&(r[n]=t[n]);return r}function ut(t,e){return Object.keys(t).filter(l(K(e))).reduce((function(e,r){return e[r]=t[r],e}),{})}function st(t,e){return ht(t,s(e))}function ct(t,e){var r=x(t),n=r?[]:{},i=r?function(t){return n.push(t)}:function(t,e){return n[e]=t};return M(t,(function(t,r){e(t,r)&&i(t,r)})),n}function ft(t,e){var r;return M(t,(function(t,n){r||e(t,n)&&(r=t)})),r}var lt=ht;function ht(t,e,r){return r=r||(x(t)?[]:{}),M(t,(function(t,n){return r[n]=e(t,n)})),r}var pt=function(t){return Object.keys(t).map((function(e){return t[e]}))},vt=function(t,e){return t&&e},dt=function(t,e){return t||e},mt=function(t,e){return t.concat(e)},gt=function(t,e){return x(e)?t.concat(e.reduce(gt,[])):yt(t,e)};function yt(t,e){return t.push(e),t}var wt=function(t,e){return K(t,e)?t:yt(t,e)},_t=function(t){return t.reduce(mt,[])},St=function(t){return t.reduce(gt,[])},$t=Rt,bt=Rt;function Rt(t,e){return void 0===e&&(e="assert failure"),function(r){var n=t(r);if(!n)throw new Error(P(e)?e(r):e);return n}}var Et=function(t){return Object.keys(t).map((function(e){return[e,t[e]]}))};function Ct(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return[];for(var r=t.reduce((function(t,e){return Math.min(e.length,t)}),9007199254740991),n=[],i=function(e){switch(t.length){case 1:n.push([t[0][e]]);break;case 2:n.push([t[0][e],t[1][e]]);break;case 3:n.push([t[0][e],t[1][e],t[2][e]]);break;case 4:n.push([t[0][e],t[1][e],t[2][e],t[3][e]]);break;default:n.push(t.map((function(t){return t[e]})))}},o=0;o<r;o++)i(o);return n}function Pt(t,e){var r,n;if(x(e)&&(r=e[0],n=e[1]),!k(r))throw new Error("invalid parameters to applyPairs");return t[r]=n,t}function Tt(t){return t.length&&t[t.length-1]||void 0}function kt(t,e){return e&&Object.keys(e).forEach((function(t){return delete e[t]})),e||(e={}),B(e,t)}function Ot(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];if(r)for(var n=Object.keys(r),i=0;i<n.length;i++)t[n[i]]=r[n[i]]}return t}function xt(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!=t&&e!=e)return!0;var r=typeof t;if(r!==typeof e||"object"!==r)return!1;var n,i,o=[t,e];if(v(x)(o))return i=e,(n=t).length===i.length&&Ct(n,i).reduce((function(t,e){return t&&xt(e[0],e[1])}),!0);if(v(j)(o))return t.getTime()===e.getTime();if(v(V)(o))return t.toString()===e.toString();if(v(P)(o))return!0;if([P,x,j,V].map(d).reduce((function(t,e){return t||!!e(o)}),!1))return!1;var a={};for(var u in t){if(!xt(t[u],e[u]))return!1;a[u]=!0}for(var u in e)if(!a[u])return!1;return!0}var jt,Vt=function(t){return t.catch((function(t){return 0}))&&t},It=function(t){return Vt(D.$q.reject(t))},Ht=function(){function t(t){this.text=t,this.glob=t.split(".");var e=this.text.split(".").map((function(t){return"**"===t?"(?:|(?:\\.[^.]*)*)":"*"===t?"\\.[^.]*":"\\."+t})).join("");this.regexp=new RegExp("^"+e+"$")}return t.is=function(t){return!!/[!,*]+/.exec(t)},t.fromString=function(e){return t.is(e)?new t(e):null},t.prototype.matches=function(t){return this.regexp.test("."+t)},t}(),At=function(){function t(t,e){void 0===t&&(t=[]),void 0===e&&(e=null),this._items=t,this._limit=e,this._evictListeners=[],this.onEvict=tt(this._evictListeners)}return t.prototype.enqueue=function(t){var e=this._items;return e.push(t),this._limit&&e.length>this._limit&&this.evict(),t},t.prototype.evict=function(){var t=this._items.shift();return this._evictListeners.forEach((function(e){return e(t)})),t},t.prototype.dequeue=function(){if(this.size())return this._items.splice(0,1)[0]},t.prototype.clear=function(){var t=this._items;return this._items=[],t},t.prototype.size=function(){return this._items.length},t.prototype.remove=function(t){var e=this._items.indexOf(t);return e>-1&&this._items.splice(e,1)[0]},t.prototype.peekTail=function(){return this._items[this._items.length-1]},t.prototype.peekHead=function(){if(this.size())return this._items[0]},t}();(jt=t.RejectType||(t.RejectType={}))[jt.SUPERSEDED=2]="SUPERSEDED",jt[jt.ABORTED=3]="ABORTED",jt[jt.INVALID=4]="INVALID",jt[jt.IGNORED=5]="IGNORED",jt[jt.ERROR=6]="ERROR";var Dt=0,qt=function(){function e(t,e,r){this.$id=Dt++,this.type=t,this.message=e,this.detail=r}return e.isRejectionPromise=function(t){return t&&"function"==typeof t.then&&m(e)(t._transitionRejection)},e.superseded=function(r,n){var i=new e(t.RejectType.SUPERSEDED,"The transition has been superseded by a different transition",r);return n&&n.redirected&&(i.redirected=!0),i},e.redirected=function(t){return e.superseded(t,{redirected:!0})},e.invalid=function(r){return new e(t.RejectType.INVALID,"This transition is invalid",r)},e.ignored=function(r){return new e(t.RejectType.IGNORED,"The transition was ignored",r)},e.aborted=function(r){return new e(t.RejectType.ABORTED,"The transition has been aborted",r)},e.errored=function(r){return new e(t.RejectType.ERROR,"The transition errored",r)},e.normalize=function(t){return m(e)(t)?t:e.errored(t)},e.prototype.toString=function(){var t,e=(t=this.detail)&&t.toString!==Object.prototype.toString?t.toString():Bt(t);return"Transition Rejection($id: "+this.$id+" type: "+this.type+", message: "+this.message+", detail: "+e+")"},e.prototype.toPromise=function(){return B(It(this),{_transitionRejection:this})},e}();function Ut(t,e){return e.length<=t?e:e.substr(0,t-3)+"..."}function Nt(t,e){for(;e.length<t;)e+=" ";return e}function Ft(t){return t.replace(/^([A-Z])/,(function(t){return t.toLowerCase()})).replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}))}function Lt(t){var e=Mt(t),r=e.match(/^(function [^ ]+\([^)]*\))/),n=r?r[1]:e,i=t.name||"";return i&&n.match(/function \(/)?"function "+i+n.substr(9):n}function Mt(t){var e=x(t)?t.slice(-1)[0]:t;return e&&e.toString()||"undefined"}function Bt(t){var e=[],r=qt.isRejectionPromise,n=_([[b,y("undefined")],[E,y("null")],[H,y("[Promise]")],[r,function(t){return t._transitionRejection.toString()}],[function(t){return O(t)&&!x(t)&&t.constructor!==Object&&P(t.toString)},function(t){return t.toString()}],[I,Lt],[y(!0),z]]);function i(t){if(O(t)){if(-1!==e.indexOf(t))return"[circular ref]";e.push(t)}return n(t)}return b(t)?i(t):JSON.stringify(t,(function(t,e){return i(e)})).replace(/\\"/g,'"')}var Gt=function(t){return function(e){if(!e)return["",""];var r=e.indexOf(t);return-1===r?[e,""]:[e.substr(0,r),e.substr(r+1)]}},zt=new RegExp("^(?:[a-z]+:)?//[^/]+/"),Wt=function(t){return t.replace(/\/[^/]*$/,"")},Jt=Gt("#"),Qt=Gt("?"),Kt=Gt("="),Yt=function(t){return t?t.replace(/^#/,""):""};function Zt(t){var e=new RegExp("("+t+")","g");return function(t){return t.split(e).filter(z)}}function Xt(t,e){return k(Tt(t))&&k(e)?t.slice(0,-1).concat(Tt(t)+e):yt(t,e)}var te={log:W,error:W,table:W};var ee="undefined"!=typeof document&&document.documentMode&&9===document.documentMode?window&&window.console?function(t){var e=function(e){return Function.prototype.bind.call(e,t)};return{log:e(t.log),error:e(t.log),table:e(t.log)}}(window.console):te:console.table&&console.error?console:function(t){var e=t.log.bind(t);return{log:e,error:t.error?t.error.bind(t):e,table:t.table?t.table.bind(t):e}}(console);function re(t){if(!t)return"ui-view (defunct)";var e=t.creationContext?t.creationContext.name||"(root)":"(none)";return"[ui-view#"+t.id+" "+t.$type+":"+t.fqn+" ("+t.name+"@"+e+")]"}var ne;function ie(e){return T(e)?t.Category[e]:t.Category[t.Category[e]]}(ne=t.Category||(t.Category={}))[ne.RESOLVE=0]="RESOLVE",ne[ne.TRANSITION=1]="TRANSITION",ne[ne.HOOK=2]="HOOK",ne[ne.UIVIEW=3]="UIVIEW",ne[ne.VIEWCONFIG=4]="VIEWCONFIG";var oe=f("$id"),ae=f("router.$id"),ue=function(t){return"Transition #"+oe(t)+"-"+ae(t)},se=function(){function e(){this._enabled={},this.approximateDigests=0}return e.prototype._set=function(e,r){var n=this;r.length||(r=Object.keys(t.Category).map((function(t){return parseInt(t,10)})).filter((function(t){return!isNaN(t)})).map((function(e){return t.Category[e]}))),r.map(ie).forEach((function(t){return n._enabled[t]=e}))},e.prototype.enable=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._set(!0,t)},e.prototype.disable=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._set(!1,t)},e.prototype.enabled=function(t){return!!this._enabled[ie(t)]},e.prototype.traceTransitionStart=function(e){this.enabled(t.Category.TRANSITION)&&ee.log(ue(e)+": Started  -> "+Bt(e))},e.prototype.traceTransitionIgnored=function(e){this.enabled(t.Category.TRANSITION)&&ee.log(ue(e)+": Ignored  <> "+Bt(e))},e.prototype.traceHookInvocation=function(e,r,n){if(this.enabled(t.Category.HOOK)){var i=f("traceData.hookType")(n)||"internal",o=f("traceData.context.state.name")(n)||f("traceData.context")(n)||"unknown",a=Lt(e.registeredHook.callback);ee.log(ue(r)+":   Hook -> "+i+" context: "+o+", "+Ut(200,a))}},e.prototype.traceHookResult=function(e,r,n){this.enabled(t.Category.HOOK)&&ee.log(ue(r)+":   <- Hook returned: "+Ut(200,Bt(e)))},e.prototype.traceResolvePath=function(e,r,n){this.enabled(t.Category.RESOLVE)&&ee.log(ue(n)+":         Resolving "+e+" ("+r+")")},e.prototype.traceResolvableResolved=function(e,r){this.enabled(t.Category.RESOLVE)&&ee.log(ue(r)+":               <- Resolved  "+e+" to: "+Ut(200,Bt(e.data)))},e.prototype.traceError=function(e,r){this.enabled(t.Category.TRANSITION)&&ee.log(ue(r)+": <- Rejected "+Bt(r)+", reason: "+e)},e.prototype.traceSuccess=function(e,r){this.enabled(t.Category.TRANSITION)&&ee.log(ue(r)+": <- Success  "+Bt(r)+", final state: "+e.name)},e.prototype.traceUIViewEvent=function(e,r,n){void 0===n&&(n=""),this.enabled(t.Category.UIVIEW)&&ee.log("ui-view: "+Nt(30,e)+" "+re(r)+n)},e.prototype.traceUIViewConfigUpdated=function(e,r){this.enabled(t.Category.UIVIEW)&&this.traceUIViewEvent("Updating",e," with ViewConfig from context='"+r+"'")},e.prototype.traceUIViewFill=function(e,r){this.enabled(t.Category.UIVIEW)&&this.traceUIViewEvent("Fill",e," with: "+Ut(200,r))},e.prototype.traceViewSync=function(e){if(this.enabled(t.Category.VIEWCONFIG)){var r="uiview component fqn",n=e.map((function(t){var e,n=t.uiView,i=t.viewConfig,o=n&&n.fqn,a=i&&i.viewDecl.$context.name+": ("+i.viewDecl.$name+")";return(e={})[r]=o,e["view config state (view name)"]=a,e})).sort((function(t,e){return(t[r]||"").localeCompare(e[r]||"")}));ee.table(n)}},e.prototype.traceViewServiceEvent=function(e,r){this.enabled(t.Category.VIEWCONFIG)&&ee.log("VIEWCONFIG: "+e+" "+function(t){var e=t.viewDecl,r=e.$context.name||"(root)";return"[View#"+t.$id+" from '"+r+"' state]: target ui-view: '"+e.$uiViewName+"@"+e.$uiViewContextAnchor+"'"}(r))},e.prototype.traceViewServiceUIViewEvent=function(e,r){this.enabled(t.Category.VIEWCONFIG)&&ee.log("VIEWCONFIG: "+e+" "+re(r))},e}(),ce=new se,fe=function(){function t(t){this.pattern=/.*/,this.inherit=!0,B(this,t)}return t.prototype.is=function(t,e){return!0},t.prototype.encode=function(t,e){return t},t.prototype.decode=function(t,e){return t},t.prototype.equals=function(t,e){return t==e},t.prototype.$subPattern=function(){var t=this.pattern.toString();return t.substr(1,t.length-2)},t.prototype.toString=function(){return"{ParamType:"+this.name+"}"},t.prototype.$normalize=function(t){return this.is(t)?t:this.decode(t)},t.prototype.$asArray=function(t,e){if(!t)return this;if("auto"===t&&!e)throw new Error("'auto' array mode is for query parameters only");return new le(this,t)},t}();function le(t,e){var r=this;function n(t){return x(t)?t:R(t)?[t]:[]}function i(t,r){return function(i){if(x(i)&&0===i.length)return i;var o=ht(n(i),t);return!0===r?0===ct(o,(function(t){return!t})).length:function(t){switch(t.length){case 0:return;case 1:return"auto"===e?t[0]:t;default:return t}}(o)}}function o(t){return function(e,r){var i=n(e),o=n(r);if(i.length!==o.length)return!1;for(var a=0;a<i.length;a++)if(!t(i[a],o[a]))return!1;return!0}}["encode","decode","equals","$normalize"].forEach((function(e){var n=t[e].bind(t),a="equals"===e?o:i;r[e]=a(n)})),B(this,{dynamic:t.dynamic,name:t.name,pattern:t.pattern,inherit:t.inherit,raw:t.raw,is:i(t.is.bind(t),!0),$arrayMode:e})}var he,pe=Object.prototype.hasOwnProperty;function ve(e,r,n){var i=!1===n.reloadOnSearch&&r===t.DefType.SEARCH||void 0,o=ft([n.dynamic,i],R),a=R(o)?{dynamic:o}:{},u=function(t){function e(){return t.value}t=function(t){return 0===["value","type","squash","array","dynamic"].filter(pe.bind(t||{})).length}(t)?{value:t}:t,e.__cacheable=!0;var r=I(t.value)?t.value:e;return B(t,{$$fn:r})}(n&&n.params&&n.params[e]);return B(a,u)}(he=t.DefType||(t.DefType={}))[he.PATH=0]="PATH",he[he.SEARCH=1]="SEARCH",he[he.CONFIG=2]="CONFIG";var de,me=function(){function e(e,r,n,i,o){var a=ve(e,n,o);r=function(e,r,n,i,o){if(e.type&&r&&"string"!==r.name)throw new Error("Param '"+i+"' has two type configurations.");if(e.type&&r&&"string"===r.name&&o.type(e.type))return o.type(e.type);if(r)return r;if(!e.type){var a=n===t.DefType.CONFIG?"any":n===t.DefType.PATH?"path":n===t.DefType.SEARCH?"query":"string";return o.type(a)}return e.type instanceof fe?e.type:o.type(e.type)}(a,r,n,e,i.paramTypes);var u,c,f=(u={array:n===t.DefType.SEARCH&&"auto"},c=e.match(/\[\]$/)?{array:!0}:{},B(u,c,a).array);r=f?r.$asArray(f,n===t.DefType.SEARCH):r;var l=void 0!==a.value||n===t.DefType.SEARCH,h=R(a.dynamic)?!!a.dynamic:!!r.dynamic,p=R(a.raw)?!!a.raw:!!r.raw,v=function(t,e,r){var n=t.squash;if(!e||!1===n)return!1;if(!R(n)||null==n)return r;if(!0===n||k(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}(a,l,i.defaultSquashPolicy()),d=function(t,e,r,n){var i=[{from:"",to:r||e?void 0:""},{from:null,to:r||e?void 0:""}],o=x(t.replace)?t.replace:[];k(n)&&o.push({from:n,to:void 0});var a=ht(o,s("from"));return ct(i,(function(t){return-1===a.indexOf(t.from)})).concat(o)}(a,f,l,v),m=R(a.inherit)?!!a.inherit:!!r.inherit;B(this,{id:e,type:r,location:n,isOptional:l,dynamic:h,raw:p,squash:v,replace:d,inherit:m,array:f,config:a})}return e.values=function(t,e){void 0===e&&(e={});for(var r={},n=0,i=t;n<i.length;n++){var o=i[n];r[o.id]=o.value(e[o.id])}return r},e.changed=function(t,e,r){return void 0===e&&(e={}),void 0===r&&(r={}),t.filter((function(t){return!t.type.equals(e[t.id],r[t.id])}))},e.equals=function(t,r,n){return void 0===r&&(r={}),void 0===n&&(n={}),0===e.changed(t,r,n).length},e.validates=function(t,e){return void 0===e&&(e={}),t.map((function(t){return t.validates(e[t.id])})).reduce(vt,!0)},e.prototype.isDefaultValue=function(t){return this.isOptional&&this.type.equals(this.value(),t)},e.prototype.value=function(t){var e=this;return t=function(t){for(var r=0,n=e.replace;r<n.length;r++){var i=n[r];if(i.from===t)return i.to}return t}(t),b(t)?function(){if(e._defaultValueCache)return e._defaultValueCache.defaultValue;if(!D.$injector)throw new Error("Injectable functions cannot be called at configuration time");var t=D.$injector.invoke(e.config.$$fn);if(null!=t&&!e.type.is(t))throw new Error("Default value ("+t+") for parameter '"+e.id+"' is not an instance of ParamType ("+e.type.name+")");return e.config.$$fn.__cacheable&&(e._defaultValueCache={defaultValue:t}),t}():this.type.$normalize(t)},e.prototype.isSearch=function(){return this.location===t.DefType.SEARCH},e.prototype.validates=function(t){if((b(t)||null===t)&&this.isOptional)return!0;var e=this.type.$normalize(t);if(!this.type.is(e))return!1;var r=this.type.encode(e);return!(k(r)&&!this.type.pattern.exec(r))},e.prototype.toString=function(){return"{Param:"+this.id+" "+this.type+" squash: '"+this.squash+"' optional: "+this.isOptional+"}"},e}(),ge=function(){function t(){this.enqueue=!0,this.typeQueue=[],this.defaultTypes=at(t.prototype,["hash","string","query","path","int","bool","date","json","any"]);this.types=Q(ht(this.defaultTypes,(function(t,e){return new fe(B({name:e},t))})),{})}return t.prototype.dispose=function(){this.types={}},t.prototype.type=function(t,e,r){if(!R(e))return this.types[t];if(this.types.hasOwnProperty(t))throw new Error("A type named '"+t+"' has already been defined.");return this.types[t]=new fe(B({name:t},e)),r&&(this.typeQueue.push({name:t,def:r}),this.enqueue||this._flushTypeQueue()),this},t.prototype._flushTypeQueue=function(){for(;this.typeQueue.length;){var t=this.typeQueue.shift();if(t.pattern)throw new Error("You cannot override a type's .pattern at runtime.");B(this.types[t.name],D.$injector.invoke(t.def))}},t}();de=function(t){var e=function(t){return null!=t?t.toString():t},r={encode:e,decode:e,is:m(String),pattern:/.*/,equals:function(t,e){return t==e}};return B({},r,t)},B(ge.prototype,{string:de({}),path:de({pattern:/[^/]*/}),query:de({}),hash:de({inherit:!1}),int:de({decode:function(t){return parseInt(t,10)},is:function(t){return!C(t)&&this.decode(t.toString())===t},pattern:/-?\d+/}),bool:de({encode:function(t){return t?1:0},decode:function(t){return 0!==parseInt(t,10)},is:m(Boolean),pattern:/0|1/}),date:de({encode:function(t){return this.is(t)?[t.getFullYear(),("0"+(t.getMonth()+1)).slice(-2),("0"+t.getDate()).slice(-2)].join("-"):void 0},decode:function(t){if(this.is(t))return t;var e=this.capture.exec(t);return e?new Date(e[1],e[2]-1,e[3]):void 0},is:function(t){return t instanceof Date&&!isNaN(t.valueOf())},equals:function(t,e){return["getFullYear","getMonth","getDate"].reduce((function(r,n){return r&&t[n]()===e[n]()}),!0)},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/}),json:de({encode:L,decode:F,is:m(Object),equals:G,pattern:/[^/]*/}),any:de({encode:z,decode:z,is:function(){return!0},equals:G})});var ye=function(){function t(t){void 0===t&&(t={}),B(this,t)}return t.prototype.$inherit=function(t,e,r){var n,i=ot(e,r),o={},a=[];for(var u in i)if(i[u]&&i[u].params&&(n=Object.keys(i[u].params)).length)for(var s in n)a.indexOf(n[s])>=0||(a.push(n[s]),o[n[s]]=this[n[s]]);return B({},o,t)},t}(),we=function(){function t(e){if(e instanceof t){var r=e;this.state=r.state,this.paramSchema=r.paramSchema.slice(),this.paramValues=B({},r.paramValues),this.resolvables=r.resolvables.slice(),this.views=r.views&&r.views.slice()}else{var n=e;this.state=n,this.paramSchema=n.parameters({inherit:!1}),this.paramValues={},this.resolvables=n.resolvables.map((function(t){return t.clone()}))}}return t.prototype.clone=function(){return new t(this)},t.prototype.applyRawParams=function(t){return this.paramValues=this.paramSchema.reduce((function(e,r){return Pt(e,[(n=r).id,n.value(t[n.id])]);var n}),{}),this},t.prototype.parameter=function(t){return ft(this.paramSchema,c("id",t))},t.prototype.equals=function(t,e){var r=this.diff(t,e);return r&&0===r.length},t.prototype.diff=function(t,e){if(this.state!==t.state)return!1;var r=e?e(this):this.paramSchema;return me.changed(r,this.paramValues,t.paramValues)},t.clone=function(t){return t.clone()},t}(),_e=function(){function t(t,e,r,n){this._stateRegistry=t,this._identifier=e,this._identifier=e,this._params=B({},r||{}),this._options=B({},n||{}),this._definition=t.matcher.find(e,this._options.relative)}return t.prototype.name=function(){return this._definition&&this._definition.name||this._identifier},t.prototype.identifier=function(){return this._identifier},t.prototype.params=function(){return this._params},t.prototype.$state=function(){return this._definition},t.prototype.state=function(){return this._definition&&this._definition.self},t.prototype.options=function(){return this._options},t.prototype.exists=function(){return!(!this._definition||!this._definition.self)},t.prototype.valid=function(){return!this.error()},t.prototype.error=function(){var t=this.options().relative;if(!this._definition&&t){var e=t.name?t.name:t;return"Could not resolve '"+this.name()+"' from state '"+e+"'"}return this._definition?this._definition.self?void 0:"State '"+this.name()+"' has an invalid definition":"No such state '"+this.name()+"'"},t.prototype.toString=function(){return"'"+this.name()+"'"+Bt(this.params())},t.prototype.withState=function(e){return new t(this._stateRegistry,e,this._params,this._options)},t.prototype.withParams=function(e,r){void 0===r&&(r=!1);var n=r?e:B({},this._params,e);return new t(this._stateRegistry,this._identifier,n,this._options)},t.prototype.withOptions=function(e,r){void 0===r&&(r=!1);var n=r?e:B({},this._options,e);return new t(this._stateRegistry,this._identifier,this._params,n)},t.isDef=function(t){return t&&t.state&&(k(t.state)||O(t.state)&&k(t.state.name))},t}(),Se=function(){function t(){}return t.makeTargetState=function(t,e){var r=Tt(e).state;return new _e(t,r,e.map(s("paramValues")).reduce(it,{}),{})},t.buildPath=function(t){var e=t.params();return t.$state().path.map((function(t){return new we(t).applyRawParams(e)}))},t.buildToPath=function(e,r){var n=t.buildPath(r);return r.options().inherit?t.inheritParams(e,n,Object.keys(r.params())):n},t.applyViewConfigs=function(e,r,n){r.filter((function(t){return K(n,t.state)})).forEach((function(n){var i=pt(n.state.views||{}),o=t.subPath(r,(function(t){return t===n})),a=i.map((function(t){return e.createViewConfig(o,t)}));n.views=a.reduce(mt,[])}))},t.inheritParams=function(t,e,r){void 0===r&&(r=[]);var n=t.map((function(t){return t.paramSchema})).reduce(mt,[]).filter((function(t){return!t.inherit})).map(s("id"));return e.map((function(e){var i=B({},e&&e.paramValues),o=at(i,r);i=ut(i,r);var a,u,s,f=ut((a=t,u=e.state,s=ft(a,c("state",u)),B({},s&&s.paramValues)||{}),n),l=B(i,f,o);return new we(e.state).applyRawParams(l)}))},t.treeChanges=function(e,r,n){for(var i,o,a,u,s,c,f=Math.min(e.length,r.length),l=0;l<f&&e[l].state!==n&&(i=e[l],o=r[l],i.equals(o,t.nonDynamicParams));)l++;u=(a=e).slice(0,l),s=a.slice(l);var h=u.map((function(t,e){var n=t.clone();return n.paramValues=r[e].paramValues,n}));return c=r.slice(l),{from:a,to:h.concat(c),retained:u,retainedWithToParams:h,exiting:s,entering:c}},t.matching=function(t,e,r){var n=!1;return Ct(t,e).reduce((function(t,e){var i=e[0],o=e[1];return(n=n||!i.equals(o,r))?t:t.concat(i)}),[])},t.equals=function(e,r,n){return e.length===r.length&&t.matching(e,r,n).length===e.length},t.subPath=function(t,e){var r=ft(t,e),n=t.indexOf(r);return-1===n?void 0:t.slice(0,n+1)},t.nonDynamicParams=function(t){return t.state.parameters({inherit:!1}).filter((function(t){return!t.dynamic}))},t.paramValues=function(t){return t.reduce((function(t,e){return B(t,e.paramValues)}),{})},t}(),$e={when:{LAZY:"LAZY",EAGER:"EAGER"},async:{WAIT:"WAIT",NOWAIT:"NOWAIT"}},be={when:"LAZY",async:"WAIT"},Re=function(){function t(e,r,n,i,o){if(this.resolved=!1,this.promise=void 0,e instanceof t)B(this,e);else if(P(r)){if(C(e))throw new Error("new Resolvable(): token argument is required");if(!P(r))throw new Error("new Resolvable(): resolveFn argument must be a function");this.token=e,this.policy=i,this.resolveFn=r,this.deps=n||[],this.data=o,this.resolved=void 0!==o,this.promise=this.resolved?D.$q.when(this.data):void 0}else if(O(e)&&e.token&&(e.hasOwnProperty("resolveFn")||e.hasOwnProperty("data"))){var a=e;return new t(a.token,a.resolveFn,a.deps,a.policy,a.data)}}return t.prototype.getPolicy=function(t){var e=this.policy||{},r=t&&t.resolvePolicy||{};return{when:e.when||r.when||be.when,async:e.async||r.async||be.async}},t.prototype.resolve=function(t,e){var r=this,n=D.$q,i=t.findNode(this),o=i&&i.state,a=this.getPolicy(o).async,u=P(a)?a:z;return this.promise=n.when().then((function(){return n.all(t.getDependencies(r).map((function(r){return r.get(t,e)})))})).then((function(t){return r.resolveFn.apply(null,t)})).then(u).then((function(t){return r.data=t,r.resolved=!0,r.resolveFn=null,ce.traceResolvableResolved(r,e),r.data}))},t.prototype.get=function(t,e){return this.promise||this.resolve(t,e)},t.prototype.toString=function(){return"Resolvable(token: "+Bt(this.token)+", requires: ["+this.deps.map(Bt)+"])"},t.prototype.clone=function(){return new t(this)},t.fromData=function(e,r){return new t(e,(function(){return r}),null,null,r)},t}(),Ee=$e.when,Ce=[Ee.EAGER,Ee.LAZY],Pe=[Ee.EAGER],Te=function(){function t(t){this._path=t}return t.prototype.getTokens=function(){return this._path.reduce((function(t,e){return t.concat(e.resolvables.map((function(t){return t.token})))}),[]).reduce(wt,[])},t.prototype.getResolvable=function(t){return Tt(this._path.map((function(t){return t.resolvables})).reduce(mt,[]).filter((function(e){return e.token===t})))},t.prototype.getPolicy=function(t){var e=this.findNode(t);return t.getPolicy(e.state)},t.prototype.subContext=function(e){return new t(Se.subPath(this._path,(function(t){return t.state===e})))},t.prototype.addResolvables=function(t,e){var r=ft(this._path,c("state",e)),n=t.map((function(t){return t.token}));r.resolvables=r.resolvables.filter((function(t){return-1===n.indexOf(t.token)})).concat(t)},t.prototype.resolvePath=function(t,e){var r=this;void 0===t&&(t="LAZY");var n=(K(Ce,t)?t:"LAZY")===$e.when.EAGER?Pe:Ce;ce.traceResolvePath(this._path,t,e);var i=function(t,e){return function(n){return K(t,r.getPolicy(n)[e])}},o=this._path.reduce((function(t,o){var a=o.resolvables.filter(i(n,"when")),u=a.filter(i(["NOWAIT"],"async")),s=a.filter(l(i(["NOWAIT"],"async"))),c=r.subContext(o.state),f=function(t){return t.get(c,e).then((function(e){return{token:t.token,value:e}}))};return u.forEach(f),t.concat(s.map(f))}),[]);return D.$q.all(o)},t.prototype.injector=function(){return this._injector||(this._injector=new ke(this))},t.prototype.findNode=function(t){return ft(this._path,(function(e){return K(e.resolvables,t)}))},t.prototype.getDependencies=function(t){var e=this,r=this.findNode(t),n=(Se.subPath(this._path,(function(t){return t===r}))||this._path).reduce((function(t,e){return t.concat(e.resolvables)}),[]).filter((function(e){return e!==t}));return t.deps.map((function(t){var r=n.filter((function(e){return e.token===t}));if(r.length)return Tt(r);var i=e.injector().getNative(t);if(b(i))throw new Error("Could not find Dependency Injection token: "+Bt(t));return new Re(t,(function(){return i}),[],i)}))},t}(),ke=function(){function t(t){this.context=t,this.native=this.get("Native Injector")||D.$injector}return t.prototype.get=function(t){var e=this.context.getResolvable(t);if(e){if("NOWAIT"===this.context.getPolicy(e).async)return e.get(this.context);if(!e.resolved)throw new Error("Resolvable async .get() not complete:"+Bt(e.token));return e.data}return this.getNative(t)},t.prototype.getAsync=function(t){var e=this.context.getResolvable(t);return e?e.get(this.context):D.$q.when(this.native.get(t))},t.prototype.getNative=function(t){return this.native&&this.native.get(t)},t}();function Oe(t){return t.name}function xe(t){return t.self.$$state=function(){return t},t.self}function je(t){return t.parent&&t.parent.data&&(t.data=t.self.data=Q(t.parent.data,t.data)),t.data}var Ve=function(t,e){return function(r){var n=r.self;if(n&&n.url&&n.name&&n.name.match(/\.\*\*$/)){var i={};kt(n,i),i.url+="{remainder:any}",n=i}var o=r.parent,a=function(t){if(!k(t))return!1;var e="^"===t.charAt(0);return{val:e?t.substring(1):t,root:e}}(n.url),u=a?t.compile(a.val,{state:n}):n.url;if(!u)return null;if(!t.isMatcher(u))throw new Error("Invalid url '"+u+"' in state '"+r+"'");return a&&a.root?u:(o&&o.navigable||e()).url.append(u)}},Ie=function(t){return function(e){return!t(e)&&e.url?e:e.parent?e.parent.navigable:null}};function He(t){return t.parent?t.parent.path.concat(t):[t]}function Ae(t){var e=t.parent?B({},t.parent.includes):{};return e[t.name]=!0,e}function De(t){var e=function(t){return t.provide||t.token},r=_([[s("resolveFn"),function(t){return new Re(e(t),t.resolveFn,t.deps,t.policy)}],[s("useFactory"),function(t){return new Re(e(t),t.useFactory,t.deps||t.dependencies,t.policy)}],[s("useClass"),function(t){return new Re(e(t),(function(){return new t.useClass}),[],t.policy)}],[s("useValue"),function(t){return new Re(e(t),(function(){return t.useValue}),[],t.policy,t.useValue)}],[s("useExisting"),function(t){return new Re(e(t),z,[t.useExisting],t.policy)}]]),n=_([[u(s("val"),k),function(t){return new Re(t.token,z,[t.val],t.policy)}],[u(s("val"),x),function(t){return new Re(t.token,Tt(t.val),t.val.slice(0,-1),t.policy)}],[u(s("val"),P),function(t){return new Re(t.token,t.val,function(t){var e=D.$injector;return t.$inject||e&&e.annotate(t,e.strictDi)||"deferred"}(t.val),t.policy)}]]),i=_([[m(Re),function(t){return t}],[function(t){return!(!t.token||!t.resolveFn)},r],[function(t){return!(!t.provide&&!t.token||!(t.useValue||t.useFactory||t.useExisting||t.useClass))},r],[function(t){return!!(t&&t.val&&(k(t.val)||x(t.val)||P(t.val)))},n],[y(!0),function(t){throw new Error("Invalid resolve value: "+Bt(t))}]]),o=t.resolve;return(x(o)?o:function(t,e){return Object.keys(t||{}).map((function(r){return{token:r,val:t[r],deps:void 0,policy:e[r]}}))}(o,t.resolvePolicy||{})).map(i)}var qe,Ue,Ne=function(){function t(t,e){this.matcher=t;var r,n=this,i=function(){return t.find("")},o=function(t){return""===t.name};this.builders={name:[Oe],self:[xe],parent:[function(e){return o(e)?null:t.find(n.parentName(e))||i()}],data:[je],url:[Ve(e,i)],navigable:[Ie(o)],params:[(r=e.paramFactory,function(t){var e=t.url&&t.url.parameters({inherit:!1})||[],n=pt(lt(ut(t.params||{},e.map(s("id"))),(function(e,n){return r.fromConfig(n,null,t.self)})));return e.concat(n).map((function(t){return[t.id,t]})).reduce(Pt,{})})],views:[],path:[He],includes:[Ae],resolvables:[De]}}return t.prototype.builder=function(t,e){var r=this.builders,n=r[t]||[];return k(t)&&!R(e)?n.length>1?n:n[0]:k(t)&&P(e)?(r[t]=n,r[t].push(e),function(){return r[t].splice(r[t].indexOf(e,1))&&null}):void 0},t.prototype.build=function(t){var e=this.matcher,r=this.builders,n=this.parentName(t);if(n&&!e.find(n,void 0,!1))return null;for(var i in r)if(r.hasOwnProperty(i)){var o=r[i].reduce((function(t,e){return function(r){return e(r,t)}}),W);t[i]=o(t)}return t},t.prototype.parentName=function(t){var e=t.name||"",r=e.split(".");if("**"===r.pop()&&r.pop(),r.length){if(t.parent)throw new Error("States that specify the 'parent:' property should not have a '.' in their name ("+e+")");return r.join(".")}return t.parent?k(t.parent)?t.parent:t.parent.name:""},t.prototype.name=function(t){var e=t.name;if(-1!==e.indexOf(".")||!t.parent)return e;var r=k(t.parent)?t.parent:t.parent.name;return r?r+"."+e:e},t}(),Fe=function(){function t(e){return t.create(e||{})}return t.create=function(e){e=t.isStateClass(e)?new e:e;var r=Q(Q(e,t.prototype));return e.$$state=function(){return r},r.self=e,r.__stateObjectCache={nameGlob:Ht.fromString(r.name)},r},t.prototype.is=function(t){return this===t||this.self===t||this.fqn()===t},t.prototype.fqn=function(){if(!(this.parent&&this.parent instanceof this.constructor))return this.name;var t=this.parent.fqn();return t?t+"."+this.name:this.name},t.prototype.root=function(){return this.parent&&this.parent.root()||this},t.prototype.parameters=function(t){return((t=nt(t,{inherit:!0,matchingKeys:null})).inherit&&this.parent&&this.parent.parameters()||[]).concat(pt(this.params)).filter((function(e){return!t.matchingKeys||t.matchingKeys.hasOwnProperty(e.id)}))},t.prototype.parameter=function(t,e){return void 0===e&&(e={}),this.url&&this.url.parameter(t,e)||ft(pt(this.params),c("id",t))||e.inherit&&this.parent&&this.parent.parameter(t)},t.prototype.toString=function(){return this.fqn()},t.isStateClass=function(t){return P(t)&&!0===t.__uiRouterState},t.isStateDeclaration=function(t){return P(t.$$state)},t.isState=function(t){return O(t.__stateObjectCache)},t}(),Le=function(){function t(t){this._states=t}return t.prototype.isRelative=function(t){return 0===(t=t||"").indexOf(".")||0===t.indexOf("^")},t.prototype.find=function(t,e,r){if(void 0===r&&(r=!0),t||""===t){var n=k(t),i=n?t:t.name;this.isRelative(i)&&(i=this.resolvePath(i,e));var o=this._states[i];if(o&&(n||!(n||o!==t&&o.self!==t)))return o;if(n&&r){var a=pt(this._states).filter((function(t){return t.__stateObjectCache.nameGlob&&t.__stateObjectCache.nameGlob.matches(i)}));return a.length>1&&ee.error("stateMatcher.find: Found multiple matches for "+i+" using glob: ",a.map((function(t){return t.name}))),a[0]}}},t.prototype.resolvePath=function(t,e){if(!e)throw new Error("No reference point given for path '"+t+"'");for(var r=this.find(e),n=t.split("."),i=n.length,o=0,a=r;o<i;o++)if(""!==n[o]||0!==o){if("^"!==n[o])break;if(!a.parent)throw new Error("Path '"+t+"' not valid for state '"+r.name+"'");a=a.parent}else a=r;var u=n.slice(o).join(".");return a.name+(a.name&&u?".":"")+u},t}(),Me=function(){function t(t,e,r,n){this.router=t,this.states=e,this.builder=r,this.listeners=n,this.queue=[]}return t.prototype.dispose=function(){this.queue=[]},t.prototype.register=function(t){var e=this.queue,r=Fe.create(t),n=r.name;if(!k(n))throw new Error("State must have a valid name");if(this.states.hasOwnProperty(n)||K(e.map(s("name")),n))throw new Error("State '"+n+"' is already defined");return e.push(r),this.flush(),r},t.prototype.flush=function(){for(var t=this,e=this.queue,r=this.states,n=this.builder,i=[],o=[],a={},u=function(e){return t.states.hasOwnProperty(e)&&t.states[e]},s=function(){i.length&&t.listeners.forEach((function(t){return t("registered",i.map((function(t){return t.self})))}))};e.length>0;){var c=e.shift(),f=c.name,l=n.build(c),h=o.indexOf(c);if(l){var p=u(f);if(p&&p.name===f)throw new Error("State '"+f+"' is already defined");var v=u(f+".**");v&&this.router.stateRegistry.deregister(v),r[f]=c,this.attachRoute(c),h>=0&&o.splice(h,1),i.push(c)}else{var d=a[f];if(a[f]=e.length,h>=0&&d===e.length)return e.push(c),s(),r;h<0&&o.push(c),e.push(c)}}return s(),r},t.prototype.attachRoute=function(t){if(!t.abstract&&t.url){var e=this.router.urlService.rules;e.rule(e.urlRuleFactory.create(t))}},t}(),Be=function(){function t(t){this.router=t,this.states={},this.listeners=[],this.matcher=new Le(this.states),this.builder=new Ne(this.matcher,t.urlMatcherFactory),this.stateQueue=new Me(t,this.states,this.builder,this.listeners),this._registerRoot()}return t.prototype._registerRoot=function(){(this._root=this.stateQueue.register({name:"",url:"^",views:null,params:{"#":{value:null,type:"hash",dynamic:!0}},abstract:!0})).navigable=null},t.prototype.dispose=function(){var t=this;this.stateQueue.dispose(),this.listeners=[],this.get().forEach((function(e){return t.get(e)&&t.deregister(e)}))},t.prototype.onStatesChanged=function(t){return this.listeners.push(t),function(){Z(this.listeners)(t)}.bind(this)},t.prototype.root=function(){return this._root},t.prototype.register=function(t){return this.stateQueue.register(t)},t.prototype._deregisterTree=function(t){var e=this,r=this.get().map((function(t){return t.$$state()})),n=function(t){var e=r.filter((function(e){return-1!==t.indexOf(e.parent)}));return 0===e.length?e:e.concat(n(e))},i=n([t]),o=[t].concat(i).reverse();return o.forEach((function(t){var r=e.router.urlService.rules;r.rules().filter(c("state",t)).forEach((function(t){return r.removeRule(t)})),delete e.states[t.name]})),o},t.prototype.deregister=function(t){var e=this.get(t);if(!e)throw new Error("Can't deregister state; not found: "+t);var r=this._deregisterTree(e.$$state());return this.listeners.forEach((function(t){return t("deregistered",r.map((function(t){return t.self})))})),r},t.prototype.get=function(t,e){var r=this;if(0===arguments.length)return Object.keys(this.states).map((function(t){return r.states[t].self}));var n=this.matcher.find(t,e);return n&&n.self||null},t.prototype.decorator=function(t,e){return this.builder.builder(t,e)},t}();(qe=t.TransitionHookPhase||(t.TransitionHookPhase={}))[qe.CREATE=0]="CREATE",qe[qe.BEFORE=1]="BEFORE",qe[qe.RUN=2]="RUN",qe[qe.SUCCESS=3]="SUCCESS",qe[qe.ERROR=4]="ERROR",(Ue=t.TransitionHookScope||(t.TransitionHookScope={}))[Ue.TRANSITION=0]="TRANSITION",Ue[Ue.STATE=1]="STATE";var Ge={current:W,transition:null,traceData:{},bind:null},ze=function(){function e(e,r,n,i){var o=this;this.transition=e,this.stateContext=r,this.registeredHook=n,this.options=i,this.isSuperseded=function(){return o.type.hookPhase===t.TransitionHookPhase.RUN&&!o.options.transition.isActive()},this.options=nt(i,Ge),this.type=n.eventType}return e.chain=function(t,e){return t.reduce((function(t,e){return t.then((function(){return e.invokeHook()}))}),e||D.$q.when())},e.invokeHooks=function(t,r){for(var n=0;n<t.length;n++){var i=t[n].invokeHook();if(H(i)){var o=t.slice(n+1);return e.chain(o,i).then(r)}}return r()},e.runAllHooks=function(t){t.forEach((function(t){return t.invokeHook()}))},e.prototype.logError=function(t){this.transition.router.stateService.defaultErrorHandler()(t)},e.prototype.invokeHook=function(){var t=this,e=this.registeredHook;if(!e._deregistered){var r=this.getNotCurrentRejection();if(r)return r;var n=this.options;ce.traceHookInvocation(this,this.transition,n);var i=function(r){return e.eventType.getErrorHandler(t)(r)},o=function(r){return e.eventType.getResultHandler(t)(r)};try{var a=e.callback.call(n.bind,t.transition,t.stateContext);return!this.type.synchronous&&H(a)?a.catch((function(t){return qt.normalize(t).toPromise()})).then(o,i):o(a)}catch(t){return i(qt.normalize(t))}finally{e.invokeLimit&&++e.invokeCount>=e.invokeLimit&&e.deregister()}}},e.prototype.handleHookResult=function(t){var e=this,r=this.getNotCurrentRejection();return r||(H(t)?t.then((function(t){return e.handleHookResult(t)})):(ce.traceHookResult(t,this.transition,this.options),!1===t?qt.aborted("Hook aborted transition").toPromise():m(_e)(t)?qt.redirected(t).toPromise():void 0))},e.prototype.getNotCurrentRejection=function(){var t=this.transition.router;return t._disposed?qt.aborted("UIRouter instance #"+t.$id+" has been stopped (disposed)").toPromise():this.transition._aborted?qt.aborted().toPromise():this.isSuperseded()?qt.superseded(this.options.current()).toPromise():void 0},e.prototype.toString=function(){var t=this.options,e=this.registeredHook;return(f("traceData.hookType")(t)||"internal")+" context: "+(f("traceData.context.state.name")(t)||f("traceData.context")(t)||"unknown")+", "+Ut(200,Mt(e.callback))},e.HANDLE_RESULT=function(t){return function(e){return t.handleHookResult(e)}},e.LOG_REJECTED_RESULT=function(t){return function(e){H(e)&&e.catch((function(e){return t.logError(qt.normalize(e))}))}},e.LOG_ERROR=function(t){return function(e){return t.logError(e)}},e.REJECT_ERROR=function(t){return function(t){return It(t)}},e.THROW_ERROR=function(t){return function(t){throw t}},e}();function We(t,e,r){var n=k(e)?[e]:e;return!!(P(n)?n:function(t){for(var e=n,r=0;r<e.length;r++){var i=new Ht(e[r]);if(i&&i.matches(t.name)||!i&&e[r]===t.name)return!0}return!1})(t,r)}var Je=function(){function e(t,e,r,n,i,o){void 0===o&&(o={}),this.tranSvc=t,this.eventType=e,this.callback=r,this.matchCriteria=n,this.removeHookFromRegistry=i,this.invokeCount=0,this._deregistered=!1,this.priority=o.priority||0,this.bind=o.bind||null,this.invokeLimit=o.invokeLimit}return e.prototype._matchingNodes=function(t,e,r){if(!0===e)return t;var n=t.filter((function(t){return We(t.state,e,r)}));return n.length?n:null},e.prototype._getDefaultMatchCriteria=function(){return lt(this.tranSvc._pluginapi._getPathTypes(),(function(){return!0}))},e.prototype._getMatchingNodes=function(e,r){var n=this,i=B(this._getDefaultMatchCriteria(),this.matchCriteria);return pt(this.tranSvc._pluginapi._getPathTypes()).reduce((function(o,a){var u=a.scope===t.TransitionHookScope.STATE,s=e[a.name]||[],c=u?s:[Tt(s)];return o[a.name]=n._matchingNodes(c,i[a.name],r),o}),{})},e.prototype.matches=function(t,e){var r=this._getMatchingNodes(t,e);return pt(r).every(z)?r:null},e.prototype.deregister=function(){this.removeHookFromRegistry(this),this._deregistered=!0},e}();function Qe(t,e,r){var n=(t._registeredHooks=t._registeredHooks||{})[r.name]=[],i=Z(n);function o(t,o,a){void 0===a&&(a={});var u=new Je(e,r,o,t,i,a);return n.push(u),u.deregister.bind(u)}return t[r.name]=o,o}var Ke=function(){function e(t){this.transition=t}return e.prototype.buildHooksForPhase=function(t){var e=this;return this.transition.router.transitionService._pluginapi._getEvents(t).map((function(t){return e.buildHooks(t)})).reduce(mt,[]).filter(z)},e.prototype.buildHooks=function(e){var r=this.transition,n=r.treeChanges(),i=this.getMatchingHooks(e,n,r);if(!i)return[];var o={transition:r,current:r.options().current};return i.map((function(i){return i.matches(n,r)[e.criteriaMatchPath.name].map((function(n){var a=B({bind:i.bind,traceData:{hookType:e.name,context:n}},o),u=e.criteriaMatchPath.scope===t.TransitionHookScope.STATE?n.state.self:null,s=new ze(r,u,i,a);return{hook:i,node:n,transitionHook:s}}))})).reduce(mt,[]).sort(function(t){void 0===t&&(t=!1);return function(e,r){var n=t?-1:1,i=(e.node.state.path.length-r.node.state.path.length)*n;return 0!==i?i:r.hook.priority-e.hook.priority}}(e.reverseSort)).map((function(t){return t.transitionHook}))},e.prototype.getMatchingHooks=function(e,r,n){var i=e.hookPhase===t.TransitionHookPhase.CREATE,o=this.transition.router.transitionService;return(i?[o]:[this.transition,o]).map((function(t){return t.getHooks(e.name)})).filter($t(x,"broken event named: "+e.name)).reduce(mt,[]).filter((function(t){return t.matches(r,n)}))},e}();var Ye=s("self"),Ze=function(){function e(e,r,n){var i=this;if(this._deferred=D.$q.defer(),this.promise=this._deferred.promise,this._registeredHooks={},this._hookBuilder=new Ke(this),this.isActive=function(){return i.router.globals.transition===i},this.router=n,this._targetState=r,!r.valid())throw new Error(r.error());this._options=B({current:y(this)},r.options()),this.$id=n.transitionService._transitionCount++;var o=Se.buildToPath(e,r);this._treeChanges=Se.treeChanges(e,o,this._options.reloadState),this.createTransitionHookRegFns();var a=this._hookBuilder.buildHooksForPhase(t.TransitionHookPhase.CREATE);ze.invokeHooks(a,(function(){return null})),this.applyViewConfigs(n)}return e.prototype.onBefore=function(t,e,r){},e.prototype.onStart=function(t,e,r){},e.prototype.onExit=function(t,e,r){},e.prototype.onRetain=function(t,e,r){},e.prototype.onEnter=function(t,e,r){},e.prototype.onFinish=function(t,e,r){},e.prototype.onSuccess=function(t,e,r){},e.prototype.onError=function(t,e,r){},e.prototype.createTransitionHookRegFns=function(){var e=this;this.router.transitionService._pluginapi._getEvents().filter((function(e){return e.hookPhase!==t.TransitionHookPhase.CREATE})).forEach((function(t){return Qe(e,e.router.transitionService,t)}))},e.prototype.getHooks=function(t){return this._registeredHooks[t]},e.prototype.applyViewConfigs=function(t){var e=this._treeChanges.entering.map((function(t){return t.state}));Se.applyViewConfigs(t.transitionService.$view,this._treeChanges.to,e)},e.prototype.$from=function(){return Tt(this._treeChanges.from).state},e.prototype.$to=function(){return Tt(this._treeChanges.to).state},e.prototype.from=function(){return this.$from().self},e.prototype.to=function(){return this.$to().self},e.prototype.targetState=function(){return this._targetState},e.prototype.is=function(t){return t instanceof e?this.is({to:t.$to().name,from:t.$from().name}):!(t.to&&!We(this.$to(),t.to,this)||t.from&&!We(this.$from(),t.from,this))},e.prototype.params=function(t){return void 0===t&&(t="to"),Object.freeze(this._treeChanges[t].map(s("paramValues")).reduce(it,{}))},e.prototype.paramsChanged=function(){var t=this.params("from"),e=this.params("to"),r=[].concat(this._treeChanges.to).concat(this._treeChanges.from).map((function(t){return t.paramSchema})).reduce(gt,[]).reduce(wt,[]);return me.changed(r,t,e).reduce((function(t,r){return t[r.id]=e[r.id],t}),{})},e.prototype.injector=function(t,e){void 0===e&&(e="to");var r=this._treeChanges[e];return t&&(r=Se.subPath(r,(function(e){return e.state===t||e.state.name===t}))),new Te(r).injector()},e.prototype.getResolveTokens=function(t){return void 0===t&&(t="to"),new Te(this._treeChanges[t]).getTokens()},e.prototype.addResolvable=function(t,e){void 0===e&&(e=""),t=m(Re)(t)?t:new Re(t);var r="string"==typeof e?e:e.name,n=this._treeChanges.to,i=ft(n,(function(t){return t.state.name===r}));new Te(n).addResolvables([t],i.state)},e.prototype.redirectedFrom=function(){return this._options.redirectedFrom||null},e.prototype.originalTransition=function(){var t=this.redirectedFrom();return t&&t.originalTransition()||this},e.prototype.options=function(){return this._options},e.prototype.entering=function(){return ht(this._treeChanges.entering,s("state")).map(Ye)},e.prototype.exiting=function(){return ht(this._treeChanges.exiting,s("state")).map(Ye).reverse()},e.prototype.retained=function(){return ht(this._treeChanges.retained,s("state")).map(Ye)},e.prototype.views=function(t,e){void 0===t&&(t="entering");var r=this._treeChanges[t];return(r=e?r.filter(c("state",e)):r).map(s("views")).filter(z).reduce(mt,[])},e.prototype.treeChanges=function(t){return t?this._treeChanges[t]:this._treeChanges},e.prototype.redirect=function(t){for(var e=1,r=this;null!=(r=r.redirectedFrom());)if(++e>20)throw new Error("Too many consecutive Transition redirects (20+)");var n={redirectedFrom:this,source:"redirect"};"url"===this.options().source&&!1!==t.options().location&&(n.location="replace");var i=B({},this.options(),t.options(),n);t=t.withOptions(i,!0);var o,a=this.router.transitionService.create(this._treeChanges.from,t),u=this._treeChanges.entering,s=a._treeChanges.entering;return Se.matching(s,u,Se.nonDynamicParams).filter(l((o=t.options().reloadState,function(t){return o&&t.state.includes[o.name]}))).forEach((function(t,e){t.resolvables=u[e].resolvables})),a},e.prototype._changedParams=function(){var t=this._treeChanges;if(!this._options.reload&&(!t.exiting.length&&!t.entering.length&&t.to.length===t.from.length&&!Ct(t.to,t.from).map((function(t){return t[0].state!==t[1].state})).reduce(dt,!1))){var e=t.to.map((function(t){return t.paramSchema})),r=[t.to,t.from].map((function(t){return t.map((function(t){return t.paramValues}))}));return Ct(e,r[0],r[1]).map((function(t){var e=t[0],r=t[1],n=t[2];return me.changed(e,r,n)})).reduce(mt,[])}},e.prototype.dynamic=function(){var t=this._changedParams();return!!t&&t.map((function(t){return t.dynamic})).reduce(dt,!1)},e.prototype.ignored=function(){return!!this._ignoredReason()},e.prototype._ignoredReason=function(){var t=this.router.globals.transition,e=this._options.reloadState,r=function(t,r){if(t.length!==r.length)return!1;var n=Se.matching(t,r);return t.length===n.filter((function(t){return!e||!t.state.includes[e.name]})).length},n=this.treeChanges(),i=t&&t.treeChanges();return i&&r(i.to,n.to)&&r(i.exiting,n.exiting)?"SameAsPending":0===n.exiting.length&&0===n.entering.length&&r(n.from,n.to)?"SameAsCurrent":void 0},e.prototype.run=function(){var e=this,r=ze.runAllHooks,n=function(t){return e._hookBuilder.buildHooksForPhase(t)},i=n(t.TransitionHookPhase.BEFORE);return ze.invokeHooks(i,(function(){var t=e.router.globals;return t.lastStartedTransitionId=e.$id,t.transition=e,t.transitionHistory.enqueue(e),ce.traceTransitionStart(e),D.$q.when(void 0)})).then((function(){var e=n(t.TransitionHookPhase.RUN);return ze.invokeHooks(e,(function(){return D.$q.when(void 0)}))})).then((function(){ce.traceSuccess(e.$to(),e),e.success=!0,e._deferred.resolve(e.to()),r(n(t.TransitionHookPhase.SUCCESS))}),(function(i){ce.traceError(i,e),e.success=!1,e._deferred.reject(i),e._error=i,r(n(t.TransitionHookPhase.ERROR))})),this.promise},e.prototype.valid=function(){return!this.error()||void 0!==this.success},e.prototype.abort=function(){b(this.success)&&(this._aborted=!0)},e.prototype.error=function(){var t=this.$to();if(t.self.abstract)return qt.invalid("Cannot transition to abstract state '"+t.name+"'");var e=t.parameters(),r=this.params(),n=e.filter((function(t){return!t.validates(r[t.id])}));if(n.length){var i=n.map((function(t){return"["+t.id+":"+Bt(r[t.id])+"]"})).join(", "),o="The following parameter values are not valid for state '"+t.name+"': "+i;return qt.invalid(o)}return!1===this.success?this._error:void 0},e.prototype.toString=function(){var t=this.from(),e=this.to(),r=function(t){return null!==t["#"]&&void 0!==t["#"]?t:ut(t,["#"])};return"Transition#"+this.$id+"( '"+(O(t)?t.name:t)+"'"+Bt(r(this._treeChanges.from.map(s("paramValues")).reduce(it,{})))+" -> "+(this.valid()?"":"(X) ")+"'"+(O(e)?e.name:e)+"'"+Bt(r(this.params()))+" )"},e.diToken=e,e}();function Xe(t,e){var r=["",""],n=t.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!e)return n;switch(e.squash){case!1:r=["(",")"+(e.isOptional?"?":"")];break;case!0:n=n.replace(/\/$/,""),r=["(?:/(",")|/)?"];break;default:r=["("+e.squash+"|",")?"]}return n+r[0]+e.type.pattern.source+r[1]}var tr=Zt("/"),er={state:{params:{}},strict:!0,caseInsensitive:!0,decodeParams:!0},rr=function(){function e(t,r,n,i){var o=this;this._cache={path:[this]},this._children=[],this._params=[],this._segments=[],this._compiled=[],this.config=i=nt(i,er),this.pattern=t;for(var a,u,s,f=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,h=[],p=0,v=function(r){if(!e.nameValidator.test(r))throw new Error("Invalid parameter name '"+r+"' in pattern '"+t+"'");if(ft(o._params,c("id",r)))throw new Error("Duplicate parameter name '"+r+"' in pattern '"+t+"'")},d=function(e,n){var i,a=e[2]||e[3],u=n?e[4]:e[4]||("*"===e[1]?"[\\s\\S]*":null);return{id:a,regexp:u,segment:t.substring(p,e.index),type:u?r.type(u)||(i=u,Q(r.type(n?"query":"path"),{pattern:new RegExp(i,o.config.caseInsensitive?"i":void 0)})):null}};(a=f.exec(t))&&!((u=d(a,!1)).segment.indexOf("?")>=0);)v(u.id),this._params.push(n.fromPath(u.id,u.type,i.state)),this._segments.push(u.segment),h.push([u.segment,Tt(this._params)]),p=f.lastIndex;var m=(s=t.substring(p)).indexOf("?");if(m>=0){var g=s.substring(m);if(s=s.substring(0,m),g.length>0)for(p=0;a=l.exec(g);)v((u=d(a,!0)).id),this._params.push(n.fromSearch(u.id,u.type,i.state)),p=f.lastIndex}this._segments.push(s),this._compiled=h.map((function(t){return Xe.apply(null,t)})).concat(Xe(s))}return e.encodeDashes=function(t){return encodeURIComponent(t).replace(/-/g,(function(t){return"%5C%"+t.charCodeAt(0).toString(16).toUpperCase()}))},e.pathSegmentsAndParams=function(e){return Ct(e._segments,e._params.filter((function(e){return e.location===t.DefType.PATH})).concat(void 0)).reduce(mt,[]).filter((function(t){return""!==t&&R(t)}))},e.queryParams=function(e){return e._params.filter((function(e){return e.location===t.DefType.SEARCH}))},e.compare=function(t,r){var n=function(t){return t._cache.weights=t._cache.weights||function(t){return t._cache.segments=t._cache.segments||t._cache.path.map(e.pathSegmentsAndParams).reduce(mt,[]).reduce(Xt,[]).map((function(t){return k(t)?tr(t):t})).reduce(mt,[])}(t).map((function(t){return"/"===t?1:k(t)?2:t instanceof me?3:void 0}))},i=n(t),o=n(r);!function(t,e,r){for(var n=Math.max(t.length,e.length);t.length<n;)t.push(r);for(;e.length<n;)e.push(r)}(i,o,0);var a,u,s=Ct(i,o);for(u=0;u<s.length;u++)if(0!==(a=s[u][0]-s[u][1]))return a;return 0},e.prototype.append=function(t){return this._children.push(t),t._cache={path:this._cache.path.concat(t),parent:this,pattern:null},t},e.prototype.isRoot=function(){return this._cache.path[0]===this},e.prototype.toString=function(){return this.pattern},e.prototype._getDecodedParamValue=function(t,e){return R(t)&&(this.config.decodeParams&&!e.type.raw&&(t=x(t)?t.map((function(t){return decodeURIComponent(t)})):decodeURIComponent(t)),t=e.type.decode(t)),e.value(t)},e.prototype.exec=function(t,e,r,n){var i=this;void 0===e&&(e={});var o,a,u,c=(o=this._cache,a="pattern",u=function(){return new RegExp(["^",_t(i._cache.path.map(s("_compiled"))).join(""),!1===i.config.strict?"/?":"","$"].join(""),i.config.caseInsensitive?"i":void 0)},o[a]=o[a]||u()).exec(t);if(!c)return null;var f,l,h=this.parameters(),p=h.filter((function(t){return!t.isSearch()})),v=h.filter((function(t){return t.isSearch()})),d=this._cache.path.map((function(t){return t._segments.length-1})).reduce((function(t,e){return t+e})),m={};if(d!==c.length-1)throw new Error("Unbalanced capture group in route '"+this.pattern+"'");for(var g=0;g<d;g++){for(var y=p[g],w=c[g+1],_=0;_<y.replace.length;_++)y.replace[_].from===w&&(w=y.replace[_].to);w&&!0===y.array&&(f=void 0,l=void 0,l=ht((f=function(t){return t.split("").reverse().join("")})(w).split(/-(?!\\)/),f),w=ht(l,(function(t){return t.replace(/\\-/g,"-")})).reverse()),m[y.id]=this._getDecodedParamValue(w,y)}return v.forEach((function(t){for(var r=e[t.id],n=0;n<t.replace.length;n++)t.replace[n].from===r&&(r=t.replace[n].to);m[t.id]=i._getDecodedParamValue(r,t)})),r&&(m["#"]=r),m},e.prototype.parameters=function(t){return void 0===t&&(t={}),!1===t.inherit?this._params:_t(this._cache.path.map((function(t){return t._params})))},e.prototype.parameter=function(t,e){var r=this;void 0===e&&(e={});var n=this._cache.parent;return function(){for(var e=0,n=r._params;e<n.length;e++){var i=n[e];if(i.id===t)return i}}()||!1!==e.inherit&&n&&n.parameter(t,e)||null},e.prototype.validates=function(t){return t=t||{},this.parameters().filter((function(e){return t.hasOwnProperty(e.id)})).map((function(e){return function(t,e){return!t||t.validates(e)}(e,t[e.id])})).reduce(vt,!0)},e.prototype.format=function(t){void 0===t&&(t={});var r=this._cache.path,n=r.map(e.pathSegmentsAndParams).reduce(mt,[]).map((function(t){return k(t)?t:o(t)})),i=r.map(e.queryParams).reduce(mt,[]).map(o);if(n.concat(i).filter((function(t){return!1===t.isValid})).length)return null;function o(e){var r=e.value(t[e.id]),n=e.validates(r),i=e.isDefaultValue(r),o=!!i&&e.squash,a=e.type.encode(r);return{param:e,value:r,isValid:n,isDefaultValue:i,squash:o,encoded:a}}var a=n.reduce((function(t,r){if(k(r))return t+r;var n=r.squash,i=r.encoded,o=r.param;return!0===n?t.match(/\/$/)?t.slice(0,-1):t:k(n)?t+n:!1!==n||null==i?t:x(i)?t+ht(i,e.encodeDashes).join("-"):o.raw?t+i:t+encodeURIComponent(i)}),""),u=i.map((function(t){var e=t.param,r=t.squash,n=t.encoded,i=t.isDefaultValue;if(!(null==n||i&&!1!==r)&&(x(n)||(n=[n]),0!==n.length))return e.raw||(n=ht(n,encodeURIComponent)),n.map((function(t){return e.id+"="+t}))})).filter(z).reduce(mt,[]).join("&");return a+(u?"?"+u:"")+(t["#"]?"#"+t["#"]:"")},e.nameValidator=/^\w+([-.]+\w+)*(?:\[\])?$/,e}(),nr=function(){return(nr=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},ir=function(){function e(t){this.router=t}return e.prototype.fromConfig=function(e,r,n){return new me(e,r,t.DefType.CONFIG,this.router.urlService.config,n)},e.prototype.fromPath=function(e,r,n){return new me(e,r,t.DefType.PATH,this.router.urlService.config,n)},e.prototype.fromSearch=function(e,r,n){return new me(e,r,t.DefType.SEARCH,this.router.urlService.config,n)},e}(),or=function(){function t(t){var e=this;this.router=t,this.paramFactory=new ir(this.router),this.UrlMatcher=rr,this.Param=me,this.caseInsensitive=function(t){return e.router.urlService.config.caseInsensitive(t)},this.defaultSquashPolicy=function(t){return e.router.urlService.config.defaultSquashPolicy(t)},this.strictMode=function(t){return e.router.urlService.config.strictMode(t)},this.type=function(t,r,n){return e.router.urlService.config.type(t,r,n)||e}}return t.prototype.compile=function(t,e){var r=this.router.urlService.config,n=e&&!e.state&&e.params;e=n?nr({state:{params:n}},e):e;var i={strict:r._isStrictMode,caseInsensitive:r._isCaseInsensitive,decodeParams:r._decodeParams};return new rr(t,r.paramTypes,this.paramFactory,B(i,e))},t.prototype.isMatcher=function(t){if(!O(t))return!1;var e=!0;return M(rr.prototype,(function(r,n){P(r)&&(e=e&&R(t[n])&&P(t[n]))})),e},t.prototype.$get=function(){var t=this.router.urlService.config;return t.paramTypes.enqueue=!1,t.paramTypes._flushTypeQueue(),this},t}(),ar=function(){function t(t){this.router=t}return t.prototype.compile=function(t){return this.router.urlMatcherFactory.compile(t)},t.prototype.create=function(t,e){var r=this,n=Fe.isState,i=Fe.isStateDeclaration,o=_([[k,function(t){return o(r.compile(t))}],[m(rr),function(t){return r.fromUrlMatcher(t,e)}],[p(n,i),function(t){return r.fromState(t,r.router)}],[m(RegExp),function(t){return r.fromRegExp(t,e)}],[P,function(t){return new ur(t,e)}]]),a=o(t);if(!a)throw new Error("invalid 'what' in when()");return a},t.prototype.fromUrlMatcher=function(t,e){var r=e;k(e)&&(e=this.router.urlMatcherFactory.compile(e)),m(rr)(e)&&(r=function(t){return e.format(t)});var n={urlMatcher:t,matchPriority:function(e){var r=t.parameters().filter((function(t){return t.isOptional}));return r.length?r.filter((function(t){return e[t.id]})).length/r.length:1e-6},type:"URLMATCHER"};return B(new ur((function(e){var r=t.exec(e.path,e.search,e.hash);return t.validates(r)&&r}),r),n)},t.prototype.fromState=function(t,e){var r=Fe.isStateDeclaration(t)?t.$$state():t,n={state:r,type:"STATE"};return B(this.fromUrlMatcher(r.url,(function(t){var n=e.stateService,i=e.globals;n.href(r,t)!==n.href(i.current,i.params)&&n.transitionTo(r,t,{inherit:!0,source:"url"})})),n)},t.prototype.fromRegExp=function(t,e){if(t.global||t.sticky)throw new Error("Rule RegExp must not be global or sticky");var r=k(e)?function(t){return e.replace(/\$(\$|\d{1,2})/,(function(e,r){return t["$"===r?0:Number(r)]}))}:e,n={regexp:t,type:"REGEXP"};return B(new ur((function(e){return t.exec(e.path)}),r),n)},t.isUrlRule=function(t){return t&&["type","match","handler"].every((function(e){return R(t[e])}))},t}(),ur=function(t,e){var r=this;this.match=t,this.type="RAW",this.matchPriority=function(t){return 0-r.$id},this.handler=e||z};var sr,cr=function(){function t(t){var e=this;this.router=t,this.sync=function(t){return e.router.urlService.sync(t)},this.listen=function(t){return e.router.urlService.listen(t)},this.deferIntercept=function(t){return e.router.urlService.deferIntercept(t)},this.match=function(t){return e.router.urlService.match(t)},this.initial=function(t){return e.router.urlService.rules.initial(t)},this.otherwise=function(t){return e.router.urlService.rules.otherwise(t)},this.removeRule=function(t){return e.router.urlService.rules.removeRule(t)},this.rule=function(t){return e.router.urlService.rules.rule(t)},this.rules=function(){return e.router.urlService.rules.rules()},this.sort=function(t){return e.router.urlService.rules.sort(t)},this.when=function(t,r,n){return e.router.urlService.rules.when(t,r,n)},this.urlRuleFactory=new ar(t)}return t.prototype.update=function(t){var e=this.router.locationService;t?this.location=e.url():e.url()!==this.location&&e.url(this.location,!0)},t.prototype.push=function(t,e,r){var n=r&&!!r.replace;this.router.urlService.url(t.format(e||{}),n)},t.prototype.href=function(t,e,r){var n=t.format(e);if(null==n)return null;r=r||{absolute:!1};var i=this.router.urlService.config,o=i.html5Mode();if(o||null===n||(n="#"+i.hashPrefix()+n),n=function(t,e,r,n){return"/"===n?t:e?Wt(n)+t:r?n.slice(1)+t:t}(n,o,r.absolute,i.baseHref()),!r.absolute||!n)return n;var a=!o&&n?"/":"",u=i.port(),s=80===u||443===u?"":":"+u;return[i.protocol(),"://",i.host(),s,a,n].join("")},Object.defineProperty(t.prototype,"interceptDeferred",{get:function(){return this.router.urlService.interceptDeferred},enumerable:!1,configurable:!0}),t}(),fr=function(){function t(t){var e=this;this.router=t,this._uiViews=[],this._viewConfigs=[],this._viewConfigFactories={},this._listeners=[],this._pluginapi={_rootViewContext:this._rootViewContext.bind(this),_viewConfigFactory:this._viewConfigFactory.bind(this),_registeredUIView:function(t){return ft(e._uiViews,(function(r){return e.router.$id+"."+r.id===t}))},_registeredUIViews:function(){return e._uiViews},_activeViewConfigs:function(){return e._viewConfigs},_onSync:function(t){return e._listeners.push(t),function(){return Z(e._listeners,t)}}}}return t.normalizeUIViewTarget=function(t,e){void 0===e&&(e="");var r=e.split("@"),n=r[0]||"$default",i=k(r[1])?r[1]:"^",o=/^(\^(?:\.\^)*)\.(.*$)/.exec(n);o&&(i=o[1],n=o[2]),"!"===n.charAt(0)&&(n=n.substr(1),i="");if(/^(\^(?:\.\^)*)$/.exec(i)){var a=i.split(".").reduce((function(t,e){return t.parent}),t);i=a.name}else"."===i&&(i=t.name);return{uiViewName:n,uiViewContextAnchor:i}},t.prototype._rootViewContext=function(t){return this._rootContext=t||this._rootContext},t.prototype._viewConfigFactory=function(t,e){this._viewConfigFactories[t]=e},t.prototype.createViewConfig=function(t,e){var r=this._viewConfigFactories[e.$type];if(!r)throw new Error("ViewService: No view config factory registered for type "+e.$type);var n=r(t,e);return x(n)?n:[n]},t.prototype.deactivateViewConfig=function(t){ce.traceViewServiceEvent("<- Removing",t),Z(this._viewConfigs,t)},t.prototype.activateViewConfig=function(t){ce.traceViewServiceEvent("-> Registering",t),this._viewConfigs.push(t)},t.prototype.sync=function(){var e=this,r=this._uiViews.map((function(t){return[t.fqn,t]})).reduce(Pt,{});function n(t){for(var e=t.viewDecl.$context,r=0;++r&&e.parent;)e=e.parent;return r}var i=o((function(t,e,r,n){return e*(t(r)-t(n))})),a=this._uiViews.sort(i((function(t){var e=function(t){return t&&t.parent?e(t.parent)+1:1};return 1e4*t.fqn.split(".").length+e(t.creationContext)}),1)).map((function(o){var a=e._viewConfigs.filter(t.matches(r,o));return a.length>1&&a.sort(i(n,-1)),{uiView:o,viewConfig:a[0]}})),u=a.map((function(t){return t.viewConfig})),s=this._viewConfigs.filter((function(t){return!K(u,t)})).map((function(t){return{uiView:void 0,viewConfig:t}}));a.forEach((function(t){-1!==e._uiViews.indexOf(t.uiView)&&t.uiView.configUpdated(t.viewConfig)}));var c=a.concat(s);this._listeners.forEach((function(t){return t(c)})),ce.traceViewSync(c)},t.prototype.registerUIView=function(t){ce.traceViewServiceUIViewEvent("-> Registering",t);var e=this._uiViews;return e.filter((function(e){return e.fqn===t.fqn&&e.$type===t.$type})).length&&ce.traceViewServiceUIViewEvent("!!!! duplicate uiView named:",t),e.push(t),this.sync(),function(){-1!==e.indexOf(t)?(ce.traceViewServiceUIViewEvent("<- Deregistering",t),Z(e)(t)):ce.traceViewServiceUIViewEvent("Tried removing non-registered uiView",t)}},t.prototype.available=function(){return this._uiViews.map(s("fqn"))},t.prototype.active=function(){return this._uiViews.filter(s("$config")).map(s("name"))},t.matches=function(t,e){return function(r){if(e.$type!==r.viewDecl.$type)return!1;var n=r.viewDecl,i=n.$uiViewName.split("."),o=e.fqn.split(".");if(!G(i,o.slice(0-i.length)))return!1;var a=1-i.length||void 0,u=o.slice(0,a).join("."),s=t[u].creationContext;return n.$uiViewContextAnchor===(s&&s.name)}},t}(),lr=function(){function t(){this.params=new ye,this.lastStartedTransitionId=-1,this.transitionHistory=new At([],1),this.successfulTransitions=new At([],1)}return t.prototype.dispose=function(){this.transitionHistory.clear(),this.successfulTransitions.clear(),this.transition=null},t}();function hr(t){if(!(P(t)||k(t)||m(_e)(t)||_e.isDef(t)))throw new Error("'handler' must be a string, function, TargetState, or have a state: 'newtarget' property");return P(t)?t:y(t)}sr=function(t,e){var r=function(t,e){return(e.priority||0)-(t.priority||0)}(t,e);return 0!==r||0!==(r=function(t,e){var r={STATE:4,URLMATCHER:4,REGEXP:3,RAW:2,OTHER:1};return(r[t.type]||0)-(r[e.type]||0)}(t,e))||0!==(r=function(t,e){return t.urlMatcher&&e.urlMatcher?rr.compare(t.urlMatcher,e.urlMatcher):0}(t,e))?r:function(t,e){var r={STATE:!0,URLMATCHER:!0};return r[t.type]&&r[e.type]?0:(t.$id||0)-(e.$id||0)}(t,e)};var pr=function(){function t(t){this.router=t,this._sortFn=sr,this._rules=[],this._id=0,this.urlRuleFactory=new ar(t)}return t.prototype.dispose=function(t){this._rules=[],delete this._otherwiseFn},t.prototype.initial=function(t){var e=hr(t);this.rule(this.urlRuleFactory.create((function(t,e){return 0===e.globals.transitionHistory.size()&&!!/^\/?$/.exec(t.path)}),e))},t.prototype.otherwise=function(t){var e=hr(t);this._otherwiseFn=this.urlRuleFactory.create(y(!0),e),this._sorted=!1},t.prototype.removeRule=function(t){Z(this._rules,t)},t.prototype.rule=function(t){var e=this;if(!ar.isUrlRule(t))throw new Error("invalid rule");return t.$id=this._id++,t.priority=t.priority||0,this._rules.push(t),this._sorted=!1,function(){return e.removeRule(t)}},t.prototype.rules=function(){return this.ensureSorted(),this._rules.concat(this._otherwiseFn?[this._otherwiseFn]:[])},t.prototype.sort=function(t){for(var e=this.stableSort(this._rules,this._sortFn=t||this._sortFn),r=0,n=0;n<e.length;n++)e[n]._group=r,n<e.length-1&&0!==this._sortFn(e[n],e[n+1])&&r++;this._rules=e,this._sorted=!0},t.prototype.ensureSorted=function(){this._sorted||this.sort()},t.prototype.stableSort=function(t,e){var r=t.map((function(t,e){return{elem:t,idx:e}}));return r.sort((function(t,r){var n=e(t.elem,r.elem);return 0===n?t.idx-r.idx:n})),r.map((function(t){return t.elem}))},t.prototype.when=function(t,e,r){var n=this.urlRuleFactory.create(t,e);return R(r&&r.priority)&&(n.priority=r.priority),this.rule(n),n},t}(),vr=function(){function t(t){var e=this;this.router=t,this.paramTypes=new ge,this._decodeParams=!0,this._isCaseInsensitive=!1,this._isStrictMode=!0,this._defaultSquashPolicy=!1,this.dispose=function(){return e.paramTypes.dispose()},this.baseHref=function(){return e.router.locationConfig.baseHref()},this.hashPrefix=function(t){return e.router.locationConfig.hashPrefix(t)},this.host=function(){return e.router.locationConfig.host()},this.html5Mode=function(){return e.router.locationConfig.html5Mode()},this.port=function(){return e.router.locationConfig.port()},this.protocol=function(){return e.router.locationConfig.protocol()}}return t.prototype.caseInsensitive=function(t){return this._isCaseInsensitive=R(t)?t:this._isCaseInsensitive},t.prototype.defaultSquashPolicy=function(t){if(R(t)&&!0!==t&&!1!==t&&!k(t))throw new Error("Invalid squash policy: "+t+". Valid policies: false, true, arbitrary-string");return this._defaultSquashPolicy=R(t)?t:this._defaultSquashPolicy},t.prototype.strictMode=function(t){return this._isStrictMode=R(t)?t:this._isStrictMode},t.prototype.type=function(t,e,r){var n=this.paramTypes.type(t,e,r);return R(e)?this:n},t}(),dr=function(){function t(t){var e=this;this.router=t,this.interceptDeferred=!1,this.rules=new pr(this.router),this.config=new vr(this.router),this.url=function(t,r,n){return e.router.locationService.url(t,r,n)},this.path=function(){return e.router.locationService.path()},this.search=function(){return e.router.locationService.search()},this.hash=function(){return e.router.locationService.hash()},this.onChange=function(t){return e.router.locationService.onChange(t)}}return t.prototype.dispose=function(){this.listen(!1),this.rules.dispose()},t.prototype.parts=function(){return{path:this.path(),search:this.search(),hash:this.hash()}},t.prototype.sync=function(t){if(!t||!t.defaultPrevented){var e=this.router,r=e.urlService,n=e.stateService,i={path:r.path(),search:r.search(),hash:r.hash()},o=this.match(i);_([[k,function(t){return r.url(t,!0)}],[_e.isDef,function(t){return n.go(t.state,t.params,t.options)}],[m(_e),function(t){return n.go(t.state(),t.params(),t.options())}]])(o&&o.rule.handler(o.match,i,this.router))}},t.prototype.listen=function(t){var e=this;if(!1!==t)return this._stopListeningFn=this._stopListeningFn||this.router.urlService.onChange((function(t){return e.sync(t)}));this._stopListeningFn&&this._stopListeningFn(),delete this._stopListeningFn},t.prototype.deferIntercept=function(t){void 0===t&&(t=!0),this.interceptDeferred=t},t.prototype.match=function(t){var e=this;t=B({path:"",search:{},hash:""},t);for(var r,n,i,o=this.rules.rules(),a=0;a<o.length&&(!r||r.rule._group===o[a]._group);a++){var u=(n=o[a],i=void 0,(i=n.match(t,e.router))&&{match:i,rule:n,weight:n.matchPriority(i)});r=!r||u&&u.weight>r.weight?u:r}return r},t}(),mr=0,gr=A("LocationServices",["url","path","search","hash","onChange"]),yr=A("LocationConfig",["port","protocol","host","baseHref","html5Mode","hashPrefix"]),wr=function(){function t(t,e){void 0===t&&(t=gr),void 0===e&&(e=yr),this.locationService=t,this.locationConfig=e,this.$id=mr++,this._disposed=!1,this._disposables=[],this.trace=ce,this.viewService=new fr(this),this.globals=new lr,this.transitionService=new Fr(this),this.urlMatcherFactory=new or(this),this.urlRouter=new cr(this),this.urlService=new dr(this),this.stateRegistry=new Be(this),this.stateService=new Lr(this),this._plugins={},this.viewService._pluginapi._rootViewContext(this.stateRegistry.root()),this.globals.$current=this.stateRegistry.root(),this.globals.current=this.globals.$current.self,this.disposable(this.globals),this.disposable(this.stateService),this.disposable(this.stateRegistry),this.disposable(this.transitionService),this.disposable(this.urlService),this.disposable(t),this.disposable(e)}return t.prototype.disposable=function(t){this._disposables.push(t)},t.prototype.dispose=function(t){var e=this;t&&P(t.dispose)?t.dispose(this):(this._disposed=!0,this._disposables.slice().forEach((function(t){try{"function"==typeof t.dispose&&t.dispose(e),Z(e._disposables,t)}catch(t){}})))},t.prototype.plugin=function(t,e){void 0===e&&(e={});var r=new t(this,e);if(!r.name)throw new Error("Required property `name` missing on plugin: "+r);return this._disposables.push(r),this._plugins[r.name]=r},t.prototype.getPlugin=function(t){return t?this._plugins[t]:pt(this._plugins)},t}();function _r(t){t.addResolvable(Re.fromData(wr,t.router),""),t.addResolvable(Re.fromData(Ze,t),""),t.addResolvable(Re.fromData("$transition$",t),""),t.addResolvable(Re.fromData("$stateParams",t.params()),""),t.entering().forEach((function(e){t.addResolvable(Re.fromData("$state$",e),e)}))}var Sr=K(["$transition$",Ze]),$r=function(t){var e=pt(t.treeChanges()).reduce(mt,[]).reduce(wt,[]),r=function(t){return Sr(t.token)?Re.fromData(t.token,null):t};e.forEach((function(t){t.resolvables=t.resolvables.map(r)}))},br=function(t){var e=t.to().redirectTo;if(e){var r=t.router.stateService;return P(e)?D.$q.when(e(t)).then(n):n(e)}function n(e){if(e)return e instanceof _e?e:k(e)?r.target(e,t.params(),t.options()):e.state||e.params?r.target(e.state||t.to(),e.params||t.params(),t.options()):void 0}};function Rr(t){return function(e,r){return(0,r.$$state()[t])(e,r)}}var Er=Rr("onExit"),Cr=Rr("onRetain"),Pr=Rr("onEnter"),Tr=function(t){return new Te(t.treeChanges().to).resolvePath("EAGER",t).then(W)},kr=function(t,e){return new Te(t.treeChanges().to).subContext(e.$$state()).resolvePath("LAZY",t).then(W)},Or=function(t){return new Te(t.treeChanges().to).resolvePath("LAZY",t).then(W)},xr=function(t){var e=D.$q,r=t.views("entering");if(r.length)return e.all(r.map((function(t){return e.when(t.load())}))).then(W)},jr=function(t){var e=t.views("entering"),r=t.views("exiting");if(e.length||r.length){var n=t.router.viewService;r.forEach((function(t){return n.deactivateViewConfig(t)})),e.forEach((function(t){return n.activateViewConfig(t)})),n.sync()}},Vr=function(t){var e=t.router.globals,r=function(){e.transition===t&&(e.transition=null)};t.onSuccess({},(function(){e.successfulTransitions.enqueue(t),e.$current=t.$to(),e.current=e.$current.self,kt(t.params(),e.params)}),{priority:1e4}),t.promise.then(r,r)},Ir=function(t){var e=t.options(),r=t.router.stateService,n=t.router.urlRouter;if("url"!==e.source&&e.location&&r.$current.navigable){var i={replace:"replace"===e.location};n.push(r.$current.navigable.url,r.params,i)}n.update(!0)},Hr=function(t){var e=t.router;var r=t.entering().filter((function(t){return!!t.$$state().lazyLoad})).map((function(e){return Ar(t,e)}));return D.$q.all(r).then((function(){if("url"!==t.originalTransition().options().source){var r=t.targetState();return e.stateService.target(r.identifier(),r.params(),r.options())}var n=e.urlService,i=n.match(n.parts()),o=i&&i.rule;if(o&&"STATE"===o.type){var a=o.state,u=i.match;return e.stateService.target(a,u,t.options())}e.urlService.sync()}))};function Ar(t,e){var r=e.$$state().lazyLoad,n=r._promise;if(!n){n=r._promise=D.$q.when(r(t,e)).then((function(e){e&&Array.isArray(e.states)&&e.states.forEach((function(e){return t.router.stateRegistry.register(e)}));return e})).then((function(t){return delete e.lazyLoad,delete e.$$state().lazyLoad,delete r._promise,t}),(function(t){return delete r._promise,D.$q.reject(t)}))}return n}var Dr=function(t,e,r,n,i,o,a,u){void 0===i&&(i=!1),void 0===o&&(o=ze.HANDLE_RESULT),void 0===a&&(a=ze.REJECT_ERROR),void 0===u&&(u=!1),this.name=t,this.hookPhase=e,this.hookOrder=r,this.criteriaMatchPath=n,this.reverseSort=i,this.getResultHandler=o,this.getErrorHandler=a,this.synchronous=u};function qr(t){var e=t._ignoredReason();if(e){ce.traceTransitionIgnored(t);var r=t.router.globals.transition;return"SameAsCurrent"===e&&r&&r.abort(),qt.ignored().toPromise()}}function Ur(t){if(!t.valid())throw new Error(t.error().toString())}var Nr={location:!0,relative:null,inherit:!1,notify:!0,reload:!1,supercede:!0,custom:{},current:function(){return null},source:"unknown"},Fr=function(){function e(t){this._transitionCount=0,this._eventTypes=[],this._registeredHooks={},this._criteriaPaths={},this._router=t,this.$view=t.viewService,this._deregisterHookFns={},this._pluginapi=J(y(this),{},y(this),["_definePathType","_defineEvent","_getPathTypes","_getEvents","getHooks"]),this._defineCorePaths(),this._defineCoreEvents(),this._registerCoreTransitionHooks(),t.globals.successfulTransitions.onEvict($r)}return e.prototype.onCreate=function(t,e,r){},e.prototype.onBefore=function(t,e,r){},e.prototype.onStart=function(t,e,r){},e.prototype.onExit=function(t,e,r){},e.prototype.onRetain=function(t,e,r){},e.prototype.onEnter=function(t,e,r){},e.prototype.onFinish=function(t,e,r){},e.prototype.onSuccess=function(t,e,r){},e.prototype.onError=function(t,e,r){},e.prototype.dispose=function(t){pt(this._registeredHooks).forEach((function(t){return t.forEach((function(e){e._deregistered=!0,Z(t,e)}))}))},e.prototype.create=function(t,e){return new Ze(t,e,this._router)},e.prototype._defineCoreEvents=function(){var e=t.TransitionHookPhase,r=ze,n=this._criteriaPaths;this._defineEvent("onCreate",e.CREATE,0,n.to,!1,r.LOG_REJECTED_RESULT,r.THROW_ERROR,!0),this._defineEvent("onBefore",e.BEFORE,0,n.to),this._defineEvent("onStart",e.RUN,0,n.to),this._defineEvent("onExit",e.RUN,100,n.exiting,!0),this._defineEvent("onRetain",e.RUN,200,n.retained),this._defineEvent("onEnter",e.RUN,300,n.entering),this._defineEvent("onFinish",e.RUN,400,n.to),this._defineEvent("onSuccess",e.SUCCESS,0,n.to,!1,r.LOG_REJECTED_RESULT,r.LOG_ERROR,!0),this._defineEvent("onError",e.ERROR,0,n.to,!1,r.LOG_REJECTED_RESULT,r.LOG_ERROR,!0)},e.prototype._defineCorePaths=function(){var e=t.TransitionHookScope.STATE,r=t.TransitionHookScope.TRANSITION;this._definePathType("to",r),this._definePathType("from",r),this._definePathType("exiting",e),this._definePathType("retained",e),this._definePathType("entering",e)},e.prototype._defineEvent=function(t,e,r,n,i,o,a,u){void 0===i&&(i=!1),void 0===o&&(o=ze.HANDLE_RESULT),void 0===a&&(a=ze.REJECT_ERROR),void 0===u&&(u=!1);var s=new Dr(t,e,r,n,i,o,a,u);this._eventTypes.push(s),Qe(this,this,s)},e.prototype._getEvents=function(t){return(R(t)?this._eventTypes.filter((function(e){return e.hookPhase===t})):this._eventTypes.slice()).sort((function(t,e){var r=t.hookPhase-e.hookPhase;return 0===r?t.hookOrder-e.hookOrder:r}))},e.prototype._definePathType=function(t,e){this._criteriaPaths[t]={name:t,scope:e}},e.prototype._getPathTypes=function(){return this._criteriaPaths},e.prototype.getHooks=function(t){return this._registeredHooks[t]},e.prototype._registerCoreTransitionHooks=function(){var t=this._deregisterHookFns;t.addCoreResolves=this.onCreate({},_r),t.ignored=function(t){return t.onBefore({},qr,{priority:-9999})}(this),t.invalid=function(t){return t.onBefore({},Ur,{priority:-1e4})}(this),t.redirectTo=function(t){return t.onStart({to:function(t){return!!t.redirectTo}},br)}(this),t.onExit=function(t){return t.onExit({exiting:function(t){return!!t.onExit}},Er)}(this),t.onRetain=function(t){return t.onRetain({retained:function(t){return!!t.onRetain}},Cr)}(this),t.onEnter=function(t){return t.onEnter({entering:function(t){return!!t.onEnter}},Pr)}(this),t.eagerResolve=function(t){return t.onStart({},Tr,{priority:1e3})}(this),t.lazyResolve=function(t){return t.onEnter({entering:y(!0)},kr,{priority:1e3})}(this),t.resolveAll=function(t){return t.onFinish({},Or,{priority:1e3})}(this),t.loadViews=function(t){return t.onFinish({},xr)}(this),t.activateViews=function(t){return t.onSuccess({},jr)}(this),t.updateGlobals=function(t){return t.onCreate({},Vr)}(this),t.updateUrl=function(t){return t.onSuccess({},Ir,{priority:9999})}(this),t.lazyLoad=function(t){return t.onBefore({entering:function(t){return!!t.lazyLoad}},Hr)}(this)},e}(),Lr=function(){function e(t){this.router=t,this.invalidCallbacks=[],this._defaultErrorHandler=function(t){t instanceof Error&&t.stack?(console.error(t),console.error(t.stack)):t instanceof qt?(console.error(t.toString()),t.detail&&t.detail.stack&&console.error(t.detail.stack)):console.error(t)};var r=Object.keys(e.prototype).filter(l(K(["current","$current","params","transition"])));J(y(e.prototype),this,y(this),r)}return Object.defineProperty(e.prototype,"transition",{get:function(){return this.router.globals.transition},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"params",{get:function(){return this.router.globals.params},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"current",{get:function(){return this.router.globals.current},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"$current",{get:function(){return this.router.globals.$current},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this.defaultErrorHandler(W),this.invalidCallbacks=[]},e.prototype._handleInvalidTargetState=function(t,e){var r=this,n=Se.makeTargetState(this.router.stateRegistry,t),i=this.router.globals,o=function(){return i.transitionHistory.peekTail()},a=o(),u=new At(this.invalidCallbacks.slice()),s=new Te(t).injector(),c=function(t){if(t instanceof _e){var e=t;return(e=r.target(e.identifier(),e.params(),e.options())).valid()?o()!==a?qt.superseded().toPromise():r.transitionTo(e.identifier(),e.params(),e.options()):qt.invalid(e.error()).toPromise()}};return function t(){var r=u.dequeue();return void 0===r?qt.invalid(e.error()).toPromise():D.$q.when(r(e,n,s)).then(c).then((function(e){return e||t()}))}()},e.prototype.onInvalid=function(t){return this.invalidCallbacks.push(t),function(){Z(this.invalidCallbacks)(t)}.bind(this)},e.prototype.reload=function(t){return this.transitionTo(this.current,this.params,{reload:!R(t)||t,inherit:!1,notify:!1})},e.prototype.go=function(t,e,r){var n=nt(r,{relative:this.$current,inherit:!0},Nr);return this.transitionTo(t,e,n)},e.prototype.target=function(t,e,r){if(void 0===r&&(r={}),O(r.reload)&&!r.reload.name)throw new Error("Invalid reload state object");var n=this.router.stateRegistry;if(r.reloadState=!0===r.reload?n.root():n.matcher.find(r.reload,r.relative),r.reload&&!r.reloadState)throw new Error("No such reload state '"+(k(r.reload)?r.reload:r.reload.name)+"'");return new _e(this.router.stateRegistry,t,e,r)},e.prototype.getCurrentPath=function(){var t=this,e=this.router.globals.successfulTransitions.peekTail();return e?e.treeChanges().to:[new we(t.router.stateRegistry.root())]},e.prototype.transitionTo=function(e,r,n){var i=this;void 0===r&&(r={}),void 0===n&&(n={});var o=this.router,a=o.globals;n=nt(n,Nr);var u=function(){return a.transition};n=B(n,{current:u});var s=this.target(e,r,n),c=this.getCurrentPath();if(!s.exists())return this._handleInvalidTargetState(c,s);if(!s.valid())return It(s.error());if(!1===n.supercede&&u())return qt.ignored("Another transition is in progress and supercede has been set to false in TransitionOptions for the transition. So the transition was ignored in favour of the existing one in progress.").toPromise();var f=function(e){return function(r){if(r instanceof qt){var n=o.globals.lastStartedTransitionId<=e.$id;if(r.type===t.RejectType.IGNORED)return n&&o.urlRouter.update(),D.$q.when(a.current);var u=r.detail;if(r.type===t.RejectType.SUPERSEDED&&r.redirected&&u instanceof _e){var s=e.redirect(u);return s.run().catch(f(s))}if(r.type===t.RejectType.ABORTED)return n&&o.urlRouter.update(),D.$q.reject(r)}return i.defaultErrorHandler()(r),D.$q.reject(r)}},l=this.router.transitionService.create(c,s),h=l.run().catch(f(l));return Vt(h),B(h,{transition:l})},e.prototype.is=function(t,e,r){r=nt(r,{relative:this.$current});var n=this.router.stateRegistry.matcher.find(t,r.relative);if(R(n)){if(this.$current!==n)return!1;if(!e)return!0;var i=n.parameters({inherit:!0,matchingKeys:e});return me.equals(i,me.values(i,e),this.params)}},e.prototype.includes=function(t,e,r){r=nt(r,{relative:this.$current});var n=k(t)&&Ht.fromString(t);if(n){if(!n.matches(this.$current.name))return!1;t=this.$current.name}var i=this.router.stateRegistry.matcher.find(t,r.relative),o=this.$current.includes;if(R(i)){if(!R(o[i.name]))return!1;if(!e)return!0;var a=i.parameters({inherit:!0,matchingKeys:e});return me.equals(a,me.values(a,e),this.params)}},e.prototype.href=function(t,e,r){r=nt(r,{lossy:!0,inherit:!0,absolute:!1,relative:this.$current}),e=e||{};var n=this.router.stateRegistry.matcher.find(t,r.relative);if(!R(n))return null;r.inherit&&(e=this.params.$inherit(e,this.$current,n));var i=n&&r.lossy?n.navigable:n;return i&&void 0!==i.url&&null!==i.url?this.router.urlRouter.href(i.url,e,{absolute:r.absolute}):null},e.prototype.defaultErrorHandler=function(t){return this._defaultErrorHandler=t||this._defaultErrorHandler},e.prototype.get=function(t,e){var r=this.router.stateRegistry;return 0===arguments.length?r.get():r.get(t,e||this.$current)},e.prototype.lazyLoad=function(t,e){var r=this.get(t);if(!r||!r.lazyLoad)throw new Error("Can not lazy load "+t);var n=this.getCurrentPath(),i=Se.makeTargetState(this.router.stateRegistry,n);return Ar(e=e||this.router.transitionService.create(n,i),r)},e}(),Mr={when:function(t){return new Promise((function(e,r){return e(t)}))},reject:function(t){return new Promise((function(e,r){r(t)}))},defer:function(){var t={};return t.promise=new Promise((function(e,r){t.resolve=e,t.reject=r})),t},all:function(t){if(x(t))return Promise.all(t);if(O(t)){var e=Object.keys(t).map((function(e){return t[e].then((function(t){return{key:e,val:t}}))}));return Mr.all(e).then((function(t){return t.reduce((function(t,e){return t[e.key]=e.val,t}),{})}))}}},Br={},Gr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,zr=/([^\s,]+)/g,Wr={get:function(t){return Br[t]},has:function(t){return null!=Wr.get(t)},invoke:function(t,e,r){var n=B({},Br,r||{}),i=Wr.annotate(t),o=$t((function(t){return n.hasOwnProperty(t)}),(function(t){return"DI can't find injectable: '"+t+"'"})),a=i.filter(o).map((function(t){return n[t]}));return P(t)?t.apply(e,a):t.slice(-1)[0].apply(e,a)},annotate:function(t){if(!I(t))throw new Error("Not an injectable function: "+t);if(t&&t.$inject)return t.$inject;if(x(t))return t.slice(0,-1);var e=t.toString().replace(Gr,"");return e.slice(e.indexOf("(")+1,e.indexOf(")")).match(zr)||[]}},Jr=function(t,e){var r=e[0],n=e[1];return t.hasOwnProperty(r)?x(t[r])?t[r].push(n):t[r]=[t[r],n]:t[r]=n,t},Qr=function(t){return t.split("&").filter(z).map(Kt).reduce(Jr,{})};function Kr(t){var e=function(t){return t||""},r=Jt(t).map(e),n=r[0],i=r[1],o=Qt(n).map(e);return{path:o[0],search:o[1],hash:i,url:t}}var Yr=function(t){var e=t.path(),r=t.search(),n=t.hash(),i=Object.keys(r).map((function(t){var e=r[t];return(x(e)?e:[e]).map((function(e){return t+"="+e}))})).reduce(mt,[]).join("&");return e+(i?"?"+i:"")+(n?"#"+n:"")};function Zr(t,e,r,n){return function(i){var o=i.locationService=new r(i),a=i.locationConfig=new n(i,e);return{name:t,service:o,configuration:a,dispose:function(t){t.dispose(o),t.dispose(a)}}}}var Xr,tn=function(){function t(t,e){var r=this;this.fireAfterUpdate=e,this._listeners=[],this._listener=function(t){return r._listeners.forEach((function(e){return e(t)}))},this.hash=function(){return Kr(r._get()).hash},this.path=function(){return Kr(r._get()).path},this.search=function(){return Qr(Kr(r._get()).search)},this._location=U.location,this._history=U.history}return t.prototype.url=function(t,e){return void 0===e&&(e=!0),R(t)&&t!==this._get()&&(this._set(null,null,t,e),this.fireAfterUpdate&&this._listeners.forEach((function(e){return e({url:t})}))),Yr(this)},t.prototype.onChange=function(t){var e=this;return this._listeners.push(t),function(){return Z(e._listeners,t)}},t.prototype.dispose=function(t){rt(this._listeners)},t}(),en=(Xr=function(t,e){return(Xr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}Xr(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),rn=function(t){function e(e){var r=t.call(this,e,!1)||this;return U.addEventListener("hashchange",r._listener,!1),r}return en(e,t),e.prototype._get=function(){return Yt(this._location.hash)},e.prototype._set=function(t,e,r,n){this._location.hash=r},e.prototype.dispose=function(e){t.prototype.dispose.call(this,e),U.removeEventListener("hashchange",this._listener)},e}(tn),nn=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),on=function(t){function e(e){return t.call(this,e,!0)||this}return nn(e,t),e.prototype._get=function(){return this._url},e.prototype._set=function(t,e,r,n){this._url=r},e}(tn),an=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),un=function(t){function e(e){var r=t.call(this,e,!0)||this;return r._config=e.urlService.config,U.addEventListener("popstate",r._listener,!1),r}return an(e,t),e.prototype._getBasePrefix=function(){return Wt(this._config.baseHref())},e.prototype._get=function(){var t=this._location,e=t.pathname,r=t.hash,n=t.search;n=Qt(n)[1],r=Jt(r)[1];var i=this._getBasePrefix(),o=e===this._config.baseHref(),a=e.substr(0,i.length)===i;return(e=o?"/":a?e.substring(i.length):e)+(n?"?"+n:"")+(r?"#"+r:"")},e.prototype._set=function(t,e,r,n){var i=this._getBasePrefix(),o=r&&"/"!==r[0]?"/":"",a=""===r||"/"===r?this._config.baseHref():i+o+r;n?this._history.replaceState(t,e,a):this._history.pushState(t,e,a)},e.prototype.dispose=function(e){t.prototype.dispose.call(this,e),U.removeEventListener("popstate",this._listener)},e}(tn),sn=function(){var t=this;this.dispose=W,this._baseHref="",this._port=80,this._protocol="http",this._host="localhost",this._hashPrefix="",this.port=function(){return t._port},this.protocol=function(){return t._protocol},this.host=function(){return t._host},this.baseHref=function(){return t._baseHref},this.html5Mode=function(){return!1},this.hashPrefix=function(e){return R(e)?t._hashPrefix=e:t._hashPrefix}},cn=function(){function t(t,e){void 0===e&&(e=!1),this._isHtml5=e,this._baseHref=void 0,this._hashPrefix=""}return t.prototype.port=function(){return location.port?Number(location.port):"https"===this.protocol()?443:80},t.prototype.protocol=function(){return location.protocol.replace(/:/g,"")},t.prototype.host=function(){return location.hostname},t.prototype.html5Mode=function(){return this._isHtml5},t.prototype.hashPrefix=function(t){return R(t)?this._hashPrefix=t:this._hashPrefix},t.prototype.baseHref=function(t){return R(t)&&(this._baseHref=t),b(this._baseHref)&&(this._baseHref=this.getBaseHref()),this._baseHref},t.prototype.getBaseHref=function(){var t=document.getElementsByTagName("base")[0];return t&&t.href?t.href.replace(/^([^/:]*:)?\/\/[^/]*/,""):this._isHtml5?"/":location.pathname||"/"},t.prototype.dispose=function(){},t}();function fn(t){return D.$injector=Wr,D.$q=Mr,{name:"vanilla.services",$q:Mr,$injector:Wr,dispose:function(){return null}}}var ln=Zr("vanilla.hashBangLocation",!1,rn,cn),hn=Zr("vanilla.pushStateLocation",!0,un,cn),pn=Zr("vanilla.memoryLocation",!1,on,sn),vn=function(){function t(){}return t.prototype.dispose=function(t){},t}(),dn=Object.freeze({__proto__:null,root:U,fromJson:F,toJson:L,forEach:M,extend:B,equals:G,identity:z,noop:W,createProxyFunctions:J,inherit:Q,inArray:K,_inArray:Y,removeFrom:Z,_removeFrom:X,pushTo:tt,_pushTo:et,deregAll:rt,defaults:nt,mergeR:it,ancestors:ot,pick:at,omit:ut,pluck:st,filter:ct,find:ft,mapObj:lt,map:ht,values:pt,allTrueR:vt,anyTrueR:dt,unnestR:mt,flattenR:gt,pushR:yt,uniqR:wt,unnest:_t,flatten:St,assertPredicate:$t,assertMap:bt,assertFn:Rt,pairs:Et,arrayTuples:Ct,applyPairs:Pt,tail:Tt,copy:kt,_extend:Ot,silenceUncaughtInPromise:Vt,silentRejection:It,makeStub:A,services:D,Glob:Ht,curry:o,compose:a,pipe:u,prop:s,propEq:c,parse:f,not:l,and:h,or:p,all:v,any:d,is:m,eq:g,val:y,invoke:w,pattern:_,isUndefined:b,isDefined:R,isNull:E,isNullOrUndefined:C,isFunction:P,isNumber:T,isString:k,isObject:O,isArray:x,isDate:j,isRegExp:V,isInjectable:I,isPromise:H,Queue:At,maxLength:Ut,padString:Nt,kebobString:Ft,functionToString:Lt,fnToString:Mt,stringify:Bt,beforeAfterSubstr:Gt,hostRegex:zt,stripLastPathElement:Wt,splitHash:Jt,splitQuery:Qt,splitEqual:Kt,trimHashVal:Yt,splitOnDelim:Zt,joinNeighborsR:Xt,get Category(){return t.Category},Trace:se,trace:ce,get DefType(){return t.DefType},Param:me,ParamTypes:ge,StateParams:ye,ParamType:fe,PathNode:we,PathUtils:Se,resolvePolicies:$e,defaultResolvePolicy:be,Resolvable:Re,NATIVE_INJECTOR_TOKEN:"Native Injector",ResolveContext:Te,resolvablesBuilder:De,StateBuilder:Ne,StateObject:Fe,StateMatcher:Le,StateQueueManager:Me,StateRegistry:Be,StateService:Lr,TargetState:_e,get TransitionHookPhase(){return t.TransitionHookPhase},get TransitionHookScope(){return t.TransitionHookScope},HookBuilder:Ke,matchState:We,RegisteredHook:Je,makeEvent:Qe,get RejectType(){return t.RejectType},Rejection:qt,Transition:Ze,TransitionHook:ze,TransitionEventType:Dr,defaultTransOpts:Nr,TransitionService:Fr,UrlRules:pr,UrlConfig:vr,UrlMatcher:rr,ParamFactory:ir,UrlMatcherFactory:or,UrlRouter:cr,UrlRuleFactory:ar,BaseUrlRule:ur,UrlService:dr,ViewService:fr,UIRouterGlobals:lr,UIRouter:wr,$q:Mr,$injector:Wr,BaseLocationServices:tn,HashLocationService:rn,MemoryLocationService:on,PushStateLocationService:un,MemoryLocationConfig:sn,BrowserLocationConfig:cn,keyValsToObjectR:Jr,getParams:Qr,parseUrl:Kr,buildUrl:Yr,locationPluginFactory:Zr,servicesPlugin:fn,hashLocationPlugin:ln,pushStateLocationPlugin:hn,memoryLocationPlugin:pn,UIRouterPluginBase:vn});function mn(){var t=null;return function(e,r){return t=t||D.$injector.get("$templateFactory"),[new _n(e,r,t)]}}var gn=function(t,e){return t.reduce((function(t,r){return t||R(e[r])}),!1)};function yn(t){if(!t.parent)return{};var e=["component","bindings","componentProvider"],r=["templateProvider","templateUrl","template","notify","async"].concat(["controller","controllerProvider","controllerAs","resolveAs"]),n=e.concat(r);if(R(t.views)&&gn(n,t))throw new Error("State '"+t.name+"' has a 'views' object. It cannot also have \"view properties\" at the state level.  Move the following properties into a view (in the 'views' object):  "+n.filter((function(e){return R(t[e])})).join(", "));var i={},o=t.views||{$default:at(t,n)};return M(o,(function(n,o){if(o=o||"$default",k(n)&&(n={component:n}),n=B({},n),gn(e,n)&&gn(r,n))throw new Error("Cannot combine: "+e.join("|")+" with: "+r.join("|")+" in stateview: '"+o+"@"+t.name+"'");n.resolveAs=n.resolveAs||"$resolve",n.$type="ng1",n.$context=t,n.$name=o;var a=fr.normalizeUIViewTarget(n.$context,n.$name);n.$uiViewName=a.uiViewName,n.$uiViewContextAnchor=a.uiViewContextAnchor,i[o]=n})),i}var wn=0,_n=function(){function t(t,e,r){var n=this;this.path=t,this.viewDecl=e,this.factory=r,this.$id=wn++,this.loaded=!1,this.getTemplate=function(t,e){return n.component?n.factory.makeComponentTemplate(t,e,n.component,n.viewDecl.bindings):n.template}}return t.prototype.load=function(){var t=this,e=D.$q,r=new Te(this.path),n=this.path.reduce((function(t,e){return B(t,e.paramValues)}),{}),i={template:e.when(this.factory.fromConfig(this.viewDecl,n,r)),controller:e.when(this.getController(r))};return e.all(i).then((function(e){return ce.traceViewServiceEvent("Loaded",t),t.controller=e.controller,B(t,e.template),t}))},t.prototype.getController=function(t){var e=this.viewDecl.controllerProvider;if(!I(e))return this.viewDecl.controller;var r=D.$injector.annotate(e),n=x(e)?Tt(e):e;return new Re("",n,r).get(t)},t}(),Sn=function(){function t(){var t=this;this._useHttp=n.version.minor<3,this.$get=["$http","$templateCache","$injector",function(e,r,n){return t.$templateRequest=n.has&&n.has("$templateRequest")&&n.get("$templateRequest"),t.$http=e,t.$templateCache=r,t}]}return t.prototype.useHttpService=function(t){this._useHttp=t},t.prototype.fromConfig=function(t,e,r){var n=function(t){return D.$q.when(t).then((function(t){return{template:t}}))},i=function(t){return D.$q.when(t).then((function(t){return{component:t}}))};return R(t.template)?n(this.fromString(t.template,e)):R(t.templateUrl)?n(this.fromUrl(t.templateUrl,e)):R(t.templateProvider)?n(this.fromProvider(t.templateProvider,e,r)):R(t.component)?i(t.component):R(t.componentProvider)?i(this.fromComponentProvider(t.componentProvider,e,r)):n("<ui-view></ui-view>")},t.prototype.fromString=function(t,e){return P(t)?t(e):t},t.prototype.fromUrl=function(t,e){return P(t)&&(t=t(e)),null==t?null:this._useHttp?this.$http.get(t,{cache:this.$templateCache,headers:{Accept:"text/html"}}).then((function(t){return t.data})):this.$templateRequest(t)},t.prototype.fromProvider=function(t,e,r){var n=D.$injector.annotate(t),i=x(t)?Tt(t):t;return new Re("",i,n).get(r)},t.prototype.fromComponentProvider=function(t,e,r){var n=D.$injector.annotate(t),i=x(t)?Tt(t):t;return new Re("",i,n).get(r)},t.prototype.makeComponentTemplate=function(t,e,r,i){i=i||{};var o=n.version.minor>=3?"::":"",a=function(t){var e=Ft(t);return/^(x|data)-/.exec(e)?"x-"+e:e},u=function(t){var e=D.$injector.get(t+"Directive");if(!e||!e.length)throw new Error("Unable to find component named '"+t+"'");return e.map($n).reduce(mt,[])}(r).map((function(r){var n=r.name,u=r.type,s=a(n);if(t.attr(s)&&!i[n])return s+"='"+t.attr(s)+"'";var c=i[n]||n;if("@"===u)return s+"='{{"+o+"$resolve."+c+"}}'";if("&"===u){var f=e.getResolvable(c),l=f&&f.data,h=l&&D.$injector.annotate(l)||[];return s+"='$resolve."+c+(x(l)?"["+(l.length-1)+"]":"")+"("+h.join(",")+")'"}return s+"='"+o+"$resolve."+c+"'"})).join(" "),s=a(r);return"<"+s+" "+u+"></"+s+">"},t}();var $n=function(t){return O(t.bindToController)?bn(t.bindToController):bn(t.scope)},bn=function(t){return Object.keys(t||{}).map((function(e){return[e,/^([=<@&])[?]?(.*)/.exec(t[e])]})).filter((function(t){return R(t)&&x(t[1])})).map((function(t){return{name:t[1][2]||t[0],type:t[1][1]}}))},Rn=function(){function t(e,r){this.stateRegistry=e,this.stateService=r,J(y(t.prototype),this,y(this))}return t.prototype.decorator=function(t,e){return this.stateRegistry.decorator(t,e)||this},t.prototype.state=function(t,e){return O(t)?e=t:e.name=t,this.stateRegistry.register(e),this},t.prototype.onInvalid=function(t){return this.stateService.onInvalid(t)},t}(),En=function(t){return function(e){var r=e[t],n="onExit"===t?"from":"to";return r?function(t,e){var i=new Te(t.treeChanges(n)).subContext(e.$$state()),o=B(Ln(i),{$state$:e,$transition$:t});return D.$injector.invoke(r,this,o)}:void 0}},Cn=function(){function t(t){this._urlListeners=[],this.$locationProvider=t;var e=y(t);J(e,this,e,["hashPrefix"])}return t.monkeyPatchPathParameterType=function(t){var e=t.urlMatcherFactory.type("path");e.encode=function(t){return null!=t?t.toString().replace(/(~|\/)/g,(function(t){return{"~":"~~","/":"~2F"}[t]})):t},e.decode=function(t){return null!=t?t.toString().replace(/(~~|~2F)/g,(function(t){return{"~~":"~","~2F":"/"}[t]})):t}},t.prototype.dispose=function(){},t.prototype.onChange=function(t){var e=this;return this._urlListeners.push(t),function(){return Z(e._urlListeners)(t)}},t.prototype.html5Mode=function(){var t=this.$locationProvider.html5Mode();return(t=O(t)?t.enabled:t)&&this.$sniffer.history},t.prototype.baseHref=function(){return this._baseHref||(this._baseHref=this.$browser.baseHref()||this.$window.location.pathname)},t.prototype.url=function(t,e,r){return void 0===e&&(e=!1),R(t)&&this.$location.url(t),e&&this.$location.replace(),r&&this.$location.state(r),this.$location.url()},t.prototype._runtimeServices=function(t,e,r,n,i){var o=this;this.$location=e,this.$sniffer=r,this.$browser=n,this.$window=i,t.$on("$locationChangeSuccess",(function(t){return o._urlListeners.forEach((function(e){return e(t)}))}));var a=y(e);J(a,this,a,["replace","path","search","hash"]),J(a,this,a,["port","protocol","host"])},t}(),Pn=function(){function t(t){this.router=t}return t.injectableHandler=function(t,e){return function(r){return D.$injector.invoke(e,null,{$match:r,$stateParams:t.globals.params})}},t.prototype.$get=function(){var t=this.router.urlService;return this.router.urlRouter.update(!0),t.interceptDeferred||t.listen(),this.router.urlRouter},t.prototype.rule=function(t){var e=this;if(!P(t))throw new Error("'rule' must be a function");var r=new ur((function(){return t(D.$injector,e.router.locationService)}),z);return this.router.urlService.rules.rule(r),this},t.prototype.otherwise=function(t){var e=this,r=this.router.urlService.rules;if(k(t))r.otherwise(t);else{if(!P(t))throw new Error("'rule' must be a string or function");r.otherwise((function(){return t(D.$injector,e.router.locationService)}))}return this},t.prototype.when=function(e,r){return(x(r)||P(r))&&(r=t.injectableHandler(this.router,r)),this.router.urlService.rules.when(e,r),this},t.prototype.deferIntercept=function(t){this.router.urlService.deferIntercept(t)},t}();n.module("ui.router.angular1",[]);var Tn=n.module("ui.router.init",["ng"]),kn=n.module("ui.router.util",["ui.router.init"]),On=n.module("ui.router.router",["ui.router.util"]),xn=n.module("ui.router.state",["ui.router.router","ui.router.util","ui.router.angular1"]),jn=n.module("ui.router",["ui.router.init","ui.router.state","ui.router.angular1"]),Vn=(n.module("ui.router.compat",["ui.router"]),null);function In(t){(Vn=this.router=new wr).stateProvider=new Rn(Vn.stateRegistry,Vn.stateService),Vn.stateRegistry.decorator("views",yn),Vn.stateRegistry.decorator("onExit",En("onExit")),Vn.stateRegistry.decorator("onRetain",En("onRetain")),Vn.stateRegistry.decorator("onEnter",En("onEnter")),Vn.viewService._pluginapi._viewConfigFactory("ng1",mn()),Vn.urlService.config._decodeParams=!1;var e=Vn.locationService=Vn.locationConfig=new Cn(t);function r(t,r,n,i,o,a,u){return e._runtimeServices(o,t,i,r,n),delete Vn.router,delete Vn.$get,Vn}return Cn.monkeyPatchPathParameterType(Vn),Vn.router=Vn,Vn.$get=r,r.$inject=["$location","$browser","$window","$sniffer","$rootScope","$http","$templateCache"],Vn}In.$inject=["$locationProvider"];var Hn=function(t){return["$uiRouterProvider",function(e){var r=e.router[t];return r.$get=function(){return r},r}]};function An(t,e,r){if(D.$injector=t,D.$q=e,!Object.prototype.hasOwnProperty.call(t,"strictDi"))try{t.invoke((function(t){}))}catch(e){t.strictDi=!!/strict mode/.exec(e&&e.toString())}r.stateRegistry.get().map((function(t){return t.$$state().resolvables})).reduce(mt,[]).filter((function(t){return"deferred"===t.deps})).forEach((function(e){return e.deps=t.annotate(e.resolveFn,t.strictDi)}))}An.$inject=["$injector","$q","$uiRouter"];function Dn(t){t.$watch((function(){ce.approximateDigests++}))}Dn.$inject=["$rootScope"],Tn.provider("$uiRouter",In),On.provider("$urlRouter",["$uiRouterProvider",function(t){return t.urlRouterProvider=new Pn(t)}]),kn.provider("$urlService",Hn("urlService")),kn.provider("$urlMatcherFactory",["$uiRouterProvider",function(){return Vn.urlMatcherFactory}]),kn.provider("$templateFactory",(function(){return new Sn})),xn.provider("$stateRegistry",Hn("stateRegistry")),xn.provider("$uiRouterGlobals",Hn("globals")),xn.provider("$transitions",Hn("transitionService")),xn.provider("$state",["$uiRouterProvider",function(){return B(Vn.stateProvider,{$get:function(){return Vn.stateService}})}]),xn.factory("$stateParams",["$uiRouter",function(t){return t.globals.params}]),jn.factory("$view",(function(){return Vn.viewService})),jn.service("$trace",(function(){return ce})),jn.run(Dn),kn.run(["$urlMatcherFactory",function(t){}]),xn.run(["$state",function(t){}]),On.run(["$urlRouter",function(t){}]),Tn.run(An);var qn,Un,Nn,Fn,Ln=function(t){return t.getTokens().filter(k).map((function(e){var r=t.getResolvable(e);return[e,"NOWAIT"===t.getPolicy(r).async?r.promise:r.data]})).reduce(Pt,{})};function Mn(t){var e=t.match(/^\s*({[^}]*})\s*$/);e&&(t="("+e[1]+")");var r=t.replace(/\n/g," ").match(/^\s*([^(]*?)\s*(\((.*)\))?\s*$/);if(!r||4!==r.length)throw new Error("Invalid state ref '"+t+"'");return{state:r[1]||null,paramExpr:r[3]||null}}function Bn(t){var e=t.parent().inheritedData("$uiView"),r=f("$cfg.path")(e);return r?Tt(r).state.name:void 0}function Gn(t,e,r){var n=r.uiState||t.current.name,i=B(function(t,e){return{relative:Bn(t)||e.$current,inherit:!0,source:"sref"}}(e,t),r.uiStateOpts||{}),o=t.href(n,r.uiStateParams,i);return{uiState:n,uiStateParams:r.uiStateParams,uiStateOpts:i,href:o}}function zn(t){var e="[object SVGAnimatedString]"===Object.prototype.toString.call(t.prop("href")),r="FORM"===t[0].nodeName;return{attr:r?"action":e?"xlink:href":"href",isAnchor:"A"===t.prop("tagName").toUpperCase(),clickable:!r}}function Wn(t,e,r,n,i){return function(o){var a=o.which||o.button,u=i();if(!(a>1||o.ctrlKey||o.metaKey||o.shiftKey||o.altKey||t.attr("target"))){var s=r((function(){t.attr("disabled")||e.go(u.uiState,u.uiStateParams,u.uiStateOpts)}));o.preventDefault();var c=n.isAnchor&&!u.href?1:0;o.preventDefault=function(){c--<=0&&r.cancel(s)}}}}function Jn(t,e,r,n){var i;n&&(i=n.events),x(i)||(i=["click"]);for(var o=t.on?"on":"bind",a=0,u=i;a<u.length;a++){var s=u[a];t[o](s,r)}e.$on("$destroy",(function(){for(var e=t.off?"off":"unbind",n=0,o=i;n<o.length;n++){var a=o[n];t[e](a,r)}}))}function Qn(t){var e=function(e,r,n){return t.is(e,r,n)};return e.$stateful=!0,e}function Kn(t){var e=function(e,r,n){return t.includes(e,r,n)};return e.$stateful=!0,e}function Yn(t,e,r,i,o){var a=f("viewDecl.controllerAs"),u=f("viewDecl.resolveAs");return{restrict:"ECA",priority:-400,compile:function(i){var s=i.html();return i.empty(),function(i,c){var f=c.data("$uiView");if(!f)return c.html(s),void t(c.contents())(i);var l=f.$cfg||{viewDecl:{},getTemplate:W},h=l.path&&new Te(l.path);c.html(l.getTemplate(c,h)||s),ce.traceUIViewFill(f.$uiView,c.html());var p=t(c.contents()),v=l.controller,d=a(l),m=u(l),g=h&&Ln(h);if(i[m]=g,v){var y=e(v,B({},g,{$scope:i,$element:c}));d&&(i[d]=y,i[d][m]=g),c.data("$ngControllerController",y),c.children().data("$ngControllerController",y),ti(o,r,y,i,l)}if(k(l.component))var w=Ft(l.component),_=new RegExp("^(x-|data-)?"+w+"$","i"),S=i.$watch((function(){var t=[].slice.call(c[0].children).filter((function(t){return t&&t.tagName&&_.exec(t.tagName)}));return t&&n.element(t).data("$"+l.component+"Controller")}),(function(t){t&&(ti(o,r,t,i,l),S())}));p(i)}}}}qn=["$uiRouter","$timeout",function(t,e){var r=t.stateService;return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,i,o,a){var u=zn(i),s=a[1]||a[0],c=null,f={},l=function(){return Gn(r,i,f)},h=Mn(o.uiSref);function p(){var t=l();c&&c(),s&&(c=s.$$addStateInfo(t.uiState,t.uiStateParams)),null!=t.href&&o.$set(u.attr,t.href)}if(f.uiState=h.state,f.uiStateOpts=o.uiSrefOpts?n.$eval(o.uiSrefOpts):{},h.paramExpr&&(n.$watch(h.paramExpr,(function(t){f.uiStateParams=B({},t),p()}),!0),f.uiStateParams=B({},n.$eval(h.paramExpr))),p(),n.$on("$destroy",t.stateRegistry.onStatesChanged(p)),n.$on("$destroy",t.transitionService.onSuccess({},p)),u.clickable){var v=Wn(i,r,e,u,l);Jn(i,n,v,f.uiStateOpts)}}}}],Un=["$uiRouter","$timeout",function(t,e){var r=t.stateService;return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,i,o,a){var u,s=zn(i),c=a[1]||a[0],f=null,l={},h=function(){return Gn(r,i,l)},p=["uiState","uiStateParams","uiStateOpts"],v=p.reduce((function(t,e){return t[e]=W,t}),{});function d(){var t=h();f&&f(),c&&(f=c.$$addStateInfo(t.uiState,t.uiStateParams)),null!=t.href&&o.$set(s.attr,t.href)}p.forEach((function(t){l[t]=o[t]?n.$eval(o[t]):null,o.$observe(t,(function(e){v[t](),v[t]=n.$watch(e,(function(e){l[t]=e,d()}),!0)}))})),d(),n.$on("$destroy",t.stateRegistry.onStatesChanged(d)),n.$on("$destroy",t.transitionService.onSuccess({},d)),s.clickable&&(u=Wn(i,r,e,s,h),Jn(i,n,u,l.uiStateOpts))}}}],Nn=["$state","$stateParams","$interpolate","$uiRouter",function(t,e,r,n){return{restrict:"A",controller:["$scope","$element","$attrs",function(e,i,o){var a,u,s,c,f,l=[];a=r(o.uiSrefActiveEq||"",!1)(e);try{u=e.$eval(o.uiSrefActive)}catch(t){}function h(t){t.promise.then(m,W)}function p(){v(u)}function v(t){O(t)&&(l=[],M(t,(function(t,r){var n=function(t,r){var n=Mn(t);d(n.state,e.$eval(n.paramExpr),r)};k(t)?n(t,r):x(t)&&M(t,(function(t){n(t,r)}))})))}function d(e,r,n){var o={state:t.get(e,Bn(i))||{name:e},params:r,activeClass:n};return l.push(o),function(){Z(l)(o)}}function m(){var r=function(t){return t.split(/\s/).filter(z)},n=function(t){return t.map((function(t){return t.activeClass})).map(r).reduce(mt,[])},o=n(l).concat(r(a)).reduce(wt,[]),u=n(l.filter((function(e){return t.includes(e.state.name,e.params)}))),s=!!l.filter((function(e){return t.is(e.state.name,e.params)})).length?r(a):[],c=u.concat(s).reduce(wt,[]),f=o.filter((function(t){return!K(c,t)}));e.$evalAsync((function(){c.forEach((function(t){return i.addClass(t)})),f.forEach((function(t){return i.removeClass(t)}))}))}v(u=u||r(o.uiSrefActive||"",!1)(e)),this.$$addStateInfo=function(t,e){if(!(O(u)&&l.length>0)){var r=d(t,e,u);return m(),r}},e.$on("$destroy",(s=n.stateRegistry.onStatesChanged(p),c=n.transitionService.onStart({},h),f=e.$on("$stateChangeSuccess",m),function(){s(),c(),f()})),n.globals.transition&&h(n.globals.transition),m()}]}}],n.module("ui.router.state").directive("uiSref",qn).directive("uiSrefActive",Nn).directive("uiSrefActiveEq",Nn).directive("uiState",Un),Qn.$inject=["$state"],Kn.$inject=["$state"],n.module("ui.router.state").filter("isState",Qn).filter("includedByState",Kn),Fn=["$view","$animate","$uiViewScroll","$interpolate","$q",function(t,e,r,i,o){var a={$cfg:{viewDecl:{$context:t._pluginapi._rootViewContext()}},$uiView:{}},u={count:0,restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(s,c,l){return function(s,c,h){var p,v,d,m,g=h.onload||"",y=h.autoscroll,w={enter:function(t,r,i){n.version.minor>2?e.enter(t,null,r).then(i):e.enter(t,null,r,i)},leave:function(t,r){n.version.minor>2?e.leave(t).then(r):e.leave(t,r)}},_=c.inheritedData("$uiView")||a,S=i(h.uiView||h.name||"")(s)||"$default",$={$type:"ng1",id:u.count++,name:S,fqn:_.$uiView.fqn?_.$uiView.fqn+"."+S:S,config:null,configUpdated:function(t){if(t&&!(t instanceof _n))return;if(e=m,r=t,e===r)return;var e,r;ce.traceUIViewConfigUpdated($,t&&t.viewDecl&&t.viewDecl.$context),m=t,E(t)},get creationContext(){var t=f("$cfg.viewDecl.$context")(_),e=f("$uiView.creationContext")(_);return t||e}};ce.traceUIViewEvent("Linking",$),c.data("$uiView",{$uiView:$}),E();var b=t.registerUIView($);function E(t){var e=s.$new(),n=o.defer(),i=o.defer(),a={$cfg:t,$uiView:$},u={$animEnter:n.promise,$animLeave:i.promise,$$animLeave:i};e.$emit("$viewContentLoading",S);var f=l(e,(function(t){t.data("$uiViewAnim",u),t.data("$uiView",a),w.enter(t,c,(function(){n.resolve(),d&&d.$emit("$viewContentAnimationEnded"),(R(y)&&!y||s.$eval(y))&&r(t)})),function(){if(p&&(ce.traceUIViewEvent("Removing (previous) el",p.data("$uiView")),p.remove(),p=null),d&&(ce.traceUIViewEvent("Destroying scope",$),d.$destroy(),d=null),v){var t=v.data("$uiViewAnim");ce.traceUIViewEvent("Animate out",t),w.leave(v,(function(){t.$$animLeave.resolve(),p=null})),p=v,v=null}}()}));v=f,(d=e).$emit("$viewContentLoaded",t||m),d.$eval(g)}s.$on("$destroy",(function(){ce.traceUIViewEvent("Destroying/Unregistering",$),b()}))}}};return u}],Yn.$inject=["$compile","$controller","$transitions","$view","$q"];var Zn="function"==typeof n.module("ui.router").component,Xn=0;function ti(t,e,r,n,i){!P(r.$onInit)||(i.viewDecl.component||i.viewDecl.componentProvider)&&Zn||r.$onInit();var o=Tt(i.path).state.self,a={bind:r};if(P(r.uiOnParamsChanged)){var u=new Te(i.path).getResolvable("$transition$").data;n.$on("$destroy",e.onSuccess({},(function(t){if(t!==u&&-1===t.exiting().indexOf(o)){var e=t.params("to"),n=t.params("from"),i=function(t){return t.paramSchema},a=t.treeChanges("to").map(i).reduce(mt,[]),s=t.treeChanges("from").map(i).reduce(mt,[]),c=a.filter((function(t){var r=s.indexOf(t);return-1===r||!s[r].type.equals(e[t.id],n[t.id])}));if(c.length){var f=c.map((function(t){return t.id})),l=ct(e,(function(t,e){return-1!==f.indexOf(e)}));r.uiOnParamsChanged(l,t)}}}),a))}if(P(r.uiCanExit)){var s=Xn++,c=function(t){return!!t&&(t._uiCanExitIds&&!0===t._uiCanExitIds[s]||c(t.redirectedFrom()))},f={exiting:o.name};n.$on("$destroy",e.onBefore(f,(function(e){var n,i=e._uiCanExitIds=e._uiCanExitIds||{};return c(e)||(n=t.when(r.uiCanExit(e))).then((function(t){return i[s]=!1!==t})),n}),a))}}n.module("ui.router.state").directive("uiView",Fn),n.module("ui.router.state").directive("uiView",Yn),n.module("ui.router.state").provider("$uiViewScroll",(function(){var t=!1;this.useAnchorScroll=function(){t=!0},this.$get=["$anchorScroll","$timeout",function(e,r){return t?e:function(t){return r((function(){t[0].scrollIntoView()}),0,!1)}}]}));t.$injector=Wr,t.$q=Mr,t.BaseLocationServices=tn,t.BaseUrlRule=ur,t.BrowserLocationConfig=cn,t.Glob=Ht,t.HashLocationService=rn,t.HookBuilder=Ke,t.MemoryLocationConfig=sn,t.MemoryLocationService=on,t.NATIVE_INJECTOR_TOKEN="Native Injector",t.Ng1ViewConfig=_n,t.Param=me,t.ParamFactory=ir,t.ParamType=fe,t.ParamTypes=ge,t.PathNode=we,t.PathUtils=Se,t.PushStateLocationService=un,t.Queue=At,t.RegisteredHook=Je,t.Rejection=qt,t.Resolvable=Re,t.ResolveContext=Te,t.StateBuilder=Ne,t.StateMatcher=Le,t.StateObject=Fe,t.StateParams=ye,t.StateProvider=Rn,t.StateQueueManager=Me,t.StateRegistry=Be,t.StateService=Lr,t.TargetState=_e,t.Trace=se,t.Transition=Ze,t.TransitionEventType=Dr,t.TransitionHook=ze,t.TransitionService=Fr,t.UIRouter=wr,t.UIRouterGlobals=lr,t.UIRouterPluginBase=vn,t.UrlConfig=vr,t.UrlMatcher=rr,t.UrlMatcherFactory=or,t.UrlRouter=cr,t.UrlRouterProvider=Pn,t.UrlRuleFactory=ar,t.UrlRules=pr,t.UrlService=dr,t.ViewService=fr,t._extend=Ot,t._inArray=Y,t._pushTo=et,t._removeFrom=X,t.all=v,t.allTrueR=vt,t.ancestors=ot,t.and=h,t.any=d,t.anyTrueR=dt,t.applyPairs=Pt,t.arrayTuples=Ct,t.assertFn=Rt,t.assertMap=bt,t.assertPredicate=$t,t.beforeAfterSubstr=Gt,t.buildUrl=Yr,t.compose=a,t.copy=kt,t.core=dn,t.createProxyFunctions=J,t.curry=o,t.default="ui.router",t.defaultResolvePolicy=be,t.defaultTransOpts=Nr,t.defaults=nt,t.deregAll=rt,t.eq=g,t.equals=G,t.extend=B,t.filter=ct,t.find=ft,t.flatten=St,t.flattenR=gt,t.fnToString=Mt,t.forEach=M,t.fromJson=F,t.functionToString=Lt,t.getLocals=Ln,t.getNg1ViewConfigFactory=mn,t.getParams=Qr,t.hashLocationPlugin=ln,t.hostRegex=zt,t.identity=z,t.inArray=K,t.inherit=Q,t.invoke=w,t.is=m,t.isArray=x,t.isDate=j,t.isDefined=R,t.isFunction=P,t.isInjectable=I,t.isNull=E,t.isNullOrUndefined=C,t.isNumber=T,t.isObject=O,t.isPromise=H,t.isRegExp=V,t.isString=k,t.isUndefined=b,t.joinNeighborsR=Xt,t.kebobString=Ft,t.keyValsToObjectR=Jr,t.locationPluginFactory=Zr,t.makeEvent=Qe,t.makeStub=A,t.map=ht,t.mapObj=lt,t.matchState=We,t.maxLength=Ut,t.memoryLocationPlugin=pn,t.mergeR=it,t.ng1ViewsBuilder=yn,t.noop=W,t.not=l,t.omit=ut,t.or=p,t.padString=Nt,t.pairs=Et,t.parse=f,t.parseUrl=Kr,t.pattern=_,t.pick=at,t.pipe=u,t.pluck=st,t.prop=s,t.propEq=c,t.pushR=yt,t.pushStateLocationPlugin=hn,t.pushTo=tt,t.removeFrom=Z,t.resolvablesBuilder=De,t.resolvePolicies=$e,t.root=U,t.services=D,t.servicesPlugin=fn,t.silenceUncaughtInPromise=Vt,t.silentRejection=It,t.splitEqual=Kt,t.splitHash=Jt,t.splitOnDelim=Zt,t.splitQuery=Qt,t.stringify=Bt,t.stripLastPathElement=Wt,t.tail=Tt,t.toJson=L,t.trace=ce,t.trimHashVal=Yt,t.uniqR=wt,t.unnest=_t,t.unnestR=mt,t.val=y,t.values=pt,t.watchDigests=Dn,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=angular-ui-router.min.js.map

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 2.5.6 - 2017-10-14
 * License: MIT
 */angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.multiMap","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
angular.module("ui.bootstrap.tpls", ["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]);
angular.module('ui.bootstrap.collapse', [])

  .directive('uibCollapse', ['$animate', '$q', '$parse', '$injector', function($animate, $q, $parse, $injector) {
    var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null;
    return {
      link: function(scope, element, attrs) {
        var expandingExpr = $parse(attrs.expanding),
          expandedExpr = $parse(attrs.expanded),
          collapsingExpr = $parse(attrs.collapsing),
          collapsedExpr = $parse(attrs.collapsed),
          horizontal = false,
          css = {},
          cssTo = {};

        init();

        function init() {
          horizontal = !!('horizontal' in attrs);
          if (horizontal) {
            css = {
              width: ''
            };
            cssTo = {width: '0'};
          } else {
            css = {
              height: ''
            };
            cssTo = {height: '0'};
          }
          if (!scope.$eval(attrs.uibCollapse)) {
            element.addClass('show')
              .addClass('collapse')
              .attr('aria-expanded', true)
              .attr('aria-hidden', false)
              .css(css);
          }
        }

        function getScrollFromElement(element) {
          if (horizontal) {
            return {width: element.scrollWidth + 'px'};
          }
          return {height: element.scrollHeight + 'px'};
        }

        function expand() {
          if (element.hasClass('collapse') && element.hasClass('show')) {
            return;
          }

          $q.resolve(expandingExpr(scope))
            .then(function() {
              element.removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', true)
                .attr('aria-hidden', false);

              if ($animateCss) {
                $animateCss(element, {
                  addClass: 'show',
                  easing: 'ease',
                  css: {
                    overflow: 'hidden'
                  },
                  to: getScrollFromElement(element[0])
                }).start()['finally'](expandDone);
              } else {
                $animate.addClass(element, 'show', {
                  css: {
                    overflow: 'hidden'
                  },
                  to: getScrollFromElement(element[0])
                }).then(expandDone);
              }
            }, angular.noop);
        }

        function expandDone() {
          element.removeClass('collapsing')
            .addClass('collapse')
            .css(css);
          expandedExpr(scope);
        }

        function collapse() {
          if (!element.hasClass('collapse') && !element.hasClass('show')) {
            return collapseDone();
          }

          $q.resolve(collapsingExpr(scope))
            .then(function() {
              element
              // IMPORTANT: The width must be set before adding "collapsing" class.
              // Otherwise, the browser attempts to animate from width 0 (in
              // collapsing class) to the given width here.
                .css(getScrollFromElement(element[0]))
                // initially all panel collapse have the collapse class, this removal
                // prevents the animation from jumping to collapsed state
                .removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', false)
                .attr('aria-hidden', true);

              if ($animateCss) {
                $animateCss(element, {
                  removeClass: 'show',
                  to: cssTo
                }).start()['finally'](collapseDone);
              } else {
                $animate.removeClass(element, 'show', {
                  to: cssTo
                }).then(collapseDone);
              }
            }, angular.noop);
        }

        function collapseDone() {
          element.css(cssTo); // Required so that collapse works when animation is disabled
          element.removeClass('collapsing')
            .addClass('collapse');
          collapsedExpr(scope);
        }

        scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ui.bootstrap.tabindex', [])

.directive('uibTabindexToggle', function() {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      attrs.$observe('disabled', function(disabled) {
        attrs.$set('tabindex', disabled ? -1 : null);
      });
    }
  };
});

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse', 'ui.bootstrap.tabindex'])

.constant('uibAccordionConfig', {
  closeOthers: true
})

.controller('UibAccordionController', ['$scope', '$attrs', 'uibAccordionConfig', function($scope, $attrs, accordionConfig) {
  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ?
      $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if (closeOthers) {
      angular.forEach(this.groups, function(group) {
        if (group !== openGroup) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function(event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if (index !== -1) {
      this.groups.splice(index, 1);
    }
  };
}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('uibAccordion', function() {
  return {
    controller: 'UibAccordionController',
    controllerAs: 'accordion',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/accordion/accordion.html';
    }
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('uibAccordionGroup', function() {
  return {
    require: '^uibAccordion',         // We need this directive to be inside an accordion
    transclude: true,              // It transcludes the contents of the directive into the template
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/accordion/accordion-group.html';
    },
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      panelClass: '@?',           // Ditto with panelClass
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      element.addClass('panel');
      accordionCtrl.addGroup(scope);

      scope.openClass = attrs.openClass || 'panel-open';
      scope.panelClass = attrs.panelClass || 'panel-default';
      scope.$watch('isOpen', function(value) {
        element.toggleClass(scope.openClass, !!value);
        if (value) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function($event) {
        if (!scope.isDisabled) {
          if (!$event || $event.which === 32) {
            scope.isOpen = !scope.isOpen;
          }
        }
      };

      var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
      scope.headingId = id + '-tab';
      scope.panelId = id + '-panel';
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
.directive('uibAccordionHeading', function() {
  return {
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^uibAccordionGroup',
    link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
.directive('uibAccordionTransclude', function() {
  return {
    require: '^uibAccordionGroup',
    link: function(scope, element, attrs, controller) {
      scope.$watch(function() { return controller[attrs.uibAccordionTransclude]; }, function(heading) {
        if (heading) {
          var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
          elem.html('');
          elem.append(heading);
        }
      });
    }
  };

  function getHeaderSelectors() {
      return 'uib-accordion-header,' +
          'data-uib-accordion-header,' +
          'x-uib-accordion-header,' +
          'uib\\:accordion-header,' +
          '[uib-accordion-header],' +
          '[data-uib-accordion-header],' +
          '[x-uib-accordion-header]';
  }
});

angular.module('ui.bootstrap.alert', [])

.controller('UibAlertController', ['$scope', '$element', '$attrs', '$interpolate', '$timeout', function($scope, $element, $attrs, $interpolate, $timeout) {
  $scope.closeable = !!$attrs.close;
  $element.addClass('alert');
  $attrs.$set('role', 'alert');
  if ($scope.closeable) {
    $element.addClass('alert-dismissible');
  }

  var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ?
    $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;

  if (dismissOnTimeout) {
    $timeout(function() {
      $scope.close();
    }, parseInt(dismissOnTimeout, 10));
  }
}])

.directive('uibAlert', function() {
  return {
    controller: 'UibAlertController',
    controllerAs: 'alert',
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/alert/alert.html';
    },
    transclude: true,
    scope: {
      close: '&'
    }
  };
});

angular.module('ui.bootstrap.buttons', [])

.constant('uibButtonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('UibButtonsController', ['uibButtonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('uibBtnRadio', ['$parse', function($parse) {
  return {
    require: ['uibBtnRadio', 'ngModel'],
    controller: 'UibButtonsController',
    controllerAs: 'buttons',
    link: function(scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      var uncheckableExpr = $parse(attrs.uibUncheckable);

      element.find('input').css({display: 'none'});

      //model -> UI
      ngModelCtrl.$render = function() {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
      };

      //ui->model
      element.on(buttonsCtrl.toggleEvent, function() {
        if (attrs.disabled) {
          return;
        }

        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function() {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
            ngModelCtrl.$render();
          });
        }
      });

      if (attrs.uibUncheckable) {
        scope.$watch(uncheckableExpr, function(uncheckable) {
          attrs.$set('uncheckable', uncheckable ? '' : undefined);
        });
      }
    }
  };
}])

.directive('uibBtnCheckbox', function() {
  return {
    require: ['uibBtnCheckbox', 'ngModel'],
    controller: 'UibButtonsController',
    controllerAs: 'button',
    link: function(scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      element.find('input').css({display: 'none'});

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attribute, defaultValue) {
        return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function() {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.on(buttonsCtrl.toggleEvent, function() {
        if (attrs.disabled) {
          return;
        }

        scope.$apply(function() {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

angular.module('ui.bootstrap.carousel', [])

.controller('UibCarouselController', ['$scope', '$element', '$interval', '$timeout', '$animate', function($scope, $element, $interval, $timeout, $animate) {
  var self = this,
    slides = self.slides = $scope.slides = [],
    SLIDE_DIRECTION = 'uib-slideDirection',
    currentIndex = $scope.active,
    currentInterval, isPlaying;

  var destroyed = false;
  $element.addClass('carousel');

  self.addSlide = function(slide, element) {
    slides.push({
      slide: slide,
      element: element
    });
    slides.sort(function(a, b) {
      return +a.slide.index - +b.slide.index;
    });
    //if this is the first slide or the slide is set to active, select it
    if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
      if ($scope.$currentTransition) {
        $scope.$currentTransition = null;
      }

      currentIndex = slide.index;
      $scope.active = slide.index;
      setActive(currentIndex);
      self.select(slides[findSlideIndex(slide)]);
      if (slides.length === 1) {
        $scope.play();
      }
    }
  };

  self.getCurrentIndex = function() {
    for (var i = 0; i < slides.length; i++) {
      if (slides[i].slide.index === currentIndex) {
        return i;
      }
    }
  };

  self.next = $scope.next = function() {
    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

    if (newIndex === 0 && $scope.noWrap()) {
      $scope.pause();
      return;
    }

    return self.select(slides[newIndex], 'next');
  };

  self.prev = $scope.prev = function() {
    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

    if ($scope.noWrap() && newIndex === slides.length - 1) {
      $scope.pause();
      return;
    }

    return self.select(slides[newIndex], 'prev');
  };

  self.removeSlide = function(slide) {
    var index = findSlideIndex(slide);

    //get the index of the slide inside the carousel
    slides.splice(index, 1);
    if (slides.length > 0 && currentIndex === index) {
      if (index >= slides.length) {
        currentIndex = slides.length - 1;
        $scope.active = currentIndex;
        setActive(currentIndex);
        self.select(slides[slides.length - 1]);
      } else {
        currentIndex = index;
        $scope.active = currentIndex;
        setActive(currentIndex);
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
      $scope.active = currentIndex;
    }

    //clean the active value when no more slide
    if (slides.length === 0) {
      currentIndex = null;
      $scope.active = null;
    }
  };

  /* direction: "prev" or "next" */
  self.select = $scope.select = function(nextSlide, direction) {
    var nextIndex = findSlideIndex(nextSlide.slide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
    }
    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (nextSlide.slide.index !== currentIndex &&
      !$scope.$currentTransition) {
      goNext(nextSlide.slide, nextIndex, direction);
    }
  };

  /* Allow outside people to call indexOf on slides array */
  $scope.indexOfSlide = function(slide) {
    return +slide.slide.index;
  };

  $scope.isActive = function(slide) {
    return $scope.active === slide.slide.index;
  };

  $scope.isPrevDisabled = function() {
    return $scope.active === 0 && $scope.noWrap();
  };

  $scope.isNextDisabled = function() {
    return $scope.active === slides.length - 1 && $scope.noWrap();
  };

  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      resetTimer();
    }
  };

  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };

  $element.on('mouseenter', $scope.pause);
  $element.on('mouseleave', $scope.play);

  $scope.$on('$destroy', function() {
    destroyed = true;
    resetTimer();
  });

  $scope.$watch('noTransition', function(noTransition) {
    $animate.enabled($element, !noTransition);
  });

  $scope.$watch('interval', restartTimer);

  $scope.$watchCollection('slides', resetTransition);

  $scope.$watch('active', function(index) {
    if (angular.isNumber(index) && currentIndex !== index) {
      for (var i = 0; i < slides.length; i++) {
        if (slides[i].slide.index === index) {
          index = i;
          break;
        }
      }

      var slide = slides[index];
      if (slide) {
        setActive(index);
        self.select(slides[index]);
        currentIndex = index;
      }
    }
  });

  function getSlideByIndex(index) {
    for (var i = 0, l = slides.length; i < l; ++i) {
      if (slides[i].index === index) {
        return slides[i];
      }
    }
  }

  function setActive(index) {
    for (var i = 0; i < slides.length; i++) {
      slides[i].slide.active = i === index;
    }
  }

  function goNext(slide, index, direction) {
    if (destroyed) {
      return;
    }

    angular.extend(slide, {direction: direction});
    angular.extend(slides[currentIndex].slide || {}, {direction: direction});
    if ($animate.enabled($element) && !$scope.$currentTransition &&
      slides[index].element && self.slides.length > 1) {
      slides[index].element.data(SLIDE_DIRECTION, slide.direction);
      var currentIdx = self.getCurrentIndex();

      if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
      }

      $scope.$currentTransition = true;
      $animate.on('addClass', slides[index].element, function(element, phase) {
        if (phase === 'close') {
          $scope.$currentTransition = null;
          $animate.off('addClass', element);
        }
      });
    }

    $scope.active = slide.index;
    currentIndex = slide.index;
    setActive(index);

    //every time you change slides, reset the timer
    restartTimer();
  }

  function findSlideIndex(slide) {
    for (var i = 0; i < slides.length; i++) {
      if (slides[i].slide === slide) {
        return i;
      }
    }
  }

  function resetTimer() {
    if (currentInterval) {
      $interval.cancel(currentInterval);
      currentInterval = null;
    }
  }

  function resetTransition(slides) {
    if (!slides.length) {
      $scope.$currentTransition = null;
    }
  }

  function restartTimer() {
    resetTimer();
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval > 0) {
      currentInterval = $interval(timerFn, interval);
    }
  }

  function timerFn() {
    var interval = +$scope.interval;
    if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
      $scope.next();
    } else {
      $scope.pause();
    }
  }
}])

.directive('uibCarousel', function() {
  return {
    transclude: true,
    controller: 'UibCarouselController',
    controllerAs: 'carousel',
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/carousel/carousel.html';
    },
    scope: {
      active: '=',
      interval: '=',
      noTransition: '=',
      noPause: '=',
      noWrap: '&'
    }
  };
})

.directive('uibSlide', ['$animate', function($animate) {
  return {
    require: '^uibCarousel',
    restrict: 'A',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/carousel/slide.html';
    },
    scope: {
      actual: '=?',
      index: '=?'
    },
    link: function (scope, element, attrs, carouselCtrl) {
      element.addClass('item');
      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        $animate[active ? 'addClass' : 'removeClass'](element, 'active');
      });
    }
  };
}])

.animation('.item', ['$animateCss',
function($animateCss) {
  var SLIDE_DIRECTION = 'uib-slideDirection';

  function removeClass(element, className, callback) {
    element.removeClass(className);
    if (callback) {
      callback();
    }
  }

  return {
    beforeAddClass: function(element, className, done) {
      if (className === 'active') {
        var stopped = false;
        var direction = element.data(SLIDE_DIRECTION);
        var directionClass = direction === 'next' ? 'left' : 'right';
        var removeClassFn = removeClass.bind(this, element,
          directionClass + ' ' + direction, done);
        element.addClass(direction);

        $animateCss(element, {addClass: directionClass})
          .start()
          .done(removeClassFn);

        return function() {
          stopped = true;
        };
      }
      done();
    },
    beforeRemoveClass: function (element, className, done) {
      if (className === 'active') {
        var stopped = false;
        var direction = element.data(SLIDE_DIRECTION);
        var directionClass = direction === 'next' ? 'left' : 'right';
        var removeClassFn = removeClass.bind(this, element, directionClass, done);

        $animateCss(element, {addClass: directionClass})
          .start()
          .done(removeClassFn);

        return function() {
          stopped = true;
        };
      }
      done();
    }
  };
}]);

angular.module('ui.bootstrap.dateparser', [])

.service('uibDateParser', ['$log', '$locale', 'dateFilter', 'orderByFilter', 'filterFilter', function($log, $locale, dateFilter, orderByFilter, filterFilter) {
  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

  var localeId;
  var formatCodeToRegex;

  this.init = function() {
    localeId = $locale.id;

    this.parsers = {};
    this.formatters = {};

    formatCodeToRegex = [
      {
        key: 'yyyy',
        regex: '\\d{4}',
        apply: function(value) { this.year = +value; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'yyyy');
        }
      },
      {
        key: 'yy',
        regex: '\\d{2}',
        apply: function(value) { value = +value; this.year = value < 69 ? value + 2000 : value + 1900; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'yy');
        }
      },
      {
        key: 'y',
        regex: '\\d{1,4}',
        apply: function(value) { this.year = +value; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'y');
        }
      },
      {
        key: 'M!',
        regex: '0?[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) {
          var value = date.getMonth();
          if (/^[0-9]$/.test(value)) {
            return dateFilter(date, 'MM');
          }

          return dateFilter(date, 'M');
        }
      },
      {
        key: 'MMMM',
        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'MMMM'); }
      },
      {
        key: 'MMM',
        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'MMM'); }
      },
      {
        key: 'MM',
        regex: '0[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) { return dateFilter(date, 'MM'); }
      },
      {
        key: 'M',
        regex: '[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) { return dateFilter(date, 'M'); }
      },
      {
        key: 'd!',
        regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) {
          var value = date.getDate();
          if (/^[1-9]$/.test(value)) {
            return dateFilter(date, 'dd');
          }

          return dateFilter(date, 'd');
        }
      },
      {
        key: 'dd',
        regex: '[0-2][0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) { return dateFilter(date, 'dd'); }
      },
      {
        key: 'd',
        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) { return dateFilter(date, 'd'); }
      },
      {
        key: 'EEEE',
        regex: $locale.DATETIME_FORMATS.DAY.join('|'),
        formatter: function(date) { return dateFilter(date, 'EEEE'); }
      },
      {
        key: 'EEE',
        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
        formatter: function(date) { return dateFilter(date, 'EEE'); }
      },
      {
        key: 'HH',
        regex: '(?:0|1)[0-9]|2[0-3]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'HH'); }
      },
      {
        key: 'hh',
        regex: '0[0-9]|1[0-2]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'hh'); }
      },
      {
        key: 'H',
        regex: '1?[0-9]|2[0-3]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'H'); }
      },
      {
        key: 'h',
        regex: '[0-9]|1[0-2]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'h'); }
      },
      {
        key: 'mm',
        regex: '[0-5][0-9]',
        apply: function(value) { this.minutes = +value; },
        formatter: function(date) { return dateFilter(date, 'mm'); }
      },
      {
        key: 'm',
        regex: '[0-9]|[1-5][0-9]',
        apply: function(value) { this.minutes = +value; },
        formatter: function(date) { return dateFilter(date, 'm'); }
      },
      {
        key: 'sss',
        regex: '[0-9][0-9][0-9]',
        apply: function(value) { this.milliseconds = +value; },
        formatter: function(date) { return dateFilter(date, 'sss'); }
      },
      {
        key: 'ss',
        regex: '[0-5][0-9]',
        apply: function(value) { this.seconds = +value; },
        formatter: function(date) { return dateFilter(date, 'ss'); }
      },
      {
        key: 's',
        regex: '[0-9]|[1-5][0-9]',
        apply: function(value) { this.seconds = +value; },
        formatter: function(date) { return dateFilter(date, 's'); }
      },
      {
        key: 'a',
        regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
        apply: function(value) {
          if (this.hours === 12) {
            this.hours = 0;
          }

          if (value === 'PM') {
            this.hours += 12;
          }
        },
        formatter: function(date) { return dateFilter(date, 'a'); }
      },
      {
        key: 'Z',
        regex: '[+-]\\d{4}',
        apply: function(value) {
          var matches = value.match(/([+-])(\d{2})(\d{2})/),
            sign = matches[1],
            hours = matches[2],
            minutes = matches[3];
          this.hours += toInt(sign + hours);
          this.minutes += toInt(sign + minutes);
        },
        formatter: function(date) {
          return dateFilter(date, 'Z');
        }
      },
      {
        key: 'ww',
        regex: '[0-4][0-9]|5[0-3]',
        formatter: function(date) { return dateFilter(date, 'ww'); }
      },
      {
        key: 'w',
        regex: '[0-9]|[1-4][0-9]|5[0-3]',
        formatter: function(date) { return dateFilter(date, 'w'); }
      },
      {
        key: 'GGGG',
        regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
        formatter: function(date) { return dateFilter(date, 'GGGG'); }
      },
      {
        key: 'GGG',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'GGG'); }
      },
      {
        key: 'GG',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'GG'); }
      },
      {
        key: 'G',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'G'); }
      }
    ];

    if (angular.version.major >= 1 && angular.version.minor > 4) {
      formatCodeToRegex.push({
        key: 'LLLL',
        regex: $locale.DATETIME_FORMATS.STANDALONEMONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.STANDALONEMONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'LLLL'); }
      });
    }
  };

  this.init();

  function getFormatCodeToRegex(key) {
    return filterFilter(formatCodeToRegex, {key: key}, true)[0];
  }

  this.getParser = function (key) {
    var f = getFormatCodeToRegex(key);
    return f && f.apply || null;
  };

  this.overrideParser = function (key, parser) {
    var f = getFormatCodeToRegex(key);
    if (f && angular.isFunction(parser)) {
      this.parsers = {};
      f.apply = parser;
    }
  }.bind(this);

  function createParser(format) {
    var map = [], regex = format.split('');

    // check for literal values
    var quoteIndex = format.indexOf('\'');
    if (quoteIndex > -1) {
      var inLiteral = false;
      format = format.split('');
      for (var i = quoteIndex; i < format.length; i++) {
        if (inLiteral) {
          if (format[i] === '\'') {
            if (i + 1 < format.length && format[i+1] === '\'') { // escaped single quote
              format[i+1] = '$';
              regex[i+1] = '';
            } else { // end of literal
              regex[i] = '';
              inLiteral = false;
            }
          }
          format[i] = '$';
        } else {
          if (format[i] === '\'') { // start of literal
            format[i] = '$';
            regex[i] = '';
            inLiteral = true;
          }
        }
      }

      format = format.join('');
    }

    angular.forEach(formatCodeToRegex, function(data) {
      var index = format.indexOf(data.key);

      if (index > -1) {
        format = format.split('');

        regex[index] = '(' + data.regex + ')';
        format[index] = '$'; // Custom symbol to define consumed part of format
        for (var i = index + 1, n = index + data.key.length; i < n; i++) {
          regex[i] = '';
          format[i] = '$';
        }
        format = format.join('');

        map.push({
          index: index,
          key: data.key,
          apply: data.apply,
          matcher: data.regex
        });
      }
    });

    return {
      regex: new RegExp('^' + regex.join('') + '$'),
      map: orderByFilter(map, 'index')
    };
  }

  function createFormatter(format) {
    var formatters = [];
    var i = 0;
    var formatter, literalIdx;
    while (i < format.length) {
      if (angular.isNumber(literalIdx)) {
        if (format.charAt(i) === '\'') {
          if (i + 1 >= format.length || format.charAt(i + 1) !== '\'') {
            formatters.push(constructLiteralFormatter(format, literalIdx, i));
            literalIdx = null;
          }
        } else if (i === format.length) {
          while (literalIdx < format.length) {
            formatter = constructFormatterFromIdx(format, literalIdx);
            formatters.push(formatter);
            literalIdx = formatter.endIdx;
          }
        }

        i++;
        continue;
      }

      if (format.charAt(i) === '\'') {
        literalIdx = i;
        i++;
        continue;
      }

      formatter = constructFormatterFromIdx(format, i);

      formatters.push(formatter.parser);
      i = formatter.endIdx;
    }

    return formatters;
  }

  function constructLiteralFormatter(format, literalIdx, endIdx) {
    return function() {
      return format.substr(literalIdx + 1, endIdx - literalIdx - 1);
    };
  }

  function constructFormatterFromIdx(format, i) {
    var currentPosStr = format.substr(i);
    for (var j = 0; j < formatCodeToRegex.length; j++) {
      if (new RegExp('^' + formatCodeToRegex[j].key).test(currentPosStr)) {
        var data = formatCodeToRegex[j];
        return {
          endIdx: i + data.key.length,
          parser: data.formatter
        };
      }
    }

    return {
      endIdx: i + 1,
      parser: function() {
        return currentPosStr.charAt(0);
      }
    };
  }

  this.filter = function(date, format) {
    if (!angular.isDate(date) || isNaN(date) || !format) {
      return '';
    }

    format = $locale.DATETIME_FORMATS[format] || format;

    if ($locale.id !== localeId) {
      this.init();
    }

    if (!this.formatters[format]) {
      this.formatters[format] = createFormatter(format);
    }

    var formatters = this.formatters[format];

    return formatters.reduce(function(str, formatter) {
      return str + formatter(date);
    }, '');
  };

  this.parse = function(input, format, baseDate) {
    if (!angular.isString(input) || !format) {
      return input;
    }

    format = $locale.DATETIME_FORMATS[format] || format;
    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

    if ($locale.id !== localeId) {
      this.init();
    }

    if (!this.parsers[format]) {
      this.parsers[format] = createParser(format, 'apply');
    }

    var parser = this.parsers[format],
        regex = parser.regex,
        map = parser.map,
        results = input.match(regex),
        tzOffset = false;
    if (results && results.length) {
      var fields, dt;
      if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
        fields = {
          year: baseDate.getFullYear(),
          month: baseDate.getMonth(),
          date: baseDate.getDate(),
          hours: baseDate.getHours(),
          minutes: baseDate.getMinutes(),
          seconds: baseDate.getSeconds(),
          milliseconds: baseDate.getMilliseconds()
        };
      } else {
        if (baseDate) {
          $log.warn('dateparser:', 'baseDate is not a valid date');
        }
        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
      }

      for (var i = 1, n = results.length; i < n; i++) {
        var mapper = map[i - 1];
        if (mapper.matcher === 'Z') {
          tzOffset = true;
        }

        if (mapper.apply) {
          mapper.apply.call(fields, results[i]);
        }
      }

      var datesetter = tzOffset ? Date.prototype.setUTCFullYear :
        Date.prototype.setFullYear;
      var timesetter = tzOffset ? Date.prototype.setUTCHours :
        Date.prototype.setHours;

      if (isValid(fields.year, fields.month, fields.date)) {
        if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
          dt = new Date(baseDate);
          datesetter.call(dt, fields.year, fields.month, fields.date);
          timesetter.call(dt, fields.hours, fields.minutes,
            fields.seconds, fields.milliseconds);
        } else {
          dt = new Date(0);
          datesetter.call(dt, fields.year, fields.month, fields.date);
          timesetter.call(dt, fields.hours || 0, fields.minutes || 0,
            fields.seconds || 0, fields.milliseconds || 0);
        }
      }

      return dt;
    }
  };

  // Check if date is valid for specific month (and year for February).
  // Month: 0 = Jan, 1 = Feb, etc
  function isValid(year, month, date) {
    if (date < 1) {
      return false;
    }

    if (month === 1 && date > 28) {
      return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
    }

    if (month === 3 || month === 5 || month === 8 || month === 10) {
      return date < 31;
    }

    return true;
  }

  function toInt(str) {
    return parseInt(str, 10);
  }

  this.toTimezone = toTimezone;
  this.fromTimezone = fromTimezone;
  this.timezoneToOffset = timezoneToOffset;
  this.addDateMinutes = addDateMinutes;
  this.convertTimezoneToLocal = convertTimezoneToLocal;

  function toTimezone(date, timezone) {
    return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
  }

  function fromTimezone(date, timezone) {
    return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
  }

  //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207
  function timezoneToOffset(timezone, fallback) {
    timezone = timezone.replace(/:/g, '');
    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
  }

  function addDateMinutes(date, minutes) {
    date = new Date(date.getTime());
    date.setMinutes(date.getMinutes() + minutes);
    return date;
  }

  function convertTimezoneToLocal(date, timezone, reverse) {
    reverse = reverse ? -1 : 1;
    var dateTimezoneOffset = date.getTimezoneOffset();
    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
  }
}]);

// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
// at most one element.
angular.module('ui.bootstrap.isClass', [])
.directive('uibIsClass', [
         '$animate',
function ($animate) {
  //                    11111111          22222222
  var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
  //                    11111111           22222222
  var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;

  var dataPerTracked = {};

  return {
    restrict: 'A',
    compile: function(tElement, tAttrs) {
      var linkedScopes = [];
      var instances = [];
      var expToData = {};
      var lastActivated = null;
      var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
      var onExp = onExpMatches[2];
      var expsStr = onExpMatches[1];
      var exps = expsStr.split(',');

      return linkFn;

      function linkFn(scope, element, attrs) {
        linkedScopes.push(scope);
        instances.push({
          scope: scope,
          element: element
        });

        exps.forEach(function(exp, k) {
          addForExp(exp, scope);
        });

        scope.$on('$destroy', removeScope);
      }

      function addForExp(exp, scope) {
        var matches = exp.match(IS_REGEXP);
        var clazz = scope.$eval(matches[1]);
        var compareWithExp = matches[2];
        var data = expToData[exp];
        if (!data) {
          var watchFn = function(compareWithVal) {
            var newActivated = null;
            instances.some(function(instance) {
              var thisVal = instance.scope.$eval(onExp);
              if (thisVal === compareWithVal) {
                newActivated = instance;
                return true;
              }
            });
            if (data.lastActivated !== newActivated) {
              if (data.lastActivated) {
                $animate.removeClass(data.lastActivated.element, clazz);
              }
              if (newActivated) {
                $animate.addClass(newActivated.element, clazz);
              }
              data.lastActivated = newActivated;
            }
          };
          expToData[exp] = data = {
            lastActivated: null,
            scope: scope,
            watchFn: watchFn,
            compareWithExp: compareWithExp,
            watcher: scope.$watch(compareWithExp, watchFn)
          };
        }
        data.watchFn(scope.$eval(compareWithExp));
      }

      function removeScope(e) {
        var removedScope = e.targetScope;
        var index = linkedScopes.indexOf(removedScope);
        linkedScopes.splice(index, 1);
        instances.splice(index, 1);
        if (linkedScopes.length) {
          var newWatchScope = linkedScopes[0];
          angular.forEach(expToData, function(data) {
            if (data.scope === removedScope) {
              data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
              data.scope = newWatchScope;
            }
          });
        } else {
          expToData = {};
        }
      }
    }
  };
}]);
angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

.value('$datepickerSuppressError', false)

.value('$datepickerLiteralWarning', true)

.constant('uibDatepickerConfig', {
  datepickerMode: 'day',
  formatDay: 'dd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'EEE',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  maxDate: null,
  maxMode: 'year',
  minDate: null,
  minMode: 'day',
  monthColumns: 3,
  ngModelOptions: {},
  shortcutPropagation: false,
  showWeeks: true,
  yearColumns: 5,
  yearRows: 4
})

.controller('UibDatepickerController', ['$scope', '$element', '$attrs', '$parse', '$interpolate', '$locale', '$log', 'dateFilter', 'uibDatepickerConfig', '$datepickerLiteralWarning', '$datepickerSuppressError', 'uibDateParser',
  function($scope, $element, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
      ngModelOptions = {},
      watchListeners = [];

  $element.addClass('uib-datepicker');
  $attrs.$set('role', 'application');

  if (!$scope.datepickerOptions) {
    $scope.datepickerOptions = {};
  }

  // Modes chain
  this.modes = ['day', 'month', 'year'];

  [
    'customClass',
    'dateDisabled',
    'datepickerMode',
    'formatDay',
    'formatDayHeader',
    'formatDayTitle',
    'formatMonth',
    'formatMonthTitle',
    'formatYear',
    'maxDate',
    'maxMode',
    'minDate',
    'minMode',
    'monthColumns',
    'showWeeks',
    'shortcutPropagation',
    'startingDay',
    'yearColumns',
    'yearRows'
  ].forEach(function(key) {
    switch (key) {
      case 'customClass':
      case 'dateDisabled':
        $scope[key] = $scope.datepickerOptions[key] || angular.noop;
        break;
      case 'datepickerMode':
        $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ?
          $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
        break;
      case 'formatDay':
      case 'formatDayHeader':
      case 'formatDayTitle':
      case 'formatMonth':
      case 'formatMonthTitle':
      case 'formatYear':
        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
          $interpolate($scope.datepickerOptions[key])($scope.$parent) :
          datepickerConfig[key];
        break;
      case 'monthColumns':
      case 'showWeeks':
      case 'shortcutPropagation':
      case 'yearColumns':
      case 'yearRows':
        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
          $scope.datepickerOptions[key] : datepickerConfig[key];
        break;
      case 'startingDay':
        if (angular.isDefined($scope.datepickerOptions.startingDay)) {
          self.startingDay = $scope.datepickerOptions.startingDay;
        } else if (angular.isNumber(datepickerConfig.startingDay)) {
          self.startingDay = datepickerConfig.startingDay;
        } else {
          self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
        }

        break;
      case 'maxDate':
      case 'minDate':
        $scope.$watch('datepickerOptions.' + key, function(value) {
          if (value) {
            if (angular.isDate(value)) {
              self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.getOption('timezone'));
            } else {
              if ($datepickerLiteralWarning) {
                $log.warn('Literal date support has been deprecated, please switch to date object usage');
              }

              self[key] = new Date(dateFilter(value, 'medium'));
            }
          } else {
            self[key] = datepickerConfig[key] ?
              dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.getOption('timezone')) :
              null;
          }

          self.refreshView();
        });

        break;
      case 'maxMode':
      case 'minMode':
        if ($scope.datepickerOptions[key]) {
          $scope.$watch(function() { return $scope.datepickerOptions[key]; }, function(value) {
            self[key] = $scope[key] = angular.isDefined(value) ? value : $scope.datepickerOptions[key];
            if (key === 'minMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) ||
              key === 'maxMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
              $scope.datepickerMode = self[key];
              $scope.datepickerOptions.datepickerMode = self[key];
            }
          });
        } else {
          self[key] = $scope[key] = datepickerConfig[key] || null;
        }

        break;
    }
  });

  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

  $scope.disabled = angular.isDefined($attrs.disabled) || false;
  if (angular.isDefined($attrs.ngDisabled)) {
    watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
      $scope.disabled = disabled;
      self.refreshView();
    }));
  }

  $scope.isActive = function(dateObject) {
    if (self.compare(dateObject.date, self.activeDate) === 0) {
      $scope.activeDateId = dateObject.uid;
      return true;
    }
    return false;
  };

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelOptions = extractOptions(ngModelCtrl);

    if ($scope.datepickerOptions.initDate) {
      self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.getOption('timezone')) || new Date();
      $scope.$watch('datepickerOptions.initDate', function(initDate) {
        if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
          self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.getOption('timezone'));
          self.refreshView();
        }
      });
    } else {
      self.activeDate = new Date();
    }

    var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
    this.activeDate = !isNaN(date) ?
      dateParser.fromTimezone(date, ngModelOptions.getOption('timezone')) :
      dateParser.fromTimezone(new Date(), ngModelOptions.getOption('timezone'));

    ngModelCtrl.$render = function() {
      self.render();
    };
  };

  this.render = function() {
    if (ngModelCtrl.$viewValue) {
      var date = new Date(ngModelCtrl.$viewValue),
          isValid = !isNaN(date);

      if (isValid) {
        this.activeDate = dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'));
      } else if (!$datepickerSuppressError) {
        $log.error('Datepicker directive: "ng-model" value must be a Date object');
      }
    }
    this.refreshView();
  };

  this.refreshView = function() {
    if (this.element) {
      $scope.selectedDt = null;
      this._refreshView();
      if ($scope.activeDt) {
        $scope.activeDateId = $scope.activeDt.uid;
      }

      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
      date = dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'));
      ngModelCtrl.$setValidity('dateDisabled', !date ||
        this.element && !this.isDisabled(date));
    }
  };

  this.createDateObject = function(date, format) {
    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
    model = dateParser.fromTimezone(model, ngModelOptions.getOption('timezone'));
    var today = new Date();
    today = dateParser.fromTimezone(today, ngModelOptions.getOption('timezone'));
    var time = this.compare(date, today);
    var dt = {
      date: date,
      label: dateParser.filter(date, format),
      selected: model && this.compare(date, model) === 0,
      disabled: this.isDisabled(date),
      past: time < 0,
      current: time === 0,
      future: time > 0,
      customClass: this.customClass(date) || null
    };

    if (model && this.compare(date, model) === 0) {
      $scope.selectedDt = dt;
    }

    if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
      $scope.activeDt = dt;
    }

    return dt;
  };

  this.isDisabled = function(date) {
    return $scope.disabled ||
      this.minDate && this.compare(date, this.minDate) < 0 ||
      this.maxDate && this.compare(date, this.maxDate) > 0 ||
      $scope.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode});
  };

  this.customClass = function(date) {
    return $scope.customClass({date: date, mode: $scope.datepickerMode});
  };

  // Split array into smaller arrays
  this.split = function(arr, size) {
    var arrays = [];
    while (arr.length > 0) {
      arrays.push(arr.splice(0, size));
    }
    return arrays;
  };

  $scope.select = function(date) {
    if ($scope.datepickerMode === self.minMode) {
      var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.getOption('timezone')) : new Date(0, 0, 0, 0, 0, 0, 0);
      dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
      dt = dateParser.toTimezone(dt, ngModelOptions.getOption('timezone'));
      ngModelCtrl.$setViewValue(dt);
      ngModelCtrl.$render();
    } else {
      self.activeDate = date;
      setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);

      $scope.$emit('uib:datepicker.mode');
    }

    $scope.$broadcast('uib:datepicker.focus');
  };

  $scope.move = function(direction) {
    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
    self.activeDate.setFullYear(year, month, 1);
    self.refreshView();
  };

  $scope.toggleMode = function(direction) {
    direction = direction || 1;

    if ($scope.datepickerMode === self.maxMode && direction === 1 ||
      $scope.datepickerMode === self.minMode && direction === -1) {
      return;
    }

    setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);

    $scope.$emit('uib:datepicker.mode');
  };

  // Key event mapper
  $scope.keys = { 13: 'enter', 32: 'space', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 37: 'left', 38: 'up', 39: 'right', 40: 'down' };

  var focusElement = function() {
    self.element[0].focus();
  };

  // Listen for focus requests from popup directive
  $scope.$on('uib:datepicker.focus', focusElement);

  $scope.keydown = function(evt) {
    var key = $scope.keys[evt.which];

    if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
      return;
    }

    evt.preventDefault();
    if (!self.shortcutPropagation) {
      evt.stopPropagation();
    }

    if (key === 'enter' || key === 'space') {
      if (self.isDisabled(self.activeDate)) {
        return; // do nothing
      }
      $scope.select(self.activeDate);
    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
      $scope.toggleMode(key === 'up' ? 1 : -1);
    } else {
      self.handleKeyDown(key, evt);
      self.refreshView();
    }
  };

  $element.on('keydown', function(evt) {
    $scope.$apply(function() {
      $scope.keydown(evt);
    });
  });

  $scope.$on('$destroy', function() {
    //Clear all watch listeners on destroy
    while (watchListeners.length) {
      watchListeners.shift()();
    }
  });

  function setMode(mode) {
    $scope.datepickerMode = mode;
    $scope.datepickerOptions.datepickerMode = mode;
  }

  function extractOptions(ngModelCtrl) {
    var ngModelOptions;

    if (angular.version.minor < 6) { // in angular < 1.6 $options could be missing
      // guarantee a value
      ngModelOptions = ngModelCtrl.$options ||
        $scope.datepickerOptions.ngModelOptions ||
        datepickerConfig.ngModelOptions ||
        {};

      // mimic 1.6+ api
      ngModelOptions.getOption = function (key) {
        return ngModelOptions[key];
      };
    } else { // in angular >=1.6 $options is always present
      // ng-model-options defaults timezone to null; don't let its precedence squash a non-null value
      var timezone = ngModelCtrl.$options.getOption('timezone') ||
        ($scope.datepickerOptions.ngModelOptions ? $scope.datepickerOptions.ngModelOptions.timezone : null) ||
        (datepickerConfig.ngModelOptions ? datepickerConfig.ngModelOptions.timezone : null);

      // values passed to createChild override existing values
      ngModelOptions = ngModelCtrl.$options // start with a ModelOptions instance
        .createChild(datepickerConfig.ngModelOptions) // lowest precedence
        .createChild($scope.datepickerOptions.ngModelOptions)
        .createChild(ngModelCtrl.$options) // highest precedence
        .createChild({timezone: timezone}); // to keep from squashing a non-null value
    }

    return ngModelOptions;
  }
}])

.controller('UibDaypickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

  this.step = { months: 1 };
  this.element = $element;
  function getDaysInMonth(year, month) {
    return month === 1 && year % 4 === 0 &&
      (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
  }

  this.init = function(ctrl) {
    angular.extend(ctrl, this);
    scope.showWeeks = ctrl.showWeeks;
    ctrl.refreshView();
  };

  this.getDates = function(startDate, n) {
    var dates = new Array(n), current = new Date(startDate), i = 0, date;
    while (i < n) {
      date = new Date(current);
      dates[i++] = date;
      current.setDate(current.getDate() + 1);
    }
    return dates;
  };

  this._refreshView = function() {
    var year = this.activeDate.getFullYear(),
      month = this.activeDate.getMonth(),
      firstDayOfMonth = new Date(this.activeDate);

    firstDayOfMonth.setFullYear(year, month, 1);

    var difference = this.startingDay - firstDayOfMonth.getDay(),
      numDisplayedFromPreviousMonth = difference > 0 ?
        7 - difference : - difference,
      firstDate = new Date(firstDayOfMonth);

    if (numDisplayedFromPreviousMonth > 0) {
      firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
    }

    // 42 is the number of days on a six-week calendar
    var days = this.getDates(firstDate, 42);
    for (var i = 0; i < 42; i ++) {
      days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
        secondary: days[i].getMonth() !== month,
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.labels = new Array(7);
    for (var j = 0; j < 7; j++) {
      scope.labels[j] = {
        abbr: dateFilter(days[j].date, this.formatDayHeader),
        full: dateFilter(days[j].date, 'EEEE')
      };
    }

    scope.title = dateFilter(this.activeDate, this.formatDayTitle);
    scope.rows = this.split(days, 7);

    if (scope.showWeeks) {
      scope.weekNumbers = [];
      var thursdayIndex = (4 + 7 - this.startingDay) % 7,
          numWeeks = scope.rows.length;
      for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
        scope.weekNumbers.push(
          getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
      }
    }
  };

  this.compare = function(date1, date2) {
    var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
    var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
    _date1.setFullYear(date1.getFullYear());
    _date2.setFullYear(date2.getFullYear());
    return _date1 - _date2;
  };

  function getISO8601WeekNumber(date) {
    var checkDate = new Date(date);
    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
    var time = checkDate.getTime();
    checkDate.setMonth(0); // Compare with Jan 1
    checkDate.setDate(1);
    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
  }

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getDate();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - 7;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + 7;
    } else if (key === 'pageup' || key === 'pagedown') {
      var month = this.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
      this.activeDate.setMonth(month, 1);
      date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
    } else if (key === 'home') {
      date = 1;
    } else if (key === 'end') {
      date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
    }
    this.activeDate.setDate(date);
  };
}])

.controller('UibMonthpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  this.step = { years: 1 };
  this.element = $element;

  this.init = function(ctrl) {
    angular.extend(ctrl, this);
    ctrl.refreshView();
  };

  this._refreshView = function() {
    var months = new Array(12),
        year = this.activeDate.getFullYear(),
        date;

    for (var i = 0; i < 12; i++) {
      date = new Date(this.activeDate);
      date.setFullYear(year, i, 1);
      months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
    scope.rows = this.split(months, this.monthColumns);
    scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1;
  };

  this.compare = function(date1, date2) {
    var _date1 = new Date(date1.getFullYear(), date1.getMonth());
    var _date2 = new Date(date2.getFullYear(), date2.getMonth());
    _date1.setFullYear(date1.getFullYear());
    _date2.setFullYear(date2.getFullYear());
    return _date1 - _date2;
  };

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getMonth();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - this.monthColumns;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + this.monthColumns;
    } else if (key === 'pageup' || key === 'pagedown') {
      var year = this.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
      this.activeDate.setFullYear(year);
    } else if (key === 'home') {
      date = 0;
    } else if (key === 'end') {
      date = 11;
    }
    this.activeDate.setMonth(date);
  };
}])

.controller('UibYearpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  var columns, range;
  this.element = $element;

  function getStartingYear(year) {
    return parseInt((year - 1) / range, 10) * range + 1;
  }

  this.yearpickerInit = function() {
    columns = this.yearColumns;
    range = this.yearRows * columns;
    this.step = { years: range };
  };

  this._refreshView = function() {
    var years = new Array(range), date;

    for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
      date = new Date(this.activeDate);
      date.setFullYear(start + i, 0, 1);
      years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.title = [years[0].label, years[range - 1].label].join(' - ');
    scope.rows = this.split(years, columns);
    scope.columns = columns;
  };

  this.compare = function(date1, date2) {
    return date1.getFullYear() - date2.getFullYear();
  };

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getFullYear();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - columns;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + columns;
    } else if (key === 'pageup' || key === 'pagedown') {
      date += (key === 'pageup' ? - 1 : 1) * range;
    } else if (key === 'home') {
      date = getStartingYear(this.activeDate.getFullYear());
    } else if (key === 'end') {
      date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
    }
    this.activeDate.setFullYear(date);
  };
}])

.directive('uibDatepicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/datepicker.html';
    },
    scope: {
      datepickerOptions: '=?'
    },
    require: ['uibDatepicker', '^ngModel'],
    restrict: 'A',
    controller: 'UibDatepickerController',
    controllerAs: 'datepicker',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      datepickerCtrl.init(ngModelCtrl);
    }
  };
})

.directive('uibDaypicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/day.html';
    },
    require: ['^uibDatepicker', 'uibDaypicker'],
    restrict: 'A',
    controller: 'UibDaypickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0],
        daypickerCtrl = ctrls[1];

      daypickerCtrl.init(datepickerCtrl);
    }
  };
})

.directive('uibMonthpicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/month.html';
    },
    require: ['^uibDatepicker', 'uibMonthpicker'],
    restrict: 'A',
    controller: 'UibMonthpickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0],
        monthpickerCtrl = ctrls[1];

      monthpickerCtrl.init(datepickerCtrl);
    }
  };
})

.directive('uibYearpicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/year.html';
    },
    require: ['^uibDatepicker', 'uibYearpicker'],
    restrict: 'A',
    controller: 'UibYearpickerController',
    link: function(scope, element, attrs, ctrls) {
      var ctrl = ctrls[0];
      angular.extend(ctrl, ctrls[1]);
      ctrl.yearpickerInit();

      ctrl.refreshView();
    }
  };
});

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods for working with the DOM.
 * It is meant to be used where we need to absolute-position elements in
 * relation to another element (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
    /**
     * Used by scrollbarWidth() function to cache scrollbar's width.
     * Do not access this variable directly, use scrollbarWidth() instead.
     */
    var SCROLLBAR_WIDTH;
    /**
     * scrollbar on body and html element in IE and Edge overlay
     * content and should be considered 0 width.
     */
    var BODY_SCROLLBAR_WIDTH;
    var OVERFLOW_REGEX = {
      normal: /(auto|scroll)/,
      hidden: /(auto|scroll|hidden)/
    };
    var PLACEMENT_REGEX = {
      auto: /\s?auto?\s?/i,
      primary: /^(top|bottom|left|right)$/,
      secondary: /^(top|bottom|left|right|center)$/,
      vertical: /^(top|bottom)$/
    };
    var BODY_REGEX = /(HTML|BODY)/;

    return {

      /**
       * Provides a raw DOM element from a jQuery/jQLite element.
       *
       * @param {element} elem - The element to convert.
       *
       * @returns {element} A HTML element.
       */
      getRawNode: function(elem) {
        return elem.nodeName ? elem : elem[0] || elem;
      },

      /**
       * Provides a parsed number for a style property.  Strips
       * units and casts invalid numbers to 0.
       *
       * @param {string} value - The style value to parse.
       *
       * @returns {number} A valid number.
       */
      parseStyle: function(value) {
        value = parseFloat(value);
        return isFinite(value) ? value : 0;
      },

      /**
       * Provides the closest positioned ancestor.
       *
       * @param {element} element - The element to get the offest parent for.
       *
       * @returns {element} The closest positioned ancestor.
       */
      offsetParent: function(elem) {
        elem = this.getRawNode(elem);

        var offsetParent = elem.offsetParent || $document[0].documentElement;

        function isStaticPositioned(el) {
          return ($window.getComputedStyle(el).position || 'static') === 'static';
        }

        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || $document[0].documentElement;
      },

      /**
       * Provides the scrollbar width, concept from TWBS measureScrollbar()
       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
       * In IE and Edge, scollbar on body and html element overlay and should
       * return a width of 0.
       *
       * @returns {number} The width of the browser scollbar.
       */
      scrollbarWidth: function(isBody) {
        if (isBody) {
          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
            var bodyElem = $document.find('body');
            bodyElem.addClass('uib-position-body-scrollbar-measure');
            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
            bodyElem.removeClass('uib-position-body-scrollbar-measure');
          }
          return BODY_SCROLLBAR_WIDTH;
        }

        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
          $document.find('body').append(scrollElem);
          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
          scrollElem.remove();
        }

        return SCROLLBAR_WIDTH;
      },

      /**
       * Provides the padding required on an element to replace the scrollbar.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
       *     <li>**widthOverflow**: whether the the width is overflowing</li>
       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
       *     <li>**heightOverflow**: whether the the height is overflowing</li>
       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
       *   </ul>
       */
      scrollbarPadding: function(elem) {
        elem = this.getRawNode(elem);

        var elemStyle = $window.getComputedStyle(elem);
        var paddingRight = this.parseStyle(elemStyle.paddingRight);
        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
        var scrollParent = this.scrollParent(elem, false, true);
        var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName));

        return {
          scrollbarWidth: scrollbarWidth,
          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
          right: paddingRight + scrollbarWidth,
          originalRight: paddingRight,
          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
          bottom: paddingBottom + scrollbarWidth,
          originalBottom: paddingBottom
         };
      },

      /**
       * Checks to see if the element is scrollable.
       *
       * @param {element} elem - The element to check.
       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
       *   default is false.
       *
       * @returns {boolean} Whether the element is scrollable.
       */
      isScrollable: function(elem, includeHidden) {
        elem = this.getRawNode(elem);

        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
        var elemStyle = $window.getComputedStyle(elem);
        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
      },

      /**
       * Provides the closest scrollable ancestor.
       * A port of the jQuery UI scrollParent method:
       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
       *
       * @param {element} elem - The element to find the scroll parent of.
       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
       *   default is false.
       * @param {boolean=} [includeSelf=false] - Should the element being passed be
       * included in the scrollable llokup.
       *
       * @returns {element} A HTML element.
       */
      scrollParent: function(elem, includeHidden, includeSelf) {
        elem = this.getRawNode(elem);

        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
        var documentEl = $document[0].documentElement;
        var elemStyle = $window.getComputedStyle(elem);
        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
          return elem;
        }
        var excludeStatic = elemStyle.position === 'absolute';
        var scrollParent = elem.parentElement || documentEl;

        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
          return documentEl;
        }

        while (scrollParent.parentElement && scrollParent !== documentEl) {
          var spStyle = $window.getComputedStyle(scrollParent);
          if (excludeStatic && spStyle.position !== 'static') {
            excludeStatic = false;
          }

          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
            break;
          }
          scrollParent = scrollParent.parentElement;
        }

        return scrollParent;
      },

      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/ - distance to closest positioned
       * ancestor.  Does not account for margins by default like jQuery position.
       *
       * @param {element} elem - The element to caclulate the position on.
       * @param {boolean=} [includeMargins=false] - Should margins be accounted
       * for, default is false.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**width**: the width of the element</li>
       *     <li>**height**: the height of the element</li>
       *     <li>**top**: distance to top edge of offset parent</li>
       *     <li>**left**: distance to left edge of offset parent</li>
       *   </ul>
       */
      position: function(elem, includeMagins) {
        elem = this.getRawNode(elem);

        var elemOffset = this.offset(elem);
        if (includeMagins) {
          var elemStyle = $window.getComputedStyle(elem);
          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
        }
        var parent = this.offsetParent(elem);
        var parentOffset = {top: 0, left: 0};

        if (parent !== $document[0].documentElement) {
          parentOffset = this.offset(parent);
          parentOffset.top += parent.clientTop - parent.scrollTop;
          parentOffset.left += parent.clientLeft - parent.scrollLeft;
        }

        return {
          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
          top: Math.round(elemOffset.top - parentOffset.top),
          left: Math.round(elemOffset.left - parentOffset.left)
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/ - distance to viewport.  Does
       * not account for borders, margins, or padding on the body
       * element.
       *
       * @param {element} elem - The element to calculate the offset on.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**width**: the width of the element</li>
       *     <li>**height**: the height of the element</li>
       *     <li>**top**: distance to top edge of viewport</li>
       *     <li>**right**: distance to bottom edge of viewport</li>
       *   </ul>
       */
      offset: function(elem) {
        elem = this.getRawNode(elem);

        var elemBCR = elem.getBoundingClientRect();
        return {
          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
        };
      },

      /**
       * Provides offset distance to the closest scrollable ancestor
       * or viewport.  Accounts for border and scrollbar width.
       *
       * Right and bottom dimensions represent the distance to the
       * respective edge of the viewport element.  If the element
       * edge extends beyond the viewport, a negative value will be
       * reported.
       *
       * @param {element} elem - The element to get the viewport offset for.
       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
       * of the first scrollable element, default is false.
       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
       * be accounted for, default is true.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**top**: distance to the top content edge of viewport element</li>
       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
       *     <li>**left**: distance to the left content edge of viewport element</li>
       *     <li>**right**: distance to the right content edge of viewport element</li>
       *   </ul>
       */
      viewportOffset: function(elem, useDocument, includePadding) {
        elem = this.getRawNode(elem);
        includePadding = includePadding !== false ? true : false;

        var elemBCR = elem.getBoundingClientRect();
        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
        var offsetParentBCR = offsetParent.getBoundingClientRect();

        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
        if (offsetParent === $document[0].documentElement) {
          offsetBCR.top += $window.pageYOffset;
          offsetBCR.left += $window.pageXOffset;
        }
        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

        if (includePadding) {
          var offsetParentStyle = $window.getComputedStyle(offsetParent);
          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
        }

        return {
          top: Math.round(elemBCR.top - offsetBCR.top),
          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
          left: Math.round(elemBCR.left - offsetBCR.left),
          right: Math.round(offsetBCR.right - elemBCR.right)
        };
      },

      /**
       * Provides an array of placement values parsed from a placement string.
       * Along with the 'auto' indicator, supported placement strings are:
       *   <ul>
       *     <li>top: element on top, horizontally centered on host element.</li>
       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
       *     <li>left: element on left, vertically centered on host element.</li>
       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
       *     <li>right: element on right, vertically centered on host element.</li>
       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
       *   </ul>
       * A placement string with an 'auto' indicator is expected to be
       * space separated from the placement, i.e: 'auto bottom-left'  If
       * the primary and secondary placement values do not match 'top,
       * bottom, left, right' then 'top' will be the primary placement and
       * 'center' will be the secondary placement.  If 'auto' is passed, true
       * will be returned as the 3rd value of the array.
       *
       * @param {string} placement - The placement string to parse.
       *
       * @returns {array} An array with the following values
       * <ul>
       *   <li>**[0]**: The primary placement.</li>
       *   <li>**[1]**: The secondary placement.</li>
       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
       * </ul>
       */
      parsePlacement: function(placement) {
        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
        if (autoPlace) {
          placement = placement.replace(PLACEMENT_REGEX.auto, '');
        }

        placement = placement.split('-');

        placement[0] = placement[0] || 'top';
        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
          placement[0] = 'top';
        }

        placement[1] = placement[1] || 'center';
        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
          placement[1] = 'center';
        }

        if (autoPlace) {
          placement[2] = true;
        } else {
          placement[2] = false;
        }

        return placement;
      },

      /**
       * Provides coordinates for an element to be positioned relative to
       * another element.  Passing 'auto' as part of the placement parameter
       * will enable smart placement - where the element fits. i.e:
       * 'auto left-top' will check to see if there is enough space to the left
       * of the hostElem to fit the targetElem, if not place right (same for secondary
       * top placement).  Available space is calculated using the viewportOffset
       * function.
       *
       * @param {element} hostElem - The element to position against.
       * @param {element} targetElem - The element to position.
       * @param {string=} [placement=top] - The placement for the targetElem,
       *   default is 'top'. 'center' is assumed as secondary placement for
       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
       *   <ul>
       *     <li>top</li>
       *     <li>top-right</li>
       *     <li>top-left</li>
       *     <li>bottom</li>
       *     <li>bottom-left</li>
       *     <li>bottom-right</li>
       *     <li>left</li>
       *     <li>left-top</li>
       *     <li>left-bottom</li>
       *     <li>right</li>
       *     <li>right-top</li>
       *     <li>right-bottom</li>
       *   </ul>
       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
       *   be calculated from the body element, default is false.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**top**: Value for targetElem top.</li>
       *     <li>**left**: Value for targetElem left.</li>
       *     <li>**placement**: The resolved placement.</li>
       *   </ul>
       */
      positionElements: function(hostElem, targetElem, placement, appendToBody) {
        hostElem = this.getRawNode(hostElem);
        targetElem = this.getRawNode(targetElem);

        // need to read from prop to support tests.
        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

        placement = this.parsePlacement(placement);

        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
        var targetElemPos = {top: 0, left: 0, placement: ''};

        if (placement[2]) {
          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

          var targetElemStyle = $window.getComputedStyle(targetElem);
          var adjustedSize = {
            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
          };

          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
                         placement[0];

          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
                         placement[1];

          if (placement[1] === 'center') {
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
                placement[1] = 'left';
              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
                placement[1] = 'right';
              }
            } else {
              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
                placement[1] = 'top';
              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
                placement[1] = 'bottom';
              }
            }
          }
        }

        switch (placement[0]) {
          case 'top':
            targetElemPos.top = hostElemPos.top - targetHeight;
            break;
          case 'bottom':
            targetElemPos.top = hostElemPos.top + hostElemPos.height;
            break;
          case 'left':
            targetElemPos.left = hostElemPos.left - targetWidth;
            break;
          case 'right':
            targetElemPos.left = hostElemPos.left + hostElemPos.width;
            break;
        }

        switch (placement[1]) {
          case 'top':
            targetElemPos.top = hostElemPos.top;
            break;
          case 'bottom':
            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
            break;
          case 'left':
            targetElemPos.left = hostElemPos.left;
            break;
          case 'right':
            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
            break;
          case 'center':
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
            } else {
              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
            }
            break;
        }

        targetElemPos.top = Math.round(targetElemPos.top);
        targetElemPos.left = Math.round(targetElemPos.left);
        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

        return targetElemPos;
      },

      /**
       * Provides a way to adjust the top positioning after first
       * render to correctly align element to top after content
       * rendering causes resized element height
       *
       * @param {array} placementClasses - The array of strings of classes
       * element should have.
       * @param {object} containerPosition - The object with container
       * position information
       * @param {number} initialHeight - The initial height for the elem.
       * @param {number} currentHeight - The current height for the elem.
       */
      adjustTop: function(placementClasses, containerPosition, initialHeight, currentHeight) {
        if (placementClasses.indexOf('top') !== -1 && initialHeight !== currentHeight) {
          return {
            top: containerPosition.top - currentHeight + 'px'
          };
        }
      },

      /**
       * Provides a way for positioning tooltip & dropdown
       * arrows when using placement options beyond the standard
       * left, right, top, or bottom.
       *
       * @param {element} elem - The tooltip/dropdown element.
       * @param {string} placement - The placement for the elem.
       */
      positionArrow: function(elem, placement) {
        elem = this.getRawNode(elem);

        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
        if (!innerElem) {
          return;
        }

        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
        if (!arrowElem) {
          return;
        }

        var arrowCss = {
          top: '',
          bottom: '',
          left: '',
          right: ''
        };

        placement = this.parsePlacement(placement);
        if (placement[1] === 'center') {
          // no adjustment necessary - just reset styles
          angular.element(arrowElem).css(arrowCss);
          return;
        }

        var borderProp = 'border-' + placement[0] + '-width';
        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

        var borderRadiusProp = 'border-';
        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
          borderRadiusProp += placement[0] + '-' + placement[1];
        } else {
          borderRadiusProp += placement[1] + '-' + placement[0];
        }
        borderRadiusProp += '-radius';
        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

        switch (placement[0]) {
          case 'top':
            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'bottom':
            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'left':
            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'right':
            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
            break;
        }

        arrowCss[placement[1]] = borderRadius;

        angular.element(arrowElem).css(arrowCss);
      }
    };
  }]);

angular.module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

.value('$datepickerPopupLiteralWarning', true)

.constant('uibDatepickerPopupConfig', {
  altInputFormats: [],
  appendToBody: false,
  clearText: 'Clear',
  closeOnDateSelection: true,
  closeText: 'Done',
  currentText: 'Today',
  datepickerPopup: 'yyyy-MM-dd',
  datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
  datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
  html5Types: {
    date: 'yyyy-MM-dd',
    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
    'month': 'yyyy-MM'
  },
  onOpenFocus: true,
  showButtonBar: true,
  placement: 'auto bottom-left'
})

.controller('UibDatepickerPopupController', ['$scope', '$element', '$attrs', '$compile', '$log', '$parse', '$window', '$document', '$rootScope', '$uibPosition', 'dateFilter', 'uibDateParser', 'uibDatepickerPopupConfig', '$timeout', 'uibDatepickerConfig', '$datepickerPopupLiteralWarning',
function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
  var cache = {},
    isHtml5DateInput = false;
  var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus,
    datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl,
    ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [];

  this.init = function(_ngModel_) {
    ngModel = _ngModel_;
    ngModelOptions = extractOptions(ngModel);
    closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ?
      $scope.$parent.$eval($attrs.closeOnDateSelection) :
      datepickerPopupConfig.closeOnDateSelection;
    appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ?
      $scope.$parent.$eval($attrs.datepickerAppendToBody) :
      datepickerPopupConfig.appendToBody;
    onOpenFocus = angular.isDefined($attrs.onOpenFocus) ?
      $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
    datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ?
      $attrs.datepickerPopupTemplateUrl :
      datepickerPopupConfig.datepickerPopupTemplateUrl;
    datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ?
      $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
    altInputFormats = angular.isDefined($attrs.altInputFormats) ?
      $scope.$parent.$eval($attrs.altInputFormats) :
      datepickerPopupConfig.altInputFormats;

    $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ?
      $scope.$parent.$eval($attrs.showButtonBar) :
      datepickerPopupConfig.showButtonBar;

    if (datepickerPopupConfig.html5Types[$attrs.type]) {
      dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
      isHtml5DateInput = true;
    } else {
      dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
      $attrs.$observe('uibDatepickerPopup', function(value, oldValue) {
        var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
        // Invalidate the $modelValue to ensure that formatters re-run
        // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
        if (newDateFormat !== dateFormat) {
          dateFormat = newDateFormat;
          ngModel.$modelValue = null;

          if (!dateFormat) {
            throw new Error('uibDatepickerPopup must have a date format specified.');
          }
        }
      });
    }

    if (!dateFormat) {
      throw new Error('uibDatepickerPopup must have a date format specified.');
    }

    if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
      throw new Error('HTML5 date input types do not support custom formats.');
    }

    // popup element used to display calendar
    popupEl = angular.element('<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>');

    popupEl.attr({
      'ng-model': 'date',
      'ng-change': 'dateSelection(date)',
      'template-url': datepickerPopupTemplateUrl
    });

    // datepicker element
    datepickerEl = angular.element(popupEl.children()[0]);
    datepickerEl.attr('template-url', datepickerTemplateUrl);

    if (!$scope.datepickerOptions) {
      $scope.datepickerOptions = {};
    }

    if (isHtml5DateInput) {
      if ($attrs.type === 'month') {
        $scope.datepickerOptions.datepickerMode = 'month';
        $scope.datepickerOptions.minMode = 'month';
      }
    }

    datepickerEl.attr('datepicker-options', 'datepickerOptions');

    if (!isHtml5DateInput) {
      // Internal API to maintain the correct ng-invalid-[key] class
      ngModel.$$parserName = 'date';
      ngModel.$validators.date = validator;
      ngModel.$parsers.unshift(parseDate);
      ngModel.$formatters.push(function(value) {
        if (ngModel.$isEmpty(value)) {
          $scope.date = value;
          return value;
        }

        if (angular.isNumber(value)) {
          value = new Date(value);
        }

        $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption('timezone'));

        return dateParser.filter($scope.date, dateFormat);
      });
    } else {
      ngModel.$formatters.push(function(value) {
        $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption('timezone'));
        return value;
      });
    }

    // Detect changes in the view from the text box
    ngModel.$viewChangeListeners.push(function() {
      $scope.date = parseDateString(ngModel.$viewValue);
    });

    $element.on('keydown', inputKeydownBind);

    $popup = $compile(popupEl)($scope);
    // Prevent jQuery cache memory leak (template is now redundant after linking)
    popupEl.remove();

    if (appendToBody) {
      $document.find('body').append($popup);
    } else {
      $element.after($popup);
    }

    $scope.$on('$destroy', function() {
      if ($scope.isOpen === true) {
        if (!$rootScope.$$phase) {
          $scope.$apply(function() {
            $scope.isOpen = false;
          });
        }
      }

      $popup.remove();
      $element.off('keydown', inputKeydownBind);
      $document.off('click', documentClickBind);
      if (scrollParentEl) {
        scrollParentEl.off('scroll', positionPopup);
      }
      angular.element($window).off('resize', positionPopup);

      //Clear all watch listeners on destroy
      while (watchListeners.length) {
        watchListeners.shift()();
      }
    });
  };

  $scope.getText = function(key) {
    return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
  };

  $scope.isDisabled = function(date) {
    if (date === 'today') {
      date = dateParser.fromTimezone(new Date(), ngModelOptions.getOption('timezone'));
    }

    var dates = {};
    angular.forEach(['minDate', 'maxDate'], function(key) {
      if (!$scope.datepickerOptions[key]) {
        dates[key] = null;
      } else if (angular.isDate($scope.datepickerOptions[key])) {
        dates[key] = new Date($scope.datepickerOptions[key]);
      } else {
        if ($datepickerPopupLiteralWarning) {
          $log.warn('Literal date support has been deprecated, please switch to date object usage');
        }

        dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'));
      }
    });

    return $scope.datepickerOptions &&
      dates.minDate && $scope.compare(date, dates.minDate) < 0 ||
      dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
  };

  $scope.compare = function(date1, date2) {
    return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
  };

  // Inner change
  $scope.dateSelection = function(dt) {
    $scope.date = dt;
    var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
    $element.val(date);
    ngModel.$setViewValue(date);

    if (closeOnDateSelection) {
      $scope.isOpen = false;
      $element[0].focus();
    }
  };

  $scope.keydown = function(evt) {
    if (evt.which === 27) {
      evt.stopPropagation();
      $scope.isOpen = false;
      $element[0].focus();
    }
  };

  $scope.select = function(date, evt) {
    evt.stopPropagation();

    if (date === 'today') {
      var today = new Date();
      if (angular.isDate($scope.date)) {
        date = new Date($scope.date);
        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
      } else {
        date = dateParser.fromTimezone(today, ngModelOptions.getOption('timezone'));
        date.setHours(0, 0, 0, 0);
      }
    }
    $scope.dateSelection(date);
  };

  $scope.close = function(evt) {
    evt.stopPropagation();

    $scope.isOpen = false;
    $element[0].focus();
  };

  $scope.disabled = angular.isDefined($attrs.disabled) || false;
  if ($attrs.ngDisabled) {
    watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
      $scope.disabled = disabled;
    }));
  }

  $scope.$watch('isOpen', function(value) {
    if (value) {
      if (!$scope.disabled) {
        $timeout(function() {
          positionPopup();

          if (onOpenFocus) {
            $scope.$broadcast('uib:datepicker.focus');
          }

          $document.on('click', documentClickBind);

          var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
          if (appendToBody || $position.parsePlacement(placement)[2]) {
            scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
            if (scrollParentEl) {
              scrollParentEl.on('scroll', positionPopup);
            }
          } else {
            scrollParentEl = null;
          }

          angular.element($window).on('resize', positionPopup);
        }, 0, false);
      } else {
        $scope.isOpen = false;
      }
    } else {
      $document.off('click', documentClickBind);
      if (scrollParentEl) {
        scrollParentEl.off('scroll', positionPopup);
      }
      angular.element($window).off('resize', positionPopup);
    }
  });

  function cameltoDash(string) {
    return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
  }

  function parseDateString(viewValue) {
    var date = dateParser.parse(viewValue, dateFormat, $scope.date);
    if (isNaN(date)) {
      for (var i = 0; i < altInputFormats.length; i++) {
        date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
        if (!isNaN(date)) {
          return date;
        }
      }
    }
    return date;
  }

  function parseDate(viewValue) {
    if (angular.isNumber(viewValue)) {
      // presumably timestamp to date object
      viewValue = new Date(viewValue);
    }

    if (!viewValue) {
      return null;
    }

    if (angular.isDate(viewValue) && !isNaN(viewValue)) {
      return viewValue;
    }

    if (angular.isString(viewValue)) {
      var date = parseDateString(viewValue);
      if (!isNaN(date)) {
        return dateParser.toTimezone(date, ngModelOptions.getOption('timezone'));
      }
    }

    return ngModelOptions.getOption('allowInvalid') ? viewValue : undefined;
  }

  function validator(modelValue, viewValue) {
    var value = modelValue || viewValue;

    if (!$attrs.ngRequired && !value) {
      return true;
    }

    if (angular.isNumber(value)) {
      value = new Date(value);
    }

    if (!value) {
      return true;
    }

    if (angular.isDate(value) && !isNaN(value)) {
      return true;
    }

    if (angular.isString(value)) {
      return !isNaN(parseDateString(value));
    }

    return false;
  }

  function documentClickBind(event) {
    if (!$scope.isOpen && $scope.disabled) {
      return;
    }

    var popup = $popup[0];
    var dpContainsTarget = $element[0].contains(event.target);
    // The popup node may not be an element node
    // In some browsers (IE) only element nodes have the 'contains' function
    var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
    if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
      $scope.$apply(function() {
        $scope.isOpen = false;
      });
    }
  }

  function inputKeydownBind(evt) {
    if (evt.which === 27 && $scope.isOpen) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.$apply(function() {
        $scope.isOpen = false;
      });
      $element[0].focus();
    } else if (evt.which === 40 && !$scope.isOpen) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.$apply(function() {
        $scope.isOpen = true;
      });
    }
  }

  function positionPopup() {
    if ($scope.isOpen) {
      var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'));
      var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
      var position = $position.positionElements($element, dpElement, placement, appendToBody);
      dpElement.css({top: position.top + 'px', left: position.left + 'px'});
      if (dpElement.hasClass('uib-position-measure')) {
        dpElement.removeClass('uib-position-measure');
      }
    }
  }

  function extractOptions(ngModelCtrl) {
    var ngModelOptions;

    if (angular.version.minor < 6) { // in angular < 1.6 $options could be missing
      // guarantee a value
      ngModelOptions = angular.isObject(ngModelCtrl.$options) ?
        ngModelCtrl.$options :
        {
          timezone: null
        };

      // mimic 1.6+ api
      ngModelOptions.getOption = function (key) {
        return ngModelOptions[key];
      };
    } else { // in angular >=1.6 $options is always present
      ngModelOptions = ngModelCtrl.$options;
    }

    return ngModelOptions;
  }

  $scope.$on('uib:datepicker.mode', function() {
    $timeout(positionPopup, 0, false);
  });
}])

.directive('uibDatepickerPopup', function() {
  return {
    require: ['ngModel', 'uibDatepickerPopup'],
    controller: 'UibDatepickerPopupController',
    scope: {
      datepickerOptions: '=?',
      isOpen: '=?',
      currentText: '@',
      clearText: '@',
      closeText: '@'
    },
    link: function(scope, element, attrs, ctrls) {
      var ngModel = ctrls[0],
        ctrl = ctrls[1];

      ctrl.init(ngModel);
    }
  };
})

.directive('uibDatepickerPopupWrap', function() {
  return {
    restrict: 'A',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html';
    }
  };
});

angular.module('ui.bootstrap.debounce', [])
/**
 * A helper, internal service that debounces a function
 */
  .factory('$$debounce', ['$timeout', function($timeout) {
    return function(callback, debounceTime) {
      var timeoutPromise;

      return function() {
        var self = this;
        var args = Array.prototype.slice.call(arguments);
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }

        timeoutPromise = $timeout(function() {
          callback.apply(self, args);
        }, debounceTime);
      };
    };
  }]);

angular.module('ui.bootstrap.multiMap', [])
/**
 * A helper, internal data structure that stores all references attached to key
 */
  .factory('$$multiMap', function() {
    return {
      createNew: function() {
        var map = {};

        return {
          entries: function() {
            return Object.keys(map).map(function(key) {
              return {
                key: key,
                value: map[key]
              };
            });
          },
          get: function(key) {
            return map[key];
          },
          hasKey: function(key) {
            return !!map[key];
          },
          keys: function() {
            return Object.keys(map);
          },
          put: function(key, value) {
            if (!map[key]) {
              map[key] = [];
            }

            map[key].push(value);
          },
          remove: function(key, value) {
            var values = map[key];

            if (!values) {
              return;
            }

            var idx = values.indexOf(value);

            if (idx !== -1) {
              values.splice(idx, 1);
            }

            if (!values.length) {
              delete map[key];
            }
          }
        };
      }
    };
  });

angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.multiMap', 'ui.bootstrap.position'])

.constant('uibDropdownConfig', {
  appendToOpenClass: 'uib-dropdown-open',
  openClass: 'open'
})

.service('uibDropdownService', ['$document', '$rootScope', '$$multiMap', function($document, $rootScope, $$multiMap) {
  var openScope = null;
  var openedContainers = $$multiMap.createNew();

  this.isOnlyOpen = function(dropdownScope, appendTo) {
    var openedDropdowns = openedContainers.get(appendTo);
    if (openedDropdowns) {
      var openDropdown = openedDropdowns.reduce(function(toClose, dropdown) {
        if (dropdown.scope === dropdownScope) {
          return dropdown;
        }

        return toClose;
      }, {});
      if (openDropdown) {
        return openedDropdowns.length === 1;
      }
    }

    return false;
  };

  this.open = function(dropdownScope, element, appendTo) {
    if (!openScope) {
      $document.on('click', closeDropdown);
    }

    if (openScope && openScope !== dropdownScope) {
      openScope.isOpen = false;
    }

    openScope = dropdownScope;

    if (!appendTo) {
      return;
    }

    var openedDropdowns = openedContainers.get(appendTo);
    if (openedDropdowns) {
      var openedScopes = openedDropdowns.map(function(dropdown) {
        return dropdown.scope;
      });
      if (openedScopes.indexOf(dropdownScope) === -1) {
        openedContainers.put(appendTo, {
          scope: dropdownScope
        });
      }
    } else {
      openedContainers.put(appendTo, {
        scope: dropdownScope
      });
    }
  };

  this.close = function(dropdownScope, element, appendTo) {
    if (openScope === dropdownScope) {
      $document.off('click', closeDropdown);
      $document.off('keydown', this.keybindFilter);
      openScope = null;
    }

    if (!appendTo) {
      return;
    }

    var openedDropdowns = openedContainers.get(appendTo);
    if (openedDropdowns) {
      var dropdownToClose = openedDropdowns.reduce(function(toClose, dropdown) {
        if (dropdown.scope === dropdownScope) {
          return dropdown;
        }

        return toClose;
      }, {});
      if (dropdownToClose) {
        openedContainers.remove(appendTo, dropdownToClose);
      }
    }
  };

  var closeDropdown = function(evt) {
    // This method may still be called during the same mouse event that
    // unbound this event handler. So check openScope before proceeding.
    if (!openScope || !openScope.isOpen) { return; }

    if (evt && openScope.getAutoClose() === 'disabled') { return; }

    if (evt && evt.which === 3) { return; }

    var toggleElement = openScope.getToggleElement();
    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
      return;
    }

    var dropdownElement = openScope.getDropdownElement();
    if (evt && openScope.getAutoClose() === 'outsideClick' &&
      dropdownElement && dropdownElement[0].contains(evt.target)) {
      return;
    }

    openScope.focusToggleElement();
    openScope.isOpen = false;

    if (!$rootScope.$$phase) {
      openScope.$apply();
    }
  };

  this.keybindFilter = function(evt) {
    if (!openScope) {
      // see this.close as ESC could have been pressed which kills the scope so we can not proceed
      return;
    }

    var dropdownElement = openScope.getDropdownElement();
    var toggleElement = openScope.getToggleElement();
    var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target);
    var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target);
    if (evt.which === 27) {
      evt.stopPropagation();
      openScope.focusToggleElement();
      closeDropdown();
    } else if (openScope.isKeynavEnabled() && [38, 40].indexOf(evt.which) !== -1 && openScope.isOpen && (dropdownElementTargeted || toggleElementTargeted)) {
      evt.preventDefault();
      evt.stopPropagation();
      openScope.focusDropdownEntry(evt.which);
    }
  };
}])

.controller('UibDropdownController', ['$scope', '$element', '$attrs', '$parse', 'uibDropdownConfig', 'uibDropdownService', '$animate', '$uibPosition', '$document', '$compile', '$templateRequest', function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
  var self = this,
    scope = $scope.$new(), // create a child scope so we are not polluting original one
    templateScope,
    appendToOpenClass = dropdownConfig.appendToOpenClass,
    openClass = dropdownConfig.openClass,
    getIsOpen,
    setIsOpen = angular.noop,
    toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
    keynavEnabled = false,
    selectedOption = null,
    body = $document.find('body');

  $element.addClass('dropdown');

  this.init = function() {
    if ($attrs.isOpen) {
      getIsOpen = $parse($attrs.isOpen);
      setIsOpen = getIsOpen.assign;

      $scope.$watch(getIsOpen, function(value) {
        scope.isOpen = !!value;
      });
    }

    keynavEnabled = angular.isDefined($attrs.keyboardNav);
  };

  this.toggle = function(open) {
    scope.isOpen = arguments.length ? !!open : !scope.isOpen;
    if (angular.isFunction(setIsOpen)) {
      setIsOpen(scope, scope.isOpen);
    }

    return scope.isOpen;
  };

  // Allow other directives to watch status
  this.isOpen = function() {
    return scope.isOpen;
  };

  scope.getToggleElement = function() {
    return self.toggleElement;
  };

  scope.getAutoClose = function() {
    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
  };

  scope.getElement = function() {
    return $element;
  };

  scope.isKeynavEnabled = function() {
    return keynavEnabled;
  };

  scope.focusDropdownEntry = function(keyCode) {
    var elems = self.dropdownMenu ? //If append to body is used.
      angular.element(self.dropdownMenu).find('a') :
      $element.find('ul').eq(0).find('a');

    switch (keyCode) {
      case 40: {
        if (!angular.isNumber(self.selectedOption)) {
          self.selectedOption = 0;
        } else {
          self.selectedOption = self.selectedOption === elems.length - 1 ?
            self.selectedOption :
            self.selectedOption + 1;
        }
        break;
      }
      case 38: {
        if (!angular.isNumber(self.selectedOption)) {
          self.selectedOption = elems.length - 1;
        } else {
          self.selectedOption = self.selectedOption === 0 ?
            0 : self.selectedOption - 1;
        }
        break;
      }
    }
    elems[self.selectedOption].focus();
  };

  scope.getDropdownElement = function() {
    return self.dropdownMenu;
  };

  scope.focusToggleElement = function() {
    if (self.toggleElement) {
      self.toggleElement[0].focus();
    }
  };

  function removeDropdownMenu() {
    $element.append(self.dropdownMenu);
  }

  scope.$watch('isOpen', function(isOpen, wasOpen) {
    var appendTo = null,
      appendToBody = false;

    if (angular.isDefined($attrs.dropdownAppendTo)) {
      var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
      if (appendToEl) {
        appendTo = angular.element(appendToEl);
      }
    }

    if (angular.isDefined($attrs.dropdownAppendToBody)) {
      var appendToBodyValue = $parse($attrs.dropdownAppendToBody)(scope);
      if (appendToBodyValue !== false) {
        appendToBody = true;
      }
    }

    if (appendToBody && !appendTo) {
      appendTo = body;
    }

    if (appendTo && self.dropdownMenu) {
      if (isOpen) {
        appendTo.append(self.dropdownMenu);
        $element.on('$destroy', removeDropdownMenu);
      } else {
        $element.off('$destroy', removeDropdownMenu);
        removeDropdownMenu();
      }
    }

    if (appendTo && self.dropdownMenu) {
      var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
        css,
        rightalign,
        scrollbarPadding,
        scrollbarWidth = 0;

      css = {
        top: pos.top + 'px',
        display: isOpen ? 'block' : 'none'
      };

      rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
      if (!rightalign) {
        css.left = pos.left + 'px';
        css.right = 'auto';
      } else {
        css.left = 'auto';
        scrollbarPadding = $position.scrollbarPadding(appendTo);

        if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
          scrollbarWidth = scrollbarPadding.scrollbarWidth;
        }

        css.right = window.innerWidth - scrollbarWidth -
          (pos.left + $element.prop('offsetWidth')) + 'px';
      }

      // Need to adjust our positioning to be relative to the appendTo container
      // if it's not the body element
      if (!appendToBody) {
        var appendOffset = $position.offset(appendTo);

        css.top = pos.top - appendOffset.top + 'px';

        if (!rightalign) {
          css.left = pos.left - appendOffset.left + 'px';
        } else {
          css.right = window.innerWidth -
            (pos.left - appendOffset.left + $element.prop('offsetWidth')) + 'px';
        }
      }

      self.dropdownMenu.css(css);
    }

    var openContainer = appendTo ? appendTo : $element;
    var dropdownOpenClass = appendTo ? appendToOpenClass : openClass;
    var hasOpenClass = openContainer.hasClass(dropdownOpenClass);
    var isOnlyOpen = uibDropdownService.isOnlyOpen($scope, appendTo);

    if (hasOpenClass === !isOpen) {
      var toggleClass;
      if (appendTo) {
        toggleClass = !isOnlyOpen ? 'addClass' : 'removeClass';
      } else {
        toggleClass = isOpen ? 'addClass' : 'removeClass';
      }
      $animate[toggleClass](openContainer, dropdownOpenClass).then(function() {
        if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
          toggleInvoker($scope, { open: !!isOpen });
        }
      });
    }

    if (isOpen) {
      if (self.dropdownMenuTemplateUrl) {
        $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
          templateScope = scope.$new();
          $compile(tplContent.trim())(templateScope, function(dropdownElement) {
            var newEl = dropdownElement;
            self.dropdownMenu.replaceWith(newEl);
            self.dropdownMenu = newEl;
            $document.on('keydown', uibDropdownService.keybindFilter);
          });
        });
      } else {
        $document.on('keydown', uibDropdownService.keybindFilter);
      }

      scope.focusToggleElement();
      uibDropdownService.open(scope, $element, appendTo);
    } else {
      uibDropdownService.close(scope, $element, appendTo);
      if (self.dropdownMenuTemplateUrl) {
        if (templateScope) {
          templateScope.$destroy();
        }
        var newEl = angular.element('<ul class="dropdown-menu"></ul>');
        self.dropdownMenu.replaceWith(newEl);
        self.dropdownMenu = newEl;
      }

      self.selectedOption = null;
    }

    if (angular.isFunction(setIsOpen)) {
      setIsOpen($scope, isOpen);
    }
  });
}])

.directive('uibDropdown', function() {
  return {
    controller: 'UibDropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init();
    }
  };
})

.directive('uibDropdownMenu', function() {
  return {
    restrict: 'A',
    require: '?^uibDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
        return;
      }

      element.addClass('dropdown-menu');

      var tplUrl = attrs.templateUrl;
      if (tplUrl) {
        dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
      }

      if (!dropdownCtrl.dropdownMenu) {
        dropdownCtrl.dropdownMenu = element;
      }
    }
  };
})

.directive('uibDropdownToggle', function() {
  return {
    require: '?^uibDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl) {
        return;
      }

      element.addClass('dropdown-toggle');

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if (!element.hasClass('disabled') && !attrs.disabled) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.on('click', toggleDropdown);

      // WAI-ARIA
      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.off('click', toggleDropdown);
      });
    }
  };
});

angular.module('ui.bootstrap.stackedMap', [])
/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function() {
    return {
      createNew: function() {
        var stack = [];

        return {
          add: function(key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function(key) {
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function() {
            return stack[stack.length - 1];
          },
          remove: function(key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function() {
            return stack.pop();
          },
          length: function() {
            return stack.length;
          }
        };
      }
    };
  });
angular.module('ui.bootstrap.modal', ['ui.bootstrap.multiMap', 'ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
/**
 * Pluggable resolve mechanism for the modal resolve resolution
 * Supports UI Router's $resolve service
 */
  .provider('$uibResolve', function() {
    var resolve = this;
    this.resolver = null;

    this.setResolver = function(resolver) {
      this.resolver = resolver;
    };

    this.$get = ['$injector', '$q', function($injector, $q) {
      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
      return {
        resolve: function(invocables, locals, parent, self) {
          if (resolver) {
            return resolver.resolve(invocables, locals, parent, self);
          }

          var promises = [];

          angular.forEach(invocables, function(value) {
            if (angular.isFunction(value) || angular.isArray(value)) {
              promises.push($q.resolve($injector.invoke(value)));
            } else if (angular.isString(value)) {
              promises.push($q.resolve($injector.get(value)));
            } else {
              promises.push($q.resolve(value));
            }
          });

          return $q.all(promises).then(function(resolves) {
            var resolveObj = {};
            var resolveIter = 0;
            angular.forEach(invocables, function(value, key) {
              resolveObj[key] = resolves[resolveIter++];
            });

            return resolveObj;
          });
        }
      };
    }];
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
  function($animate, $injector, $modalStack) {
    return {
      restrict: 'A',
      compile: function(tElement, tAttrs) {
        tElement.addClass(tAttrs.backdropClass);
        return linkFn;
      }
    };

    function linkFn(scope, element, attrs) {
      if (attrs.modalInClass) {
        $animate.addClass(element, attrs.modalInClass);

        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
          var done = setIsAsync();
          if (scope.modalOptions.animation) {
            $animate.removeClass(element, attrs.modalInClass).then(done);
          } else {
            done();
          }
        });
      }
    }
  }])

  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
  function($modalStack, $q, $animateCss, $document) {
    return {
      scope: {
        index: '@'
      },
      restrict: 'A',
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || 'uib/template/modal/window.html';
      },
      link: function(scope, element, attrs) {
        element.addClass(attrs.windowTopClass || '');
        scope.size = attrs.size;

        scope.close = function(evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop &&
            modal.value.backdrop !== 'static' &&
            evt.target === evt.currentTarget) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };

        // moved from template to fix issue #2280
        element.on('click', scope.close);

        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
        // We can detect that by using this property in the template associated with this directive and then use
        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
        scope.$isRendered = true;

        // Deferred object that will be resolved when this modal is rendered.
        var modalRenderDeferObj = $q.defer();
        // Resolve render promise post-digest
        scope.$$postDigest(function() {
          modalRenderDeferObj.resolve();
        });

        modalRenderDeferObj.promise.then(function() {
          var animationPromise = null;

          if (attrs.modalInClass) {
            animationPromise = $animateCss(element, {
              addClass: attrs.modalInClass
            }).start();

            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
              var done = setIsAsync();
              $animateCss(element, {
                removeClass: attrs.modalInClass
              }).start().then(done);
            });
          }


          $q.when(animationPromise).then(function() {
            // Notify {@link $modalStack} that modal is rendered.
            var modal = $modalStack.getTop();
            if (modal) {
              $modalStack.modalRendered(modal.key);
            }

            /**
             * If something within the freshly-opened modal already has focus (perhaps via a
             * directive that causes focus) then there's no need to try to focus anything.
             */
            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
              var inputWithAutofocus = element[0].querySelector('[autofocus]');
              /**
               * Auto-focusing of a freshly-opened modal element causes any child elements
               * with the autofocus attribute to lose focus. This is an issue on touch
               * based devices which will show and then hide the onscreen keyboard.
               * Attempts to refocus the autofocus element via JavaScript will not reopen
               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
               * the modal element if the modal does not contain an autofocus element.
               */
              if (inputWithAutofocus) {
                inputWithAutofocus.focus();
              } else {
                element[0].focus();
              }
            }
          });
        });
      }
    };
  }])

  .directive('uibModalAnimationClass', function() {
    return {
      compile: function(tElement, tAttrs) {
        if (tAttrs.modalAnimation) {
          tElement.addClass(tAttrs.uibModalAnimationClass);
        }
      }
    };
  })

  .directive('uibModalTransclude', ['$animate', function($animate) {
    return {
      link: function(scope, element, attrs, controller, transclude) {
        transclude(scope.$parent, function(clone) {
          element.empty();
          $animate.enter(clone, element);
        });
      }
    };
  }])

  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var openedClasses = $$multiMap.createNew();
      var $modalStack = {
        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
      };
      var topModalIndex = 0;
      var previousTopOpenedModal = null;
      var ARIA_HIDDEN_ATTRIBUTE_NAME = 'data-bootstrap-modal-aria-hidden-count';

      //Modal focus behavior
      var tabbableSelector = 'a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']), ' +
        'button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']), textarea:not([disabled]):not([tabindex=\'-1\']), ' +
        'iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]';
      var scrollbarPadding;
      var SNAKE_CASE_REGEXP = /[A-Z]/g;

      // TODO: extract into common dependency with tooltip
      function snake_case(name) {
        var separator = '-';
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
          return (pos ? separator : '') + letter.toLowerCase();
        });
      }

      function isVisible(element) {
        return !!(element.offsetWidth ||
          element.offsetHeight ||
          element.getClientRects().length);
      }

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }

        // If any backdrop exist, ensure that it's index is always
        // right below the top modal
        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
          topBackdropIndex = topModalIndex;
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var modalWindow = openedWindows.get(modalInstance).value;
        var appendToElement = modalWindow.appendTo;

        //clean up the stack
        openedWindows.remove(modalInstance);
        previousTopOpenedModal = openedWindows.top();
        if (previousTopOpenedModal) {
          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
        }

        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
          openedClasses.remove(modalBodyClass, modalInstance);
          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
            if (scrollbarPadding.originalRight) {
              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
            } else {
              appendToElement.css({paddingRight: ''});
            }
            scrollbarPadding = null;
          }
          toggleTopWindowClass(true);
        }, modalWindow.closedDeferred);
        checkRemoveBackdrop();

        //move focus to specified element if available, or else to body
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
          elementToReceiveFocus.focus();
        } else if (appendToElement.focus) {
          appendToElement.focus();
        }
      }

      // Add or remove "windowTopClass" from the top window in the stack
      function toggleTopWindowClass(toggleSwitch) {
        var modalWindow;

        if (openedWindows.length() > 0) {
          modalWindow = openedWindows.top().value;
          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
        }
      }

      function checkRemoveBackdrop() {
        //remove backdrop if no longer needed
        if (backdropDomEl && backdropIndex() === -1) {
          var backdropScopeRef = backdropScope;
          removeAfterAnimate(backdropDomEl, backdropScope, function() {
            backdropScopeRef = null;
          });
          backdropDomEl = undefined;
          backdropScope = undefined;
        }
      }

      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
        var asyncDeferred;
        var asyncPromise = null;
        var setIsAsync = function() {
          if (!asyncDeferred) {
            asyncDeferred = $q.defer();
            asyncPromise = asyncDeferred.promise;
          }

          return function asyncDone() {
            asyncDeferred.resolve();
          };
        };
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

        // Note that it's intentional that asyncPromise might be null.
        // That's when setIsAsync has not been called during the
        // NOW_CLOSING_EVENT broadcast.
        return $q.when(asyncPromise).then(afterAnimating);

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          $animate.leave(domEl).then(function() {
            if (done) {
              done();
            }

            domEl.remove();
            if (closedDeferred) {
              closedDeferred.resolve();
            }
          });

          scope.$destroy();
        }
      }

      $document.on('keydown', keydownListener);

      $rootScope.$on('$destroy', function() {
        $document.off('keydown', keydownListener);
      });

      function keydownListener(evt) {
        if (evt.isDefaultPrevented()) {
          return evt;
        }

        var modal = openedWindows.top();
        if (modal) {
          switch (evt.which) {
            case 27: {
              if (modal.value.keyboard) {
                evt.preventDefault();
                $rootScope.$apply(function() {
                  $modalStack.dismiss(modal.key, 'escape key press');
                });
              }
              break;
            }
            case 9: {
              var list = $modalStack.loadFocusElementList(modal);
              var focusChanged = false;
              if (evt.shiftKey) {
                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
                  focusChanged = $modalStack.focusLastFocusableElement(list);
                }
              } else {
                if ($modalStack.isFocusInLastItem(evt, list)) {
                  focusChanged = $modalStack.focusFirstFocusableElement(list);
                }
              }

              if (focusChanged) {
                evt.preventDefault();
                evt.stopPropagation();
              }

              break;
            }
          }
        }
      }

      $modalStack.open = function(modalInstance, modal) {
        var modalOpener = $document[0].activeElement,
          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

        toggleTopWindowClass(false);

        // Store the current top first, to determine what index we ought to use
        // for the current top modal
        previousTopOpenedModal = openedWindows.top();

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          renderDeferred: modal.renderDeferred,
          closedDeferred: modal.closedDeferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard,
          openedClass: modal.openedClass,
          windowTopClass: modal.windowTopClass,
          animation: modal.animation,
          appendTo: modal.appendTo
        });

        openedClasses.put(modalBodyClass, modalInstance);

        var appendToElement = modal.appendTo,
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.modalOptions = modal;
          backdropScope.index = currBackdropIndex;
          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
          backdropDomEl.attr({
            'class': 'modal-backdrop',
            'ng-style': '{\'z-index\': 1040 + (index && 1 || 0) + index*10}',
            // 'uib-modal-animation-class': 'fade',
            'modal-in-class': 'show'
          });
          if (modal.backdropClass) {
            backdropDomEl.addClass(modal.backdropClass);
          }

          if (modal.animation) {
            backdropDomEl.attr('modal-animation', 'true');
          }
          $compile(backdropDomEl)(backdropScope);
          $animate.enter(backdropDomEl, appendToElement);
          if ($uibPosition.isScrollable(appendToElement)) {
            scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
            if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
              appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
            }
          }
        }

        var content;
        if (modal.component) {
          content = document.createElement(snake_case(modal.component.name));
          content = angular.element(content);
          content.attr({
            resolve: '$resolve',
            'modal-instance': '$uibModalInstance',
            close: '$close($value)',
            dismiss: '$dismiss($value)'
          });
        } else {
          content = modal.content;
        }

        // Set the top modal index based on the index of the previous top modal
        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
        angularDomEl.attr({
          'class': 'modal',
          'template-url': modal.windowTemplateUrl,
          'window-top-class': modal.windowTopClass,
          'role': 'dialog',
          'aria-labelledby': modal.ariaLabelledBy,
          'aria-describedby': modal.ariaDescribedBy,
          'size': modal.size,
          'index': topModalIndex,
          'animate': 'animate',
          'ng-style': '{\'z-index\': 1050 + $$topModalIndex*10, display: \'block\'}',
          'tabindex': -1,
          // 'uib-modal-animation-class': 'fade',
          'modal-in-class': 'show'
        }).append(content);
        if (modal.windowClass) {
          angularDomEl.addClass(modal.windowClass);
        }

        if (modal.animation) {
          angularDomEl.attr('modal-animation', 'true');
        }

        appendToElement.addClass(modalBodyClass);
        if (modal.scope) {
          // we need to explicitly add the modal index to the modal scope
          // because it is needed by ngStyle to compute the zIndex property.
          modal.scope.$$topModalIndex = topModalIndex;
        }
        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

        openedWindows.top().value.modalDomEl = angularDomEl;
        openedWindows.top().value.modalOpener = modalOpener;

        applyAriaHidden(angularDomEl);

        function applyAriaHidden(el) {
          if (!el || el[0].tagName === 'BODY') {
            return;
          }

          getSiblings(el).forEach(function(sibling) {
            var elemIsAlreadyHidden = sibling.getAttribute('aria-hidden') === 'true',
              ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10);

            if (!ariaHiddenCount) {
              ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0;
            }

            sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1);
            sibling.setAttribute('aria-hidden', 'true');
          });

          return applyAriaHidden(el.parent());

          function getSiblings(el) {
            var children = el.parent() ? el.parent().children() : [];

            return Array.prototype.filter.call(children, function(child) {
              return child !== el[0];
            });
          }
        }
      };

      function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
      }

      function unhideBackgroundElements() {
        Array.prototype.forEach.call(
          document.querySelectorAll('[' + ARIA_HIDDEN_ATTRIBUTE_NAME + ']'),
          function(hiddenEl) {
            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10),
              newHiddenCount = ariaHiddenCount - 1;
            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount);

            if (!newHiddenCount) {
              hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME);
              hiddenEl.removeAttribute('aria-hidden');
            }
          }
        );
      }

      $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
          return true;
        }

        return !modalWindow;
      };

      $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
          return true;
        }
        return !modalWindow;
      };

      $modalStack.dismissAll = function(reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function() {
        return openedWindows.top();
      };

      $modalStack.modalRendered = function(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.renderDeferred.resolve();
        }
      };

      $modalStack.focusFirstFocusableElement = function(list) {
        if (list.length > 0) {
          list[0].focus();
          return true;
        }
        return false;
      };

      $modalStack.focusLastFocusableElement = function(list) {
        if (list.length > 0) {
          list[list.length - 1].focus();
          return true;
        }
        return false;
      };

      $modalStack.isModalFocused = function(evt, modalWindow) {
        if (evt && modalWindow) {
          var modalDomEl = modalWindow.value.modalDomEl;
          if (modalDomEl && modalDomEl.length) {
            return (evt.target || evt.srcElement) === modalDomEl[0];
          }
        }
        return false;
      };

      $modalStack.isFocusInFirstItem = function(evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[0];
        }
        return false;
      };

      $modalStack.isFocusInLastItem = function(evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[list.length - 1];
        }
        return false;
      };

      $modalStack.loadFocusElementList = function(modalWindow) {
        if (modalWindow) {
          var modalDomE1 = modalWindow.value.modalDomEl;
          if (modalDomE1 && modalDomE1.length) {
            var elements = modalDomE1[0].querySelectorAll(tabbableSelector);
            return elements ?
              Array.prototype.filter.call(elements, function(element) {
                return isVisible(element);
              }) : elements;
          }
        }
      };

      return $modalStack;
    }])

  .provider('$uibModal', function() {
    var $modalProvider = {
      options: {
        animation: true,
        backdrop: true, //can also be false or 'static'
        keyboard: true
      },
      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $templateRequest(angular.isFunction(options.templateUrl) ?
                options.templateUrl() : options.templateUrl);
          }

          var promiseChain = null;
          $modal.getPromiseChain = function() {
            return promiseChain;
          };

          $modal.open = function(modalOptions) {
            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();
            var modalClosedDeferred = $q.defer();
            var modalRenderDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              closed: modalClosedDeferred.promise,
              rendered: modalRenderDeferred.promise,
              close: function (result) {
                return $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                return $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};
            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

            if (!modalOptions.appendTo.length) {
              throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
            }

            //verify options
            if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of component or template or templateUrl options is required.');
            }

            var templateAndResolvePromise;
            if (modalOptions.component) {
              templateAndResolvePromise = $q.when($uibResolve.resolve(modalOptions.resolve, {}, null, null));
            } else {
              templateAndResolvePromise =
                $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);
            }

            function resolveWithTemplate() {
              return templateAndResolvePromise;
            }

            // Wait for the resolution of the existing promise chain.
            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
            // Then add to $modalStack and resolve opened.
            // Finally clean up the chain variable if no subsequent modal has overwritten it.
            var samePromise;
            samePromise = promiseChain = $q.all([promiseChain])
              .then(resolveWithTemplate, resolveWithTemplate)
              .then(function resolveSuccess(tplAndVars) {
                var providedScope = modalOptions.scope || $rootScope;

                var modalScope = providedScope.$new();
                modalScope.$close = modalInstance.close;
                modalScope.$dismiss = modalInstance.dismiss;

                modalScope.$on('$destroy', function() {
                  if (!modalScope.$$uibDestructionScheduled) {
                    modalScope.$dismiss('$uibUnscheduledDestruction');
                  }
                });

                var modal = {
                  scope: modalScope,
                  deferred: modalResultDeferred,
                  renderDeferred: modalRenderDeferred,
                  closedDeferred: modalClosedDeferred,
                  animation: modalOptions.animation,
                  backdrop: modalOptions.backdrop,
                  keyboard: modalOptions.keyboard,
                  backdropClass: modalOptions.backdropClass,
                  windowTopClass: modalOptions.windowTopClass,
                  windowClass: modalOptions.windowClass,
                  windowTemplateUrl: modalOptions.windowTemplateUrl,
                  ariaLabelledBy: modalOptions.ariaLabelledBy,
                  ariaDescribedBy: modalOptions.ariaDescribedBy,
                  size: modalOptions.size,
                  openedClass: modalOptions.openedClass,
                  appendTo: modalOptions.appendTo
                };

                var component = {};
                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

                if (modalOptions.component) {
                  constructLocals(component, false, true, false);
                  component.name = modalOptions.component;
                  modal.component = component;
                } else if (modalOptions.controller) {
                  constructLocals(ctrlLocals, true, false, true);

                  // the third param will make the controller instantiate later,private api
                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
                  if (modalOptions.controllerAs && modalOptions.bindToController) {
                    ctrlInstance = ctrlInstantiate.instance;
                    ctrlInstance.$close = modalScope.$close;
                    ctrlInstance.$dismiss = modalScope.$dismiss;
                    angular.extend(ctrlInstance, {
                      $resolve: ctrlLocals.$scope.$resolve
                    }, providedScope);
                  }

                  ctrlInstance = ctrlInstantiate();

                  if (angular.isFunction(ctrlInstance.$onInit)) {
                    ctrlInstance.$onInit();
                  }
                }

                if (!modalOptions.component) {
                  modal.content = tplAndVars[0];
                }

                $modalStack.open(modalInstance, modal);
                modalOpenedDeferred.resolve(true);

                function constructLocals(obj, template, instanceOnScope, injectable) {
                  obj.$scope = modalScope;
                  obj.$scope.$resolve = {};
                  if (instanceOnScope) {
                    obj.$scope.$uibModalInstance = modalInstance;
                  } else {
                    obj.$uibModalInstance = modalInstance;
                  }

                  var resolves = template ? tplAndVars[1] : tplAndVars;
                  angular.forEach(resolves, function(value, key) {
                    if (injectable) {
                      obj[key] = value;
                    }

                    obj.$scope.$resolve[key] = value;
                  });
                }
            }, function resolveError(reason) {
              modalOpenedDeferred.reject(reason);
              modalResultDeferred.reject(reason);
            })['finally'](function() {
              if (promiseChain === samePromise) {
                promiseChain = null;
              }
            });

            return modalInstance;
          };

          return $modal;
        }
      ]
    };

    return $modalProvider;
  });

angular.module('ui.bootstrap.paging', [])
/**
 * Helper internal service for generating common controller code between the
 * pager and pagination components
 */
.factory('uibPaging', ['$parse', function($parse) {
  return {
    create: function(ctrl, $scope, $attrs) {
      ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
      ctrl.ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl
      ctrl._watchers = [];

      ctrl.init = function(ngModelCtrl, config) {
        ctrl.ngModelCtrl = ngModelCtrl;
        ctrl.config = config;

        ngModelCtrl.$render = function() {
          ctrl.render();
        };

        if ($attrs.itemsPerPage) {
          ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
            ctrl.itemsPerPage = parseInt(value, 10);
            $scope.totalPages = ctrl.calculateTotalPages();
            ctrl.updatePage();
          }));
        } else {
          ctrl.itemsPerPage = config.itemsPerPage;
        }

        $scope.$watch('totalItems', function(newTotal, oldTotal) {
          if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
            $scope.totalPages = ctrl.calculateTotalPages();
            ctrl.updatePage();
          }
        });
      };

      ctrl.calculateTotalPages = function() {
        var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
        return Math.max(totalPages || 0, 1);
      };

      ctrl.render = function() {
        $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
      };

      $scope.selectPage = function(page, evt) {
        if (evt) {
          evt.preventDefault();
        }

        var clickAllowed = !$scope.ngDisabled || !evt;
        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
          if (evt && evt.target) {
            evt.target.blur();
          }
          ctrl.ngModelCtrl.$setViewValue(page);
          ctrl.ngModelCtrl.$render();
        }
      };

      $scope.getText = function(key) {
        return $scope[key + 'Text'] || ctrl.config[key + 'Text'];
      };

      $scope.noPrevious = function() {
        return $scope.page === 1;
      };

      $scope.noNext = function() {
        return $scope.page === $scope.totalPages;
      };

      ctrl.updatePage = function() {
        ctrl.setNumPages($scope.$parent, $scope.totalPages); // Readonly variable

        if ($scope.page > $scope.totalPages) {
          $scope.selectPage($scope.totalPages);
        } else {
          ctrl.ngModelCtrl.$render();
        }
      };

      $scope.$on('$destroy', function() {
        while (ctrl._watchers.length) {
          ctrl._watchers.shift()();
        }
      });
    }
  };
}]);

angular.module('ui.bootstrap.pager', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])

.controller('UibPagerController', ['$scope', '$attrs', 'uibPaging', 'uibPagerConfig', function($scope, $attrs, uibPaging, uibPagerConfig) {
  $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;

  uibPaging.create(this, $scope, $attrs);
}])

.constant('uibPagerConfig', {
  itemsPerPage: 10,
  previousText: '« Previous',
  nextText: 'Next »',
  align: true
})

.directive('uibPager', ['uibPagerConfig', function(uibPagerConfig) {
  return {
    scope: {
      totalItems: '=',
      previousText: '@',
      nextText: '@',
      ngDisabled: '='
    },
    require: ['uibPager', '?ngModel'],
    restrict: 'A',
    controller: 'UibPagerController',
    controllerAs: 'pager',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/pager/pager.html';
    },
    link: function(scope, element, attrs, ctrls) {
      element.addClass('pager');
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
        return; // do nothing if no ng-model
      }

      paginationCtrl.init(ngModelCtrl, uibPagerConfig);
    }
  };
}]);

angular.module('ui.bootstrap.pagination', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])
.controller('UibPaginationController', ['$scope', '$attrs', '$parse', 'uibPaging', 'uibPaginationConfig', function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
  var ctrl = this;
  // Setup configuration parameters
  var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize,
    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate,
    forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses,
    boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers,
    pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) { return $scope.$parent.$eval($attrs.pageLabel, {$page: idx}); } : angular.identity;
  $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
  $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;
  $attrs.$set('role', 'menu');

  uibPaging.create(this, $scope, $attrs);

  if ($attrs.maxSize) {
    ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
      maxSize = parseInt(value, 10);
      ctrl.render();
    }));
  }

  // Create page object used in template
  function makePage(number, text, isActive) {
    return {
      number: number,
      text: text,
      active: isActive
    };
  }

  function getPages(currentPage, totalPages) {
    var pages = [];

    // Default page limits
    var startPage = 1, endPage = totalPages;
    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

    // recompute if maxSize
    if (isMaxSized) {
      if (rotate) {
        // Current page is displayed in the middle of the visible ones
        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
        endPage = startPage + maxSize - 1;

        // Adjust if limit is exceeded
        if (endPage > totalPages) {
          endPage = totalPages;
          startPage = endPage - maxSize + 1;
        }
      } else {
        // Visible pages are paginated with maxSize
        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;

        // Adjust last page if limit is exceeded
        endPage = Math.min(startPage + maxSize - 1, totalPages);
      }
    }

    // Add page number links
    for (var number = startPage; number <= endPage; number++) {
      var page = makePage(number, pageLabel(number), number === currentPage);
      pages.push(page);
    }

    // Add links to move between page sets
    if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
      if (startPage > 1) {
        if (!boundaryLinkNumbers || startPage > 3) { //need ellipsis for all options unless range is too close to beginning
        var previousPageSet = makePage(startPage - 1, '...', false);
        pages.unshift(previousPageSet);
      }
        if (boundaryLinkNumbers) {
          if (startPage === 3) { //need to replace ellipsis when the buttons would be sequential
            var secondPageLink = makePage(2, '2', false);
            pages.unshift(secondPageLink);
          }
          //add the first page
          var firstPageLink = makePage(1, '1', false);
          pages.unshift(firstPageLink);
        }
      }

      if (endPage < totalPages) {
        if (!boundaryLinkNumbers || endPage < totalPages - 2) { //need ellipsis for all options unless range is too close to end
        var nextPageSet = makePage(endPage + 1, '...', false);
        pages.push(nextPageSet);
      }
        if (boundaryLinkNumbers) {
          if (endPage === totalPages - 2) { //need to replace ellipsis when the buttons would be sequential
            var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
            pages.push(secondToLastPageLink);
          }
          //add the last page
          var lastPageLink = makePage(totalPages, totalPages, false);
          pages.push(lastPageLink);
        }
      }
    }
    return pages;
  }

  var originalRender = this.render;
  this.render = function() {
    originalRender();
    if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
      $scope.pages = getPages($scope.page, $scope.totalPages);
    }
  };
}])

.constant('uibPaginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  boundaryLinkNumbers: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true,
  forceEllipses: false
})

.directive('uibPagination', ['$parse', 'uibPaginationConfig', function($parse, uibPaginationConfig) {
  return {
    scope: {
      totalItems: '=',
      firstText: '@',
      previousText: '@',
      nextText: '@',
      lastText: '@',
      ngDisabled:'='
    },
    require: ['uibPagination', '?ngModel'],
    restrict: 'A',
    controller: 'UibPaginationController',
    controllerAs: 'pagination',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/pagination/pagination.html';
    },
    link: function(scope, element, attrs, ctrls) {
      element.addClass('pagination');
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider('$uibTooltip', function() {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    placementClassPrefix: '',
    animation: true,
    popupDelay: 0,
    popupCloseDelay: 0,
    useContentExp: false
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'outsideClick': 'outsideClick',
    'focus': 'blur',
    'none': ''
  };

  // The options specified to the provider globally.
  var globalOptions = {};

  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function(value) {
		angular.extend(globalOptions, value);
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
   */
  this.setTriggers = function setTriggers(triggers) {
    angular.extend(triggerMap, triggers);
  };

  /**
   * This is a helper function for translating camel-case to snake_case.
   */
  function snake_case(name) {
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = ['$window', '$compile', '$timeout', '$document', '$uibPosition', '$interpolate', '$rootScope', '$parse', '$$stackedMap', function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
    var openedTooltips = $$stackedMap.createNew();
    $document.on('keyup', keypressListener);

    $rootScope.$on('$destroy', function() {
      $document.off('keyup', keypressListener);
    });

    function keypressListener(e) {
      if (e.which === 27) {
        var last = openedTooltips.top();
        if (last) {
          last.value.close();
          last = null;
        }
      }
    }

    return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
      options = angular.extend({}, defaultOptions, globalOptions, options);

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers(trigger) {
        var show = (trigger || options.trigger || defaultTriggerShow).split(' ');
        var hide = show.map(function(trigger) {
          return triggerMap[trigger] || trigger;
        });
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case(ttType);

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template =
        '<div '+ directiveName + '-popup ' +
          'uib-title="' + startSym + 'title' + endSym + '" ' +
          (options.useContentExp ?
            'content-exp="contentExp()" ' :
            'content="' + startSym + 'content' + endSym + '" ') +
          'origin-scope="origScope" ' +
          'class="uib-position-measure ' + prefix + '" ' +
          'tooltip-animation-class="fade"' +
          'uib-tooltip-classes ' +
          'ng-class="{ in: isOpen }" ' +
          '>' +
        '</div>';

      return {
        compile: function(tElem, tAttrs) {
          var tooltipLinker = $compile(template);

          return function link(scope, element, attrs, tooltipCtrl) {
            var tooltip;
            var tooltipLinkedScope;
            var transitionTimeout;
            var showTimeout;
            var hideTimeout;
            var positionTimeout;
            var adjustmentTimeout;
            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
            var triggers = getTriggers(undefined);
            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
            var ttScope = scope.$new(true);
            var repositionScheduled = false;
            var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen']) ? $parse(attrs[prefix + 'IsOpen']) : false;
            var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
            var observers = [];
            var lastPlacement;

            var positionTooltip = function() {
              // check if tooltip exists and is not empty
              if (!tooltip || !tooltip.html()) { return; }

              if (!positionTimeout) {
                positionTimeout = $timeout(function() {
                  var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
                  var initialHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
                  var elementPos = appendToBody ? $position.offset(element) : $position.position(element);
                  tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' });
                  var placementClasses = ttPosition.placement.split('-');

                  if (!tooltip.hasClass(placementClasses[0])) {
                    tooltip.removeClass(lastPlacement.split('-')[0]);
                    tooltip.addClass(placementClasses[0]);
                  }

                  if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
                    tooltip.removeClass(options.placementClassPrefix + lastPlacement);
                    tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
                  }

                  adjustmentTimeout = $timeout(function() {
                    var currentHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
                    var adjustment = $position.adjustTop(placementClasses, elementPos, initialHeight, currentHeight);
                    if (adjustment) {
                      tooltip.css(adjustment);
                    }
                    adjustmentTimeout = null;
                  }, 0, false);

                  // first time through tt element will have the
                  // uib-position-measure class or if the placement
                  // has changed we need to position the arrow.
                  if (tooltip.hasClass('uib-position-measure')) {
                    $position.positionArrow(tooltip, ttPosition.placement);
                    tooltip.removeClass('uib-position-measure');
                  } else if (lastPlacement !== ttPosition.placement) {
                    $position.positionArrow(tooltip, ttPosition.placement);
                  }
                  lastPlacement = ttPosition.placement;

                  positionTimeout = null;
                }, 0, false);
              }
            };

            // Set up the correct scope to allow transclusion later
            ttScope.origScope = scope;

            // By default, the tooltip is not open.
            // TODO add ability to start tooltip opened
            ttScope.isOpen = false;

            function toggleTooltipBind() {
              if (!ttScope.isOpen) {
                showTooltipBind();
              } else {
                hideTooltipBind();
              }
            }

            // Show the tooltip with delay if specified, otherwise show it immediately
            function showTooltipBind() {
              if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
                return;
              }

              cancelHide();
              prepareTooltip();

              if (ttScope.popupDelay) {
                // Do nothing if the tooltip was already scheduled to pop-up.
                // This happens if show is triggered multiple times before any hide is triggered.
                if (!showTimeout) {
                  showTimeout = $timeout(show, ttScope.popupDelay, false);
                }
              } else {
                show();
              }
            }

            function hideTooltipBind() {
              cancelShow();

              if (ttScope.popupCloseDelay) {
                if (!hideTimeout) {
                  hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
                }
              } else {
                hide();
              }
            }

            // Show the tooltip popup element.
            function show() {
              cancelShow();
              cancelHide();

              // Don't show empty tooltips.
              if (!ttScope.content) {
                return angular.noop;
              }

              createTooltip();

              // And show the tooltip.
              ttScope.$evalAsync(function() {
                ttScope.isOpen = true;
                assignIsOpen(true);
                positionTooltip();
              });
            }

            function cancelShow() {
              if (showTimeout) {
                $timeout.cancel(showTimeout);
                showTimeout = null;
              }

              if (positionTimeout) {
                $timeout.cancel(positionTimeout);
                positionTimeout = null;
              }
            }

            // Hide the tooltip popup element.
            function hide() {
              if (!ttScope) {
                return;
              }

              // First things first: we don't show it anymore.
              ttScope.$evalAsync(function() {
                if (ttScope) {
                  ttScope.isOpen = false;
                  assignIsOpen(false);
                  // And now we remove it from the DOM. However, if we have animation, we
                  // need to wait for it to expire beforehand.
                  // FIXME: this is a placeholder for a port of the transitions library.
                  // The fade transition in TWBS is 150ms.
                  if (ttScope.animation) {
                    if (!transitionTimeout) {
                      transitionTimeout = $timeout(removeTooltip, 150, false);
                    }
                  } else {
                    removeTooltip();
                  }
                }
              });
            }

            function cancelHide() {
              if (hideTimeout) {
                $timeout.cancel(hideTimeout);
                hideTimeout = null;
              }

              if (transitionTimeout) {
                $timeout.cancel(transitionTimeout);
                transitionTimeout = null;
              }
            }

            function createTooltip() {
              // There can only be one tooltip element per directive shown at once.
              if (tooltip) {
                return;
              }

              tooltipLinkedScope = ttScope.$new();
              tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
                if (appendToBody) {
                  $document.find('body').append(tooltip);
                } else {
                  element.after(tooltip);
                }
              });

              openedTooltips.add(ttScope, {
                close: hide
              });

              prepObservers();
            }

            function removeTooltip() {
              cancelShow();
              cancelHide();
              unregisterObservers();

              if (tooltip) {
                tooltip.remove();
                
                tooltip = null;
                if (adjustmentTimeout) {
                  $timeout.cancel(adjustmentTimeout);
                }
              }

              openedTooltips.remove(ttScope);
              
              if (tooltipLinkedScope) {
                tooltipLinkedScope.$destroy();
                tooltipLinkedScope = null;
              }
            }

            /**
             * Set the initial scope values. Once
             * the tooltip is created, the observers
             * will be added to keep things in sync.
             */
            function prepareTooltip() {
              ttScope.title = attrs[prefix + 'Title'];
              if (contentParse) {
                ttScope.content = contentParse(scope);
              } else {
                ttScope.content = attrs[ttType];
              }

              ttScope.popupClass = attrs[prefix + 'Class'];
              ttScope.placement = angular.isDefined(attrs[prefix + 'Placement']) ? attrs[prefix + 'Placement'] : options.placement;
              var placement = $position.parsePlacement(ttScope.placement);
              lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0];

              var delay = parseInt(attrs[prefix + 'PopupDelay'], 10);
              var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10);
              ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
              ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
            }

            function assignIsOpen(isOpen) {
              if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
                isOpenParse.assign(scope, isOpen);
              }
            }

            ttScope.contentExp = function() {
              return ttScope.content;
            };

            /**
             * Observe the relevant attributes.
             */
            attrs.$observe('disabled', function(val) {
              if (val) {
                cancelShow();
              }

              if (val && ttScope.isOpen) {
                hide();
              }
            });

            if (isOpenParse) {
              scope.$watch(isOpenParse, function(val) {
                if (ttScope && !val === ttScope.isOpen) {
                  toggleTooltipBind();
                }
              });
            }

            function prepObservers() {
              observers.length = 0;

              if (contentParse) {
                observers.push(
                  scope.$watch(contentParse, function(val) {
                    ttScope.content = val;
                    if (!val && ttScope.isOpen) {
                      hide();
                    }
                  })
                );

                observers.push(
                  tooltipLinkedScope.$watch(function() {
                    if (!repositionScheduled) {
                      repositionScheduled = true;
                      tooltipLinkedScope.$$postDigest(function() {
                        repositionScheduled = false;
                        if (ttScope && ttScope.isOpen) {
                          positionTooltip();
                        }
                      });
                    }
                  })
                );
              } else {
                observers.push(
                  attrs.$observe(ttType, function(val) {
                    ttScope.content = val;
                    if (!val && ttScope.isOpen) {
                      hide();
                    } else {
                      positionTooltip();
                    }
                  })
                );
              }

              observers.push(
                attrs.$observe(prefix + 'Title', function(val) {
                  ttScope.title = val;
                  if (ttScope.isOpen) {
                    positionTooltip();
                  }
                })
              );

              observers.push(
                attrs.$observe(prefix + 'Placement', function(val) {
                  ttScope.placement = val ? val : options.placement;
                  if (ttScope.isOpen) {
                    positionTooltip();
                  }
                })
              );
            }

            function unregisterObservers() {
              if (observers.length) {
                angular.forEach(observers, function(observer) {
                  observer();
                });
                observers.length = 0;
              }
            }

            // hide tooltips/popovers for outsideClick trigger
            function bodyHideTooltipBind(e) {
              if (!ttScope || !ttScope.isOpen || !tooltip) {
                return;
              }
              // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
              if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
                hideTooltipBind();
              }
            }

            // KeyboardEvent handler to hide the tooltip on Escape key press
            function hideOnEscapeKey(e) {
              if (e.which === 27) {
                hideTooltipBind();
              }
            }

            var unregisterTriggers = function() {
              triggers.show.forEach(function(trigger) {
                if (trigger === 'outsideClick') {
                  element.off('click', toggleTooltipBind);
                } else {
                  element.off(trigger, showTooltipBind);
                  element.off(trigger, toggleTooltipBind);
                }
                element.off('keypress', hideOnEscapeKey);
              });
              triggers.hide.forEach(function(trigger) {
                if (trigger === 'outsideClick') {
                  $document.off('click', bodyHideTooltipBind);
                } else {
                  element.off(trigger, hideTooltipBind);
                }
              });
            };

            function prepTriggers() {
              var showTriggers = [], hideTriggers = [];
              var val = scope.$eval(attrs[prefix + 'Trigger']);
              unregisterTriggers();

              if (angular.isObject(val)) {
                Object.keys(val).forEach(function(key) {
                  showTriggers.push(key);
                  hideTriggers.push(val[key]);
                });
                triggers = {
                  show: showTriggers,
                  hide: hideTriggers
                };
              } else {
                triggers = getTriggers(val);
              }

              if (triggers.show !== 'none') {
                triggers.show.forEach(function(trigger, idx) {
                  if (trigger === 'outsideClick') {
                    element.on('click', toggleTooltipBind);
                    $document.on('click', bodyHideTooltipBind);
                  } else if (trigger === triggers.hide[idx]) {
                    element.on(trigger, toggleTooltipBind);
                  } else if (trigger) {
                    element.on(trigger, showTooltipBind);
                    element.on(triggers.hide[idx], hideTooltipBind);
                  }
                  element.on('keypress', hideOnEscapeKey);
                });
              }
            }

            prepTriggers();

            var animation = scope.$eval(attrs[prefix + 'Animation']);
            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

            var appendToBodyVal;
            var appendKey = prefix + 'AppendToBody';
            if (appendKey in attrs && attrs[appendKey] === undefined) {
              appendToBodyVal = true;
            } else {
              appendToBodyVal = scope.$eval(attrs[appendKey]);
            }

            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

            // Make sure tooltip is destroyed and removed.
            scope.$on('$destroy', function onDestroyTooltip() {
              unregisterTriggers();
              removeTooltip();
              ttScope = null;
            });
          };
        }
      };
    };
  }];
})

// This is mostly ngInclude code but with a custom scope
.directive('uibTooltipTemplateTransclude', [
         '$animate', '$sce', '$compile', '$templateRequest',
function ($animate, $sce, $compile, $templateRequest) {
  return {
    link: function(scope, elem, attrs) {
      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

      var changeCounter = 0,
        currentScope,
        previousElement,
        currentElement;

      var cleanupLastIncludeContent = function() {
        if (previousElement) {
          previousElement.remove();
          previousElement = null;
        }

        if (currentScope) {
          currentScope.$destroy();
          currentScope = null;
        }

        if (currentElement) {
          $animate.leave(currentElement).then(function() {
            previousElement = null;
          });
          previousElement = currentElement;
          currentElement = null;
        }
      };

      scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
        var thisChangeId = ++changeCounter;

        if (src) {
          //set the 2nd param to true to ignore the template request error so that the inner
          //contents and scope can be cleaned up.
          $templateRequest(src, true).then(function(response) {
            if (thisChangeId !== changeCounter) { return; }
            var newScope = origScope.$new();
            var template = response;

            var clone = $compile(template)(newScope, function(clone) {
              cleanupLastIncludeContent();
              $animate.enter(clone, elem);
            });

            currentScope = newScope;
            currentElement = clone;

            currentScope.$emit('$includeContentLoaded', src);
          }, function() {
            if (thisChangeId === changeCounter) {
              cleanupLastIncludeContent();
              scope.$emit('$includeContentError', src);
            }
          });
          scope.$emit('$includeContentRequested', src);
        } else {
          cleanupLastIncludeContent();
        }
      });

      scope.$on('$destroy', cleanupLastIncludeContent);
    }
  };
}])

/**
 * Note that it's intentional that these classes are *not* applied through $animate.
 * They must not be animated as they're expected to be present on the tooltip on
 * initialization.
 */
.directive('uibTooltipClasses', ['$uibPosition', function($uibPosition) {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      // need to set the primary position so the
      // arrow has space during position measure.
      // tooltip.positionTooltip()
      if (scope.placement) {
        // // There are no top-left etc... classes
        // // in TWBS, so we need the primary position.
        var position = $uibPosition.parsePlacement(scope.placement);
        element.addClass(position[0]);
      }

      if (scope.popupClass) {
        element.addClass(scope.popupClass);
      }

      if (scope.animation) {
        element.addClass(attrs.tooltipAnimationClass);
      }
    }
  };
}])

.directive('uibTooltipPopup', function() {
  return {
    restrict: 'A',
    scope: { content: '@' },
    templateUrl: 'uib/template/tooltip/tooltip-popup.html'
  };
})

.directive('uibTooltip', [ '$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter');
}])

.directive('uibTooltipTemplatePopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&', originScope: '&' },
    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'
  };
})

.directive('uibTooltipTemplate', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}])

.directive('uibTooltipHtmlPopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&' },
    templateUrl: 'uib/template/tooltip/tooltip-html-popup.html'
  };
})

.directive('uibTooltipHtml', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, and selector delegatation.
 */
angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

.directive('uibPopoverTemplatePopup', function() {
  return {
    restrict: 'A',
    scope: { uibTitle: '@', contentExp: '&', originScope: '&' },
    templateUrl: 'uib/template/popover/popover-template.html'
  };
})

.directive('uibPopoverTemplate', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
    useContentExp: true
  });
}])

.directive('uibPopoverHtmlPopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&', uibTitle: '@' },
    templateUrl: 'uib/template/popover/popover-html.html'
  };
})

.directive('uibPopoverHtml', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
    useContentExp: true
  });
}])

.directive('uibPopoverPopup', function() {
  return {
    restrict: 'A',
    scope: { uibTitle: '@', content: '@' },
    templateUrl: 'uib/template/popover/popover.html'
  };
})

.directive('uibPopover', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopover', 'popover', 'click');
}]);

angular.module('ui.bootstrap.progressbar', [])

.constant('uibProgressConfig', {
  animate: true,
  max: 100
})

.controller('UibProgressController', ['$scope', '$attrs', 'uibProgressConfig', function($scope, $attrs, progressConfig) {
  var self = this,
      animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

  this.bars = [];
  $scope.max = getMaxOrDefault();

  this.addBar = function(bar, element, attrs) {
    if (!animate) {
      element.css({'transition': 'none'});
    }

    this.bars.push(bar);

    bar.max = getMaxOrDefault();
    bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar';

    bar.$watch('value', function(value) {
      bar.recalculatePercentage();
    });

    bar.recalculatePercentage = function() {
      var totalPercentage = self.bars.reduce(function(total, bar) {
        bar.percent = +(100 * bar.value / bar.max).toFixed(2);
        return total + bar.percent;
      }, 0);

      if (totalPercentage > 100) {
        bar.percent -= totalPercentage - 100;
      }
    };

    bar.$on('$destroy', function() {
      element = null;
      self.removeBar(bar);
    });
  };

  this.removeBar = function(bar) {
    this.bars.splice(this.bars.indexOf(bar), 1);
    this.bars.forEach(function (bar) {
      bar.recalculatePercentage();
    });
  };

  //$attrs.$observe('maxParam', function(maxParam) {
  $scope.$watch('maxParam', function(maxParam) {
    self.bars.forEach(function(bar) {
      bar.max = getMaxOrDefault();
      bar.recalculatePercentage();
    });
  });

  function getMaxOrDefault () {
    return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
  }
}])

.directive('uibProgress', function() {
  return {
    replace: true,
    transclude: true,
    controller: 'UibProgressController',
    require: 'uibProgress',
    scope: {
      maxParam: '=?max'
    },
    templateUrl: 'uib/template/progressbar/progress.html'
  };
})

.directive('uibBar', function() {
  return {
    replace: true,
    transclude: true,
    require: '^uibProgress',
    scope: {
      value: '=',
      type: '@'
    },
    templateUrl: 'uib/template/progressbar/bar.html',
    link: function(scope, element, attrs, progressCtrl) {
      progressCtrl.addBar(scope, element, attrs);
    }
  };
})

.directive('uibProgressbar', function() {
  return {
    replace: true,
    transclude: true,
    controller: 'UibProgressController',
    scope: {
      value: '=',
      maxParam: '=?max',
      type: '@'
    },
    templateUrl: 'uib/template/progressbar/progressbar.html',
    link: function(scope, element, attrs, progressCtrl) {
      progressCtrl.addBar(scope, angular.element(element.children()[0]), {title: attrs.title});
    }
  };
});

angular.module('ui.bootstrap.rating', [])

.constant('uibRatingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null,
  enableReset: true,
  titles: ['one', 'two', 'three', 'four', 'five']
})

.controller('UibRatingController', ['$scope', '$attrs', 'uibRatingConfig', function($scope, $attrs, ratingConfig) {
  var ngModelCtrl = { $setViewValue: angular.noop },
    self = this;

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.push(function(value) {
      if (angular.isNumber(value) && value << 0 !== value) {
        value = Math.round(value);
      }

      return value;
    });

    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
    this.enableReset = angular.isDefined($attrs.enableReset) ?
      $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
    var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
    this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
      tmpTitles : ratingConfig.titles;

    var ratingStates = angular.isDefined($attrs.ratingStates) ?
      $scope.$parent.$eval($attrs.ratingStates) :
      new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
    $scope.range = this.buildTemplateObjects(ratingStates);
  };

  this.buildTemplateObjects = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) }, states[i]);
    }
    return states;
  };

  this.getTitle = function(index) {
    if (index >= this.titles.length) {
      return index + 1;
    }

    return this.titles[index];
  };

  $scope.rate = function(value) {
    if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
      var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
      ngModelCtrl.$setViewValue(newViewValue);
      ngModelCtrl.$render();
    }
  };

  $scope.enter = function(value) {
    if (!$scope.readonly) {
      $scope.value = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.onLeave();
  };

  $scope.onKeydown = function(evt) {
    if (/(37|38|39|40)/.test(evt.which)) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
    }
  };

  this.render = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.title = self.getTitle($scope.value - 1);
  };
}])

.directive('uibRating', function() {
  return {
    require: ['uibRating', 'ngModel'],
    restrict: 'A',
    scope: {
      readonly: '=?readOnly',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'UibRatingController',
    templateUrl: 'uib/template/rating/rating.html',
    link: function(scope, element, attrs, ctrls) {
      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      ratingCtrl.init(ngModelCtrl);
    }
  };
});

angular.module('ui.bootstrap.tabs', [])

.controller('UibTabsetController', ['$scope', function ($scope) {
  var ctrl = this,
    oldIndex;
  ctrl.tabs = [];

  ctrl.select = function(index, evt) {
    if (!destroyed) {
      var previousIndex = findTabIndex(oldIndex);
      var previousSelected = ctrl.tabs[previousIndex];
      if (previousSelected) {
        previousSelected.tab.onDeselect({
          $event: evt,
          $selectedIndex: index
        });
        if (evt && evt.isDefaultPrevented()) {
          return;
        }
        previousSelected.tab.active = false;
      }

      var selected = ctrl.tabs[index];
      if (selected) {
        selected.tab.onSelect({
          $event: evt
        });
        selected.tab.active = true;
        ctrl.active = selected.index;
        oldIndex = selected.index;
      } else if (!selected && angular.isDefined(oldIndex)) {
        ctrl.active = null;
        oldIndex = null;
      }
    }
  };

  ctrl.addTab = function addTab(tab) {
    ctrl.tabs.push({
      tab: tab,
      index: tab.index
    });
    ctrl.tabs.sort(function(t1, t2) {
      if (t1.index > t2.index) {
        return 1;
      }

      if (t1.index < t2.index) {
        return -1;
      }

      return 0;
    });

    if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
      var newActiveIndex = findTabIndex(tab.index);
      ctrl.select(newActiveIndex);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index;
    for (var i = 0; i < ctrl.tabs.length; i++) {
      if (ctrl.tabs[i].tab === tab) {
        index = i;
        break;
      }
    }

    if (ctrl.tabs[index].index === ctrl.active) {
      var newActiveTabIndex = index === ctrl.tabs.length - 1 ?
        index - 1 : index + 1 % ctrl.tabs.length;
      ctrl.select(newActiveTabIndex);
    }

    ctrl.tabs.splice(index, 1);
  };

  $scope.$watch('tabset.active', function(val) {
    if (angular.isDefined(val) && val !== oldIndex) {
      ctrl.select(findTabIndex(val));
    }
  });

  var destroyed;
  $scope.$on('$destroy', function() {
    destroyed = true;
  });

  function findTabIndex(index) {
    for (var i = 0; i < ctrl.tabs.length; i++) {
      if (ctrl.tabs[i].index === index) {
        return i;
      }
    }
  }
}])

.directive('uibTabset', function() {
  return {
    transclude: true,
    replace: true,
    scope: {},
    bindToController: {
      active: '=?',
      type: '@'
    },
    controller: 'UibTabsetController',
    controllerAs: 'tabset',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/tabs/tabset.html';
    },
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ?
        scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ?
        scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

.directive('uibTab', ['$parse', function($parse) {
  return {
    require: '^uibTabset',
    replace: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/tabs/tab.html';
    },
    transclude: true,
    scope: {
      heading: '@',
      index: '=?',
      classes: '@?',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    controllerAs: 'tab',
    link: function(scope, elm, attrs, tabsetCtrl, transclude) {
      scope.disabled = false;
      if (attrs.disable) {
        scope.$parent.$watch($parse(attrs.disable), function(value) {
          scope.disabled = !! value;
        });
      }

      if (angular.isUndefined(attrs.index)) {
        if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
          scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) { return t.index; })) + 1;
        } else {
          scope.index = 0;
        }
      }

      if (angular.isUndefined(attrs.classes)) {
        scope.classes = '';
      }

      scope.select = function(evt) {
        if (!scope.disabled) {
          var index;
          for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
            if (tabsetCtrl.tabs[i].tab === scope) {
              index = i;
              break;
            }
          }

          tabsetCtrl.select(index, evt);
        }
      };

      tabsetCtrl.addTab(scope);
      scope.$on('$destroy', function() {
        tabsetCtrl.removeTab(scope);
      });

      //We need to transclude later, once the content container is ready.
      //when this link happens, we're inside a tab heading.
      scope.$transcludeFn = transclude;
    }
  };
}])

.directive('uibTabHeadingTransclude', function() {
  return {
    restrict: 'A',
    require: '^uibTab',
    link: function(scope, elm) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
})

.directive('uibTabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^uibTabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.uibTabContentTransclude).tab;

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };

  function isTabHeading(node) {
    return node.tagName && (
      node.hasAttribute('uib-tab-heading') ||
      node.hasAttribute('data-uib-tab-heading') ||
      node.hasAttribute('x-uib-tab-heading') ||
      node.tagName.toLowerCase() === 'uib-tab-heading' ||
      node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
      node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
      node.tagName.toLowerCase() === 'uib:tab-heading'
    );
  }
});

angular.module('ui.bootstrap.timepicker', [])

.constant('uibTimepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  secondStep: 1,
  showMeridian: true,
  showSeconds: false,
  meridians: null,
  readonlyInput: false,
  mousewheel: true,
  arrowkeys: true,
  showSpinners: true,
  templateUrl: 'uib/template/timepicker/timepicker.html'
})

.controller('UibTimepickerController', ['$scope', '$element', '$attrs', '$parse', '$log', '$locale', 'uibTimepickerConfig', function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
  var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl;
  var selected = new Date(),
    watchers = [],
    ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
    meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
    padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;

  $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
  $element.removeAttr('tabindex');

  this.init = function(ngModelCtrl_, inputs) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.unshift(function(modelValue) {
      return modelValue ? new Date(modelValue) : null;
    });

    var hoursInputEl = inputs.eq(0),
        minutesInputEl = inputs.eq(1),
        secondsInputEl = inputs.eq(2);

    hoursModelCtrl = hoursInputEl.controller('ngModel');
    minutesModelCtrl = minutesInputEl.controller('ngModel');
    secondsModelCtrl = secondsInputEl.controller('ngModel');

    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;

    if (mousewheel) {
      this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    }

    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
    if (arrowkeys) {
      this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    }

    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
    this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
  };

  var hourStep = timepickerConfig.hourStep;
  if ($attrs.hourStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
      hourStep = +value;
    }));
  }

  var minuteStep = timepickerConfig.minuteStep;
  if ($attrs.minuteStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
      minuteStep = +value;
    }));
  }

  var min;
  watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
    var dt = new Date(value);
    min = isNaN(dt) ? undefined : dt;
  }));

  var max;
  watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
    var dt = new Date(value);
    max = isNaN(dt) ? undefined : dt;
  }));

  var disabled = false;
  if ($attrs.ngDisabled) {
    watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
      disabled = value;
    }));
  }

  $scope.noIncrementHours = function() {
    var incrementedSelected = addMinutes(selected, hourStep * 60);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementHours = function() {
    var decrementedSelected = addMinutes(selected, -hourStep * 60);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noIncrementMinutes = function() {
    var incrementedSelected = addMinutes(selected, minuteStep);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementMinutes = function() {
    var decrementedSelected = addMinutes(selected, -minuteStep);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noIncrementSeconds = function() {
    var incrementedSelected = addSeconds(selected, secondStep);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementSeconds = function() {
    var decrementedSelected = addSeconds(selected, -secondStep);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noToggleMeridian = function() {
    if (selected.getHours() < 12) {
      return disabled || addMinutes(selected, 12 * 60) > max;
    }

    return disabled || addMinutes(selected, -12 * 60) < min;
  };

  var secondStep = timepickerConfig.secondStep;
  if ($attrs.secondStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
      secondStep = +value;
    }));
  }

  $scope.showSeconds = timepickerConfig.showSeconds;
  if ($attrs.showSeconds) {
    watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
      $scope.showSeconds = !!value;
    }));
  }

  // 12H / 24H mode
  $scope.showMeridian = timepickerConfig.showMeridian;
  if ($attrs.showMeridian) {
    watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
      $scope.showMeridian = !!value;

      if (ngModelCtrl.$error.time) {
        // Evaluate from template
        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
        if (angular.isDefined(hours) && angular.isDefined(minutes)) {
          selected.setHours(hours);
          refresh();
        }
      } else {
        updateTemplate();
      }
    }));
  }

  // Get $scope.hours in 24H mode if valid
  function getHoursFromTemplate() {
    var hours = +$scope.hours;
    var valid = $scope.showMeridian ? hours > 0 && hours < 13 :
      hours >= 0 && hours < 24;
    if (!valid || $scope.hours === '') {
      return undefined;
    }

    if ($scope.showMeridian) {
      if (hours === 12) {
        hours = 0;
      }
      if ($scope.meridian === meridians[1]) {
        hours = hours + 12;
      }
    }
    return hours;
  }

  function getMinutesFromTemplate() {
    var minutes = +$scope.minutes;
    var valid = minutes >= 0 && minutes < 60;
    if (!valid || $scope.minutes === '') {
      return undefined;
    }
    return minutes;
  }

  function getSecondsFromTemplate() {
    var seconds = +$scope.seconds;
    return seconds >= 0 && seconds < 60 ? seconds : undefined;
  }

  function pad(value, noPad) {
    if (value === null) {
      return '';
    }

    return angular.isDefined(value) && value.toString().length < 2 && !noPad ?
      '0' + value : value.toString();
  }

  // Respond on mousewheel spin
  this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    var isScrollingUp = function(e) {
      if (e.originalEvent) {
        e = e.originalEvent;
      }
      //pick correct delta variable depending on event
      var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
      return e.detail || delta > 0;
    };

    hoursInputEl.on('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
      }
      e.preventDefault();
    });

    minutesInputEl.on('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
      }
      e.preventDefault();
    });

     secondsInputEl.on('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
      }
      e.preventDefault();
    });
  };

  // Respond on up/down arrowkeys
  this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    hoursInputEl.on('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementHours();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementHours();
          $scope.$apply();
        }
      }
    });

    minutesInputEl.on('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementMinutes();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementMinutes();
          $scope.$apply();
        }
      }
    });

    secondsInputEl.on('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementSeconds();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementSeconds();
          $scope.$apply();
        }
      }
    });
  };

  this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    if ($scope.readonlyInput) {
      $scope.updateHours = angular.noop;
      $scope.updateMinutes = angular.noop;
      $scope.updateSeconds = angular.noop;
      return;
    }

    var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
      ngModelCtrl.$setViewValue(null);
      ngModelCtrl.$setValidity('time', false);
      if (angular.isDefined(invalidHours)) {
        $scope.invalidHours = invalidHours;
        if (hoursModelCtrl) {
          hoursModelCtrl.$setValidity('hours', false);
        }
      }

      if (angular.isDefined(invalidMinutes)) {
        $scope.invalidMinutes = invalidMinutes;
        if (minutesModelCtrl) {
          minutesModelCtrl.$setValidity('minutes', false);
        }
      }

      if (angular.isDefined(invalidSeconds)) {
        $scope.invalidSeconds = invalidSeconds;
        if (secondsModelCtrl) {
          secondsModelCtrl.$setValidity('seconds', false);
        }
      }
    };

    $scope.updateHours = function() {
      var hours = getHoursFromTemplate(),
        minutes = getMinutesFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(hours) && angular.isDefined(minutes)) {
        selected.setHours(hours);
        selected.setMinutes(minutes);
        if (selected < min || selected > max) {
          invalidate(true);
        } else {
          refresh('h');
        }
      } else {
        invalidate(true);
      }
    };

    hoursInputEl.on('blur', function(e) {
      ngModelCtrl.$setTouched();
      if (modelIsEmpty()) {
        makeValid();
      } else if ($scope.hours === null || $scope.hours === '') {
        invalidate(true);
      } else if (!$scope.invalidHours && $scope.hours < 10) {
        $scope.$apply(function() {
          $scope.hours = pad($scope.hours, !padHours);
        });
      }
    });

    $scope.updateMinutes = function() {
      var minutes = getMinutesFromTemplate(),
        hours = getHoursFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
        selected.setHours(hours);
        selected.setMinutes(minutes);
        if (selected < min || selected > max) {
          invalidate(undefined, true);
        } else {
          refresh('m');
        }
      } else {
        invalidate(undefined, true);
      }
    };

    minutesInputEl.on('blur', function(e) {
      ngModelCtrl.$setTouched();
      if (modelIsEmpty()) {
        makeValid();
      } else if ($scope.minutes === null) {
        invalidate(undefined, true);
      } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
        $scope.$apply(function() {
          $scope.minutes = pad($scope.minutes);
        });
      }
    });

    $scope.updateSeconds = function() {
      var seconds = getSecondsFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(seconds)) {
        selected.setSeconds(seconds);
        refresh('s');
      } else {
        invalidate(undefined, undefined, true);
      }
    };

    secondsInputEl.on('blur', function(e) {
      if (modelIsEmpty()) {
        makeValid();
      } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
        $scope.$apply( function() {
          $scope.seconds = pad($scope.seconds);
        });
      }
    });

  };

  this.render = function() {
    var date = ngModelCtrl.$viewValue;

    if (isNaN(date)) {
      ngModelCtrl.$setValidity('time', false);
      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
    } else {
      if (date) {
        selected = date;
      }

      if (selected < min || selected > max) {
        ngModelCtrl.$setValidity('time', false);
        $scope.invalidHours = true;
        $scope.invalidMinutes = true;
      } else {
        makeValid();
      }
      updateTemplate();
    }
  };

  // Call internally when we know that model is valid.
  function refresh(keyboardChange) {
    makeValid();
    ngModelCtrl.$setViewValue(new Date(selected));
    updateTemplate(keyboardChange);
  }

  function makeValid() {
    if (hoursModelCtrl) {
      hoursModelCtrl.$setValidity('hours', true);
    }

    if (minutesModelCtrl) {
      minutesModelCtrl.$setValidity('minutes', true);
    }

    if (secondsModelCtrl) {
      secondsModelCtrl.$setValidity('seconds', true);
    }

    ngModelCtrl.$setValidity('time', true);
    $scope.invalidHours = false;
    $scope.invalidMinutes = false;
    $scope.invalidSeconds = false;
  }

  function updateTemplate(keyboardChange) {
    if (!ngModelCtrl.$modelValue) {
      $scope.hours = null;
      $scope.minutes = null;
      $scope.seconds = null;
      $scope.meridian = meridians[0];
    } else {
      var hours = selected.getHours(),
        minutes = selected.getMinutes(),
        seconds = selected.getSeconds();

      if ($scope.showMeridian) {
        hours = hours === 0 || hours === 12 ? 12 : hours % 12; // Convert 24 to 12 hour system
      }

      $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours);
      if (keyboardChange !== 'm') {
        $scope.minutes = pad(minutes);
      }
      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];

      if (keyboardChange !== 's') {
        $scope.seconds = pad(seconds);
      }
      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
    }
  }

  function addSecondsToSelected(seconds) {
    selected = addSeconds(selected, seconds);
    refresh();
  }

  function addMinutes(selected, minutes) {
    return addSeconds(selected, minutes*60);
  }

  function addSeconds(date, seconds) {
    var dt = new Date(date.getTime() + seconds * 1000);
    var newDate = new Date(date);
    newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
    return newDate;
  }

  function modelIsEmpty() {
    return ($scope.hours === null || $scope.hours === '') &&
      ($scope.minutes === null || $scope.minutes === '') &&
      (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ''));
  }

  $scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
    $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

  $scope.incrementHours = function() {
    if (!$scope.noIncrementHours()) {
      addSecondsToSelected(hourStep * 60 * 60);
    }
  };

  $scope.decrementHours = function() {
    if (!$scope.noDecrementHours()) {
      addSecondsToSelected(-hourStep * 60 * 60);
    }
  };

  $scope.incrementMinutes = function() {
    if (!$scope.noIncrementMinutes()) {
      addSecondsToSelected(minuteStep * 60);
    }
  };

  $scope.decrementMinutes = function() {
    if (!$scope.noDecrementMinutes()) {
      addSecondsToSelected(-minuteStep * 60);
    }
  };

  $scope.incrementSeconds = function() {
    if (!$scope.noIncrementSeconds()) {
      addSecondsToSelected(secondStep);
    }
  };

  $scope.decrementSeconds = function() {
    if (!$scope.noDecrementSeconds()) {
      addSecondsToSelected(-secondStep);
    }
  };

  $scope.toggleMeridian = function() {
    var minutes = getMinutesFromTemplate(),
        hours = getHoursFromTemplate();

    if (!$scope.noToggleMeridian()) {
      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
        addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
      } else {
        $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
      }
    }
  };

  $scope.blur = function() {
    ngModelCtrl.$setTouched();
  };

  $scope.$on('$destroy', function() {
    while (watchers.length) {
      watchers.shift()();
    }
  });
}])

.directive('uibTimepicker', ['uibTimepickerConfig', function(uibTimepickerConfig) {
  return {
    require: ['uibTimepicker', '?^ngModel'],
    restrict: 'A',
    controller: 'UibTimepickerController',
    controllerAs: 'timepicker',
    scope: {},
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || uibTimepickerConfig.templateUrl;
    },
    link: function(scope, element, attrs, ctrls) {
      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (ngModelCtrl) {
        timepickerCtrl.init(ngModelCtrl, element.find('input'));
      }
    }
  };
}]);

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('uibTypeaheadParser', ['$parse', function($parse) {
    //                      000001111111100000000000002222222200000000000000003333333333333330000000000044444444000
    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
    return {
      parse: function(input) {
        var match = input.match(TYPEAHEAD_REGEXP);
        if (!match) {
          throw new Error(
            'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
              ' but got "' + input + '".');
        }

        return {
          itemName: match[3],
          source: $parse(match[4]),
          viewMapper: $parse(match[2] || match[1]),
          modelMapper: $parse(match[1])
        };
      }
    };
  }])

  .controller('UibTypeaheadController', ['$scope', '$element', '$attrs', '$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$$debounce', '$uibPosition', 'uibTypeaheadParser',
    function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
    var HOT_KEYS = [9, 13, 27, 38, 40];
    var eventDebounceTime = 200;
    var modelCtrl, ngModelOptions;
    //SUPPORTED ATTRIBUTES (OPTIONS)

    var keepFocus = originalScope.$eval(attrs.typeaheadKeepFocus);

    var popupClasses = originalScope.$eval(attrs.typeaheadPopupClasses);

    var hasDoubleClick = originalScope.$eval(attrs.typeaheadHasDoubleClick);

    //minimal no of characters that needs to be entered before typeahead kicks-in
    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
    if (!minLength && minLength !== 0) {
      minLength = 1;
    }

    originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
        minLength = !newVal && newVal !== 0 ? 1 : newVal;
    });

    //minimal wait time after last character typed before typeahead kicks-in
    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

    //should it restrict model values to the ones selected from the popup only?
    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
    originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
      isEditable = newVal !== false;
    });

    //binding to a variable that indicates if matches are being retrieved asynchronously
    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

    //a function to determine if an event should cause selection
    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
      var evt = vals.$event;
      return evt.which === 13 || evt.which === 9;
    };

    //a callback executed when a match is selected
    var onSelectCallback = $parse(attrs.typeaheadOnSelect);

    //should it select highlighted popup value when losing focus?
    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

    //binding to a variable that indicates if there were no results after the query is completed
    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

    var appendTo = attrs.typeaheadAppendTo ?
      originalScope.$eval(attrs.typeaheadAppendTo) : null;

    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

    //If input matches an item of the list exactly, select it automatically
    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

    //binding to a variable that indicates if dropdown is open
    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;

    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;

    //INTERNAL VARIABLES

    //model setter executed upon match selection
    var parsedModel = $parse(attrs.ngModel);
    var invokeModelSetter = $parse(attrs.ngModel + '($$$p)');
    var $setModelValue = function(scope, newValue) {
      if (angular.isFunction(parsedModel(originalScope)) &&
        ngModelOptions.getOption('getterSetter')) {
        return invokeModelSetter(scope, {$$$p: newValue});
      }

      return parsedModel.assign(scope, newValue);
    };

    //expressions used by typeahead
    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);

    var hasFocus;

    //Used to avoid bug in iOS webview where iOS keyboard does not fire
    //mousedown & mouseup events
    //Issue #3699
    var selected;

    //create a child scope for the typeahead directive so we are not polluting original scope
    //with typeahead-specific data (matches, query etc.)
    var scope = originalScope.$new();
    var offDestroy = originalScope.$on('$destroy', function() {
      scope.$destroy();
    });
    scope.$on('$destroy', offDestroy);

    // WAI-ARIA
    var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
    element.attr({
      'aria-autocomplete': 'list',
      'aria-expanded': false,
      'aria-owns': popupId
    });

    var inputsContainer, hintInputElem;
    //add read-only input to show hint
    if (showHint) {
      inputsContainer = angular.element('<div></div>');
      inputsContainer.css('position', 'relative');
      element.after(inputsContainer);
      hintInputElem = element.clone();
      hintInputElem.attr('placeholder', '');
      hintInputElem.attr('tabindex', '-1');
      hintInputElem.val('');
      hintInputElem.css({
        'position': 'absolute',
        'top': '0px',
        'left': '0px',
        'border-color': 'transparent',
        'box-shadow': 'none',
        'opacity': 1,
        'background': 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
        'color': '#999'
      });
      element.css({
        'position': 'relative',
        'vertical-align': 'top',
        'background-color': 'transparent'
      });

      if (hintInputElem.attr('id')) {
        hintInputElem.removeAttr('id'); // remove duplicate id if present.
      }
      inputsContainer.append(hintInputElem);
      hintInputElem.after(element);
    }

    //pop-up element used to display matches
    var popUpEl = angular.element('<div uib-typeahead-popup></div>');
    popUpEl.attr({
      id: popupId,
      'is-open': 'isDropdownOpen',
      matches: 'matches',
      active: 'activeIdx',
      select: 'select(activeIdx, evt, clickCount)',
      'move-in-progress': 'moveInProgress',
      query: 'query',
      position: 'position',
      debounce: 'debounceUpdate'
    });
    //custom item template
    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
      popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
    }

    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
      popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl);
    }

    scope.isDropdownOpen = false;

    scope.$watch('isDropdownOpen', function(newVal, oldVal) {
      isOpenSetter(originalScope, newVal);
    });

    popUpEl.addClass(popupClasses);

    var resetHint = function() {
      if (showHint) {
        hintInputElem.val('');
      }
    };

    var resetMatches = function() {
      scope.matches = [];
      scope.activeIdx = -1;
      element.attr('aria-expanded', false);
      resetHint();
    };

    var getMatchId = function(index) {
      return popupId + '-option-' + index;
    };

    // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
    // This attribute is added or removed automatically when the `activeIdx` changes.
    scope.$watch('activeIdx', function(index) {
      if (index < 0) {
        element.removeAttr('aria-activedescendant');
      } else {
        element.attr('aria-activedescendant', getMatchId(index));
      }
    });

    var inputIsExactMatch = function(inputValue, index) {
      if (scope.matches.length > index && inputValue) {
        return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
      }

      return false;
    };

    var getMatchesAsync = function(inputValue, evt) {
      var locals = {$viewValue: inputValue};
      isLoadingSetter(originalScope, true);
      isNoResultsSetter(originalScope, false);
      $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
        //it might happen that several async queries were in progress if a user were typing fast
        //but we are interested only in responses that correspond to the current view value
        var onCurrentRequest = inputValue === modelCtrl.$viewValue;
        if (onCurrentRequest && hasFocus) {
          if (matches && matches.length > 0) {
            scope.activeIdx = focusFirst ? 0 : -1;
            isNoResultsSetter(originalScope, false);
            scope.matches.length = 0;

            //transform labels
            for (var i = 0; i < matches.length; i++) {
              locals[parserResult.itemName] = matches[i];
              scope.matches.push({
                id: getMatchId(i),
                label: parserResult.viewMapper(scope, locals),
                model: matches[i]
              });
            }

            scope.query = inputValue;
            //position pop-up with matches - we need to re-calculate its position each time we are opening a window
            //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
            //due to other elements being rendered
            recalculatePosition();

            element.attr('aria-expanded', true);

            //Select the single remaining option if user input matches
            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                $$debounce(function() {
                  scope.select(0, evt);
                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default'])();
              } else {
                scope.select(0, evt);
              }
            }

            if (showHint) {
              var firstLabel = scope.matches[0].label;
              if (angular.isString(inputValue) &&
                inputValue.length > 0 &&
                firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
                hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
              } else {
                hintInputElem.val('');
              }
            }
          } else {
            resetMatches();
            isNoResultsSetter(originalScope, true);
          }
        }
        if (onCurrentRequest) {
          isLoadingSetter(originalScope, false);
        }
      }, function() {
        resetMatches();
        isLoadingSetter(originalScope, false);
        isNoResultsSetter(originalScope, true);
      });
    };

    // bind events only if appendToBody params exist - performance feature
    if (appendToBody) {
      angular.element($window).on('resize', fireRecalculating);
      $document.find('body').on('scroll', fireRecalculating);
    }

    // Declare the debounced function outside recalculating for
    // proper debouncing
    var debouncedRecalculate = $$debounce(function() {
      // if popup is visible
      if (scope.matches.length) {
        recalculatePosition();
      }

      scope.moveInProgress = false;
    }, eventDebounceTime)();

    // Default progress type
    scope.moveInProgress = false;

    function fireRecalculating() {
      if (!scope.moveInProgress) {
        scope.moveInProgress = true;
        scope.$digest();
      }

      debouncedRecalculate();
    }

    // recalculate actual position and set new values to scope
    // after digest loop is popup in right position
    function recalculatePosition() {
      scope.position = appendToBody ? $position.offset(element) : $position.position(element);
      scope.position.top += element.prop('offsetHeight');
    }

    //we need to propagate user's query so we can higlight matches
    scope.query = undefined;

    //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
    var timeoutPromise;

    var scheduleSearchWithTimeout = function(inputValue) {
      timeoutPromise = $timeout(function() {
        getMatchesAsync(inputValue);
      }, waitTime);
    };

    var cancelPreviousTimeout = function() {
      if (timeoutPromise) {
        $timeout.cancel(timeoutPromise);
      }
    };

    resetMatches();

    scope.assignIsOpen = function (isOpen) {
      isOpenSetterf(originalScope, isOpen);
    };

    scope.select = function(activeIdx, evt, clickCount) {
      //called from within the $digest() cycle
      var locals = {};
      var model, item;

      selected = true;
      locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
      model = parserResult.modelMapper(originalScope, locals);
      $setModelValue(originalScope, model);
      modelCtrl.$setValidity('editable', true);
      modelCtrl.$setValidity('parse', true);

      var eventType = evt.type;
      if (eventType === 'mouseup') {
        if (clickCount === 1) {
          eventType = 'singleClick';
        } else {
          eventType = 'doubleClick';
        }
      }

      onSelectCallback(originalScope, {
        $item: item,
        $model: model,
        $label: parserResult.viewMapper(originalScope, locals),
        $event: evt,
        $eventType: eventType
      });

      resetMatches();
      scope.isDropdownOpen = false;

      //return focus to the input element if a match was selected via a mouse click event
      // use timeout to avoid $rootScope:inprog error
      if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
        $timeout(function() { element[0].focus(); }, 0, false);
      }
    };

    //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
    element.on('keydown', function(evt) {
      //typeahead is open and an "interesting" key was pressed
      if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
        return;
      }

      var shouldSelect = isSelectEvent(originalScope, {$event: evt});

      /**
       * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
       * or
       * shift + tab is pressed to bring focus to the previous element
       * then clear the results
       */
      if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
        resetMatches();
        scope.$digest();
        return;
      }

      evt.preventDefault();
      var target;
      switch (evt.which) {
        case 27: // escape
          evt.stopPropagation();

          resetMatches();
          originalScope.$digest();
          break;
        case 38: // up arrow
          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();
          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
          target.parentNode.scrollTop = target.offsetTop;
          break;
        case 40: // down arrow
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();
          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
          target.parentNode.scrollTop = target.offsetTop;
          break;
        default:
          if (shouldSelect) {
            scope.$apply(function() {
              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                $$debounce(function() {
                  scope.select(scope.activeIdx, evt);
                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default'])();
              } else {
                scope.select(scope.activeIdx, evt);
              }
            });

            element.blur();
            if (keepFocus) {
              element.focus();
            }
          }
      }
    });

    element.on('focus', function (evt) {
      hasFocus = true;
      scope.isDropdownOpen = true;
      if (minLength === 0 && !modelCtrl.$viewValue) {
        $timeout(function() {
          element[0].removeAttribute('inputmode');
          getMatchesAsync(modelCtrl.$viewValue, evt);
        }, 0);
      }
    });

    element.on('blur', function(evt) {
      if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
        selected = true;
        scope.$apply(function() {
          if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
            $$debounce(function() {
              scope.select(scope.activeIdx, evt);
            }, scope.debounceUpdate.blur)();
          } else {
            scope.select(scope.activeIdx, evt);
          }
        });
      }
      if (!isEditable && modelCtrl.$error.editable) {
        modelCtrl.$setViewValue();
        scope.$apply(function() {
          // Reset validity as we are clearing
          modelCtrl.$setValidity('editable', true);
          modelCtrl.$setValidity('parse', true);
        });
        element.val('');
      }
      hasFocus = false;
      selected = false;
      $timeout(function() {
        scope.isDropdownOpen = false;
      }, 300);
    });

    // Keep reference to click handler to unbind it.
    var dismissClickHandler = function(evt) {
      return;
      // Issue #3973
      // Firefox treats right click as a click on document
      if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
        var node = evt.target;
        while (node != null) {
          if (node === popUpEl[0]) {
            return;
          }
          node = node.parentNode;
        }

        resetMatches();
        scope.isDropdownOpen = false;
        if (!$rootScope.$$phase) {
          originalScope.$digest();
        }
      }
    };

    $document.on('click', dismissClickHandler);

    originalScope.$on('$destroy', function() {
      $document.off('click', dismissClickHandler);
      if (appendToBody || appendTo) {
        $popup.remove();
      }

      if (appendToBody) {
        angular.element($window).off('resize', fireRecalculating);
        $document.find('body').off('scroll', fireRecalculating);
      }
      // Prevent jQuery cache memory leak
      popUpEl.remove();

      if (showHint) {
          inputsContainer.remove();
      }
    });

    var $popup = $compile(popUpEl)(scope);

    if (appendToBody) {
      $document.find('body').append($popup);
    } else if (appendTo) {
      angular.element(appendTo).eq(0).append($popup);
    } else {
      element.after($popup);
    }

    this.init = function(_modelCtrl) {
      modelCtrl = _modelCtrl;
      ngModelOptions = extractOptions(modelCtrl);

      // scope.debounceUpdate = $parse(ngModelOptions.getOption('debounce'))(originalScope);
      scope.debounceUpdate = ngModelOptions.getOption('debounce');

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function(inputValue) {
        hasFocus = true;
        scope.isDropdownOpen = true;

        if (minLength === 0 || inputValue && inputValue.length >= minLength) {
          if (waitTime > 0) {
            cancelPreviousTimeout();
            scheduleSearchWithTimeout(inputValue);
          } else {
            getMatchesAsync(inputValue);
          }
        } else {
          isLoadingSetter(originalScope, false);
          cancelPreviousTimeout();
          resetMatches();
        }

        if (isEditable) {
          return inputValue;
        }

        if (!inputValue) {
          // Reset in case user had typed something previously.
          modelCtrl.$setValidity('editable', true);
          return null;
        }

        modelCtrl.$setValidity('editable', false);
        return undefined;
      });

      modelCtrl.$formatters.push(function(modelValue) {
        var candidateViewValue, emptyViewValue;
        var locals = {};

        // The validity may be set to false via $parsers (see above) if
        // the model is restricted to selected values. If the model
        // is set manually it is considered to be valid.
        if (!isEditable) {
          modelCtrl.$setValidity('editable', true);
        }

        if (inputFormatter) {
          locals.$model = modelValue;
          return inputFormatter(originalScope, locals);
        }

        //it might happen that we don't have enough info to properly render input value
        //we need to check for this situation and simply return model value if we can't apply custom formatting
        locals[parserResult.itemName] = modelValue;
        candidateViewValue = parserResult.viewMapper(originalScope, locals);
        locals[parserResult.itemName] = undefined;
        emptyViewValue = parserResult.viewMapper(originalScope, locals);

        return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
      });
    };

    function extractOptions(ngModelCtrl) {
      var ngModelOptions;

      if (angular.version.minor < 6) { // in angular < 1.6 $options could be missing
        // guarantee a value
        ngModelOptions = ngModelCtrl.$options || {};

        // mimic 1.6+ api
        ngModelOptions.getOption = function (key) {
          return ngModelOptions[key];
        };
      } else { // in angular >=1.6 $options is always present
        ngModelOptions = ngModelCtrl.$options;
      }

      return ngModelOptions;
    }
  }])

  .directive('uibTypeahead', function() {
    return {
      controller: 'UibTypeaheadController',
      require: ['ngModel', 'uibTypeahead'],
      link: function(originalScope, element, attrs, ctrls) {
        ctrls[1].init(ctrls[0]);
      }
    };
  })

  .directive('uibTypeaheadPopup', ['$$debounce', '$timeout', function($$debounce, $timeout) {
    return {
      scope: {
        isOpen: '=',
        matches: '=',
        query: '=',
        active: '=',
        position: '&',
        moveInProgress: '=',
        select: '&',
        assignIsOpen: '&',
        debounce: '&'
      },
      replace: true,
      templateUrl: function(element, attrs) {
        return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html';
      },
      link: function(scope, element, attrs) {
        scope.templateUrl = attrs.templateUrl;

        scope.$watch('isOpen', function (newValue) {
          scope.assignIsOpen({ isOpen: newValue });
        });

        scope.isActive = function(matchIdx) {
          return scope.active === matchIdx;
        };

        scope.selectActive = function(matchIdx) {
          scope.active = matchIdx;
        };

        let clickCount = 0;
        let clickTimeoutTimer = undefined;

        scope.mousedown = function(activeIdx, event) {
          clickCount += 1;
        };

        scope.mouseup = function(activeIdx, event) {
          $timeout.cancel(clickTimeoutTimer);
          clickTimeoutTimer = $timeout(function() {
            scope.selectMatch(activeIdx, event);
          }, 250);
        };

        scope.selectMatch = function(activeIdx, evt) {
          var debounce = scope.debounce();
          if (angular.isNumber(debounce) || angular.isObject(debounce)) {
            $$debounce(function() {
              scope.select({activeIdx: activeIdx, evt: evt, clickCount: clickCount });
              clickCount = 0;
            }, angular.isNumber(debounce) ? debounce : debounce['default'])();
          } else {
            scope.select({activeIdx: activeIdx, evt: evt, clickCount: clickCount });
          }
        };
      }
    };
  }])

  .directive('uibTypeaheadMatch', ['$templateRequest', '$compile', '$parse', function($templateRequest, $compile, $parse) {
    return {
      scope: {
        index: '=',
        match: '=',
        query: '='
      },
      link: function(scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'uib/template/typeahead/typeahead-match.html';
        $templateRequest(tplUrl).then(function(tplContent) {
          var tplEl = angular.element(tplContent.trim());
          element.replaceWith(tplEl);
          $compile(tplEl)(scope);
        });
      }
    };
  }])

  .filter('uibTypeaheadHighlight', ['$sce', '$injector', '$log', function($sce, $injector, $log) {
    var isSanitizePresent;
    isSanitizePresent = $injector.has('$sanitize');

    function escapeRegexp(queryToEscape) {
      // Regex: capture the whole query string and replace it with the string that will be used to match
      // the results, for example if the capture is "a" the result will be \a
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }

    function containsHtml(matchItem) {
      return /<.*>/g.test(matchItem);
    }

    return function(matchItem, query) {
      if (!isSanitizePresent && containsHtml(matchItem)) {
        $log.warn('Unsafe use of typeahead please use ngSanitize'); // Warn the user about the danger
      }
      matchItem = query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem; // Replaces the capture string with a the same string inside of a "strong" tag
      if (!isSanitizePresent) {
        matchItem = $sce.trustAsHtml(matchItem); // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
      }
      return matchItem;
    };
  }]);

angular.module("uib/template/accordion/accordion-group.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/accordion/accordion-group.html",
    "<div role=\"tab\" id=\"{{::headingId}}\" aria-selected=\"{{isOpen}}\" class=\"panel-heading\" ng-keypress=\"toggleOpen($event)\">\n" +
    "  <h4 class=\"panel-title\">\n" +
    "    <a role=\"button\" data-toggle=\"collapse\" href aria-expanded=\"{{isOpen}}\" aria-controls=\"{{::panelId}}\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" uib-accordion-transclude=\"heading\" ng-disabled=\"isDisabled\" uib-tabindex-toggle><span uib-accordion-header ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
    "  </h4>\n" +
    "</div>\n" +
    "<div id=\"{{::panelId}}\" aria-labelledby=\"{{::headingId}}\" aria-hidden=\"{{!isOpen}}\" role=\"tabpanel\" class=\"panel-collapse collapse\" uib-collapse=\"!isOpen\">\n" +
    "  <div class=\"panel-body\" ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/accordion/accordion.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/accordion/accordion.html",
    "<div role=\"tablist\" class=\"panel-group\" ng-transclude></div>");
}]);

angular.module("uib/template/alert/alert.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/alert/alert.html",
    "<button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close({$event: $event})\">\n" +
    "  <span aria-hidden=\"true\">&times;</span>\n" +
    "  <span class=\"sr-only\">Close</span>\n" +
    "</button>\n" +
    "<div ng-transclude></div>\n" +
    "");
}]);

angular.module("uib/template/carousel/carousel.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/carousel/carousel.html",
    "<div class=\"carousel-inner\" ng-transclude></div>\n" +
    "<a role=\"button\" href class=\"left carousel-control\" ng-click=\"prev()\" ng-class=\"{ disabled: isPrevDisabled() }\" ng-show=\"slides.length > 1\">\n" +
    "  <span aria-hidden=\"true\" class=\"fa fa-chevron-left\"></span>\n" +
    "  <span class=\"sr-only\">previous</span>\n" +
    "</a>\n" +
    "<a role=\"button\" href class=\"right carousel-control\" ng-click=\"next()\" ng-class=\"{ disabled: isNextDisabled() }\" ng-show=\"slides.length > 1\">\n" +
    "  <span aria-hidden=\"true\" class=\"fa fa-chevron-right\"></span>\n" +
    "  <span class=\"sr-only\">next</span>\n" +
    "</a>\n" +
    "<ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
    "  <li ng-repeat=\"slide in slides | orderBy:indexOfSlide track by $index\" ng-class=\"{ active: isActive(slide) }\" ng-click=\"select(slide)\">\n" +
    "    <span class=\"sr-only\">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if=\"isActive(slide)\">, currently active</span></span>\n" +
    "  </li>\n" +
    "</ol>\n" +
    "");
}]);

angular.module("uib/template/carousel/slide.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/carousel/slide.html",
    "<div class=\"text-center\" ng-transclude></div>\n" +
    "");
}]);

angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/datepicker/datepicker.html",
    "<div ng-switch=\"datepickerMode\">\n" +
    "  <div uib-daypicker ng-switch-when=\"day\" tabindex=\"0\" class=\"uib-daypicker\"></div>\n" +
    "  <div uib-monthpicker ng-switch-when=\"month\" tabindex=\"0\" class=\"uib-monthpicker\"></div>\n" +
    "  <div uib-yearpicker ng-switch-when=\"year\" tabindex=\"0\" class=\"uib-yearpicker\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/datepicker/day.html",
    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-light btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"fa fa-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
    "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-light btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-light btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"fa fa-chevron-right\"></i><span class=\"sr-only\">next</span></button></th>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
    "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr class=\"uib-weeks\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
    "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
    "      <td ng-repeat=\"dt in row\" class=\"uib-day text-center\" role=\"gridcell\"\n" +
    "        id=\"{{::dt.uid}}\"\n" +
    "        ng-class=\"::dt.customClass\">\n" +
    "        <button type=\"button\" class=\"btn btn-sm\"\n" +
    "          uib-is-class=\"\n" +
    "            'btn-primary' for selectedDt,\n" +
    "            'active' for activeDt\n" +
    "            on dt\"\n" +
    "          ng-click=\"select(dt.date)\"\n" +
    "          ng-disabled=\"::dt.disabled\"\n" +
    "          ng-class=\"::{'d-none': dt.secondary, 'btn-light': !dt.selected}\"" +
    "          tabindex=\"-1\"><span ng-class=\"::{'d-none': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/datepicker/month.html",
    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-light btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"fa fa-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
    "      <th colspan=\"{{::yearHeaderColspan}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-light btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-light btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"fa fa-chevron-right\"></i><span class=\"sr-only\">next</span></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr class=\"uib-months\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
    "      <td ng-repeat=\"dt in row\" class=\"uib-month text-center\" role=\"gridcell\"\n" +
    "        id=\"{{::dt.uid}}\"\n" +
    "        ng-class=\"::dt.customClass\">\n" +
    "        <button type=\"button\" class=\"btn btn-light\"\n" +
    "          uib-is-class=\"\n" +
    "            'btn-primary' for selectedDt,\n" +
    "            'active' for activeDt\n" +
    "            on dt\"\n" +
    "          ng-click=\"select(dt.date)\"\n" +
    "          ng-disabled=\"::dt.disabled\"\n" +
    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/datepicker/popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/datepicker/popup.html",
    "<div>\n" +
    "  <ul class=\"uib-datepicker-popup dropdown-menu uib-position-measure\" dropdown-nested ng-if=\"isOpen\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
    "    <li ng-transclude></li>\n" +
    "    <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
    "      <span class=\"btn-group pull-left\">\n" +
    "        <button type=\"button\" class=\"btn btn-sm btn-primary uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
    "        <button type=\"button\" class=\"btn btn-sm btn-outline-dark uib-clear\" ng-click=\"select(null, $event)\">{{ (getText'clear') }}</button>\n" +
    "      </span>\n" +
    "      <button type=\"button\" class=\"btn btn-sm btn-outline-dark pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
    "    </li>\n" +
    "  </ul>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/datepicker/year.html",
    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-light btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"fa fa-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
    "      <th colspan=\"{{::columns - 2}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-light btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-light btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"fa fa-chevron-right\"></i><span class=\"sr-only\">next</span></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr class=\"uib-years\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
    "      <td ng-repeat=\"dt in row\" class=\"uib-year text-center\" role=\"gridcell\"\n" +
    "        id=\"{{::dt.uid}}\"\n" +
    "        ng-class=\"::dt.customClass\">\n" +
    "        <button type=\"button\" class=\"btn btn-light\"\n" +
    "          uib-is-class=\"\n" +
    "            'btn-primary' for selectedDt,\n" +
    "            'active' for activeDt\n" +
    "            on dt\"\n" +
    "          ng-click=\"select(dt.date)\"\n" +
    "          ng-disabled=\"::dt.disabled\"\n" +
    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/datepickerPopup/popup.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/datepickerPopup/popup.html",
    "<ul role=\"presentation\" class=\"uib-datepicker-popup dropdown-menu uib-position-measure\" dropdown-nested ng-if=\"isOpen\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
    "  <li ng-transclude></li>\n" +
    "  <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
    "    <span class=\"btn-group pull-left\">\n" +
    "      <button type=\"button\" class=\"btn btn-sm btn-primary uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
    "      <button type=\"button\" class=\"btn btn-sm btn-outline-dark uib-clear\" ng-click=\"select(null, $event)\">{{ getText('clear') }}</button>\n" +
    "    </span>\n" +
    "    <button type=\"button\" class=\"btn btn-sm btn-outline-dark pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
    "  </li>\n" +
    "</ul>\n" +
    "");
}]);

angular.module("uib/template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/modal/backdrop.html",
    "<div class=\"modal-backdrop\"\n" +
    // "     uib-modal-animation-class=\"fade\"\n" +
    "     modal-in-class=\"in\"\n" +
    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
    "></div>\n" +
    "");
}]);

angular.module("uib/template/modal/window.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/modal/window.html",
    "<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" +
    "");
}]);

angular.module("uib/template/pager/pager.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/pager/pager.html",
    "<li ng-class=\"{disabled: noPrevious()||ngDisabled, previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('previous')}}</a></li>\n" +
    "<li ng-class=\"{disabled: noNext()||ngDisabled, next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('next')}}</a></li>\n" +
    "");
}]);

angular.module("uib/template/pagination/pagination.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/pagination/pagination.html",
    "<li role=\"menuitem\" ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"page-item pagination-first\"><a href ng-click=\"selectPage(1, $event)\" class=\"page-link\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('first')}}</a></li>\n" +
    "<li role=\"menuitem\" ng-if=\"::directionLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"page-item pagination-prev\"><a href ng-click=\"selectPage(page - 1, $event)\" class=\"page-link\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('previous')}}</a></li>\n" +
    "<li role=\"menuitem\" ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active,disabled: ngDisabled&&!page.active}\" class=\"page-item pagination-page\"><a href ng-click=\"selectPage(page.number, $event)\" class=\"page-link\" ng-disabled=\"ngDisabled&&!page.active\" uib-tabindex-toggle>{{page.text}}</a></li>\n" +
    "<li role=\"menuitem\" ng-if=\"::directionLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"page-item pagination-next\"><a href ng-click=\"selectPage(page + 1, $event)\" ng-disabled=\"noNext()||ngDisabled\" class=\"page-link\" uib-tabindex-toggle>{{::getText('next')}}</a></li>\n" +
    "<li role=\"menuitem\" ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"page-item pagination-last\"><a href ng-click=\"selectPage(totalPages, $event)\" ng-disabled=\"noNext()||ngDisabled\" class=\"page-link\" uib-tabindex-toggle>{{::getText('last')}}</a></li>\n" +
    "");
}]);

angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/tooltip/tooltip-html-popup.html",
    "<div class=\"tooltip-arrow\"></div>\n" +
    "<div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
    "");
}]);

angular.module("uib/template/tooltip/tooltip-popup.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip-arrow\"></div>\n" +
    "<div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "");
}]);

angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/tooltip/tooltip-template-popup.html",
    "<div class=\"tooltip-arrow\"></div>\n" +
    "<div class=\"tooltip-inner\"\n" +
    "  uib-tooltip-template-transclude=\"contentExp()\"\n" +
    "  tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
    "");
}]);

angular.module("uib/template/popover/popover-html.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/popover/popover-html.html",
    "<div class=\"arrow\"></div>\n" +
    "\n" +
    "<div class=\"popover-inner\">\n" +
    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
    "    <div class=\"popover-content\" ng-bind-html=\"contentExp()\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/popover/popover-template.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/popover/popover-template.html",
    "<div class=\"arrow\"></div>\n" +
    "\n" +
    "<div class=\"popover-inner\">\n" +
    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
    "    <div class=\"popover-content\"\n" +
    "      uib-tooltip-template-transclude=\"contentExp()\"\n" +
    "      tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/popover/popover.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/popover/popover.html",
    "<div class=\"arrow\"></div>\n" +
    "\n" +
    "<div class=\"popover-inner\">\n" +
    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
    "    <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/progressbar/bar.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/progressbar/bar.html",
    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
    "");
}]);

angular.module("uib/template/progressbar/progress.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/progressbar/progress.html",
    "<div class=\"progress\" ng-transclude aria-labelledby=\"{{::title}}\"></div>");
}]);

angular.module("uib/template/progressbar/progressbar.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/progressbar/progressbar.html",
    "<div class=\"progress\">\n" +
    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/rating/rating.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/rating/rating.html",
    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\" aria-valuetext=\"{{title}}\">\n" +
    "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
    "    <i ng-repeat-end ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"fa\" ng-class=\"$index < value && (r.stateOn || 'fa-star') || (r.stateOff || 'fa-star-empty')\" ng-attr-title=\"{{r.title}}\"></i>\n" +
    "</span>\n" +
    "");
}]);

angular.module("uib/template/tabs/tab.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/tabs/tab.html",
    "<li ng-class=\"[{active: active, disabled: disabled}, classes]\" class=\"uib-tab nav-item\">\n" +
    "  <a href ng-click=\"select($event)\" class=\"nav-link\" uib-tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("uib/template/tabs/tabset.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/tabs/tabset.html",
    "<div>\n" +
    "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\"\n" +
    "         ng-repeat=\"tab in tabset.tabs\"\n" +
    "         ng-class=\"{active: tabset.active === tab.index}\"\n" +
    "         uib-tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/timepicker/timepicker.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/timepicker/timepicker.html",
    "<table class=\"uib-timepicker\">\n" +
    "  <tbody>\n" +
    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
    "      <td class=\"uib-increment hours\"><a ng-click=\"incrementHours()\" ng-class=\"{disabled: noIncrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementHours()\" tabindex=\"-1\"><span class=\"fa fa-chevron-up\"></span></a></td>\n" +
    "      <td>&nbsp;</td>\n" +
    "      <td class=\"uib-increment minutes\"><a ng-click=\"incrementMinutes()\" ng-class=\"{disabled: noIncrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementMinutes()\" tabindex=\"-1\"><span class=\"fa fa-chevron-up\"></span></a></td>\n" +
    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
    "      <td ng-show=\"showSeconds\" class=\"uib-increment seconds\"><a ng-click=\"incrementSeconds()\" ng-class=\"{disabled: noIncrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementSeconds()\" tabindex=\"-1\"><span class=\"fa fa-chevron-up\"></span></a></td>\n" +
    "      <td ng-show=\"showMeridian\"></td>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <td class=\"form-group uib-time hours\" ng-class=\"{'has-error': invalidHours}\">\n" +
    "        <input type=\"text\" placeholder=\"HH\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementHours()\" ng-blur=\"blur()\">\n" +
    "      </td>\n" +
    "      <td class=\"uib-separator\">:</td>\n" +
    "      <td class=\"form-group uib-time minutes\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
    "        <input type=\"text\" placeholder=\"MM\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementMinutes()\" ng-blur=\"blur()\">\n" +
    "      </td>\n" +
    "      <td ng-show=\"showSeconds\" class=\"uib-separator\">:</td>\n" +
    "      <td class=\"form-group uib-time seconds\" ng-class=\"{'has-error': invalidSeconds}\" ng-show=\"showSeconds\">\n" +
    "        <input type=\"text\" placeholder=\"SS\" ng-model=\"seconds\" ng-change=\"updateSeconds()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementSeconds()\" ng-blur=\"blur()\">\n" +
    "      </td>\n" +
    "      <td ng-show=\"showMeridian\" class=\"uib-time am-pm\"><button type=\"button\" ng-class=\"{disabled: noToggleMeridian()}\" class=\"btn btn-light text-center\" ng-click=\"toggleMeridian()\" ng-disabled=\"noToggleMeridian()\" tabindex=\"{{::tabindex}}\">{{meridian}}</button></td>\n" +
    "    </tr>\n" +
    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
    "      <td class=\"uib-decrement hours\"><a ng-click=\"decrementHours()\" ng-class=\"{disabled: noDecrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementHours()\" tabindex=\"-1\"><span class=\"fa fa-chevron-down\"></span></a></td>\n" +
    "      <td>&nbsp;</td>\n" +
    "      <td class=\"uib-decrement minutes\"><a ng-click=\"decrementMinutes()\" ng-class=\"{disabled: noDecrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementMinutes()\" tabindex=\"-1\"><span class=\"fa fa-chevron-down\"></span></a></td>\n" +
    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
    "      <td ng-show=\"showSeconds\" class=\"uib-decrement seconds\"><a ng-click=\"decrementSeconds()\" ng-class=\"{disabled: noDecrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementSeconds()\" tabindex=\"-1\"><span class=\"fa fa-chevron-down\"></span></a></td>\n" +
    "      <td ng-show=\"showMeridian\"></td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/typeahead/typeahead-match.html",
    "<a href\n" +
    "   class=\"dropdown-item\"" +
    "   tabindex=\"-1\"\n" +
    "   ng-bind-html=\"match.label | uibTypeaheadHighlight:query\"\n" +
    "   ng-attr-title=\"{{match.label}}\"></a>\n" +
    "");
}]);

angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("uib/template/typeahead/typeahead-popup.html",
    "<ul class=\"dropdown-menu\" ng-show=\"isOpen && !moveInProgress\" ng-style=\"{top: position().top+'px', left: position().left+'px'}\" role=\"listbox\" aria-hidden=\"{{!isOpen}}\">\n" +
    "    <li class=\"uib-typeahead-match\" ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mousedown=\"mousedown($index, $event)\" ng-mouseup=\"mouseup($index, $event)\" role=\"option\" id=\"{{::match.id}}\">\n" +
    "        <div uib-typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
    "    </li>\n" +
    "</ul>\n" +
    "");
}]);
angular.module('ui.bootstrap.carousel').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'); angular.$$uibCarouselCss = true; });
angular.module('ui.bootstrap.datepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'); angular.$$uibDatepickerCss = true; });
angular.module('ui.bootstrap.position').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'); angular.$$uibPositionCss = true; });
angular.module('ui.bootstrap.datepickerPopup').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'); angular.$$uibDatepickerpopupCss = true; });
angular.module('ui.bootstrap.tooltip').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'); angular.$$uibTooltipCss = true; });
angular.module('ui.bootstrap.timepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-time input{width:50px;}</style>'); angular.$$uibTimepickerCss = true; });
angular.module('ui.bootstrap.typeahead').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'); angular.$$uibTypeaheadCss = true; });
/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.19.8 - 2017-04-18T05:43:43.673Z
 * License: MIT
 */


(function () { 
"use strict";
var KEY = {
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HOME: 36,
    END: 35,
    BACKSPACE: 8,
    DELETE: 46,
    COMMAND: 91,

    MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
    },

    isControl: function (e) {
        var k = e.which;
        switch (k) {
        case KEY.COMMAND:
        case KEY.SHIFT:
        case KEY.CTRL:
        case KEY.ALT:
            return true;
        }

        if (e.metaKey || e.ctrlKey || e.altKey) return true;

        return false;
    },
    isFunctionKey: function (k) {
        k = k.which ? k.which : k;
        return k >= 112 && k <= 123;
    },
    isVerticalMovement: function (k){
      return ~[KEY.UP, KEY.DOWN].indexOf(k);
    },
    isHorizontalMovement: function (k){
      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);
    },
    toSeparator: function (k) {
      var sep = {ENTER:"\n",TAB:"\t",SPACE:" "}[k];
      if (sep) return sep;
      // return undefined for special keys other than enter, tab or space.
      // no way to use them to cut strings.
      return KEY[k] ? undefined : k;
    }
  };

function isNil(value) {
  return angular.isUndefined(value) || value === null;
}

/**
 * Add querySelectorAll() to jqLite.
 *
 * jqLite find() is limited to lookups by tag name.
 * TODO This will change with future versions of AngularJS, to be removed when this happens
 *
 * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
 * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
 */
if (angular.element.prototype.querySelectorAll === undefined) {
  angular.element.prototype.querySelectorAll = function(selector) {
    return angular.element(this[0].querySelectorAll(selector));
  };
}

/**
 * Add closest() to jqLite.
 */
if (angular.element.prototype.closest === undefined) {
  angular.element.prototype.closest = function( selector) {
    var elem = this[0];
    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;

    while (elem) {
      if (matchesSelector.bind(elem)(selector)) {
        return elem;
      } else {
        elem = elem.parentElement;
      }
    }
    return false;
  };
}

var latestId = 0;

var uis = angular.module('ui.select', [])

.constant('uiSelectConfig', {
  theme: 'bootstrap',
  searchEnabled: true,
  sortable: false,
  placeholder: '', // Empty by default, like HTML tag <select>
  refreshDelay: 1000, // In milliseconds
  closeOnSelect: true,
  skipFocusser: false,
  dropdownPosition: 'auto',
  removeSelected: true,
  resetSearchInput: true,
  generateId: function() {
    return latestId++;
  },
  appendToBody: false,
  spinnerEnabled: false,
  spinnerClass: 'glyphicon glyphicon-refresh ui-select-spin',
  backspaceReset: true
})

// See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
.service('uiSelectMinErr', function() {
  var minErr = angular.$$minErr('ui.select');
  return function() {
    var error = minErr.apply(this, arguments);
    var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
    return new Error(message);
  };
})

// Recreates old behavior of ng-transclude. Used internally.
.directive('uisTranscludeAppend', function () {
  return {
    link: function (scope, element, attrs, ctrl, transclude) {
        transclude(scope, function (clone) {
          element.append(clone);
        });
      }
    };
})

/**
 * Highlights text that matches $select.search.
 *
 * Taken from AngularUI Bootstrap Typeahead
 * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
 */
.filter('highlight', function() {
  function escapeRegexp(queryToEscape) {
    return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
  }

  return function(matchItem, query) {
    return query && matchItem ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
  };
})

/**
 * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
 *
 * Taken from AngularUI Bootstrap Position:
 * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
 */
.factory('uisOffset',
  ['$document', '$window',
  function ($document, $window) {

  return function(element) {
    var boundingClientRect = element[0].getBoundingClientRect();
    return {
      width: boundingClientRect.width || element.prop('offsetWidth'),
      height: boundingClientRect.height || element.prop('offsetHeight'),
      top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
      left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
    };
  };
}]);

uis.directive('uiSelectChoices',
  ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile', '$window',
  function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {

  return {
    restrict: 'EA',
    require: '^uiSelect',
    replace: true,
    transclude: true,
    templateUrl: function(tElement) {
      // Needed so the uiSelect can detect the transcluded content
      tElement.addClass('ui-select-choices');

      // Gets theme attribute from parent (ui-select)
      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
      return theme + '/choices.tpl.html';
    },

    compile: function(tElement, tAttrs) {

      if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");

      // var repeat = RepeatParser.parse(attrs.repeat);
      var groupByExp = tAttrs.groupBy;
      var groupFilterExp = tAttrs.groupFilter;

      if (groupByExp) {
        var groups = tElement.querySelectorAll('.ui-select-choices-group');
        if (groups.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
        groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
      }

      var parserResult = RepeatParser.parse(tAttrs.repeat);

      var choices = tElement.querySelectorAll('.ui-select-choices-row');
      if (choices.length !== 1) {
        throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
      }

      choices.attr('ng-repeat', parserResult.repeatExpression(groupByExp))
             .attr('ng-if', '$select.open'); //Prevent unnecessary watches when dropdown is closed


      var rowsInner = tElement.querySelectorAll('.ui-select-choices-row-inner');
      if (rowsInner.length !== 1) {
        throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
      }
      rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat

      // If IE8 then need to target rowsInner to apply the ng-click attr as choices will not capture the event.
      var clickTarget = $window.document.addEventListener ? choices : rowsInner;
      clickTarget.attr('ng-click', '$select.select(' + parserResult.itemName + ',$select.skipFocusser,$event)');

      return function link(scope, element, attrs, $select) {


        $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult
        $select.disableChoiceExpression = attrs.uiDisableChoice;
        $select.onHighlightCallback = attrs.onHighlight;
        $select.minimumInputLength = parseInt(attrs.minimumInputLength) || 0;
        $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;

        scope.$watch('$select.search', function(newValue) {
          if(newValue && !$select.open && $select.multiple) $select.activate(false, true);
          $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
          if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
            $select.refresh(attrs.refresh);
          } else {
            $select.items = [];
          }
        });

        attrs.$observe('refreshDelay', function() {
          // $eval() is needed otherwise we get a string instead of a number
          var refreshDelay = scope.$eval(attrs.refreshDelay);
          $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
        });

        scope.$watch('$select.open', function(open) {
          if (open) {
            tElement.attr('role', 'listbox');
            $select.refresh(attrs.refresh);
          } else {
            element.removeAttr('role');
          }
        });
      };
    }
  };
}]);

/**
 * Contains ui-select "intelligence".
 *
 * The goal is to limit dependency on the DOM whenever possible and
 * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
 */
uis.controller('uiSelectCtrl',
  ['$scope', '$element', '$timeout', '$filter', '$$uisDebounce', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector', '$window',
  function($scope, $element, $timeout, $filter, $$uisDebounce, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window) {

  var ctrl = this;

  var EMPTY_SEARCH = '';

  ctrl.placeholder = uiSelectConfig.placeholder;
  ctrl.searchEnabled = uiSelectConfig.searchEnabled;
  ctrl.sortable = uiSelectConfig.sortable;
  ctrl.refreshDelay = uiSelectConfig.refreshDelay;
  ctrl.paste = uiSelectConfig.paste;
  ctrl.resetSearchInput = uiSelectConfig.resetSearchInput;
  ctrl.refreshing = false;
  ctrl.spinnerEnabled = uiSelectConfig.spinnerEnabled;
  ctrl.spinnerClass = uiSelectConfig.spinnerClass;
  ctrl.removeSelected = uiSelectConfig.removeSelected; //If selected item(s) should be removed from dropdown list
  ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
  ctrl.skipFocusser = false; //Set to true to avoid returning focus to ctrl when item is selected
  ctrl.search = EMPTY_SEARCH;

  ctrl.activeIndex = 0; //Dropdown of choices
  ctrl.items = []; //All available choices

  ctrl.open = false;
  ctrl.focus = false;
  ctrl.disabled = false;
  ctrl.selected = undefined;

  ctrl.dropdownPosition = 'auto';

  ctrl.focusser = undefined; //Reference to input element used to handle focus events
  ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
  ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
  ctrl.tagging = {isActivated: false, fct: undefined};
  ctrl.taggingTokens = {isActivated: false, tokens: undefined};
  ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
  ctrl.clickTriggeredSelect = false;
  ctrl.$filter = $filter;
  ctrl.$element = $element;

  // Use $injector to check for $animate and store a reference to it
  ctrl.$animate = (function () {
    try {
      return $injector.get('$animate');
    } catch (err) {
      // $animate does not exist
      return null;
    }
  })();

  ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
  if (ctrl.searchInput.length !== 1) {
    throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
  }

  ctrl.isEmpty = function() {
    return isNil(ctrl.selected) || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
  };

  function _findIndex(collection, predicate, thisArg){
    if (collection.findIndex){
      return collection.findIndex(predicate, thisArg);
    } else {
      var list = Object(collection);
      var length = list.length >>> 0;
      var value;

      for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
          return i;
        }
      }
      return -1;
    }
  }

  // Most of the time the user does not want to empty the search input when in typeahead mode
  function _resetSearchInput() {
    if (ctrl.resetSearchInput) {
      ctrl.search = EMPTY_SEARCH;
      //reset activeIndex
      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
        ctrl.activeIndex = _findIndex(ctrl.items, function(item){
          return angular.equals(this, item);
        }, ctrl.selected);
      }
    }
  }

    function _groupsFilter(groups, groupNames) {
      var i, j, result = [];
      for(i = 0; i < groupNames.length ;i++){
        for(j = 0; j < groups.length ;j++){
          if(groups[j].name == [groupNames[i]]){
            result.push(groups[j]);
          }
        }
      }
      return result;
    }

  // When the user clicks on ui-select, displays the dropdown list
  ctrl.activate = function(initSearchValue, avoidReset) {
    if (!ctrl.disabled  && !ctrl.open) {
      if(!avoidReset) _resetSearchInput();

      $scope.$broadcast('uis:activate');
      ctrl.open = true;
      ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;
      // ensure that the index is set to zero for tagging variants
      // that where first option is auto-selected
      if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {
        ctrl.activeIndex = 0;
      }

      var container = $element.querySelectorAll('.ui-select-choices-content');
      var searchInput = $element.querySelectorAll('.ui-select-search');
      if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
        var animateHandler = function(elem, phase) {
          if (phase === 'start' && ctrl.items.length === 0) {
            // Only focus input after the animation has finished
            ctrl.$animate.off('removeClass', searchInput[0], animateHandler);
            $timeout(function () {
              ctrl.focusSearchInput(initSearchValue);
            });
          } else if (phase === 'close') {
            // Only focus input after the animation has finished
            ctrl.$animate.off('enter', container[0], animateHandler);
            $timeout(function () {
              ctrl.focusSearchInput(initSearchValue);
            });
          }
        };

        if (ctrl.items.length > 0) {
          ctrl.$animate.on('enter', container[0], animateHandler);
        } else {
          ctrl.$animate.on('removeClass', searchInput[0], animateHandler);
        }
      } else {
        $timeout(function () {
          ctrl.focusSearchInput(initSearchValue);
          if(!ctrl.tagging.isActivated && ctrl.items.length > 1) {
            _ensureHighlightVisible();
          }
        });
      }
    }
    else if (ctrl.open && !ctrl.searchEnabled) {
      // Close the selection if we don't have search enabled, and we click on the select again
      ctrl.close();
    }
  };

  ctrl.focusSearchInput = function (initSearchValue) {
    ctrl.search = initSearchValue || ctrl.search;
    ctrl.searchInput[0].focus();
  };

  ctrl.findGroupByName = function(name) {
    return ctrl.groups && ctrl.groups.filter(function(group) {
      return group.name === name;
    })[0];
  };

  ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
    function updateGroups(items) {
      var groupFn = $scope.$eval(groupByExp);
      ctrl.groups = [];
      angular.forEach(items, function(item) {
        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
        var group = ctrl.findGroupByName(groupName);
        if(group) {
          group.items.push(item);
        }
        else {
          ctrl.groups.push({name: groupName, items: [item]});
        }
      });
      if(groupFilterExp){
        var groupFilterFn = $scope.$eval(groupFilterExp);
        if( angular.isFunction(groupFilterFn)){
          ctrl.groups = groupFilterFn(ctrl.groups);
        } else if(angular.isArray(groupFilterFn)){
          ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
        }
      }
      ctrl.items = [];
      ctrl.groups.forEach(function(group) {
        ctrl.items = ctrl.items.concat(group.items);
      });
    }

    function setPlainItems(items) {
      ctrl.items = items || [];
    }

    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;

    ctrl.parserResult = RepeatParser.parse(repeatAttr);

    ctrl.isGrouped = !!groupByExp;
    ctrl.itemProperty = ctrl.parserResult.itemName;

    //If collection is an Object, convert it to Array

    var originalSource = ctrl.parserResult.source;

    //When an object is used as source, we better create an array and use it as 'source'
    var createArrayFromObject = function(){
      var origSrc = originalSource($scope);
      $scope.$uisSource = Object.keys(origSrc).map(function(v){
        var result = {};
        result[ctrl.parserResult.keyName] = v;
        result.value = origSrc[v];
        return result;
      });
    };

    if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
      createArrayFromObject();
      ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
      $scope.$watch(originalSource, function(newVal, oldVal){
        if (newVal !== oldVal) createArrayFromObject();
      }, true);
    }

    ctrl.refreshItems = function (data){
      data = data || ctrl.parserResult.source($scope);
      var selectedItems = ctrl.selected;
      //TODO should implement for single mode removeSelected
      if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.multiple || !ctrl.removeSelected) {
        ctrl.setItemsFn(data);
      }else{
        if ( data !== undefined && data !== null ) {
          var filteredItems = data.filter(function(i) {
            return angular.isArray(selectedItems) ? selectedItems.every(function(selectedItem) {
              return !angular.equals(i, selectedItem);
            }) : !angular.equals(i, selectedItems);
          });
          ctrl.setItemsFn(filteredItems);
        }
      }
      if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up'){
        $scope.calculateDropdownPos();
      }
      $scope.$broadcast('uis:refresh');
    };

    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
    $scope.$watchCollection(ctrl.parserResult.source, function(items) {
      if (items === undefined || items === null) {
        // If the user specifies undefined or null => reset the collection
        // Special case: items can be undefined if the user did not initialized the collection on the scope
        // i.e $scope.addresses = [] is missing
        ctrl.items = [];
      } else {
        if (!angular.isArray(items)) {
          throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
        } else {
          //Remove already selected items (ex: while searching)
          //TODO Should add a test
          ctrl.refreshItems(items);

          //update the view value with fresh data from items, if there is a valid model value
          if(angular.isDefined(ctrl.ngModel.$modelValue)) {
            ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
          }
        }
      }
    });

  };

  var _refreshDelayPromise;

  /**
   * Typeahead mode: lets the user refresh the collection using his own function.
   *
   * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
   */
  ctrl.refresh = function(refreshAttr) {
    if (refreshAttr !== undefined) {
      // Debounce
      // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
      // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
      if (_refreshDelayPromise) {
        $timeout.cancel(_refreshDelayPromise);
      }
      _refreshDelayPromise = $timeout(function() {
        if ($scope.$select.search.length >= $scope.$select.minimumInputLength) {
          var refreshPromise = $scope.$eval(refreshAttr);
          if (refreshPromise && angular.isFunction(refreshPromise.then) && !ctrl.refreshing) {
            ctrl.refreshing = true;
            refreshPromise.finally(function() {
              ctrl.refreshing = false;
            });
          }
        }
      }, ctrl.refreshDelay);
    }
  };

  ctrl.isActive = function(itemScope) {
    if ( !ctrl.open ) {
      return false;
    }
    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
    var isActive =  itemIndex == ctrl.activeIndex;

    if ( !isActive || itemIndex < 0 ) {
      return false;
    }

    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
      itemScope.$eval(ctrl.onHighlightCallback);
    }

    return isActive;
  };

  var _isItemSelected = function (item) {
    return (ctrl.selected && angular.isArray(ctrl.selected) &&
        ctrl.selected.filter(function (selection) { return angular.equals(selection, item); }).length > 0);
  };

  var disabledItems = [];

  function _updateItemDisabled(item, isDisabled) {
    var disabledItemIndex = disabledItems.indexOf(item);
    if (isDisabled && disabledItemIndex === -1) {
      disabledItems.push(item);
    }

    if (!isDisabled && disabledItemIndex > -1) {
      disabledItems.splice(disabledItemIndex, 1);
    }
  }

  function _isItemDisabled(item) {
    return disabledItems.indexOf(item) > -1;
  }

  ctrl.isDisabled = function(itemScope) {

    if (!ctrl.open) return;

    var item = itemScope[ctrl.itemProperty];
    var itemIndex = ctrl.items.indexOf(item);
    var isDisabled = false;

    if (itemIndex >= 0 && (angular.isDefined(ctrl.disableChoiceExpression) || ctrl.multiple)) {

      if (item.isTag) return false;

      if (ctrl.multiple) {
        isDisabled = _isItemSelected(item);
      }

      if (!isDisabled && angular.isDefined(ctrl.disableChoiceExpression)) {
        isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression));
      }

      _updateItemDisabled(item, isDisabled);
    }

    return isDisabled;
  };


  // When the user selects an item with ENTER or clicks the dropdown
  ctrl.select = function(item, skipFocusser, $event) {
    if (isNil(item) || !_isItemDisabled(item)) {

      if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;

      if (!item || !_isItemDisabled(item)) {
        // if click is made on existing item, prevent from tagging, ctrl.search does not matter
        ctrl.clickTriggeredSelect = false;
        if($event && ($event.type === 'click' || $event.type === 'touchend') && item)
          ctrl.clickTriggeredSelect = true;

        if(ctrl.tagging.isActivated && ctrl.clickTriggeredSelect === false) {
          // if taggingLabel is disabled and item is undefined we pull from ctrl.search
          if ( ctrl.taggingLabel === false ) {
            if ( ctrl.activeIndex < 0 ) {
              if (item === undefined) {
                item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
              }
              if (!item || angular.equals( ctrl.items[0], item ) ) {
                return;
              }
            } else {
              // keyboard nav happened first, user selected from dropdown
              item = ctrl.items[ctrl.activeIndex];
            }
          } else {
            // tagging always operates at index zero, taggingLabel === false pushes
            // the ctrl.search value without having it injected
            if ( ctrl.activeIndex === 0 ) {
              // ctrl.tagging pushes items to ctrl.items, so we only have empty val
              // for `item` if it is a detected duplicate
              if ( item === undefined ) return;

              // create new item on the fly if we don't already have one;
              // use tagging function if we have one
              if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {
                item = ctrl.tagging.fct(item);
                if (!item) return;
              // if item type is 'string', apply the tagging label
              } else if ( typeof item === 'string' ) {
                // trim the trailing space
                item = item.replace(ctrl.taggingLabel,'').trim();
              }
            }
          }
          // search ctrl.selected for dupes potentially caused by tagging and return early if found
          if (_isItemSelected(item)) {
            ctrl.close(skipFocusser);
            return;
          }
        }
        _resetSearchInput();
        $scope.$broadcast('uis:select', item);

        if (ctrl.closeOnSelect) {
          ctrl.close(skipFocusser);
        }
      }
    }
  };

  // Closes the dropdown
  ctrl.close = function(skipFocusser) {
    if (!ctrl.open) return;
    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
    ctrl.open = false;
    _resetSearchInput();
    $scope.$broadcast('uis:close', skipFocusser);

  };

  ctrl.setFocus = function(){
    if (!ctrl.focus) ctrl.focusInput[0].focus();
  };

  ctrl.clear = function($event) {
    ctrl.select(null);
    $event.stopPropagation();
    $timeout(function() {
      ctrl.focusser[0].focus();
    }, 0, false);
  };

  // Toggle dropdown
  ctrl.toggle = function(e) {
    if (ctrl.open) {
      ctrl.close();
      e.preventDefault();
      e.stopPropagation();
    } else {
      ctrl.activate();
    }
  };

  // Set default function for locked choices - avoids unnecessary
  // logic if functionality is not being used
  ctrl.isLocked = function () {
    return false;
  };

  $scope.$watch(function () {
    return angular.isDefined(ctrl.lockChoiceExpression) && ctrl.lockChoiceExpression !== "";
  }, _initaliseLockedChoices);

  function _initaliseLockedChoices(doInitalise) {
    if(!doInitalise) return;

    var lockedItems = [];

    function _updateItemLocked(item, isLocked) {
      var lockedItemIndex = lockedItems.indexOf(item);
      if (isLocked && lockedItemIndex === -1) {
        lockedItems.push(item);
        }

      if (!isLocked && lockedItemIndex > -1) {
        lockedItems.splice(lockedItemIndex, 1);
      }
    }

    function _isItemlocked(item) {
      return lockedItems.indexOf(item) > -1;
    }

    ctrl.isLocked = function (itemScope, itemIndex) {
      var isLocked = false,
          item = ctrl.selected[itemIndex];

      if(item) {
        if (itemScope) {
          isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression));
          _updateItemLocked(item, isLocked);
        } else {
          isLocked = _isItemlocked(item);
        }
      }

      return isLocked;
    };
  }


  var sizeWatch = null;
  var updaterScheduled = false;
  ctrl.sizeSearchInput = function() {

    var input = ctrl.searchInput[0],
        container = ctrl.$element[0],
        calculateContainerWidth = function() {
          // Return the container width only if the search input is visible
          return container.clientWidth * !!input.offsetParent;
        },
        updateIfVisible = function(containerWidth) {
          if (containerWidth === 0) {
            return false;
          }
          var inputWidth = containerWidth - input.offsetLeft;
          if (inputWidth < 50) inputWidth = containerWidth;
          ctrl.searchInput.css('width', inputWidth+'px');
          return true;
        };

    ctrl.searchInput.css('width', '10px');
    $timeout(function() { //Give tags time to render correctly
      if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
        sizeWatch = $scope.$watch(function() {
          if (!updaterScheduled) {
            updaterScheduled = true;
            $scope.$$postDigest(function() {
              updaterScheduled = false;
              if (updateIfVisible(calculateContainerWidth())) {
                sizeWatch();
                sizeWatch = null;
              }
            });
          }
        }, angular.noop);
      }
    });
  };

  function _handleDropDownSelection(key) {
    var processed = true;
    switch (key) {
      case KEY.DOWN:
        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
        else if (ctrl.activeIndex < ctrl.items.length - 1) {
          var idx = ++ctrl.activeIndex;
          while(_isItemDisabled(ctrl.items[idx]) && idx < ctrl.items.length) {
            ctrl.activeIndex = ++idx;
          }
        }
        break;
      case KEY.UP:
        var minActiveIndex = (ctrl.search.length === 0 && ctrl.tagging.isActivated) ? -1 : 0;
        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
        else if (ctrl.activeIndex > minActiveIndex) {
          var idxmin = --ctrl.activeIndex;
          while(_isItemDisabled(ctrl.items[idxmin]) && idxmin > minActiveIndex) {
            ctrl.activeIndex = --idxmin;
          }
        }
        break;
      case KEY.TAB:
        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
        break;
      case KEY.ENTER:
        if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
          ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
        } else {
          ctrl.activate(false, true); //In case its the search input in 'multiple' mode
        }
        break;
      case KEY.ESC:
        ctrl.close();
        break;
      default:
        processed = false;
    }
    return processed;
  }

  // Bind to keyboard shortcuts
  ctrl.searchInput.on('keydown', function(e) {

    var key = e.which;

    if (~[KEY.ENTER,KEY.ESC].indexOf(key)){
      e.preventDefault();
      e.stopPropagation();
    }

    $scope.$apply(function() {

      var tagged = false;

      if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
        if(!_handleDropDownSelection(key) && !ctrl.searchEnabled) {
          e.preventDefault();
          e.stopPropagation();
        }
        if ( ctrl.taggingTokens.isActivated ) {
          for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
            if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {
              // make sure there is a new value to push via tagging
              if ( ctrl.search.length > 0 ) {
                tagged = true;
              }
            }
          }
          if ( tagged ) {
            $timeout(function() {
              ctrl.searchInput.triggerHandler('tagged');
              var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();
              if ( ctrl.tagging.fct ) {
                newItem = ctrl.tagging.fct( newItem );
              }
              if (newItem) ctrl.select(newItem, true);
            });
          }
        }
      }

    });

    if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){
      _ensureHighlightVisible();
    }

    if (key === KEY.ENTER || key === KEY.ESC) {
      e.preventDefault();
      e.stopPropagation();
    }

  });

  ctrl.searchInput.on('paste', function (e) {
    var data;

    if (window.clipboardData && window.clipboardData.getData) { // IE
      data = window.clipboardData.getData('Text');
    } else {
      data = (e.originalEvent || e).clipboardData.getData('text/plain');
    }

    // Prepend the current input field text to the paste buffer.
    data = ctrl.search + data;

    if (data && data.length > 0) {
      // If tagging try to split by tokens and add items
      if (ctrl.taggingTokens.isActivated) {
        var items = [];
        for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {  // split by first token that is contained in data
          var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[i]) || ctrl.taggingTokens.tokens[i];
          if (data.indexOf(separator) > -1) {
            items = data.split(separator);
            break;  // only split by one token
          }
        }
        if (items.length === 0) {
          items = [data];
        }
        var oldsearch = ctrl.search;
        angular.forEach(items, function (item) {
          var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
          if (newItem) {
            ctrl.select(newItem, true);
          }
        });
        ctrl.search = oldsearch || EMPTY_SEARCH;
        e.preventDefault();
        e.stopPropagation();
      } else if (ctrl.paste) {
        ctrl.paste(data);
        ctrl.search = EMPTY_SEARCH;
        e.preventDefault();
        e.stopPropagation();
      }
    }
  });

  ctrl.searchInput.on('tagged', function() {
    $timeout(function() {
      _resetSearchInput();
    });
  });

  // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
  function _ensureHighlightVisible() {
    var container = $element.querySelectorAll('.ui-select-choices-content');
    var choices = container.querySelectorAll('.ui-select-choices-row');
    if (choices.length < 1) {
      throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
    }

    if (ctrl.activeIndex < 0) {
      return;
    }

    var highlighted = choices[ctrl.activeIndex];
    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
    var height = container[0].offsetHeight;

    if (posY > height) {
      container[0].scrollTop += posY - height;
    } else if (posY < highlighted.clientHeight) {
      if (ctrl.isGrouped && ctrl.activeIndex === 0)
        container[0].scrollTop = 0; //To make group header visible when going all the way up
      else
        container[0].scrollTop -= highlighted.clientHeight - posY;
    }
  }

  var onResize = $$uisDebounce(function() {
    ctrl.sizeSearchInput();
  }, 50);

  angular.element($window).bind('resize', onResize);

  $scope.$on('$destroy', function() {
    ctrl.searchInput.off('keyup keydown tagged blur paste');
    angular.element($window).off('resize', onResize);
  });

  $scope.$watch('$select.activeIndex', function(activeIndex) {
    if (activeIndex)
      $element.find('input').attr(
        'aria-activedescendant',
        'ui-select-choices-row-' + ctrl.generatedId + '-' + activeIndex);
  });

  $scope.$watch('$select.open', function(open) {
    if (!open)
      $element.find('input').removeAttr('aria-activedescendant');
  });
}]);

uis.directive('uiSelect',
  ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
  function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {

  return {
    restrict: 'EA',
    templateUrl: function(tElement, tAttrs) {
      var theme = tAttrs.theme || uiSelectConfig.theme;
      return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
    },
    replace: true,
    transclude: true,
    require: ['uiSelect', '^ngModel'],
    scope: true,

    controller: 'uiSelectCtrl',
    controllerAs: '$select',
    compile: function(tElement, tAttrs) {

      // Allow setting ngClass on uiSelect
      var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
      if(match) {
        var combined = '{'+ match[1] +', '+ match[2] +'}';
        tAttrs.ngClass = combined;
        tElement.attr('ng-class', combined);
      }

      //Multiple or Single depending if multiple attribute presence
      if (angular.isDefined(tAttrs.multiple))
        tElement.append('<ui-select-multiple/>').removeAttr('multiple');
      else
        tElement.append('<ui-select-single/>');

      if (tAttrs.inputId)
        tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;

      return function(scope, element, attrs, ctrls, transcludeFn) {

        var $select = ctrls[0];
        var ngModel = ctrls[1];

        $select.generatedId = uiSelectConfig.generateId();
        $select.baseTitle = attrs.title || 'Select box';
        $select.focusserTitle = $select.baseTitle + ' focus';
        $select.focusserId = 'focusser-' + $select.generatedId;

        $select.closeOnSelect = function() {
          if (angular.isDefined(attrs.closeOnSelect)) {
            return $parse(attrs.closeOnSelect)();
          } else {
            return uiSelectConfig.closeOnSelect;
          }
        }();

        scope.$watch('skipFocusser', function() {
            var skipFocusser = scope.$eval(attrs.skipFocusser);
            $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
        });

        $select.onSelectCallback = $parse(attrs.onSelect);
        $select.onRemoveCallback = $parse(attrs.onRemove);

        //Set reference to ngModel from uiSelectCtrl
        $select.ngModel = ngModel;

        $select.choiceGrouped = function(group){
          return $select.isGrouped && group && group.name;
        };

        if(attrs.tabindex){
          attrs.$observe('tabindex', function(value) {
            $select.focusInput.attr('tabindex', value);
            element.removeAttr('tabindex');
          });
        }

        scope.$watch(function () { return scope.$eval(attrs.searchEnabled); }, function(newVal) {
          $select.searchEnabled = newVal !== undefined ? newVal : uiSelectConfig.searchEnabled;
        });

        scope.$watch('sortable', function() {
            var sortable = scope.$eval(attrs.sortable);
            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
        });

        attrs.$observe('backspaceReset', function() {
          // $eval() is needed otherwise we get a string instead of a boolean
          var backspaceReset = scope.$eval(attrs.backspaceReset);
          $select.backspaceReset = backspaceReset !== undefined ? backspaceReset : true;
        });

        attrs.$observe('limit', function() {
          //Limit the number of selections allowed
          $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;
        });

        scope.$watch('removeSelected', function() {
            var removeSelected = scope.$eval(attrs.removeSelected);
            $select.removeSelected = removeSelected !== undefined ? removeSelected : uiSelectConfig.removeSelected;
        });

        attrs.$observe('disabled', function() {
          // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
          $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
        });

        attrs.$observe('resetSearchInput', function() {
          // $eval() is needed otherwise we get a string instead of a boolean
          var resetSearchInput = scope.$eval(attrs.resetSearchInput);
          $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
        });

        attrs.$observe('paste', function() {
          $select.paste = scope.$eval(attrs.paste);
        });

        attrs.$observe('tagging', function() {
          if(attrs.tagging !== undefined)
          {
            // $eval() is needed otherwise we get a string instead of a boolean
            var taggingEval = scope.$eval(attrs.tagging);
            $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
          }
          else
          {
            $select.tagging = {isActivated: false, fct: undefined};
          }
        });

        attrs.$observe('taggingLabel', function() {
          if(attrs.tagging !== undefined )
          {
            // check eval for FALSE, in this case, we disable the labels
            // associated with tagging
            if ( attrs.taggingLabel === 'false' ) {
              $select.taggingLabel = false;
            }
            else
            {
              $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
            }
          }
        });

        attrs.$observe('taggingTokens', function() {
          if (attrs.tagging !== undefined) {
            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
            $select.taggingTokens = {isActivated: true, tokens: tokens };
          }
        });

        attrs.$observe('spinnerEnabled', function() {
          // $eval() is needed otherwise we get a string instead of a boolean
          var spinnerEnabled = scope.$eval(attrs.spinnerEnabled);
          $select.spinnerEnabled = spinnerEnabled !== undefined ? spinnerEnabled : uiSelectConfig.spinnerEnabled;
        });

        attrs.$observe('spinnerClass', function() {
          var spinnerClass = attrs.spinnerClass;
          $select.spinnerClass = spinnerClass !== undefined ? attrs.spinnerClass : uiSelectConfig.spinnerClass;
        });

        //Automatically gets focus when loaded
        if (angular.isDefined(attrs.autofocus)){
          $timeout(function(){
            $select.setFocus();
          });
        }

        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
        if (angular.isDefined(attrs.focusOn)){
          scope.$on(attrs.focusOn, function() {
              $timeout(function(){
                $select.setFocus();
              });
          });
        }

        function onDocumentClick(e) {
          if (!$select.open) return; //Skip it if dropdown is close

          var contains = false;

          if (window.jQuery) {
            // Firefox 3.6 does not support element.contains()
            // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
            contains = window.jQuery.contains(element[0], e.target);
          } else {
            contains = element[0].contains(e.target);
          }

          if (!contains && !$select.clickTriggeredSelect) {
            var skipFocusser;
            if (!$select.skipFocusser) {
              //Will lose focus only with certain targets
              var focusableControls = ['input','button','textarea','select'];
              var targetController = angular.element(e.target).controller('uiSelect'); //To check if target is other ui-select
              skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
              if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
            } else {
              skipFocusser = true;
            }
            $select.close(skipFocusser);
            scope.$digest();
          }
          $select.clickTriggeredSelect = false;
        }

        // See Click everywhere but here event http://stackoverflow.com/questions/12931369
        $document.on('click', onDocumentClick);

        scope.$on('$destroy', function() {
          $document.off('click', onDocumentClick);
        });

        // Move transcluded elements to their correct position in main template
        transcludeFn(scope, function(clone) {
          // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html

          // One day jqLite will be replaced by jQuery and we will be able to write:
          // var transcludedElement = clone.filter('.my-class')
          // instead of creating a hackish DOM element:
          var transcluded = angular.element('<div>').append(clone);

          var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
          transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
          transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
          if (transcludedMatch.length !== 1) {
            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
          }
          element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);

          var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
          transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
          transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
          if (transcludedChoices.length !== 1) {
            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
          }
          element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);

          var transcludedNoChoice = transcluded.querySelectorAll('.ui-select-no-choice');
          transcludedNoChoice.removeAttr('ui-select-no-choice'); //To avoid loop in case directive as attr
          transcludedNoChoice.removeAttr('data-ui-select-no-choice'); // Properly handle HTML5 data-attributes
          if (transcludedNoChoice.length == 1) {
            element.querySelectorAll('.ui-select-no-choice').replaceWith(transcludedNoChoice);
          }
        });

        // Support for appending the select field to the body when its open
        var appendToBody = scope.$eval(attrs.appendToBody);
        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
          scope.$watch('$select.open', function(isOpen) {
            if (isOpen) {
              positionDropdown();
            } else {
              resetDropdown();
            }
          });

          // Move the dropdown back to its original location when the scope is destroyed. Otherwise
          // it might stick around when the user routes away or the select field is otherwise removed
          scope.$on('$destroy', function() {
            resetDropdown();
          });
        }

        // Hold on to a reference to the .ui-select-container element for appendToBody support
        var placeholder = null,
            originalWidth = '';

        function positionDropdown() {
          // Remember the absolute position of the element
          var offset = uisOffset(element);

          // Clone the element into a placeholder element to take its original place in the DOM
          placeholder = angular.element('<div class="ui-select-placeholder"></div>');
          placeholder[0].style.width = offset.width + 'px';
          placeholder[0].style.height = offset.height + 'px';
          element.after(placeholder);

          // Remember the original value of the element width inline style, so it can be restored
          // when the dropdown is closed
          originalWidth = element[0].style.width;

          // Now move the actual dropdown element to the end of the body
          $document.find('body').append(element);

          element[0].style.position = 'absolute';
          element[0].style.left = offset.left + 'px';
          element[0].style.top = offset.top + 'px';
          element[0].style.width = offset.width + 'px';
        }

        function resetDropdown() {
          if (placeholder === null) {
            // The dropdown has not actually been display yet, so there's nothing to reset
            return;
          }

          // Move the dropdown element back to its original location in the DOM
          placeholder.replaceWith(element);
          placeholder = null;

          element[0].style.position = '';
          element[0].style.left = '';
          element[0].style.top = '';
          element[0].style.width = originalWidth;

          // Set focus back on to the moved element
          $select.setFocus();
        }

        // Hold on to a reference to the .ui-select-dropdown element for direction support.
        var dropdown = null,
            directionUpClassName = 'direction-up';

        // Support changing the direction of the dropdown if there isn't enough space to render it.
        scope.$watch('$select.open', function() {

          if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
            scope.calculateDropdownPos();
          }

        });

        var setDropdownPosUp = function(offset, offsetDropdown){

          offset = offset || uisOffset(element);
          offsetDropdown = offsetDropdown || uisOffset(dropdown);

          dropdown[0].style.position = 'absolute';
          dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
          element.addClass(directionUpClassName);

        };

        var setDropdownPosDown = function(offset, offsetDropdown){

          element.removeClass(directionUpClassName);

          offset = offset || uisOffset(element);
          offsetDropdown = offsetDropdown || uisOffset(dropdown);

          dropdown[0].style.position = '';
          dropdown[0].style.top = '';

        };

        var calculateDropdownPosAfterAnimation = function() {
          // Delay positioning the dropdown until all choices have been added so its height is correct.
          $timeout(function() {
            if ($select.dropdownPosition === 'up') {
              //Go UP
              setDropdownPosUp();
            } else {
              //AUTO
              element.removeClass(directionUpClassName);

              var offset = uisOffset(element);
              var offsetDropdown = uisOffset(dropdown);

              //https://code.google.com/p/chromium/issues/detail?id=342307#c4
              var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).

              // Determine if the direction of the dropdown needs to be changed.
              if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
                //Go UP
                setDropdownPosUp(offset, offsetDropdown);
              }else{
                //Go DOWN
                setDropdownPosDown(offset, offsetDropdown);
              }
            }

            // Display the dropdown once it has been positioned.
            dropdown[0].style.opacity = 1;
          });
        };

        var opened = false;
        
        scope.calculateDropdownPos = function() {
          if ($select.open) {
            dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');

            if (dropdown.length === 0) {
              return;
            }

           // Hide the dropdown so there is no flicker until $timeout is done executing.
           if ($select.search === '' && !opened) {
              dropdown[0].style.opacity = 0;
              opened = true;
           }

            if (!uisOffset(dropdown).height && $select.$animate && $select.$animate.on && $select.$animate.enabled(dropdown)) {
              var needsCalculated = true;

              $select.$animate.on('enter', dropdown, function (elem, phase) {
                if (phase === 'close' && needsCalculated) {
                  calculateDropdownPosAfterAnimation();
                  needsCalculated = false;
                }
              });
            } else {
              calculateDropdownPosAfterAnimation();
            }
          } else {
            if (dropdown === null || dropdown.length === 0) {
              return;
            }

            // Reset the position of the dropdown.
            dropdown[0].style.opacity = 0;
            dropdown[0].style.position = '';
            dropdown[0].style.top = '';
            element.removeClass(directionUpClassName);
          }
        };
      };
    }
  };
}]);

uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
  return {
    restrict: 'EA',
    require: '^uiSelect',
    replace: true,
    transclude: true,
    templateUrl: function(tElement) {
      // Needed so the uiSelect can detect the transcluded content
      tElement.addClass('ui-select-match');

      var parent = tElement.parent();
      // Gets theme attribute from parent (ui-select)
      var theme = getAttribute(parent, 'theme') || uiSelectConfig.theme;
      var multi = angular.isDefined(getAttribute(parent, 'multiple'));

      return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');      
    },
    link: function(scope, element, attrs, $select) {
      $select.lockChoiceExpression = attrs.uiLockChoice;
      attrs.$observe('placeholder', function(placeholder) {
        $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
      });

      function setAllowClear(allow) {
        $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
      }

      attrs.$observe('allowClear', setAllowClear);
      setAllowClear(attrs.allowClear);

      if($select.multiple){
        $select.sizeSearchInput();
      }

    }
  };

  function getAttribute(elem, attribute) {
    if (elem[0].hasAttribute(attribute))
      return elem.attr(attribute);

    if (elem[0].hasAttribute('data-' + attribute))
      return elem.attr('data-' + attribute);

    if (elem[0].hasAttribute('x-' + attribute))
      return elem.attr('x-' + attribute);
  }
}]);

uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
  return {
    restrict: 'EA',
    require: ['^uiSelect', '^ngModel'],

    controller: ['$scope','$timeout', function($scope, $timeout){

      var ctrl = this,
          $select = $scope.$select,
          ngModel;

      if (angular.isUndefined($select.selected))
        $select.selected = [];

      //Wait for link fn to inject it
      $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });

      ctrl.activeMatchIndex = -1;

      ctrl.updateModel = function(){
        ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
        ctrl.refreshComponent();
      };

      ctrl.refreshComponent = function(){
        //Remove already selected items
        //e.g. When user clicks on a selection, the selected array changes and
        //the dropdown should remove that item
        if($select.refreshItems){
          $select.refreshItems();
        }
        if($select.sizeSearchInput){
          $select.sizeSearchInput();
        }
      };

      // Remove item from multiple select
      ctrl.removeChoice = function(index){

        // if the choice is locked, don't remove it
        if($select.isLocked(null, index)) return false;

        var removedChoice = $select.selected[index];

        var locals = {};
        locals[$select.parserResult.itemName] = removedChoice;

        $select.selected.splice(index, 1);
        ctrl.activeMatchIndex = -1;
        $select.sizeSearchInput();

        // Give some time for scope propagation.
        $timeout(function(){
          $select.onRemoveCallback($scope, {
            $item: removedChoice,
            $model: $select.parserResult.modelMapper($scope, locals)
          });
        });

        ctrl.updateModel();

        return true;
      };

      ctrl.getPlaceholder = function(){
        //Refactor single?
        if($select.selected && $select.selected.length) return;
        return $select.placeholder;
      };


    }],
    controllerAs: '$selectMultiple',

    link: function(scope, element, attrs, ctrls) {

      var $select = ctrls[0];
      var ngModel = scope.ngModel = ctrls[1];
      var $selectMultiple = scope.$selectMultiple;

      //$select.selected = raw selected objects (ignoring any property binding)

      $select.multiple = true;

      //Input that will handle focus
      $select.focusInput = $select.searchInput;

      //Properly check for empty if set to multiple
      ngModel.$isEmpty = function(value) {
        return !value || value.length === 0;
      };

      //From view --> model
      ngModel.$parsers.unshift(function () {
        var locals = {},
            result,
            resultMultiple = [];
        for (var j = $select.selected.length - 1; j >= 0; j--) {
          locals = {};
          locals[$select.parserResult.itemName] = $select.selected[j];
          result = $select.parserResult.modelMapper(scope, locals);
          resultMultiple.unshift(result);
        }
        return resultMultiple;
      });

      // From model --> view
      ngModel.$formatters.unshift(function (inputValue) {
        var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
            locals = {},
            result;
        if (!data) return inputValue;
        var resultMultiple = [];
        var checkFnMultiple = function(list, value){
          if (!list || !list.length) return;
          for (var p = list.length - 1; p >= 0; p--) {
            locals[$select.parserResult.itemName] = list[p];
            result = $select.parserResult.modelMapper(scope, locals);
            if($select.parserResult.trackByExp){
                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
                  if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
                      resultMultiple.unshift(list[p]);
                      return true;
                  }
                }
            }
            if (angular.equals(result,value)){
              resultMultiple.unshift(list[p]);
              return true;
            }
          }
          return false;
        };
        if (!inputValue) return resultMultiple; //If ngModel was undefined
        for (var k = inputValue.length - 1; k >= 0; k--) {
          //Check model array of currently selected items
          if (!checkFnMultiple($select.selected, inputValue[k])){
            //Check model array of all items available
            if (!checkFnMultiple(data, inputValue[k])){
              //If not found on previous lists, just add it directly to resultMultiple
              resultMultiple.unshift(inputValue[k]);
            }
          }
        }
        return resultMultiple;
      });

      //Watch for external model changes
      scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
        if (oldValue != newValue){
          //update the view value with fresh data from items, if there is a valid model value
          if(angular.isDefined(ngModel.$modelValue)) {
            ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
          }
          $selectMultiple.refreshComponent();
        }
      });

      ngModel.$render = function() {
        // Make sure that model value is array
        if(!angular.isArray(ngModel.$viewValue)){
          // Have tolerance for null or undefined values
          if (isNil(ngModel.$viewValue)){
            ngModel.$viewValue = [];
          } else {
            throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
          }
        }
        $select.selected = ngModel.$viewValue;
        $selectMultiple.refreshComponent();
        scope.$evalAsync(); //To force $digest
      };

      scope.$on('uis:select', function (event, item) {
        if($select.selected.length >= $select.limit) {
          return;
        }
        $select.selected.push(item);
        var locals = {};
        locals[$select.parserResult.itemName] = item;

        $timeout(function(){
          $select.onSelectCallback(scope, {
            $item: item,
            $model: $select.parserResult.modelMapper(scope, locals)
          });
        });
        $selectMultiple.updateModel();
      });

      scope.$on('uis:activate', function () {
        $selectMultiple.activeMatchIndex = -1;
      });

      scope.$watch('$select.disabled', function(newValue, oldValue) {
        // As the search input field may now become visible, it may be necessary to recompute its size
        if (oldValue && !newValue) $select.sizeSearchInput();
      });

      $select.searchInput.on('keydown', function(e) {
        var key = e.which;
        scope.$apply(function() {
          var processed = false;
          // var tagged = false; //Checkme
          if(KEY.isHorizontalMovement(key)){
            processed = _handleMatchSelection(key);
          }
          if (processed  && key != KEY.TAB) {
            //TODO Check si el tab selecciona aun correctamente
            //Crear test
            e.preventDefault();
            e.stopPropagation();
          }
        });
      });
      function _getCaretPosition(el) {
        if(angular.isNumber(el.selectionStart)) return el.selectionStart;
        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
        else return el.value.length;
      }
      // Handles selected options in "multiple" mode
      function _handleMatchSelection(key){
        var caretPosition = _getCaretPosition($select.searchInput[0]),
            length = $select.selected.length,
            // none  = -1,
            first = 0,
            last  = length-1,
            curr  = $selectMultiple.activeMatchIndex,
            next  = $selectMultiple.activeMatchIndex+1,
            prev  = $selectMultiple.activeMatchIndex-1,
            newIndex = curr;

        if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;

        $select.close();

        function getNewActiveMatchIndex(){
          switch(key){
            case KEY.LEFT:
              // Select previous/first item
              if(~$selectMultiple.activeMatchIndex) return prev;
              // Select last item
              else return last;
              break;
            case KEY.RIGHT:
              // Open drop-down
              if(!~$selectMultiple.activeMatchIndex || curr === last){
                $select.activate();
                return false;
              }
              // Select next/last item
              else return next;
              break;
            case KEY.BACKSPACE:
              // Remove selected item and select previous/first
              if(~$selectMultiple.activeMatchIndex){
                if($selectMultiple.removeChoice(curr)) {
                  return prev;
                } else {
                  return curr;
                }

              } else {
                // If nothing yet selected, select last item
                return last;
              }
              break;
            case KEY.DELETE:
              // Remove selected item and select next item
              if(~$selectMultiple.activeMatchIndex){
                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
                return curr;
              }
              else return false;
          }
        }

        newIndex = getNewActiveMatchIndex();

        if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
        else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));

        return true;
      }

      $select.searchInput.on('keyup', function(e) {

        if ( ! KEY.isVerticalMovement(e.which) ) {
          scope.$evalAsync( function () {
            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
          });
        }
        // Push a "create new" item into array if there is a search string
        if ( $select.tagging.isActivated && $select.search.length > 0 ) {

          // return early with these keys
          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
            return;
          }
          // always reset the activeIndex to the first item when tagging
          $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
          // taggingLabel === false bypasses all of this
          if ($select.taggingLabel === false) return;

          var items = angular.copy( $select.items );
          var stashArr = angular.copy( $select.items );
          var newItem;
          var item;
          var hasTag = false;
          var dupeIndex = -1;
          var tagItems;
          var tagItem;

          // case for object tagging via transform `$select.tagging.fct` function
          if ( $select.tagging.fct !== undefined) {
            tagItems = $select.$filter('filter')(items,{'isTag': true});
            if ( tagItems.length > 0 ) {
              tagItem = tagItems[0];
            }
            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
            if ( items.length > 0 && tagItem ) {
              hasTag = true;
              items = items.slice(1,items.length);
              stashArr = stashArr.slice(1,stashArr.length);
            }
            newItem = $select.tagging.fct($select.search);
            // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
            if (
              stashArr.some(function (origItem) {
                 return angular.equals(origItem, newItem);
              }) ||
              $select.selected.some(function (origItem) {
                return angular.equals(origItem, newItem);
              })
            ) {
              scope.$evalAsync(function () {
                $select.activeIndex = 0;
                $select.items = items;
              });
              return;
            }
            if (newItem) newItem.isTag = true;
          // handle newItem string and stripping dupes in tagging string context
          } else {
            // find any tagging items already in the $select.items array and store them
            tagItems = $select.$filter('filter')(items,function (item) {
              return item.match($select.taggingLabel);
            });
            if ( tagItems.length > 0 ) {
              tagItem = tagItems[0];
            }
            item = items[0];
            // remove existing tag item if found (should only ever be one tag item)
            if ( item !== undefined && items.length > 0 && tagItem ) {
              hasTag = true;
              items = items.slice(1,items.length);
              stashArr = stashArr.slice(1,stashArr.length);
            }
            newItem = $select.search+' '+$select.taggingLabel;
            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
              return;
            }
            // verify the the tag doesn't match the value of an existing item from
            // the searched data set or the items already selected
            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
              // if there is a tag from prev iteration, strip it / queue the change
              // and return early
              if ( hasTag ) {
                items = stashArr;
                scope.$evalAsync( function () {
                  $select.activeIndex = 0;
                  $select.items = items;
                });
              }
              return;
            }
            if ( _findCaseInsensitiveDupe(stashArr) ) {
              // if there is a tag from prev iteration, strip it
              if ( hasTag ) {
                $select.items = stashArr.slice(1,stashArr.length);
              }
              return;
            }
          }
          if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
          // dupe found, shave the first item
          if ( dupeIndex > -1 ) {
            items = items.slice(dupeIndex+1,items.length-1);
          } else {
            items = [];
            if (newItem) items.push(newItem);
            items = items.concat(stashArr);
          }
          scope.$evalAsync( function () {
            $select.activeIndex = 0;
            $select.items = items;

            if ($select.isGrouped) {
              // update item references in groups, so that indexOf will work after angular.copy
              var itemsWithoutTag = newItem ? items.slice(1) : items;
              $select.setItemsFn(itemsWithoutTag);
              if (newItem) {
                // add tag item as a new group
                $select.items.unshift(newItem);
                $select.groups.unshift({name: '', items: [newItem], tagging: true});
              }
            }
          });
        }
      });
      function _findCaseInsensitiveDupe(arr) {
        if ( arr === undefined || $select.search === undefined ) {
          return false;
        }
        var hasDupe = arr.filter( function (origItem) {
          if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
            return false;
          }
          return origItem.toUpperCase() === $select.search.toUpperCase();
        }).length > 0;

        return hasDupe;
      }
      function _findApproxDupe(haystack, needle) {
        var dupeIndex = -1;
        if(angular.isArray(haystack)) {
          var tempArr = angular.copy(haystack);
          for (var i = 0; i <tempArr.length; i++) {
            // handle the simple string version of tagging
            if ( $select.tagging.fct === undefined ) {
              // search the array for the match
              if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
              dupeIndex = i;
              }
            // handle the object tagging implementation
            } else {
              var mockObj = tempArr[i];
              if (angular.isObject(mockObj)) {
                mockObj.isTag = true;
              }
              if ( angular.equals(mockObj, needle) ) {
                dupeIndex = i;
              }
            }
          }
        }
        return dupeIndex;
      }

      $select.searchInput.on('blur', function() {
        $timeout(function() {
          $selectMultiple.activeMatchIndex = -1;
        });
      });

    }
  };
}]);

uis.directive('uiSelectNoChoice',
    ['uiSelectConfig', function (uiSelectConfig) {
        return {
            restrict: 'EA',
            require: '^uiSelect',
            replace: true,
            transclude: true,
            templateUrl: function (tElement) {
                // Needed so the uiSelect can detect the transcluded content
                tElement.addClass('ui-select-no-choice');
      
                // Gets theme attribute from parent (ui-select)
                var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
                return theme + '/no-choice.tpl.html';
            }
        };
    }]);

uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
  return {
    restrict: 'EA',
    require: ['^uiSelect', '^ngModel'],
    link: function(scope, element, attrs, ctrls) {

      var $select = ctrls[0];
      var ngModel = ctrls[1];

      //From view --> model
      ngModel.$parsers.unshift(function (inputValue) {
        // Keep original value for undefined and null
        if (isNil(inputValue)) {
          return inputValue;
        }

        var locals = {},
            result;
        locals[$select.parserResult.itemName] = inputValue;
        result = $select.parserResult.modelMapper(scope, locals);
        return result;
      });

      //From model --> view
      ngModel.$formatters.unshift(function (inputValue) {
        // Keep original value for undefined and null
        if (isNil(inputValue)) {
          return inputValue;
        }

        var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
            locals = {},
            result;
        if (data){
          var checkFnSingle = function(d){
            locals[$select.parserResult.itemName] = d;
            result = $select.parserResult.modelMapper(scope, locals);
            return result === inputValue;
          };
          //If possible pass same object stored in $select.selected
          if ($select.selected && checkFnSingle($select.selected)) {
            return $select.selected;
          }
          for (var i = data.length - 1; i >= 0; i--) {
            if (checkFnSingle(data[i])) return data[i];
          }
        }
        return inputValue;
      });

      //Update viewValue if model change
      scope.$watch('$select.selected', function(newValue) {
        if (ngModel.$viewValue !== newValue) {
          ngModel.$setViewValue(newValue);
        }
      });

      ngModel.$render = function() {
        $select.selected = ngModel.$viewValue;
      };

      scope.$on('uis:select', function (event, item) {
        $select.selected = item;
        var locals = {};
        locals[$select.parserResult.itemName] = item;

        $timeout(function() {
          $select.onSelectCallback(scope, {
            $item: item,
            $model: isNil(item) ? item : $select.parserResult.modelMapper(scope, locals)
          });
        });
      });

      scope.$on('uis:close', function (event, skipFocusser) {
        $timeout(function(){
          $select.focusser.prop('disabled', false);
          if (!skipFocusser) $select.focusser[0].focus();
        },0,false);
      });

      scope.$on('uis:activate', function () {
        focusser.prop('disabled', true); //Will reactivate it on .close()
      });

      //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
      var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
      $compile(focusser)(scope);
      $select.focusser = focusser;

      //Input that will handle focus
      $select.focusInput = focusser;

      element.parent().append(focusser);
      focusser.bind("focus", function(){
        scope.$evalAsync(function(){
          $select.focus = true;
        });
      });
      focusser.bind("blur", function(){
        scope.$evalAsync(function(){
          $select.focus = false;
        });
      });
      focusser.bind("keydown", function(e){

        if (e.which === KEY.BACKSPACE && $select.backspaceReset !== false) {
          e.preventDefault();
          e.stopPropagation();
          $select.select(undefined);
          scope.$apply();
          return;
        }

        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
          return;
        }

        if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){
          e.preventDefault();
          e.stopPropagation();
          $select.activate();
        }

        scope.$digest();
      });

      focusser.bind("keyup input", function(e){

        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
          return;
        }

        $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
        focusser.val('');
        scope.$digest();

      });


    }
  };
}]);

// Make multiple matches sortable
uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
  return {
    require: ['^^uiSelect', '^ngModel'],
    link: function(scope, element, attrs, ctrls) {
      if (scope[attrs.uiSelectSort] === null) {
        throw uiSelectMinErr('sort', 'Expected a list to sort');
      }

      var $select = ctrls[0];
      var $ngModel = ctrls[1];

      var options = angular.extend({
          axis: 'horizontal'
        },
        scope.$eval(attrs.uiSelectSortOptions));

      var axis = options.axis;
      var draggingClassName = 'dragging';
      var droppingClassName = 'dropping';
      var droppingBeforeClassName = 'dropping-before';
      var droppingAfterClassName = 'dropping-after';

      scope.$watch(function(){
        return $select.sortable;
      }, function(newValue){
        if (newValue) {
          element.attr('draggable', true);
        } else {
          element.removeAttr('draggable');
        }
      });

      element.on('dragstart', function(event) {
        element.addClass(draggingClassName);

        (event.dataTransfer || event.originalEvent.dataTransfer).setData('text', scope.$index.toString());
      });

      element.on('dragend', function() {
        removeClass(draggingClassName);
      });

      var move = function(from, to) {
        /*jshint validthis: true */
        this.splice(to, 0, this.splice(from, 1)[0]);
      };

      var removeClass = function(className) {
        angular.forEach($select.$element.querySelectorAll('.' + className), function(el){
          angular.element(el).removeClass(className);
        });
      };

      var dragOverHandler = function(event) {
        event.preventDefault();

        var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);

        if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
          removeClass(droppingAfterClassName);
          element.addClass(droppingBeforeClassName);

        } else {
          removeClass(droppingBeforeClassName);
          element.addClass(droppingAfterClassName);
        }
      };

      var dropTimeout;

      var dropHandler = function(event) {
        event.preventDefault();

        var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text'), 10);

        // prevent event firing multiple times in firefox
        $timeout.cancel(dropTimeout);
        dropTimeout = $timeout(function() {
          _dropHandler(droppedItemIndex);
        }, 20);
      };

      var _dropHandler = function(droppedItemIndex) {
        var theList = scope.$eval(attrs.uiSelectSort);
        var itemToMove = theList[droppedItemIndex];
        var newIndex = null;

        if (element.hasClass(droppingBeforeClassName)) {
          if (droppedItemIndex < scope.$index) {
            newIndex = scope.$index - 1;
          } else {
            newIndex = scope.$index;
          }
        } else {
          if (droppedItemIndex < scope.$index) {
            newIndex = scope.$index;
          } else {
            newIndex = scope.$index + 1;
          }
        }

        move.apply(theList, [droppedItemIndex, newIndex]);

        $ngModel.$setViewValue(Date.now());

        scope.$apply(function() {
          scope.$emit('uiSelectSort:change', {
            array: theList,
            item: itemToMove,
            from: droppedItemIndex,
            to: newIndex
          });
        });

        removeClass(droppingClassName);
        removeClass(droppingBeforeClassName);
        removeClass(droppingAfterClassName);

        element.off('drop', dropHandler);
      };

      element.on('dragenter', function() {
        if (element.hasClass(draggingClassName)) {
          return;
        }

        element.addClass(droppingClassName);

        element.on('dragover', dragOverHandler);
        element.on('drop', dropHandler);
      });

      element.on('dragleave', function(event) {
        if (event.target != element) {
          return;
        }

        removeClass(droppingClassName);
        removeClass(droppingBeforeClassName);
        removeClass(droppingAfterClassName);

        element.off('dragover', dragOverHandler);
        element.off('drop', dropHandler);
      });
    }
  };
}]);

/**
 * Debounces functions
 *
 * Taken from UI Bootstrap $$debounce source code
 * See https://github.com/angular-ui/bootstrap/blob/master/src/debounce/debounce.js
 *
 */
uis.factory('$$uisDebounce', ['$timeout', function($timeout) {
  return function(callback, debounceTime) {
    var timeoutPromise;

    return function() {
      var self = this;
      var args = Array.prototype.slice.call(arguments);
      if (timeoutPromise) {
        $timeout.cancel(timeoutPromise);
      }

      timeoutPromise = $timeout(function() {
        callback.apply(self, args);
      }, debounceTime);
    };
  };
}]);

uis.directive('uisOpenClose', ['$parse', '$timeout', function ($parse, $timeout) {
  return {
    restrict: 'A',
    require: 'uiSelect',
    link: function (scope, element, attrs, $select) {
      $select.onOpenCloseCallback = $parse(attrs.uisOpenClose);

      scope.$watch('$select.open', function (isOpen, previousState) {
        if (isOpen !== previousState) {
          $timeout(function () {
            $select.onOpenCloseCallback(scope, {
              isOpen: isOpen
            });
          });
        }
      });
    }
  };
}]);

/**
 * Parses "repeat" attribute.
 *
 * Taken from AngularJS ngRepeat source code
 * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
 *
 * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
 * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
 */

uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
  var self = this;

  /**
   * Example:
   * expression = "address in addresses | filter: {street: $select.search} track by $index"
   * itemName = "address",
   * source = "addresses | filter: {street: $select.search}",
   * trackByExp = "$index",
   */
  self.parse = function(expression) {


    var match;
    //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
    // If an array is used as collection

    // if (isObjectCollection){
    // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
    match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

    // 1 Alias
    // 2 Item
    // 3 Key on (key,value)
    // 4 Value on (key,value)
    // 5 Source expression (including filters)
    // 6 Track by

    if (!match) {
      throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
              expression);
    }
    
    var source = match[5], 
        filters = '';

    // When using (key,value) ui-select requires filters to be extracted, since the object
    // is converted to an array for $select.items 
    // (in which case the filters need to be reapplied)
    if (match[3]) {
      // Remove any enclosing parenthesis
      source = match[5].replace(/(^\()|(\)$)/g, '');
      // match all after | but not after ||
      var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
      if(filterMatch && filterMatch[1].trim()) {
        filters = filterMatch[1];
        source = source.replace(filters, '');
      }      
    }

    return {
      itemName: match[4] || match[2], // (lhs) Left-hand side,
      keyName: match[3], //for (key, value) syntax
      source: $parse(source),
      filters: filters,
      trackByExp: match[6],
      modelMapper: $parse(match[1] || match[4] || match[2]),
      repeatExpression: function (grouped) {
        var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
        if (this.trackByExp) {
          expression += ' track by ' + this.trackByExp;
        }
        return expression;
      } 
    };

  };

  self.getGroupNgRepeatExpression = function() {
    return '$group in $select.groups track by $group.name';
  };

}]);

}());
angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" ng-show=\"$select.open && $select.items.length > 0\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"option\"><span class=\"ui-select-choices-row-inner\"></span></div></li></ul>");
$templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected track by $index\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
$templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open && $select.searchEnabled\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)\" aria-label=\"{{ $select.baseTitle }} clear\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
$templateCache.put("bootstrap/no-choice.tpl.html","<ul class=\"ui-select-no-choice dropdown-menu\" ng-show=\"$select.items.length == 0\"><li ng-transclude=\"\"></li></ul>");
$templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"combobox\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{$select.baseTitle}}\" ng-class=\"{\'spinner\': $select.refreshing}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
$templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><span ng-show=\"$select.open && $select.refreshing && $select.spinnerEnabled\" class=\"ui-select-refreshing {{$select.spinnerClass}}\"></span> <input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" class=\"form-control ui-select-search\" ng-class=\"{ \'ui-select-search-hidden\' : !$select.searchEnabled }\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.open\"><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
$templateCache.put("select2/choices.tpl.html","<ul tabindex=\"-1\" class=\"ui-select-choices ui-select-choices-content select2-results\"><li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\"><div ng-show=\"$select.choiceGrouped($group)\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div><ul id=\"ui-select-choices-{{ $select.generatedId }}\" ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\"><li role=\"option\" ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\"><div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");
$templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected track by $index\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a href=\"javascript:;\" class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
$templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" aria-label=\"{{ $select.baseTitle }} select\"><span ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\"></span> <abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close\" ng-click=\"$select.clear($event)\"></abbr> <span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");
$templateCache.put("select2/no-choice.tpl.html","<div class=\"ui-select-no-choice dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
$templateCache.put("select2/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\"><ul class=\"select2-choices\"><span class=\"ui-select-match\"></span><li class=\"select2-search-field\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-model=\"$select.search\" ng-click=\"$select.activate()\" style=\"width: 34px;\" ondrop=\"return false;\"></li></ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open || $select.items.length === 0}\"><div class=\"ui-select-choices\"></div></div></div>");
$templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\"><div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"search-container\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" ng-class=\"{\'select2-active\': $select.refreshing}\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div></div>");
$templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown\" ng-class=\"{\'single\': !$select.multiple, \'multi\': $select.multiple}\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"option\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
$templateCache.put("selectize/match-multiple.tpl.html","<div class=\"ui-select-match\" data-value=\"\" ng-repeat=\"$item in $select.selected track by $index\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'active\':$selectMultiple.activeMatchIndex === $index}\" ui-select-sort=\"$select.selected\"><span class=\"ui-select-match-item\" ng-class=\"{\'select-locked\':$select.isLocked(this, $index)}\"><span uis-transclude-append=\"\"></span> <span class=\"remove ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&times;</span></span></div>");
$templateCache.put("selectize/match.tpl.html","<div ng-hide=\"$select.searchEnabled && ($select.open || $select.isEmpty())\" class=\"ui-select-match\"><span ng-show=\"!$select.searchEnabled && ($select.isEmpty() || $select.open)\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty() || $select.open\" ng-transclude=\"\"></span></div>");
$templateCache.put("selectize/no-choice.tpl.html","<div class=\"ui-select-no-choice selectize-dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"selectize-dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
$templateCache.put("selectize/select-multiple.tpl.html","<div class=\"ui-select-container selectize-control multi plugin-remove_button\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-model=\"$select.search\" ng-disabled=\"$select.disabled\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
$templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.isEmpty() && !$select.open\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");}]);
'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "prije podne",
      "po podne"
    ],
    "DAY": [
      "nedjelja",
      "ponedeljak",
      "utorak",
      "srijeda",
      "\u010detvrtak",
      "petak",
      "subota"
    ],
    "ERANAMES": [
      "prije nove ere",
      "nove ere"
    ],
    "ERAS": [
      "p. n. e.",
      "n. e."
    ],
    "FIRSTDAYOFWEEK": 0,
    "MONTH": [
      "januar",
      "februar",
      "mart",
      "april",
      "maj",
      "jun",
      "jul",
      "avgust",
      "septembar",
      "oktobar",
      "novembar",
      "decembar"
    ],
    "SHORTDAY": [
      "ned.",
      "pon.",
      "ut.",
      "sr.",
      "\u010det.",
      "pet.",
      "sub."
    ],
    "SHORTMONTH": [
      "jan.",
      "feb.",
      "mart",
      "apr.",
      "maj",
      "jun",
      "jul",
      "avg.",
      "sept.",
      "okt.",
      "nov.",
      "dec."
    ],
    "STANDALONEMONTH": [
      "januar",
      "februar",
      "mart",
      "april",
      "maj",
      "jun",
      "jul",
      "avgust",
      "septembar",
      "oktobar",
      "novembar",
      "decembar"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, dd. MMMM y.",
    "longDate": "dd. MMMM y.",
    "medium": "dd.MM.y. HH:mm:ss",
    "mediumDate": "dd.MM.y.",
    "mediumTime": "HH:mm:ss",
    "short": "d.M.yy. HH:mm",
    "shortDate": "d.M.yy.",
    "shortTime": "HH:mm"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "\u20ac",
    "DECIMAL_SEP": ",",
    "GROUP_SEP": ".",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "\u00a0\u00a4",
        "posPre": "",
        "posSuf": "\u00a0\u00a4"
      }
    ]
  },
  "id": "sr-latn-me",
  "localeID": "sr_Latn_ME",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (vf.v == 0 && i % 10 == 1 && i % 100 != 11 || vf.f % 10 == 1 && vf.f % 100 != 11) {    return PLURAL_CATEGORY.ONE;  }  if (vf.v == 0 && i % 10 >= 2 && i % 10 <= 4 && (i % 100 < 12 || i % 100 > 14) || vf.f % 10 >= 2 && vf.f % 10 <= 4 && (vf.f % 100 < 12 || vf.f % 100 > 14)) {    return PLURAL_CATEGORY.FEW;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

angular.module('app', [
    'breakpoints',
    'ngCookies',
    'ngSanitize',
    'ngMessages',
    'ngAnimate',
    'ngLocale',
    'ui.bootstrap',
    'ui.select',
    'ui.router',
    'ui.bootstrap',
    'fiscalisation.config'
]);

angular.module('app').constant('fisInvoiceConfig', {
    itemsPerPage: 12
});

(function() {
    let $http = angular
        .injector(['ng'])
        .get('$http');

    $http({ method: 'GET', url: '/api/customer/frontend/initial' })
        .then(bootstrap)
        .catch(redirect);

    function bootstrap(response) {
        angular
            .module('fiscalisation.config', [])
            .provider('fisConfig', fisConfig);

        fisConfig.$inject = [];

        function fisConfig() {
            let service = {}
            updateFromResponse(response.data);

            this.service = service;

            service.payment_method_type_banknote = {
                id: 1,
                description: 'Novčanice i kovanice',
                description_lowercase: 'novcanice i kovanice',
                is_cash: true,
                sort_weight: 1,
                is_active: 1,
                is_noncash: false
            }
            service.payment_method_type_card = {
                id: 2,
                description: 'Kreditna i debitna kartica banke izdata fizičkom licu',
                description_lowercase: 'kreditna i debitna kartica banke izdata fizickom licu',
                is_cash: true,
                sort_weight: 2,
                is_active: 1,
                is_noncash: false
            }
            service.payment_method_type_check = {
                id: 3,
                description: 'Bankovni ček',
                description_lowercase: 'bankovni cek',
                is_cash: true,
                sort_weight: 6,
                is_active: 0,
                is_noncash: false
            }
            service.payment_method_type_svoucher = {
                id: 4,
                description: 'Jednokratni vaučer',
                description_lowercase: 'jednokratni vaucer',
                is_cash: false,
                sort_weight: 7,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_company = {
                id: 5,
                description: 'Kartice preduzeća prodavca i slično',
                description_lowercase: 'kartice preduzeca prodavca i slicno',
                is_cash: false,
                sort_weight: 8,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_order = {
                id: 6,
                description: 'Račun još nije plaćen, biće plaćen zbirnim računom',
                description_lowercase: 'racun jos nije placen, bice placen zbirnim racunom',
                is_cash: true,
                sort_weight: 9,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_advance = {
                id: 7,
                description: 'Plaćanje avansom',
                description_lowercase: 'placanje avansom',
                is_cash: false,
                sort_weight: 5,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_account = {
                id: 8,
                description: 'Transakcioni račun',
                description_lowercase: 'transakcioni racun',
                is_cash: false,
                sort_weight: 3,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_factoring = {
                id: 9,
                description: 'Faktoring',
                description_lowercase: 'faktoring',
                is_cash: false,
                sort_weight: 10,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_compensation = {
                id: 10,
                description: 'Naknada',
                description_lowercase: 'naknada',
                is_cash: false,
                sort_weight: 11,
                is_active: 0,
                is_noncash: true
            }
            service.payment_method_type_transfer = {
                id: 11,
                description: 'Prenos prava ili dugovanja',
                description_lowercase: 'prenos prava ili dugovanja',
                is_cash: false,
                sort_weight: 12,
                is_active: 0,
                is_noncash: true
            }
            service.payment_method_type_waiver = {
                id: 12,
                description: 'Odricanje od dugova',
                description_lowercase: 'odricanje od dugova',
                is_cash: false,
                sort_weight: 13,
                is_active: 0,
                is_noncash: true
            }
            service.payment_method_type_kind = {
                id: 13,
                description: 'Plaćanje u naturi (kliring)',
                description_lowercase: 'placanje u naturi (kliring)',
                is_cash: false,
                sort_weight: 14,
                is_active: 0,
                is_noncash: true
            }
            service.payment_method_type_other = {
                id: 14,
                description: 'Ostala bezgotovinska plaćanja',
                description_lowercase: 'ostala bezgotovinska placanja',
                is_cash: false,
                sort_weight: 15,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_businesscard = {
                id: 15,
                description: 'Kreditna i debitna kartica banke izdata poreskom obvezniku',
                description_lowercase: 'kreditna i debitna kartica banke izdata poreskom obvezniku',
                is_cash: false,
                sort_weight: 4,
                is_active: 1,
                is_noncash: true
            }
            service.payment_method_type_other_cash = {
                id: 16,
                description: 'Ostala gotovinska plaćanja',
                description_lowercase: 'ostala gotovinska placanja',
                is_cash: true,
                sort_weight: 16,
                is_active: 1,
                is_noncash: false
            }

            service.payment_method_types_all = [
                service.payment_method_type_banknote,
                service.payment_method_type_card,
                service.payment_method_type_check,
                service.payment_method_type_svoucher,
                service.payment_method_type_company,
                service.payment_method_type_order,
                service.payment_method_type_advance,
                service.payment_method_type_account,
                service.payment_method_type_factoring,
                service.payment_method_type_compensation,
                service.payment_method_type_transfer,
                service.payment_method_type_waiver,
                service.payment_method_type_kind,
                service.payment_method_type_other,
                service.payment_method_type_businesscard,
                service.payment_method_type_other_cash
            ]

            service.payment_method_types_active = [
                service.payment_method_type_banknote,
                service.payment_method_type_card,
                service.payment_method_type_account,
                service.payment_method_type_businesscard,
                service.payment_method_type_advance,
                service.payment_method_type_svoucher,
                service.payment_method_type_company,
                service.payment_method_type_order,
                service.payment_method_type_factoring,
                service.payment_method_type_other,
                service.payment_method_type_other_cash
            ]

            service.payment_method_types_active_cash = [
                service.payment_method_type_banknote,
                service.payment_method_type_card,
                service.payment_method_type_order,
                service.payment_method_type_other_cash
            ]

            service.payment_method_types_active_noncash = [
                service.payment_method_type_account,
                service.payment_method_type_businesscard,
                service.payment_method_type_advance,
                service.payment_method_type_svoucher,
                service.payment_method_type_company,
                service.payment_method_type_factoring,
                service.payment_method_type_other
            ]

            service.getPaymentMethodTypeByType = getPaymentMethodTypeByType;
            service.getPaymentMethodById = getPaymentMethodById;
            service.filterPaymentMethodsByIds = filterPaymentMethodsByIds;
            service.filterPaymentMethods = filterPaymentMethods;

            function getPaymentMethodTypeByType(is_cash) {
                if (is_cash === undefined) {
                    return angular.copy(service.payment_method_types_active);
                }

                if (is_cash) {
                    return angular.copy(service.payment_method_types_active_cash);
                } else {
                    return angular.copy(service.payment_method_types_active_noncash);
                }
            }

            function getPaymentMethodById(id) {
                let payment_method_type = service.payment_method_types_active.find(function (x) {
                    return x.id === id
                });

                return angular.copy(payment_method_type)
            }

            function filterPaymentMethodsByIds(ids, is_cash) {
                return getPaymentMethodTypeByType(is_cash).filter(function (x) {
                    return ids.indexOf(x.id) >= 0;
                });
            }

            function filterPaymentMethods(query, is_cash, exclude_advance) {
                query = query.replaceAll('ć', 'c');
                query = query.replaceAll('Ć', 'C');
                query = query.replaceAll('č', 'c');
                query = query.replaceAll('Č', 'C');
                query = query.replaceAll('ž', 'z');
                query = query.replaceAll('Ž', 'z');
                query = query.replaceAll('đ', 'd');
                query = query.replaceAll('Đ', 'D');
                query = query.replaceAll('š', 's');
                query = query.replaceAll('Š', 'S');

                return getPaymentMethodTypeByType(is_cash).filter(function (x) {
                    if (exclude_advance && x.id === service.payment_method_type_advance.id) {
                        return false;
                    }

                    return x.description_lowercase.startsWith(query.toLowerCase());
                })
            }

            this.$get = ['$http', function($http) {
                service.reload = reload;
                return service;

                function reload() {
                    return $http({ method: 'GET', url: '/api/customer/frontend/initial' }).then(function(response) {
                        updateFromResponse(response.data);
                    });
                }
            }];

            //----------------------------------------------------------------------------------------------------------


            function updateFromResponse(data) {
                service.user = data.korisnik;
                service.units = data.jedinice_mjere;
                service.tax_exemption_reasons = data.tax_exemption_reasons;
                service.valute = data.valute;
                service.payment_method_types = data.payment_method_types;
                service.poreske_stope = data.poreske_stope;
                service.isReady = true;
                service.defaultUnit = service.units.find((x) => { return x.ui_default; });
                service.countries = data.countries;
                service.identification_types = data.identification_types;
                service.certificate_expiration_date = data.certificate_expiration_date;

                if (service.user.firma.je_poreski_obaveznik) {
                    service.defaultTaxRate = service.poreske_stope.find(function (x) {
                        return x.procenat === 21
                    });
                } else {
                    service.defaultTaxRate = service.poreske_stope.find(function (x) {
                        return x.procenat === 0
                    });
                }
            }
        }

        angular.element(document).ready(function() {
            angular.bootstrap(document, ['app'], {
                strictDi: true
            });
        });
    }

    function redirect(rejection) {
        if (rejection.config.url.match('^/api')) {
            if (rejection.status === 401) {
                window.location.href = './login.html';
                return;
            }
            if (rejection.status === 403) {
                window.location.href = './forbidden.html';
                return;
            }
        }

        window.location.href = './login.html';
    }
})();

angular.module('app').run(['$templateCache', function($templateCache) {$templateCache.put('app/modals/window-fixed.template.html','<div class="modal-dialog position-fixed position-sm-static top-0 start-0 w-100 h-100 h-sm-auto m-0 mx-sm-auto p-0 p-sm-2 {{size ? \'modal-\' + size : \'\'}}">\n    <div class="modal-content rounded-0 rounded-sm-2 h-100 flex-column" uib-modal-transclude></div>\n</div>\n');
$templateCache.put('app/modals/window-fullscreen.template.html','<div class="modal-dialog m-0 mx-sm-auto p-0 p-sm-2 h-100 h-sm-auto {{size ? \'modal-\' + size : \'\'}}">\n    <div class="modal-content rounded-0 rounded-sm-2 h-100 flex-column" uib-modal-transclude></div>\n</div>\n');
$templateCache.put('app/directives/credit-note-typeahead/credit-note-typeahead-popup.template.html','<a class="dropdown-item py-3">\n    <div class="fw-bold text-uppercase">\n        Knji\u017Eno odobrenje {{ match.model.ordinalNumber }}\n    </div>\n    <div class="d-flex align-items-center">\n        <div style="min-width: 64px;" class="fw-bold">\n            Promet:\n        </div>\n        <div>\n            <span class="fs-5 fw-bold" ng-bind-html="match.model.returnAndDiscountAmountWithTax | fisRoundHalfUp:2"></span>\n            <span class="fw-bold">{{ match.model.currency.isoCode }}</span>\n        </div>\n    </div>\n    <div class="d-flex">\n        <div style="min-width: 64px;" class="fw-bold">\n            Datum:\n        </div>\n        <div>\n            <span ng-bind-html="match.model.fiscalizationDate | fisFormatDatetime | uibTypeaheadHighlight:query"></span>\n        </div>\n    </div>\n    <div class="d-flex">\n        <div style="min-width: 64px;" class="fw-bold">\n            Kupac:\n        </div>\n        <div>\n            <span ng-bind-html="match.model.buyer.name | uibTypeaheadHighlight:query"></span>\n        </div>\n    </div>\n    <div class="d-flex">\n        <div style="min-width: 64px;" class="fw-bold">\n            {{ match.model.buyer.identificationType.description }}:\n        </div>\n        <div>\n            <span ng-bind-html="match.model.buyer.identificationNumber | uibTypeaheadHighlight:query"></span>\n        </div>\n    </div>\n    <div class="d-flex">\n        <div style="min-width: 64px;" class="fw-bold">\n            Adresa:\n        </div>\n        <div>\n            <span ng-bind-html="match.model.buyer.address"></span>\n        </div>\n    </div>\n    <div class="d-flex">\n        <div style="min-width: 64px;" class="fw-bold">\n            Grad:\n        </div>\n        <div>\n            <span ng-bind-html="match.model.buyer.city"></span>,\n            <span ng-bind-html="match.model.buyer.country.name"></span>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/directives/credit-note-typeahead/credit-note-typeahead.template.html','<div class="position-relative">\n    <input type="text"\n           class="form-control"\n           typeahead-template-url="app/directives/credit-note-typeahead/credit-note-typeahead-popup.template.html"\n           typeahead-focus-first="false"\n           typeahead-min-length="0"\n           typeahead-focus-on-select="false"\n           typeahead-on-select="ctrl.onTypeaheadSelect($item, $model, $label)"\n           typeahead-wait-ms="300"\n           uib-typeahead="creditNote as creditNote.fiscalizationDate for buyer in ctrl.onTypeaheadInputChange($viewValue)"\n           ng-blur="ctrl.query = \'\'"\n           ng-model="ctrl.query">\n</div>\n');
$templateCache.put('app/directives/country-typeahead/country-typeahead-popup.template.html','<a class="dropdown-item py-3">\n    <div class="fw-bold text-uppercase">\n        {{ match.model.drzava }}\n    </div>\n</a>');
$templateCache.put('app/directives/country-typeahead/country-typeahead.template.html','<div class="position-relative">\n    <input\n        type="text"\n        class="form-control"\n        typeahead-template-url="app/directives/country-typeahead/country-typeahead-popup.template.html"\n        typeahead-focus-first="true"\n        typeahead-min-length="0"\n        typeahead-focus-on-select="false"\n        typeahead-on-select="ctrl.onTypeaheadSelect($item, $model, $label)"\n        typeahead-wait-ms="300"\n        typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n        uib-typeahead="country as country.drzava for country in ctrl.onTypeaheadInputChange($viewValue)"\n        ng-model="ctrl.query">\n</div>\n');
$templateCache.put('app/directives/buyer-typeahead/buyer-typeahead-popup.template.html','<a class="dropdown-item py-2">\n    <div class="d-flex justify-content-between align-items-center">\n        <div>\n            <div>\n                <span ng-bind-html="match.model.naziv | uibTypeaheadHighlight:query"></span>\n            </div>\n            <div>\n                <small>\n                    <span class="fw-bold">\n                        {{ match.model.tip_identifikacione_oznake.naziv }}:\n                    </span>\n                    {{ match.model.identifikaciona_oznaka }}\n                </small>\n            </div>\n            <div>\n                <small ng-if="match.model.artikal.barkod">\n                    <span class="fw-bold">Barkod:</span>\n                    <span ng-bind-html="match.model.artikal.barkod | uibTypeaheadHighlight:query"></span>\n                </small>\n            </div>\n        </div>\n        <div class="ms-auto px-3 fs-4">\n            <span>{{ match.model.jedinicna_cijena_puna }}</span>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/directives/buyer-typeahead/buyer-typeahead.template.html','<div class="position-relative" ng-class="{ \'input-group\': ctrl.canAdd }">\n    <input type="text"\n           class="form-control"\n           uib-typeahead="buyer as buyer.naziv for buyer in ctrl.onTypeaheadSearch($viewValue)"\n           typeahead-template-url="app/directives/buyer-typeahead/buyer-typeahead-popup.template.html"\n           typeahead-focus-first="false"\n           typeahead-min-length="0"\n           typeahead-focus-on-select="false"\n           typeahead-on-select="ctrl.onTypeaheadSelect($item, $model, $label)"\n           typeahead-wait-ms="600"\n           ng-focus="ctrl.onTypeaheadFocus()"\n           ng-blur="ctrl.onTypeaheadBlur()"\n           ng-model="ctrl.query">\n    <button type="button" class="btn btn-light border" ng-click="ctrl.onAddButtonClick()" ng-if="ctrl.canAdd">\n        <i class="fa fa-plus"></i>\n    </button>\n</div>');
$templateCache.put('app/directives/invoice-badges/invoice-badges.template.html','<div class="d-flex gap-1 mt-1">\n    <span class="badge {{ badge.class }}" ng-repeat="badge in badges">{{ badge.text }}</span>\n\n<!--    <span class="badge bg-dark" ng-if="(invoice.status === 2 || invoice.status === 4) && invoice.tip_fakture_id === 1">redovni ra\u010Dun</span>-->\n<!--    <span class="badge bg-primary" ng-if="invoice.status === 2 && invoice.tip_fakture_id === 2">storno ra\u010Dun</span>-->\n<!--    <span class="badge bg-info" ng-if="invoice.status === 2 && invoice.tip_fakture_id === 3">zbirni ra\u010Dun</span>-->\n<!--    <span class="badge bg-info" ng-if="invoice.status === 5">ima knji\u017Eno odobrenje</span>-->\n<!--    <span class="badge bg-primary" ng-if="invoice.status === 2 && invoice.tip_fakture_id === 7">korektivni ra\u010Dun</span>-->\n<!--    <span class="badge bg-primary" ng-if="invoice.status === 2 && invoice.tip_fakture_id === 8">korekcija gre\u0161ke</span>-->\n<!--    <span class="badge bg-danger" ng-if="invoice.status === 4">storniran</span>-->\n<!--    <span class="badge bg-warning" ng-if="invoice.je_korigovana">korigovan</span>-->\n<!--    <span class="badge bg-danger" ng-if="invoice.status === 1 || invoice.status === 3">neuspjela fiskalizacija</span>-->\n</div>');
$templateCache.put('app/directives/invoice-card/invoice-card.template.html','<div>\n    <div class="card">\n        <div class="card-body">\n            <div class="position-relative">\n                <div>\n                    Redni broj: <span class="text-nowrap">{{ invoice.efi_ordinal_number }}</span>\n                </div>\n                <div>\n                    Interni broj: <span class="text-nowrap">{{ invoice.internal_ordinal_number }}</span>\n                </div>\n                <div>\n                    {{ invoice.efi_broj_fakture }}\n                </div>\n                <div>\n                    {{ invoice.datumfakture | fisFormatDatetime }}\n                </div>\n                <invoice-badges invoice="invoice"></invoice-badges>\n                <a href="{{ invoice.efi_verify_url }}" target="_blank" class="btn btn-link text-decoration-none position-absolute lh-1 top-0 end-0">\n                    <i class="fa fa-external-link"></i> <span>Provjera</span>\n                </a>\n            </div>\n            <div class="mt-3">\n                <div class="bg-light px-3 py-2 rounded">\n                    <div class="row">\n                        <div class="col-12">\n                            <div class="fw-bold">Kupac:</div>\n                            <div ng-if="!invoice.komitent_id">\n                                <div>---</div>\n                                <div class="small">&nbsp;</div>\n                            </div>\n                            <div ng-if="invoice.komitent_id">\n                                <a href="#"\n                                   class="text-decoration-none"\n                                   ui-sref="komitent-izmjena({ id: invoice.komitent_id })">\n                                    {{ invoice.komitent.naziv }}\n                                </a>\n                            </div>\n                            <div class="text-muted small"\n                                 ng-if="$root.fisConfig.user.firma.settings.smtp_active">\n                                {{ invoice.komitent.email }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="mt-3 bg-white">\n                <div class="fw-bold">Struktura cijene</div>\n                <div class="dash-info" ng-if="!invoice.je_korigovana">\n                    <div class="dash-info-start"><span>Cijena - EUR</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-nowrap">\n                        <span>{{ invoice.ukupna_cijena_prodajna }}</span>\n                    </div>\n                </div>\n                <div class="dash-info" ng-if="invoice.je_korigovana">\n                    <div class="dash-info-start"><span>Korigovana cijena - EUR</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-nowrap">\n                        <span>{{  invoice.korigovana_ukupna_cijena_prodajna }}</span>\n                    </div>\n                </div>\n                <div class="dash-info" ng-if="invoice.je_korigovana">\n                    <div class="dash-info-start"><span>Originalna cijena - EUR</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-nowrap">\n                        <span>{{  invoice.ukupna_cijena_prodajna }}</span>\n                    </div>\n                </div>\n                <div class="dash-info" ng-if="invoice.valuta.id !== 50">\n                    <div class="dash-info-start"><span>Ukupno - {{ invoice.valuta.iso_4217_alfanumericki_kod }}</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end">\n                        <span>\n                            {{ invoice.tip_fakture_id === 1 && invoice.je_korigovana\n                            ? invoice.korigovana_ukupna_cijena_prodajna_valuta\n                            : invoice.ukupna_cijena_prodajna_valuta }}\n                        </span>\n                    </div>\n                </div>\n                <div class="dash-info">\n                    <div class="dash-info-start"><span>Osnovica</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-nowrap">\n                        <span>{{ invoice.ukupna_cijena_rabatisana }}</span>\n                    </div>\n                </div>\n                <div class="dash-info">\n                    <div class="dash-info-start"><span>Porez</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-nowrap">\n                        <span>{{ invoice.porez_iznos }}</span>\n                    </div>\n                </div>\n                <div class="dash-info" ng-if="showPrometZaKnjizno">\n                    <div class="dash-info-start"><span>Promet za knji\u017Eno</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end">\n                        <span>{{ invoice.credit_note_turnover_remaining }}</span>\n                    </div>\n                </div>\n                <div class="dash-info">\n                    <div class="dash-info-start"><span>Poreski period</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-nowrap">\n                        <span>{{ invoice.poreski_period | fisFormatDatetime:\'taxPeriod\' }}</span>\n                    </div>\n                </div>\n            </div>\n\n            <div class="mt-3 bg-white">\n                <div class="fw-bold">Na\u010Dini pla\u0107anja</div>\n                <div class="dash-info" ng-repeat="payment_method in invoice.payment_methods">\n                    <div class="dash-info-start"><span>{{ payment_method.payment_method_type.description }}</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end">\n                        <span>{{ payment_method.amount }}</span>\n                    </div>\n                </div>\n            </div>\n\n            <div class="mt-3 bg-white" ng-if="corrective_invoices.length > 0">\n                <div class="fw-bold">Korekcije</div>\n                <div class="dash-info" ng-repeat="corrective_invoice in corrective_invoices">\n                    <div class="dash-info-start">\n                        <div>\n                            <a href="#"\n                               class="text-decoration-none"\n                               ng-click="stampac.stampajFakturu(corrective_invoice.id, \'a4\'); $event.preventDefault();">\n                                <span>Ra\u010Dun #{{ corrective_invoice.efi_ordinal_number }}</span>\n                            </a>\n                        </div>\n                        <div><span class="text-muted small">{{ corrective_invoice.datumfakture | fisFormatDatetime }}</span></div>\n                    </div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end">\n                        <span>{{ corrective_invoice.ukupna_cijena_prodajna }}</span>\n                    </div>\n                </div>\n            </div>\n\n            <div class="mt-3 p-3 bg-warning-light" ng-if="invoice.active_invoice_schedule && invoice.tip_fakture_id !== 9">\n                <div class="fw-bold">Ponavljanje</div>\n                <div class="dash-info">\n                    <div class="dash-info-start"><span>Po\u010Detak</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-end">\n                        <span class="text-nowrap">{{ invoice.active_invoice_schedule.start_datetime | fisFormatDatetime:\'date\' }}</span>\n                        <span class="text-nowrap">{{ invoice.active_invoice_schedule.start_datetime | fisFormatDatetime:\'time\' }}</span>\n                    </div>\n                </div>\n                <div class="dash-info">\n                    <div class="dash-info-start"><span>Slede\u0107e</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-end">\n                        <span class="text-nowrap">{{ invoice.active_invoice_schedule.next_run_datetime | fisFormatDatetime:\'date\' }}</span>\n                        <span class="text-nowrap">{{ invoice.active_invoice_schedule.next_run_datetime | fisFormatDatetime:\'time\' }}</span>\n                    </div>\n                </div>\n                <div class="dash-info">\n                    <div class="dash-info-start"><span>Kraj</span></div>\n                    <div class="dash-info-spacing"></div>\n                    <div class="dash-info-end text-end">\n                        <span ng-if="invoice.active_invoice_schedule.end_datetime">\n                            <span class="text-nowrap">{{ invoice.active_invoice_schedule.end_datetime | fisFormatDatetime:\'date\' }}</span>\n                            <span class="text-nowrap">{{ invoice.active_invoice_schedule.end_datetime | fisFormatDatetime:\'time\' }}</span>\n                        </span>\n                        <span ng-if="!invoice.active_invoice_schedule.end_datetime">\n                            <span>Neograni\u010Dno</span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="card-body" ng-if="showUpload && $root.fisConfig.user.firma.ima_upload_dokumenta">\n            <div class="fw-bold mb-1">Dokument</div>\n            <div class="row g-2" ng-if="!invoice.ima_dokument">\n                <div class="col-4">\n                    <button type="button" class="btn btn-light border w-100 px-1 lh-1 py-2" file-selection-changed="upload(files[0])">\n                        <div><i class="fa fa-print mb-1"></i></div>\n                        <div>Dodaj</div>\n                    </button>\n                </div>\n            </div>\n            <div class="row g-2" ng-if="invoice.ima_dokument">\n                <div class="col-4">\n                    <button type="button" class="btn btn-light border w-100 px-1 lh-1 py-2" file-selection-changed="upload(files[0])">\n                        <div><i class="fa fa-edit mb-1"></i></div>\n                        <div>A\u017Euriraj</div>\n                    </button>\n                </div>\n                <div class="col-4">\n                    <button type="button" class="btn btn-light border w-100 px-1 lh-1 py-2" file-selection-changed="upload(files[0])">\n                        <div><i class="fa fa-trash mb-1"></i></div>\n                        <div>Obri\u0161i</div>\n                    </button>\n                </div>\n                <div class="col-4">\n                    <button type="button" class="btn btn-light border w-100 px-1 lh-1 py-2" ng-click="stampac.stampajDokument(invoice.id)">\n                        <div><i class="fa fa-print mb-1"></i></div>\n                        <div>Kopija</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class="card-footer">\n            <div class="row g-2">\n                <div class="col-6" ng-show="invoice.tip_fakture_id === 1 && invoice.status === 2">\n                    <button type="button"\n                            class="btn btn-light border w-100 px-1 lh-1 py-2"\n                            ui-sref="faktura-korekcija({ id: invoice.id })">\n                        <div><i class="fa fa-edit mb-1"></i></div>\n                        <div>Korektivni ra\u010Dun</div>\n                    </button>\n                </div>\n                <div class="col-6" ng-show="(invoice.tip_fakture_id === 1 || invoice.tip_fakture_id === 5) && invoice.status === 2 && invoice.korigovana_ukupna_cijena_prodajna !== 0">\n                    <button type="button"\n                            class="btn btn-light border w-100 px-1 lh-1 py-2"\n                            ng-click="cancel()">\n                        <div><i class="fa fa-remove mb-1"></i></div>\n                        <div>Storno ra\u010Dun</div>\n                    </button>\n                </div>\n                <div class="col-6">\n                    <button type="button"\n                            class="btn btn-light border w-100 px-1 lh-1 py-2"\n                            ng-click="stampac.stampajFakturu(invoice.id, \'a4\')">\n                        <div><i class="fa fa-print mb-1"></i></div>\n                        <div>Kopija A4</div>\n                    </button>\n                </div>\n                <div class="col-6" ng-if="invoice.tip_fakture_id !== 9">\n                    <button type="button"\n                            class="btn btn-light border w-100 px-1 lh-1 py-2"\n                            ng-click="stampac.stampajFakturu(invoice.id, \'58mm\')">\n                        <div><i class="fa fa-print mb-1"></i></div>\n                        <div>Kopija 58mm</div>\n                    </button>\n                </div>\n                <div class="col-6" data-ng-if="$root.fisConfig.user.firma.settings.smtp_active && invoice.komitent_id && invoice.komitent.email">\n                    <button type="button"\n                            class="btn btn-light border w-100 px-1 lh-1 py-2"\n                            data-ng-click="sendMail()">\n                        <div><i class="fa fa-envelope mb-1"></i></div>\n                        <div>Po\u0161alji e-Mail</div>\n                    </button>\n                </div>\n                <!-- TODO Should invoice template have reccuring fiscalization? -->\n                <div class="col-6" ng-if="$root.fisConfig.user.firma.settings.can_schedule && invoice.tip_fakture_id !== 9">\n                    <button type="button"\n                            class="btn btn-light border w-100 px-1 lh-1 py-2"\n                            data-ng-click="invoiceScheduleModal(invoice)">\n                        <div><i class="fa fa-repeat mb-1"></i></div>\n                        <div>Ponavljanje</div>\n                    </button>\n                </div>\n                <div class="col-6" ng-if="invoice.tip_fakture_id === 5 || invoice.is_advance_invoice">\n                    <a href="#" class="btn btn-light border w-100 px-1 lh-1 py-2" ui-sref="finalInvoiceInput({ advance_invoice_id: invoice.id })">\n                        <div><i class="fa fa-table mb-1"></i></div>\n                        <div>Kona\u010Dni ra\u010Dun</div>\n                    </a>\n                </div>\n                <div class="col-6" ng-if="invoice.tip_fakture_id === 9">\n                    <a href="#" class="btn btn-light border w-100 px-1 lh-1 py-2" ui-sref="regularInvoiceInput({ invoice_template_id: invoice.id })">\n                        <div><i class="fa fa-edit mb-1"></i></div>\n                        <div>Napravi ra\u010Dun</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n');
$templateCache.put('app/directives/fis-pagination/fis-pagination-item.template.html','<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="page-item flex-grow-1 flex-md-grow-0 text-center pagination-first">\n    <a href ng-click="selectPage(1, $event)" class="page-link" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a>\n</li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="page-item flex-grow-1 flex-md-grow-0 text-center pagination-prev">\n    <a href ng-click="selectPage(page - 1, $event)" class="page-link" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a>\n</li>\n<li role="menuitem" ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="page-item flex-grow-1 flex-md-grow-0 text-center pagination-page">\n    <a href ng-click="selectPage(page.number, $event)" class="page-link" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a>\n</li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="page-item flex-grow-1 flex-md-grow-0 text-center pagination-next">\n    <a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" class="page-link" uib-tabindex-toggle>{{::getText(\'next\')}}</a>\n</li>\n<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="page-item flex-grow-1 flex-md-grow-0 text-center pagination-last">\n    <a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" class="page-link" uib-tabindex-toggle>{{::getText(\'last\')}}</a>\n</li>');
$templateCache.put('app/directives/fis-pagination/fis-pagination.template.html','<div>\n    <ul class="m-0"\n        ng-change="onPageChangeWrapper()"\n        ng-model="currentPage"\n        ng-class="{ \'invisible pe-none\': pageData.ukupan_broj_stavki === 0 }"\n        data-uib-pagination\n        data-boundary-link-numbers="true"\n        data-direction-links="false"\n        data-force-ellipses="true"\n        data-items-per-page="pageData.broj_stavki_po_stranici"\n        data-max-size="4"\n        data-rotate="false"\n        template-url="app/directives/fis-pagination/fis-pagination-item.template.html"\n        data-total-items="pageData.ukupan_broj_stavki">\n    </ul>\n</div>');
$templateCache.put('app/directives/invoice-turnover-table/invoice-turnover-table.template.html','<div class="table-responsive">\n    <table class="table table-hover text-nowrap table-hover">\n        <thead>\n        <tr>\n            <td>Ra\u010Dun</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">Ukupno</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">Stopa 21%</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">Stopa 7%</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">Stopa 0%</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr ng-repeat="faktura in viewInvoices" ng-click="toggle(faktura)" ng-class="{ \'bg-primary-light\': selectedIds.indexOf(faktura.id) >= 0  }">\n            <td class="w-auto">\n                <div>{{ faktura.efi_ordinal_number }}</div>\n                <div class="text-muted">\n                    <small>{{ faktura.datumfakture | fisFormatDatetime }}</small>\n                </div>\n            </td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">{{ faktura.credit_note_turnover_remaining }}</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">{{ faktura.porez_21 !== null ? faktura.porez_21.credit_note_turnover_remaining : \'---\'  }}</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">{{ faktura.porez_7 !== null ? faktura.porez_7.credit_note_turnover_remaining : \'---\'  }}</td>\n            <td class="text-end" style="min-width: 150px; width: 150px;">{{ faktura.porez_0 !== null ? faktura.porez_0.credit_note_turnover_remaining : \'---\'  }}</td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n');
$templateCache.put('app/directives/invoice-buyer-picker/invoice-buyer-picker-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n        <div>\n            <span class="fw-bold">{{ match.model.tip_identifikacione_oznake.naziv }}</span>\n            <span ng-bind-html="match.model.identifikaciona_oznaka | uibTypeaheadHighlight:query"></span>\n        </div>\n        <div>\n            <span class="fw-bold">Adresa</span>\n            <span ng-bind-html="match.model.adresa | uibTypeaheadHighlight:query"></span>\n        </div>\n        <div>\n            <span class="fw-bold">Grad</span>\n            <span>{{ match.model.grad }}</span>\n        </div>\n    </div>\n</a>\n');
$templateCache.put('app/directives/invoice-buyer-picker/invoice-buyer-picker.template.html','<div class="mb-2">\n    <label for="" class="form-label">Pretraga kupaca</label>\n    <div class="position-relative">\n        <input\n            type="text"\n            class="form-control"\n            uib-typeahead="item as item.naziv for item in searchBuyers($viewValue)"\n            typeahead-template-url="app/directives/invoice-buyer-picker/invoice-buyer-picker-popup.template.html"\n            typeahead-focus-first="false"\n            typeahead-min-length="0"\n            typeahead-focus-on-select="false"\n            typeahead-wait-ms="300"\n            typeahead-on-select="onSelect($item, $model, $label); query = \'\';"\n            typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n            ng-model="query"\n            ng-disabled="stavka.isDisabled">\n    </div>\n</div>\n<div class="card bg-light" ng-if="!invoice.komitent">\n    <div class="card-body">\n        Kupac nije odabran\n    </div>\n</div>\n<div ng-transclude></div>\n<div class="card bg-light" ng-if="invoice.komitent">\n    <div class="card-body">\n        <div class="fw-bold fs-5">\n            {{ invoice.komitent.naziv }}\n        </div>\n        <div>\n            <span class="fw-bold">{{ invoice.komitent.tip_identifikacione_oznake.naziv }}:</span>\n            {{ invoice.komitent.identifikaciona_oznaka }}\n        </div>\n        <div>\n            <span class="fw-bold">Adresa:</span>\n            {{ invoice.komitent.adresa }}\n        </div>\n        <div>\n            <span class="fw-bold">Grad:</span>\n            {{ invoice.komitent.grad }}\n        </div>\n        <div class="d-none drzava">\n            <span class="fw-bold">Dr\u017Eava:</span>\n            {{ invoice.komitent.drzava }}\n        </div>\n    </div>\n</div>\n<div class="mt-2" ng-if="!disabled">\n    <div class="row g-2">\n        <div class="{{ buttonResponsiveClasses }}">\n            <button type="button"\n                    class="btn btn-light border w-100"\n                    data-ng-click="showCreateBuyerModal();">\n                <i class="fa fa-plus"></i> Novi kupac\n            </button>\n        </div>\n        <div class="{{ buttonResponsiveClasses }}">\n            <button type="button"\n                    class="btn btn-light border w-100"\n                    data-ng-click="removeBuyer()"\n                    ng-if="invoice.komitent !== null">\n                <i class="fa fa-close"></i> Poni\u0161ti odabir\n            </button>\n        </div>\n        <div class="{{ buttonResponsiveClasses }}">\n            <button type="button"\n                    class="btn btn-light border w-100"\n                    data-ng-click="showBuyerUpdateModal()"\n                    ng-if="invoice.komitent !== null">\n                <i class="fa fa-edit"></i> Izmijeni podatke\n            </button>\n        </div>\n    </div>\n</div>\n');
$templateCache.put('app/directives/invoice-item-typeahead/invoice-item-typeahead-popup.template.html','<a class="dropdown-item py-3">\n    <div class="d-flex justify-content-between" style="max-width: 500px;">\n        <div class="fs-5 fw-bold" ng-bind-html="match.label | uibTypeaheadHighlight:query"></div>\n        <div class="ms-3"></div>\n        <div class="fs-5 fw-bold text-nowrap">{{ match.model.jedinicna_cijena_puna }} EUR</div>\n    </div>\n</a>');
$templateCache.put('app/directives/invoice-item-typeahead/invoice-item-typeahead.template.html','<div class="invoice-item-input position-relative {{ inputGroupClasses }}">\n    <input\n        type="text"\n        class="form-control p-3 shadow-none border-0 rounded-start flex-grow-0 w-100 h-100"\n        style="width: 60px; z-index: 501;"\n        ng-focus="isEditingQuantity = true"\n        ng-blur="onQuantityBlur($event)"\n        ng-class="{ \'position-fixed top-100 start-100\': !isEditingQuantity, \'position-absolute top-0 start-0\': isEditingQuantity }"\n        ng-change="onQuantityChange($event)"\n        ng-model="podaci.kolicina">\n    <div class="input-group">\n        <div\n            class="input-group-text bg-white py-3 ps-3 pe-1"\n            ng-if="!isEditingQuantity"\n            ng-class="{ \'rounded-0\': !(isRounded === undefined || isRounded) }"\n            ng-click="clearAmount()">\n            <div class="badge bg-primary">\n                {{ podaci.kolicina }} x\n            </div>\n        </div>\n        <input\n            type="text"\n            class="search-input form-control p-3 shadow-none border-0"\n            typeahead-template-url="app/directives/invoice-item-typeahead/invoice-item-typeahead-popup.template.html"\n            typeahead-additional-options="{ openOnFocus: true }"\n            typeahead-focus-first="false"\n            typeahead-loading="typeaheadIsLoading"\n            typeahead-is-open="typeaheadIsOpen"\n            typeahead-min-length="0"\n            typeahead-focus-on-select="false"\n            typeahead-popup-classes="typeaheadPopupClasses"\n            typeahead-keep-focus="true"\n            typeahead-on-select="onSelect($item, $model, $label, $eventType)"\n            typeahead-append-to="typeaheadAppendTo"\n            typeahead-has-double-click="true"\n            uib-typeahead="stavkaLagera as stavkaLagera.artikal.naziv for stavkaLagera in getZalihe($viewValue)"\n            ng-class="{ \'ps-3\': podaci.kolicina === null, \'rounded-0\': !(isRounded === undefined || isRounded) }"\n            ng-model="query"\n            ng-keydown="onInputKeydown($event)">\n    </div>\n    <div class="d-flex align-items-center justify-content-center"\n         style="width: 50px; height: calc(100% - 2px); position:absolute; top: 1px; right: 1px; z-index: 500;"\n         ng-if="typeaheadIsLoading">\n        <i class="fa fa-circle-o-notch fa-spin text-dark"></i>\n    </div>\n    <div class="d-flex align-items-center justify-content-center position-absolute translate-middle-y top-50 end-0 me-2"\n         style="width: 70px; height: 70px; z-index: 1000;"\n         ng-show="!typeaheadIsOpen && !typeaheadIsLoading">\n        <button\n            type="button"\n            class="btn btn-primary w-100 h-100 d-flex align-items-center justify-content-center shadow"\n            style="background-color: red; border: 1px solid red; border-radius: 50%; font-size: 1.5rem;"\n            ng-click="focusTypeahead()">\n            <i class="fa fa-plus"></i>\n        </button>\n    </div>\n    <div class="d-flex align-items-center justify-content-center position-absolute translate-middle-y top-50 end-0 me-2"\n         style="width: 70px; height: 70px; z-index: 1000;"\n         ng-show="typeaheadIsOpen || typeaheadIsLoading">\n        <button\n            type="button"\n            class="btn btn-primary w-100 h-100 d-flex align-items-center justify-content-center shadow"\n            style="border-radius: 50%; font-size: 1.5rem;"\n            ng-click="onResetButtonClick()">\n            <i class="fa fa-close"></i>\n        </button>\n    </div>\n</div>\n');
$templateCache.put('app/directives/invoice-filter-form/buyer-typeahead-popup.template.html','<a class="dropdown-item py-2">\n    <div class="d-flex justify-content-between align-items-center">\n        <div>\n            <div>\n                <span ng-bind-html="match.label | uibTypeaheadHighlight:query"></span>\n            </div>\n            <div>\n                <small>\n                    <span class="fw-bold">\n                        {{ match.model.tip_identifikacione_oznake.naziv }}:\n                    </span>\n                    {{ match.model.identifikaciona_oznaka }}\n                </small>\n            </div>\n            <div>\n                <small ng-if="match.model.artikal.barkod">\n                    <span class="fw-bold">Barkod:</span>\n                    <span ng-bind-html="match.model.artikal.barkod | uibTypeaheadHighlight:query"></span>\n                </small>\n            </div>\n        </div>\n        <div class="ms-auto px-3 fs-4">\n            <span>{{ match.model.jedinicna_cijena_puna }}</span>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/directives/invoice-filter-form/invoice-filter-form.template.html','<div class="card">\n    <div class="card-header">\n        <i class="fa fa-filter"></i> FILTERI\n    </div>\n    <div class="card-body">\n        <div class="row g-3">\n            <div class="col-12 col-md-3">\n                <label for="invoice-search-invoice-ordinal-id" class="form-label">Redni broj</label>\n                <input type="number" id="invoice-search-invoice-ordinal-id" class="form-control"\n                       ng-model="filters.ordinal_id">\n            </div>\n            <div class="w-100 m-0"></div>\n            <div class="col-6 col-md-3">\n                <label for="invoice-search-total-price-gte" class="form-label">Min. iznos</label>\n                <input type="number" id="invoice-search-total-price-gte" class="form-control"\n                       ng-model="filters.total_price_gte">\n            </div>\n            <div class="col-6 col-md-3">\n                <label for="invoice-search-total-price-lte" class="form-label">Max. iznos</label>\n                <input type="number" id="invoice-search-total-price-lte" class="form-control"\n                       ng-model="filters.total_price_lte">\n            </div>\n            <div class="col-6 col-md-3">\n                <div class="form-group">\n                    <label for="invoice-search-fiscalization-date-gte" class="form-label">Min. datum</label>\n                    <div class="input-group">\n                        <input type="text"\n                               class="form-control"\n                               id="invoice-search-fiscalization-date-gte"\n                               name="fiscalization_date_gte"\n                               uib-datepicker-popup\n                               is-open="ctrl.fiscalizationDateGteDropdownOpen"\n                               ng-model="filters.fiscalization_date_gte"\n                               pattern="\\d{4}-\\d{2}-\\d{2}">\n                        <button type="button" class="btn btn-dark"\n                                data-ng-click="ctrl.fiscalizationDateGteDropdownOpen = !ctrl.fiscalizationDateGteDropdownOpen">\n                            <i class="fa fa-calendar"></i>\n                        </button>\n                    </div>\n                    <div ng-messages="ctrl.forme.racun.fiscalization_date_gte.$error" role="alert"\n                         class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-6 col-md-3">\n                <div class="form-group">\n                    <label for="invoice-search-fiscalization-date-lte" class="form-label">Max. datum</label>\n                    <div class="input-group">\n                        <input type="text"\n                               class="form-control"\n                               id="invoice-search-fiscalization-date-lte"\n                               name="fiscalization_date_lte"\n                               uib-datepicker-popup\n                               is-open="ctrl.fiscalizationDateLteDropdownOpen"\n                               ng-model="filters.fiscalization_date_lte"\n                               pattern="\\d{4}-\\d{2}-\\d{2}">\n                        <button type="button" class="btn btn-dark"\n                                ng-click="ctrl.fiscalizationDateLteDropdownOpen = !ctrl.fiscalizationDateLteDropdownOpen">\n                            <i class="fa fa-calendar"></i>\n                        </button>\n                    </div>\n                    <div ng-messages="ctrl.forme.racun.fiscalization_date_lte.$error" role="alert"\n                         class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="w-100"></div>\n            <div class="col-12">\n                <label class="form-label">Na\u010Dini pla\u0107anja</label>\n                <payment-method-typeahead\n                    on-select="onPaymentMethodSelect($item, $model, $label)"></payment-method-typeahead>\n                <div class="d-flex flex-wrap gap-2 mt-3">\n                    <div class="fis-text-box d-flex gap-2 justify-content-between w-100 w-md-auto flex-grow-0"\n                         ng-click="deletePaymentMethodType($index)"\n                         ng-repeat="payment_method_type in filters.payment_method_types">\n                        <div>{{ payment_method_type.description }}</div>\n                        <div><i class="fa fa-close ms-auto"></i></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="invoice-client-id" class="form-label">Kupac</label>\n                <input type="text"\n                       id="invoice-client-id"\n                       class="form-control"\n                       uib-typeahead="item as item.naziv for item in searchBuyers($viewValue)"\n                       typeahead-template-url="app/directives/invoice-filter-form/buyer-typeahead-popup.template.html"\n                       typeahead-focus-first="false"\n                       typeahead-min-length="0"\n                       typeahead-focus-on-select="false"\n                       typeahead-wait-ms="300"\n                       typeahead-on-select="onSelect($item, $model, $label); query = \'\';"\n                       typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n                       ng-model="query">\n                <div class="d-flex flex-wrap gap-2 mt-3">\n                    <div class="fis-text-box d-flex gap-2 justify-content-between w-100 w-md-auto flex-grow-0"\n                         ng-click="deleteBuyer($index)"\n                         ng-repeat="buyer in filters.buyers">\n                        <div>{{ buyer.naziv }}</div>\n                        <div><i class="fa fa-close ms-auto"></i></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="card-footer">\n        <div class="text-end">\n            <button type="button" class="btn btn-light border" data-ng-click="onClose()">\n                Zatvori\n            </button>\n            <button type="button" class="btn btn-primary" data-ng-click="onConfirm()">\n                Potvrdi\n            </button>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/modals/confirm-or-cancel-modal/confirm-or-cancel-modal.template.html','<div class="modal-header">\n    <div>\n        <i class="{{ ctrl.headerIcon }}" ng-if="ctrl.headerIcon"></i>\n        <b>{{ ctrl.headerText }}</b>\n    </div>\n</div>\n<div class="modal-body" ng-bind-html="ctrl.bodyText">\n</div>\n<div class="modal-footer">\n    <button type="button" class="btn btn-light border" data-ng-click="$close({ isConfirmed: false })">\n        {{ ctrl.cancelButtonText }}\n    </button>\n    <button type="button" class="btn btn-primary" data-ng-click="$close({ isConfirmed: true })">\n        {{ ctrl.confirmButtonText }}\n    </button>\n</div>');
$templateCache.put('app/modals/confirm-modal/confirm-modal.template.html','<div class="modal-header">\n    <div>\n        <i class="{{ ctrl.headerIcon }}" ng-if="ctrl.headerIcon"></i>\n        <b>{{ ctrl.headerText }}</b>\n    </div>\n</div>\n<div class="modal-body">\n    {{ ctrl.bodyText }}\n</div>\n<div class="modal-footer">\n    <button type="button" class="btn btn-primary" data-ng-click="$close({})">\n        {{ ctrl.buttonText }}\n    </button>\n</div>');
$templateCache.put('app/directives/payment-method-typeahead/payment-method-typeahead-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n    </div>\n</a>\n');
$templateCache.put('app/directives/payment-method-typeahead/payment-method-typeahead.template.html','<input type="text"\n       class="form-control"\n       uib-typeahead="item as item.description for item in fisConfig.filterPaymentMethods($viewValue, isCash, true)"\n       typeahead-template-url="app/directives/payment-method-typeahead/payment-method-typeahead-popup.template.html"\n       typeahead-focus-first="false"\n       typeahead-min-length="0"\n       typeahead-focus-on-select="false"\n       typeahead-wait-ms="300"\n       typeahead-on-select="onSelect({ $item: $item, $model: $model, $label: $label }); query = \'\';"\n       typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n       ng-model="query"\n       ng-disabled="stavka.isDisabled">');
$templateCache.put('app/modals/credit-note-item-modal/credit-note-item-modal.template.html','<div class="modal-header">\n    <span class="fw-bold text-uppercase" ng-if="ctrl.options.type === \'return\'">Stavka povrata</span>\n    <span class="fw-bold text-uppercase" ng-if="ctrl.options.type === \'discount\'">Stavka popusta</span>\n</div>\n<div class="modal-body">\n    <form name="ctrl.form">\n        <div class="row g-3">\n            <div class="col-12">\n                <label for="credit-note-item-description" class="form-label">Opis</label>\n                <input\n                    type="text"\n                    id="credit-note-item-description"\n                    class="form-control"\n                    name="description"\n                    data-ng-model="ctrl.item.description"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount.$invalid }"\n                    required>\n                <div ng-messages="ctrl.form.description.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label class="form-label">Stopa poreza</label>\n                <div class="d-flex w-100 gap-3">\n                    <input\n                        type="radio"\n                        class="btn-check"\n                        name="taxRate"\n                        id="btnradio1"\n                        autocomplete="off"\n                        data-ng-model="ctrl.item.taxRate"\n                        data-ng-value="21"\n                        required>\n                    <label\n                        class="btn btn-outline-primary flex-grow-1"\n                        for="btnradio1"\n                        ng-class="{ \'btn-outline-danger\': ctrl.form.$submitted && ctrl.form.taxRate.$invalid }">\n                        21%\n                    </label>\n                    <input\n                        type="radio"\n                        class="btn-check"\n                        name="taxRate"\n                        id="btnradio2"\n                        autocomplete="off"\n                        data-ng-model="ctrl.item.taxRate"\n                        data-ng-value="7"\n                        required>\n                    <label\n                        class="btn btn-outline-primary flex-grow-1"\n                        for="btnradio2"\n                        ng-class="{ \'btn-outline-danger\': ctrl.form.$submitted && ctrl.form.taxRate.$invalid }">\n                        7%\n                    </label>\n                    <input\n                        type="radio"\n                        class="btn-check"\n                        name="taxRate"\n                        id="btnradio3"\n                        autocomplete="off"\n                        data-ng-model="ctrl.item.taxRate"\n                        data-ng-value="0"\n                        required>\n                    <label\n                        class="btn btn-outline-primary flex-grow-1"\n                        for="btnradio3"\n                        ng-class="{ \'btn-outline-danger\': ctrl.form.$submitted && ctrl.form.taxRate.$invalid }">\n                        0%\n                    </label>\n                </div>\n                <div ng-messages="ctrl.form.taxRate.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="credit-note-item-description" class="form-label">Iznos</label>\n                <input\n                    type="number"\n                    class="form-control"\n                    name="amount"\n                    data-ng-model="ctrl.item.amount"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount.$invalid }"\n                    data-ng-min="0.0001"\n                    required>\n                <div ng-messages="ctrl.form.amount.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<div class="modal-footer">\n    <div class="w-100 text-end">\n        <button\n            type="button"\n            class="btn btn-light border"\n            ng-click="$close({ action: \'cancel\' });">\n            Odustani\n        </button>\n        <button\n            type="button"\n            class="btn btn-outline-danger"\n            ng-if="ctrl.cachedItem !== null"\n            ng-click="$close({ action: \'delete\' });">\n            Obri\u0161i\n        </button>\n        <button\n            type="button"\n            class="btn btn-primary"\n            ng-click="ctrl.confirm();">\n            Sa\u010Duvaj\n        </button>\n    </div>\n</div>');
$templateCache.put('app/modals/certificate-upload-modal/certificate-upload-modal.template.html','<form name="ctrl.form">\n  <div class="modal-header">\n    <div>Novi sertifikat</div>\n  </div>\n  <div class="modal-body">\n    <div>\n      <div class="form-control-layout">\n        <label for="certificate" class="form-label">Sertifikat</label>\n        <input id="certificate" type="text" class="form-control" ng-model="ctrl.filename" name="filename" readonly required>\n        <button type="button" class="btn btn-light border form-button" file-selection-changed="ctrl.handleFileUpload(files[0])">\n          Odaberi\n        </button>\n      </div>\n      <div ng-messages="ctrl.form.filename.$error" role="alert" class="invalid-feedback">\n        <div ng-messages-include="error-messages"></div>\n      </div>\n    </div>\n    <div class="mt-3">\n      <div class="form-control-layout">\n        <label for="password" class="form-label">Lozinka</label>\n        <input id="password" type="text" class="form-control" name="password" ng-model="ctrl.password" required>\n      </div>\n      <div ng-messages="ctrl.form.password.$error" role="alert" class="invalid-feedback">\n        <div ng-messages-include="error-messages"></div>\n      </div>\n    </div>\n    <div class="mt-4" ng-if="ctrl.error">\n      <div class="alert alert-danger m-0">\n        {{ ctrl.error }}\n      </div>\n    </div>\n  </div>\n  <div class="modal-footer">\n    <button type="button" class="btn btn-light border" data-ng-click="$close({ isConfirmed: false })">\n      Odustani\n    </button>\n    <button type="button" class="btn btn-primary" data-ng-click="ctrl.confirm()">\n      Potvrdi\n    </button>\n  </div>\n</form>');
$templateCache.put('app/modals/credit-note-external-invoice-modal/credit-note-external-invoice-modal.template.html','<div class="modal-header">\n    Iskori\u0161\u0107eni promet\n</div>\n<div class="modal-body">\n    <form name="ctrl.form">\n        <div class="row g-3">\n            <div class="col-12">\n                <label for="iic" class="form-label">IKOF</label>\n                <input\n                    id="iic"\n                    type="text"\n                    class="form-control"\n                    name="iic"\n                    data-ng-model="ctrl.data.iic"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.iic.$invalid }"\n                    required>\n                <div ng-messages="ctrl.form.iic.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="verification_url" class="form-label">Verifikacioni link</label>\n                <input\n                    id="verification_url"\n                    type="text"\n                    class="form-control"\n                    name="verification_url"\n                    data-ng-model="ctrl.data.verification_url"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.verification_url.$invalid }"\n                    required>\n                <div ng-messages="ctrl.form.verification_url.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="issue_datetime" class="form-label">Datum fiskalizacije</label>\n                <input\n                    id="issue_datetime"\n                    type="text"\n                    class="form-control"\n                    name="issue_datetime"\n                    data-ng-model="ctrl.data.issue_datetime"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.issue_datetime.$invalid }"\n                    required>\n                <div ng-messages="ctrl.form.issue_datetime.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_21" class="form-label">Iznos 21%</label>\n                <input\n                    id="amount_21"\n                    type="number"\n                    class="form-control"\n                    name="amount_21"\n                    data-ng-model="ctrl.data.amount_21"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_21.$invalid }">\n                <div ng-messages="ctrl.form.amount_21.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_21" class="form-label">Promet 21%</label>\n                <input\n                    id="total_21"\n                    type="number"\n                    class="form-control"\n                    name="total_21"\n                    data-ng-model="ctrl.data.total_21"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_21.$invalid }">\n                <div ng-messages="ctrl.form.total_21.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_7" class="form-label">Iznos 7%</label>\n                <input\n                    id="amount_7"\n                    type="number"\n                    class="form-control"\n                    name="amount_7"\n                    data-ng-model="ctrl.data.amount_7"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_7.$invalid }">\n                <div ng-messages="ctrl.form.amount_7.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_7" class="form-label">Promet 7%</label>\n                <input\n                    id="total_7"\n                    type="number"\n                    class="form-control"\n                    name="total_7"\n                    data-ng-model="ctrl.data.total_7"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_7.$invalid }">\n                <div ng-messages="ctrl.form.total_7.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_0" class="form-label">Iznos 0%</label>\n                <input\n                    id="amount_0"\n                    type="number"\n                    class="form-control"\n                    name="amount_0"\n                    data-ng-model="ctrl.data.amount_0"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_0.$invalid }">\n                <div ng-messages="ctrl.form.amount_0.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_0" class="form-label">Promet 0%</label>\n                <input\n                    id="total_0"\n                    type="number"\n                    class="form-control"\n                    name="total_0"\n                    data-ng-model="ctrl.data.total_0"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_0.$invalid }">\n                <div ng-messages="ctrl.form.total_0.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_exempt" class="form-label">Iznos oslobo\u0111en poreza</label>\n                <input\n                    id="amount_exempt"\n                    type="number"\n                    class="form-control"\n                    name="amount_exempt"\n                    data-ng-model="ctrl.data.amount_exempt"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_exempt.$invalid }">\n                <div ng-messages="ctrl.form.amount_exempt.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_exempt" class="form-label">Iznos oslobo\u0111en poreza</label>\n                <input\n                    id="total_exempt"\n                    type="number"\n                    class="form-control"\n                    name="total_exempt"\n                    data-ng-model="ctrl.data.total_exempt"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_exempt.$invalid }">\n                <div ng-messages="ctrl.form.total_exempt.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<div class="modal-footer">\n    <div class="w-100 text-end">\n        <button\n            type="button"\n            class="btn btn-light border"\n            ng-click="$close({ action: \'cancel\' });">\n            Odustani\n        </button>\n        <button\n            type="button"\n            class="btn btn-primary"\n            ng-click="ctrl.confirm();">\n            Sa\u010Duvaj\n        </button>\n    </div>\n</div>');
$templateCache.put('app/modals/due-payment-notification-modal/due-payment-notification-modal.template.html','<div class="modal-header">\n    <b>Dospjeli ra\u010Duni</b>\n</div>\n<div class="modal-body">\n    <p>U nastavku mo\u017Eete preuzeti dospjele ra\u010Dune:</p>\n    <p>\n        <div ng-repeat="notification in ctrl.notifications">\n            <a ng-href="{{ notification.dueInvoice.link }}">\n                {{ notification.dueInvoice.description }}\n            </a>\n        </div>\n    </p>\n    <p>Molimo Vas, izmirite dugovanja da bi izbjegli isklju\u010Denje servisa.</p>\n</div>\n<div class="modal-footer">\n    <div class="w-100 text-end">\n        <button type="button" class="btn btn-primary" ng-click="ctrl.confirm()">\n            U redu\n        </button>\n    </div>\n</div>');
$templateCache.put('app/modals/credit-note-turnover-used-modal/credit-note-turnover-used-modal.template.html','<div class="modal-header">\n    Iskori\u0161\u0107eni promet\n</div>\n<div class="modal-body">\n    <form name="ctrl.form">\n        <div class="row g-3">\n            <div class="col-6">\n                <label for="amount_21" class="form-label">Iznos 21%</label>\n                <input\n                    id="amount_21"\n                    type="number"\n                    class="form-control"\n                    name="amount_21"\n                    data-ng-model="ctrl.data.amount_21"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_21.$invalid }"\n                    ng-disabled="ctrl.data.total_21 === 0"\n                    ng-max="ctrl.data.total_21">\n                <div ng-messages="ctrl.form.amount_21.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_21" class="form-label">Promet 21%</label>\n                <input\n                    id="total_21"\n                    type="number"\n                    class="form-control"\n                    name="total_21"\n                    data-ng-model="ctrl.data.total_21"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_21.$invalid }"\n                    disabled>\n                <div ng-messages="ctrl.form.total_21.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_7" class="form-label">Iznos 7%</label>\n                <input\n                    id="amount_7"\n                    type="number"\n                    class="form-control"\n                    name="amount_7"\n                    data-ng-model="ctrl.data.amount_7"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_7.$invalid }"\n                    ng-disabled="ctrl.data.total_7 === 0"\n                    ng-max="ctrl.data.total_7">\n                <div ng-messages="ctrl.form.amount_7.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_7" class="form-label">Promet 7%</label>\n                <input\n                    id="total_7"\n                    type="number"\n                    class="form-control"\n                    name="total_7"\n                    data-ng-model="ctrl.data.total_7"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_7.$invalid }"\n                    disabled>\n                <div ng-messages="ctrl.form.total_7.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_0" class="form-label">Iznos 0%</label>\n                <input\n                    id="amount_0"\n                    type="number"\n                    class="form-control"\n                    name="amount_0"\n                    data-ng-model="ctrl.data.amount_0"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_0.$invalid }"\n                    ng-disabled="ctrl.data.total_0 === 0"\n                    ng-max="ctrl.data.total_0">\n                <div ng-messages="ctrl.form.amount_0.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_0" class="form-label">Iznos 0%</label>\n                <input\n                    id="total_0"\n                    type="number"\n                    class="form-control"\n                    name="total_0"\n                    data-ng-model="ctrl.data.total_0"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_0.$invalid }"\n                    disabled>\n                <div ng-messages="ctrl.form.total_0.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="amount_exempt" class="form-label">Iznos oslobo\u0111en poreza</label>\n                <input\n                    id="amount_exempt"\n                    type="number"\n                    class="form-control"\n                    name="amount_exempt"\n                    data-ng-model="ctrl.data.amount_exempt"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.amount_exempt.$invalid }"\n                    ng-disabled="ctrl.data.total_exempt === 0"\n                    ng-max="ctrl.data.total_exempt">\n                <div ng-messages="ctrl.form.amount_exempt.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-6">\n                <label for="total_exempt" class="form-label">Iznos oslobo\u0111en poreza</label>\n                <input\n                    id="total_exempt"\n                    type="number"\n                    class="form-control"\n                    name="total_exempt"\n                    data-ng-model="ctrl.data.total_exempt"\n                    data-ng-class="{ \'is-invalid\': ctrl.form.$submitted && ctrl.form.total_exempt.$invalid }"\n                    disabled>\n                <div ng-messages="ctrl.form.total_exempt.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<div class="modal-footer">\n    <div class="w-100 text-end">\n        <button\n            type="button"\n            class="btn btn-light border"\n            ng-click="$close({ action: \'cancel\' });">\n            Odustani\n        </button>\n        <button\n            type="button"\n            class="btn btn-primary"\n            ng-click="ctrl.confirm();">\n            Sa\u010Duvaj\n        </button>\n    </div>\n</div>');
$templateCache.put('app/modals/invoice-item-edit-modal/invoice-item-edit-modal.template.html','<div class="modal-header">\n    <div class="d-flex justify-content-between align-items-center w-100">\n        <h4 class="mb-0">A\u017Euriranje stavke</h4>\n    </div>\n</div>\n<div class="modal-body flex-grow-1 overflow-y-scroll">\n    <form name="ctrl.forma" novalidate>\n        <div class="row g-3">\n            <div class="col-12">\n                <label for="modal-stavka-artikal" class="form-label">Artikal</label>\n                <textarea rows="1"\n                          type="text"\n                          id="modal-stavka-artikal"\n                          class="form-control"\n                          disabled\n                          ng-model="ctrl.item.magacin_zaliha.artikal.naziv">\n                </textarea>\n            </div>\n            <div class="col-md-6 d-none d-md-block">\n                <label for="modal-jedinicna-cijena-osnovna" class="form-label">Osnovica</label>\n                <input type="number"\n                       inputmode="decimal"\n                       name="jedinicna_cijena_osnovna"\n                       id="modal-jedinicna-cijena-osnovna"\n                       class="form-control"\n                       ng-model="ctrl.item.jedinicna_cijena_osnovna"\n                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPB(ctrl.invoice, ctrl.item)"\n                       min="0.0001"\n                       step="0.0001"\n                       required>\n                <div ng-messages="ctrl.forma.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12 col-md-6">\n                <label for="modal-jedinicna-cijena-puna" class="form-label">Cijena sa porezom</label>\n                <input type="number"\n                       inputmode="decimal"\n                       name="jedinicna_cijena_puna"\n                       id="modal-jedinicna-cijena-puna"\n                       class="form-control"\n                       ng-model="ctrl.item.jedinicna_cijena_puna"\n                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPA(ctrl.invoice, ctrl.item)"\n                       min="0.0001"\n                       step="0.0001"\n                       required>\n                <div ng-messages="ctrl.forma.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="modal-stavka-kolicina" class="form-label">Koli\u010Dina</label>\n                <input fis-autofocus="true"\n                       type="number"\n                       inputmode="decimal"\n                       name="kolicina"\n                       id="modal-stavka-kolicina"\n                       class="form-control"\n                       ng-model="ctrl.item.kolicina"\n                       ng-focus="$event.target.select()"\n                       required min="0.001"\n                       step="0.001"\n                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.invoice, ctrl.item)">\n                <div ng-messages="ctrl.forma.kolicina.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="modal-stavka-rabat-procenat" class="form-label">Popust %</label>\n                <input type="number"\n                       inputmode="decimal"\n                       class="form-control"\n                       id="modal-stavka-rabat-procenat"\n                       placeholder="Popust %"\n                       name="rabat_procenat"\n                       ng-model="ctrl.item.rabat_procenat"\n                       required min="0"\n                       max="100"\n                       step="0.01"\n                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.invoice, ctrl.item)">\n                <div ng-messages="ctrl.forma.rabat_procenat.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                <label for="modal-ukupna-cijena-prodajna" class="form-label">Za uplatu</label>\n                <input type="number"\n                       name="ukupna_cijena_prodajna"\n                       id="modal-ukupna-cijena-prodajna"\n                       class="form-control"\n                       ng-model="ctrl.item.ukupna_cijena_prodajna"\n                       ng-model-options="{ allowInvalid: true }"\n                       min="0.000001"\n                       step="0.000001"\n                       required\n                       disabled>\n                <div ng-messages="ctrl.forma.ukupna_cijena_prodajna.$error" role="alert" class="invalid-feedback">\n                    <div ng-message="max">\n                        Po pode\u0161avanjima artikla prodajna cijena za odabranu koli\u010Dinu ne mo\u017Ee biti\n                        ve\u0107a od {{ ctrl.item.ukupna_cijena_puna }}\u20AC.\n                    </div>\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<div class="modal-footer">\n    <div class="text-end">\n        <button class="btn btn-light border" ng-click="$close({ isConfirmed: false })">\n            Odustani\n        </button>\n        <button class="btn btn-light border" ng-click="ctrl.deleteItem()">\n            Obri\u0161i\n        </button>\n        <button class="btn btn-primary" ng-click="ctrl.confirm()">\n            Sa\u010Duvaj\n        </button>\n    </div>\n</div>\n');
$templateCache.put('app/modals/invoice-schedule-modal/invoice-schedule-modal.template.html','<form name="ctrl.form" class="d-flex flex-column h-100" novalidate>\n    <div class="modal-header">\n        <div class="d-flex justify-content-between align-items-center w-100">\n            <div class="fw-bold">Ponavljanje fiskalizacije</div>\n            <button type="button" class="btn btn-link text-decoration-none fw-bold" ng-click="$close({ isConfirmed: false });">\n                Zatvori\n            </button>\n        </div>\n    </div>\n    <div class="modal-header d-md-none p-0 position-sticky top-0">\n        <div class="w-100 d-flex justify-content-between">\n            <div>\n                <button type="button" class="btn rounded-0" data-ng-click="$close({ isConfirmed: false })">\n                    <i class="fa fa-arrow-left"></i> Nazad\n                </button>\n            </div>\n            <div>\n                <button type="button" class="btn btn-link text-decoration-none rounded-0" data-ng-click="ctrl.confirm()">\n                    Potvrdi\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class="modal-body overflow-y-auto">\n        <div class="p-5 text-center" ng-show="ctrl.isLoading">\n            <div class="spinner-border spinner-lg" role="status">\n                <span class="sr-only">Loading...</span>\n            </div>\n        </div>\n        <div class="row g-3" ng-show="!ctrl.isLoading">\n            <div class="col-12">\n                <label for="frequency_interval" class="form-label">Interval (broj mjeseci)</label>\n                <input id="frequency_interval" type="number" class="form-control" ng-model="ctrl.invoice_schedule.frequency_interval">\n            </div>\n            <div class="col-12">\n                <label for="start_datetime" class="form-label">Po\u010Detak</label>\n                <div class="d-flex">\n                    <div class="input-group" style="max-width: 170px;">\n                        <input type="text"\n                               class="form-control"\n                               uib-datepicker-popup\n                               is-open="startDatePickerIsOpen"\n                               name="start_datetime"\n                               id="start_datetime"\n                               ng-model="ctrl.invoice_schedule.start_datetime"\n                               ng-model-options="{ allowInvalid: true }"\n                               fis-min-date\n                               required\n                               pattern="\\d{4}-\\d{2}-\\d{2}">\n                        <button type="button" class="btn btn-light border rounded-end" ng-click="startDatePickerIsOpen = !startDatePickerIsOpen">\n                            <i class="fa fa-calendar"></i>\n                        </button>\n                    </div>\n                    <div uib-timepicker\n                         ng-model="ctrl.invoice_schedule.start_datetime"\n                         class="ms-2"\n                         show-seconds="false"\n                         fis-min-date></div>\n                </div>\n                <div ng-messages="ctrl.form.start_datetime.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12">\n                {{ ctrl.form.start_datetime }}\n            </div>\n            <div class="col-12">\n                <label class="form-label" class="form-label">Kraj</label>\n                <div class="p-3 bg-opacity-10 border rounded-top" ng-class="{ \'bg-primary border-primary position-relative\': ctrl.endDatetimeMode === 1, \'bg-light\': ctrl.endDatetimeMode !== 1 }" ng-click="ctrl.setEndDatetimeMode(1)">\n                    <div class="form-check">\n                        <input class="form-check-input" type="radio" name="flexRadioDefault" ng-model="ctrl.endDatetimeMode" ng-value="1" id="flexRadioDefault1">\n                        <label class="form-check-label" for="flexRadioDefault1">\n                            Neograni\u010Deno, fiskalizacija \u0107e se ponavljati dok ne promijenite pode\u0161avanja.\n                        </label>\n                    </div>\n                </div>\n                <div class="p-3 bg-opacity-10 border rounded-bottom"\n                     style="margin-top: -1px;"\n                     ng-class="{ \'bg-primary border-primary position-relative\': ctrl.endDatetimeMode === 2, \'bg-light\': ctrl.endDatetimeMode !== 2 }" ng-click="ctrl.setEndDatetimeMode(2)" >\n                    <div class="form-check">\n                        <input class="form-check-input" type="radio" name="flexRadioDefault" ng-model="ctrl.endDatetimeMode" ng-value="2" id="flexRadioDefault2">\n                        <label class="form-check-label" for="flexRadioDefault2">\n                            Do datuma\n                        </label>\n                    </div>\n                    <div class="input-group" style="max-width: 170px;" ng-class="{ \'pe-none opacity-50\': ctrl.endDatetimeMode !== 2 }">\n                        <input type="text"\n                               class="form-control"\n                               uib-datepicker-popup\n                               is-open="endDatePickerIsOpen"\n                               name="end_datetime"\n                               id="end_datetime"\n                               ng-model="ctrl.invoice_schedule.end_datetime"\n                               ng-required="ctrl.endDatetimeMode === 2"\n                               pattern="\\d{4}-\\d{2}-\\d{2}"\n                               ng-change="ctrl.invoice_schedule.end_datetime = ctrl.invoice_schedule.end_datetime">\n                        <button type="button" class="btn btn-light border rounded-end" ng-click="endDatePickerIsOpen = !endDatePickerIsOpen; $event.stopPropagation();">\n                            <i class="fa fa-calendar"></i>\n                        </button>\n                        <div ng-messages="ctrl.form.end_datetime.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ctrl.confirm()">\n            Potvrdi\n        </button>\n    </div>\n</form>\n');
$templateCache.put('app/modals/komitent-izmjena-modal/komitent-izmjena-modal.template.html','<form name="ctrl.forma" class="d-flex flex-column h-100">\n    <div class="modal-header">\n        <b>A\u017Euriranje kupca</b>\n    </div>\n    <div class="modal-body flex-grow-1 overflow-y-scroll">\n        <div class="row g-3">\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-naziv" class="form-label">Naziv</label>\n                    <input type="text" class="form-control" name="naziv" id="modal-komitent-naziv" ng-model="ctrl.buyer.naziv" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                    <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="modal-komitent-tip-identifikacione-oznake-id" class="form-label">Tip identifikacione oznake</label>\n                    <ui-select name="tip_identifikacione_oznake_id" id="modal-komitent-tip-identifikacione-oznake-id" ng-model="ctrl.buyer.tip_identifikacione_oznake_id" theme="select2" search-enabled="false" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.tip_identifikacione_oznake_id.$invalid }">\n                        <ui-select-match placeholder="&nbsp;">\n                            <div ng-bind="$select.selected.naziv"></div>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.tipoviIdentifikacioneOznake | filter: $select.search) track by item.id">\n                            <span ng-bind="item.naziv"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.tip_identifikacione_oznake_id.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="modal-komitent-identifikaciona-oznaka" class="form-label">Identifikaciona oznaka</label>\n                    <input type="text" class="form-control" name="identifikaciona_oznaka" id="modal-komitent-identifikaciona-oznaka" ng-model="ctrl.buyer.identifikaciona_oznaka" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.identifikaciona_oznaka.$invalid }">\n                    <div ng-messages="ctrl.forma.identifikaciona_oznaka.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-pdvbroj" class="form-label">PDV broj</label>\n                    <input type="text" class="form-control" name="pdvbroj" id="modal-komitent-pdvbroj" ng-model="ctrl.buyer.pdvbroj" ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.pdvbroj.$invalid }">\n                    <div ng-messages="ctrl.forma.pdvbroj.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-adresa" class="form-label">Adresa</label>\n                    <input type="text" class="form-control" name="adresa" id="modal-komitent-adresa" ng-model="ctrl.buyer.adresa" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.adresa.$invalid }">\n                    <div ng-messages="ctrl.forma.adresa.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-grad" class="form-label">Grad</label>\n                    <input type="text" class="form-control" name="grad" id="modal-komitent-grad" ng-model="ctrl.buyer.grad" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grad.$invalid }">\n                    <div ng-messages="ctrl.forma.grad.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-drzava" class="form-label">Dr\u017Eava</label>\n                    <ui-select name="drzava" id="modal-komitent-drzava" ng-model="ctrl.buyer.drzava" theme="select2" search-enabled="false" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.drzava.$invalid }">\n                        <ui-select-match placeholder="Odaberite dr\u017Eavu">\n                            <span ng-bind="$select.selected.drzava"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.drzave | filter: $select.search) track by item.id">\n                            <span ng-bind="item.drzava"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.drzava.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <div class="w-100 d-flex">\n            <button type="button" class="btn btn-dark flex-grow-1" ng-click="$close({ isConfirmed: false })">\n                Odustani\n            </button>\n            <div class="me-2"></div>\n            <button type="button" class="btn btn-success flex-grow-1" ng-click="ctrl.sacuvaj()">\n                Sa\u010Duvaj\n            </button>\n        </div>\n    </div>\n</form>\n<span class="d-none" ng-init="ctrl.forma.$setSubmitted();"></span>');
$templateCache.put('app/modals/komitent-unos-modal/komitent-unos-modal.template.html','<form name="ctrl.forma" class="d-flex flex-column h-100">\n    <div class="modal-header">\n        <b>Novi kupac</b>\n    </div>\n    <div class="modal-body flex-grow-1 overflow-y-scroll">\n        <div class="row g-3">\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-naziv" class="form-label">Naziv</label>\n                    <input type="text" class="form-control" name="naziv" id="modal-komitent-naziv" ng-model="ctrl.buyer.naziv" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                    <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="modal-komitent-tip-identifikacione-oznake-id" class="form-label">Tip identifikacione oznake</label>\n                    <ui-select name="tip_identifikacione_oznake_id" id="modal-komitent-tip-identifikacione-oznake-id" ng-model="ctrl.buyer.tip_identifikacione_oznake_id" theme="select2" search-enabled="false" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.tip_identifikacione_oznake_id.$invalid }">\n                        <ui-select-match placeholder="&nbsp;">\n                            <div ng-bind="$select.selected.naziv"></div>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.tipoviIdentifikacioneOznake | filter: $select.search) track by item.id">\n                            <span ng-bind="item.naziv"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.tip_identifikacione_oznake_id.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="form-group">\n                    <label for="modal-komitent-identifikaciona-oznaka" class="form-label">Identifikaciona oznaka</label>\n                    <input type="text" class="form-control" name="identifikaciona_oznaka" id="modal-komitent-identifikaciona-oznaka" ng-model="ctrl.buyer.identifikaciona_oznaka" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.identifikaciona_oznaka.$invalid }">\n                    <div ng-messages="ctrl.forma.identifikaciona_oznaka.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-pdvbroj" class="form-label">PDV broj</label>\n                    <input type="text" class="form-control" name="pdvbroj" id="modal-komitent-pdvbroj" ng-model="ctrl.buyer.pdvbroj" ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.pdvbroj.$invalid }">\n                    <div ng-messages="ctrl.forma.pdvbroj.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-adresa" class="form-label">Adresa</label>\n                    <input type="text" class="form-control" name="adresa" id="modal-komitent-adresa" ng-model="ctrl.buyer.adresa" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.adresa.$invalid }">\n                    <div ng-messages="ctrl.forma.adresa.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-grad" class="form-label">Grad</label>\n                    <input type="text" class="form-control" name="grad" id="modal-komitent-grad" ng-model="ctrl.buyer.grad" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grad.$invalid }">\n                    <div ng-messages="ctrl.forma.grad.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12">\n                <div class="form-group">\n                    <label for="modal-komitent-drzava" class="form-label">Dr\u017Eava</label>\n                    <ui-select name="drzava" id="modal-komitent-drzava" ng-model="ctrl.buyer.drzava" theme="select2" search-enabled="false" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.drzava.$invalid }">\n                        <ui-select-match placeholder="Odaberite dr\u017Eavu">\n                            <span ng-bind="$select.selected.drzava"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.drzave | filter: $select.search) track by item.id">\n                            <span ng-bind="item.drzava"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.drzava.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <div class="w-100 d-flex">\n            <button type="button" class="btn btn-dark flex-grow-1" ng-click="$close({ isConfirmed: false })">\n                Odustani\n            </button>\n            <div class="me-2"></div>\n            <button type="button" class="btn btn-success flex-grow-1" ng-click="ctrl.sacuvaj()">\n                Sa\u010Duvaj\n            </button>\n        </div>\n    </div>\n</form>\n');
$templateCache.put('app/modals/numeric-input-modal/numeric-input-modal.template.html','<div class="modal-header d-md-none p-0">\n    <div class="w-100 d-flex justify-content-between">\n        <button type="button" class="btn rounded-0" data-ng-click="$close({ isConfirmed: false })">\n            <i class="fa fa-arrow-left"></i> Nazad\n        </button>\n        <button type="button" class="btn btn-link text-decoration-none" data-ng-click="ctrl.confirm();">\n            Potvrdi\n        </button>\n    </div>\n</div>\n<div class="modal-body">\n    <div>\n        <label for="invoice-item-quantity" class="form-label">Koli\u010Dina</label>\n        <input id="invoice-item-quantity" type="text" class="form-control" fis-autofocus="$root.breakpoints.gte($root.breakpoints.keys.md)"\n               data-ng-keydown="ctrl.onEnter($event)"\n               data-ng-model="ctrl.value">\n    </div>\n    <div class="mt-3">\n        <div numeric-keyboard="quantity-input-keyboard" ng-model="ctrl.value"></div>\n    </div>\n</div>\n<div class="modal-footer d-none d-md-block">\n    <div class="text-end">\n        <button type="button" class="btn btn-light border" data-ng-click="$close({ isConfirmed: false })">\n            <i class="fa fa-arrow-left"></i> Odustani\n        </button>\n        <button type="button" class="btn btn-primary" data-ng-click="ctrl.confirm();">\n            Potvrdi\n        </button>\n    </div>\n</div>');
$templateCache.put('app/modals/invoice-buyer-select-modal/invoice-buyer-picker-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n        <div>\n            <span class="fw-bold">{{ match.model.tip_identifikacione_oznake.naziv }}</span>\n            <span ng-bind-html="match.model.identifikaciona_oznaka | uibTypeaheadHighlight:query"></span>\n        </div>\n        <div>\n            <span class="fw-bold">Adresa</span>\n            <span ng-bind-html="match.model.adresa | uibTypeaheadHighlight:query"></span>\n        </div>\n        <div>\n            <span class="fw-bold">Grad</span>\n            <span>{{ match.model.grad }}</span>\n        </div>\n    </div>\n</a>\n');
$templateCache.put('app/modals/invoice-buyer-select-modal/invoice-buyer-select-modal.template.html','<div class="modal-header position-sticky top-0 bg-white" style="z-index: 1;">\n    <h4 class="mb-0">Kupac</h4>\n</div>\n<div class="modal-body border-bottom p-0 flex-grow-0">\n    <input\n        type="text"\n        class="form-control py-3 ps-3 shadow-none border-0 fs-5 lh-base"\n        uib-typeahead="item as item.naziv for item in ctrl.onTypeaheadSearch($viewValue)"\n        typeahead-template-url="app/modals/invoice-buyer-select-modal/invoice-buyer-picker-popup.template.html"\n        typeahead-focus-first="false"\n        typeahead-min-length="0"\n        typeahead-focus-on-select="false"\n        typeahead-loading="ctrl.typeaheadState.isLoading"\n        typeahead-wait-ms="300"\n        typeahead-is-open="ctrl.typeaheadState.isOpen"\n        typeahead-on-select="ctrl.onSelect($item, \'#zxcza\');"\n        typeahead-append-to="\'#buyer-search-result-container\'"\n        typeahead-popup-classes="\'position-static top-0 start-0 border-0 rounded-0\'"\n        typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n        placeholder="Pretraga"\n        ng-model="ctrl.query">\n</div>\n<div id="zxcza" class="modal-body overflow-y-auto p-0" style="height: 500px;">\n    <div class="p-3" ng-show="!ctrl.typeaheadState.isOpen">\n        <div ng-if="!ctrl.typeaheadState.isLoading">\n            <div class="card bg-light" ng-if="!ctrl.invoice.komitent">\n                <div class="card-body">\n                    Kupac nije odabran\n                </div>\n            </div>\n            <div class="card bg-light" ng-if="ctrl.invoice.komitent">\n                <div class="card-body">\n                    <div class="fw-bold fs-5">\n                        {{ ctrl.invoice.komitent.naziv }}\n                    </div>\n                    <div>\n                        <span class="fw-bold">{{ ctrl.invoice.komitent.tip_identifikacione_oznake.naziv }}:</span>\n                        {{ ctrl.invoice.komitent.identifikaciona_oznaka }}\n                    </div>\n                    <div>\n                        <span class="fw-bold">Adresa:</span>\n                        {{ ctrl.invoice.komitent.adresa }}\n                    </div>\n                    <div>\n                        <span class="fw-bold">Grad:</span>\n                        {{ ctrl.invoice.komitent.grad }}\n                    </div>\n                    <div class="d-none drzava">\n                        <span class="fw-bold">Dr\u017Eava:</span>\n                        {{ ctrl.invoice.komitent.drzava }}\n                    </div>\n                </div>\n            </div>\n            <div class="mt-2" ng-if="!disabled">\n                <div class="row g-2">\n                    <div class="{{ buttonResponsiveClasses }}">\n                        <button\n                            type="button"\n                            class="btn btn-light border w-100"\n                            data-ng-click="ctrl.showCreateBuyerModal();">\n                            <i class="fa fa-plus"></i> Novi kupac\n                        </button>\n                    </div>\n                    <div class="{{ buttonResponsiveClasses }}">\n                        <button\n                            type="button"\n                            class="btn btn-light border w-100"\n                            data-ng-click="ctrl.removeBuyer()"\n                            ng-if="ctrl.invoice.komitent !== null">\n                            <i class="fa fa-close"></i> Poni\u0161ti odabir\n                        </button>\n                    </div>\n                    <div class="{{ buttonResponsiveClasses }}">\n                        <button\n                            type="button"\n                            class="btn btn-light border w-100"\n                            data-ng-click="ctrl.showBuyerUpdateModal()"\n                            ng-if="ctrl.invoice.komitent !== null">\n                            <i class="fa fa-edit"></i> Izmijeni podatke\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div\n        class="text-center"\n        ng-show="ctrl.typeaheadState.isLoading">\n        <div class="mt-5"></div>\n        <div class="spinner-border spinner-lg"></div>\n    </div>\n\n    <div id="buyer-search-result-container" class="position-relative">\n    </div>\n</div>\n<div class="modal-footer position-sticky bottom-0 bg-white" style="z-index: 1;">\n    <div class="text-end">\n        <button type="button" class="btn btn-light border" data-ng-click="$close({ isConfirmed: false })">\n            Nazad\n        </button>\n        <button type="button" class="btn btn-primary" data-ng-click="ctrl.confirm()">\n            Potvrdi\n        </button>\n    </div>\n</div>\n');
$templateCache.put('app/modals/invoice-item-template-picker-modal/invoice-item-template-picker-modal.template.html','<div class="modal-header d-none d-md-block position-sticky top-0">\n    <h4 class="mb-0">Artikli i usluge</h4>\n</div>\n<div class="modal-header d-md-none p-0 position-sticky top-0">\n    <div class="w-100 d-flex justify-content-between">\n        <div>\n            <button type="button" class="btn rounded-0" data-ng-click="$close({ isConfirmed: false })">\n                <i class="fa fa-arrow-left"></i> Nazad\n            </button>\n        </div>\n        <div>\n            <button type="button" class="btn btn-link text-decoration-none rounded-0" data-ng-click="ctrl.confirm()">\n                Potvrdi\n            </button>\n        </div>\n    </div>\n</div>\n<div class="modal-body flex-grow-0 border-bottom p-0">\n    <div class="position-absolute top-0 left-0 w-100 h-100 px-3 d-flex align-items-center justify-content-end pe-none">\n        <button\n            class="btn btn-primary py-2 lh-1 pe-auto btn-sm"\n            data-ng-click="ctrl.search()">\n            <i class="fa fa-search d-md-none"></i>\n            <span class="d-none d-md-block">Pretra\u017Ei</span>\n        </button>\n    </div>\n    <input\n        type="text"\n        class="form-control py-3 ps-3 shadow-none border-0 fs-5"\n        style="padding-right: 100px;"\n        autofocus\n        placeholder="Pretraga..."\n        ng-model="ctrl.query"\n        ng-keydown="ctrl.searchOnInputEnter($event)">\n</div>\n<div class="modal-body bg-light overflow-y-scroll">\n    <div\n        class="card card-body"\n        data-ng-class="{\'mt-3\': !$first, \'border-primary bg-primary bg-opacity-10\': ctrl.selected.id === invoiceItemTemplate.id }"\n        data-ng-repeat="invoiceItemTemplate in ctrl.invoiceItemTemplates"\n        data-ng-click="ctrl.toggle(invoiceItemTemplate);">\n        <h5>{{ invoiceItemTemplate.artikal.naziv }}</h5>\n        <div>\n            {{ invoiceItemTemplate.jedinicna_cijena_puna }} EUR\n        </div>\n        <div class="mt-3">\n            <span class="badge bg-light border text-dark"\n                  ng-if="invoiceItemTemplate.artikal.sifra && invoiceItemTemplate.artikal.sifra.length > 0">\n                \u0160ifra {{ invoiceItemTemplate.artikal.sifra }}\n            </span>\n            <span class="badge bg-light border text-dark"\n                  ng-if="invoiceItemTemplate.artikal.barkod && invoiceItemTemplate.artikal.barkod.length > 0">\n                Barkod {{ invoiceItemTemplate.artikal.barkod }}\n            </span>\n        </div>\n    </div>\n    <button type="button" class="btn btn-primary w-100 mt-3"\n            data-ng-show="ctrl.isLoadMoreVisible"\n            data-ng-click="ctrl.loadPage(ctrl.pageNumber + 1)">\n        U\u010Ditaj jo\u0161 {{ ctrl.invoiceItemTemplates.length }} / {{ ctrl.total_items }}\n    </button>\n    <div class="p-5 text-center" ng-show="ctrl.isLoading">\n        <div class="spinner-border spinner-lg" role="status">\n            <span class="sr-only">Loading...</span>\n        </div>\n    </div>\n    <div class="scroll-buffer-medium"></div>\n</div>\n<div class="modal-footer d-none d-md-block position-sticky bottom-0 bg-white text-end">\n    <button type="button" class="btn btn-light border" data-ng-click="$close({ isConfirmed: false })">\n        Odustani\n    </button>\n    <button type="button" class="btn btn-primary" ng-click="ctrl.confirm()">\n        Potvrdi\n    </button>\n</div>');
$templateCache.put('app/modals/invoice-price-structure-modal/invoice-price-structure-modal.template.html','<div class="modal-header">\n    <div class="d-flex justify-content-between align-items-center w-100">\n        <div class="fw-bold">Struktura cijene</div>\n        <button type="button" class="btn btn-link text-decoration-none fw-bold" ng-click="$close({ isConfirmed: false })">\n            Zatvori\n        </button>\n    </div>\n</div>\n<div class="modal-body p-0 overflow-y-scroll">\n    <ul class="list-group list-group-flush border-bottom">\n        <li class="list-group-item">\n            <div class="d-flex justify-content-between align-items-center">\n                <div class="fw-bold">Prodajna cijena</div>\n                <div class="fw-bold fs-4">{{ ctrl.invoice.ukupna_cijena_prodajna }}</div>\n            </div>\n        </li>\n        <li class="list-group-item">\n            <div class="d-flex justify-content-between align-items-center">\n                <div class="fw-bold">Ukupna osnovica</div>\n                <div class="fw-bold fs-4">{{ ctrl.invoice.ukupna_cijena_rabatisana }}</div>\n            </div>\n        </li>\n    </ul>\n    <ul class="list-group list-group-flush border-bottom" ng-repeat="grupa_poreza in ctrl.invoice.grupe_poreza">\n        <li class="list-group-item">\n            <div class="d-flex justify-content-between align-items-center">\n                <div class="fw-bold">Stopa poreza {{ grupa_poreza.porez_procenat }}%, osnovica</div>\n                <div class="fw-bold fs-4">{{ grupa_poreza.ukupna_cijena_rabatisana }}</div>\n            </div>\n        </li>\n        <li class="list-group-item">\n            <div class="d-flex justify-content-between align-items-center">\n                <div class="fw-bold">Stopa poreza {{ grupa_poreza.porez_procenat }}%, porez</div>\n                <div class="fw-bold fs-4">{{ grupa_poreza.porez_iznos }}</div>\n            </div>\n        </li>\n    </ul>\n    <ul class="list-group list-group-flush border-bottom rounded">\n        <li class="list-group-item">\n            <div class="d-flex justify-content-between align-items-center">\n                <div class="fw-bold">Popust</div>\n                <div class="fw-bold fs-4">{{ ctrl.invoice.rabat_iznos_prodajni }}</div>\n            </div>\n        </li>\n        <li class="list-group-item">\n            <div class="d-flex justify-content-between align-items-center">\n                <div class="fw-bold">Puna cijena</div>\n                <div class="fw-bold fs-4">{{ ctrl.invoice.ukupna_cijena_puna }}</div>\n            </div>\n        </li>\n    </ul>\n</div>');
$templateCache.put('app/modals/prijemnica-stavka-modal/prijemnica-stavka-modal.template.html','<div class="modal-header">\n    <h4 class="mb-0">A\u017Euriranje stavke</h4>\n</div>\n<div class="modal-body">\n    <div class="row g-3">\n        <div class="col-12">\n            <div class="form-group">\n                <label for="modal-stavka-artikal" class="form-label">Artikal</label>\n                <textarea rows="1" type="text" id="modal-stavka-artikal" class="form-control" disabled ng-model="ctrl.item.artikal.naziv"></textarea>\n            </div>\n        </div>\n        <div class="col-12">\n            <div class="form-group">\n                <label for="modal-stavka-kolicina" class="form-label">Koli\u010Dina</label>\n                <input type="number" id="modal-stavka-kolicina" class="form-control" ng-model="ctrl.item.kolicina" min="0.001" step="0.001">\n            </div>\n        </div>\n        <div class="col-12">\n            <div class=" text-end mt-3">\n                <button class="btn btn-outline-secondary" ng-click="ctrl.cancel()">\n                    <i class="fa fa-close"></i> Odustani\n                </button>\n                <button class="btn btn-outline-danger" ng-click="ctrl.select(\'delete\')">\n                    <i class="fa fa-trash"></i> Obri\u0161i\n                </button>\n                <button class="btn btn-success" ng-click="ctrl.select(\'save\', ctrl.item)">\n                    <i class="fa fa-edit"></i> Sa\u010Duvaj\n                </button>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/views/artikal-izmjena/artikal-izmjena.template.html','<div class="py-3 py-sm-5">\n    <div class="container">\n        <form name="ctrl.forma" novalidate>\n            <h4>A\u017Euriranje artikla</h4>\n            <div class="row g-3 mt-3">\n                <div class="col-12 col-md-6 col-lg-3">\n                    <div class="form-group">\n                        <label for="artikal-sifra" class="form-label">\u0160ifra</label>\n                        <input autocomplete="off"\n                               type="text"\n                               class="form-control"\n                               name="sifra"\n                               id="artikal-sifra"\n                               ng-model="ctrl.data.artikal.sifra"\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.sifra.$invalid }">\n                        <div ng-messages="ctrl.forma.sifra.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-3">\n                    <div class="form-group">\n                        <label for="artikal-barkod" class="form-label">Barkod</label>\n                        <input autocomplete="off"\n                               type="text"\n                               class="form-control"\n                               name="barkod"\n                               id="artikal-barkod"\n                               ng-model="ctrl.data.artikal.barkod"\n                               pattern="\\d*"\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.barkod.$invalid }">\n                        <div ng-messages="ctrl.forma.barkod.$error" role="alert" class="invalid-feedback">\n                            <div ng-message="pattern">Barkod smije sadr\u017Eati samo cifre</div>\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-6">\n                    <div class="form-group">\n                        <label for="artikal-naziv" class="form-label">Naziv</label>\n                        <input autocomplete="off"\n                               type="text"\n                               class="form-control"\n                               name="naziv"\n                               id="artikal-naziv"\n                               ng-model="ctrl.data.artikal.naziv"\n                               required\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                        <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-4">\n                    <div class="form-group">\n                        <label for="artikal-jedinica-mjere-id" class="form-label">Jedinica mjere</label>\n                        <ui-select id="artikal-jedinica-mjere-id"\n                                   name="jedinica_mjere_id"\n                                   ng-model="ctrl.data.artikal.jedinica_mjere_id"\n                                   theme="select2"\n                                   search-enabled="true"\n                                   required\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.jedinica_mjere_id.$invalid }">\n                            <ui-select-match placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.naziv"></span>\n                                -\n                                <span ng-bind="$select.selected.opis"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.id as item in (ctrl.jediniceMjere | filter: $select.search) track by item.id">\n                                <span ng-bind="item.naziv"></span>\n                                -\n                                <span ng-bind="item.opis"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.forma.jedinica_mjere_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-4">\n                    <div class="form-group">\n                        <label for="artikal-grupa-artikala-id" class="form-label">Grupa artikala</label>\n                        <div class="input-group">\n                            <ui-select id="artikal-grupa-artikala-id"\n                                       name="grupa_artikala_id"\n                                       ng-model="ctrl.data.artikal.grupa_artikala_id"\n                                       theme="select2"\n                                       search-enabled="true"\n                                       required\n                                       ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grupa_artikala_id.$invalid }">\n                                <ui-select-match placeholder="&nbsp;">\n                                    <span ng-bind="$select.selected.naziv"></span>\n                                </ui-select-match>\n                                <ui-select-choices repeat="item.id as item in (ctrl.grupeArtikala | filter: $select.search) track by item.id">\n                                    <span ng-bind="item.naziv"></span>\n                                </ui-select-choices>\n                            </ui-select>\n                        </div>\n                        <div ng-messages="ctrl.forma.grupa_artikala_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-3">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-jedinicna-cijena-puna" class="form-label">Prodajna cijena</label>\n                        <div class="input-group">\n                            <input autocomplete="off"\n                                   type="number"\n                                   class="form-control"\n                                   name="jedinicna_cijena_puna"\n                                   id="magacin-zaliha-jedinicna-cijena-puna"\n                                   placeholder="Cijena"\n                                   ng-model="ctrl.data.magacin_zaliha.jedinicna_cijena_puna"\n                                   ng-model-options="{ allowInvalid: true }"\n                                   required min="0.000001"\n                                   step="0.000001"\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.jedinicna_cijena_puna.$invalid }"\n                                   ng-change="ctrl.invoiceFactory.recalculateInvoiceItemTemplateFromUPA(ctrl.data.magacin_zaliha)"\n                                   ng-focus="$event.target.select()">\n                        </div>\n                        <div ng-messages="ctrl.forma.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-3">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-jedinicna-cijena-osnovna" class="form-label">Osnovica</label>\n                        <div class="input-group">\n                            <input autocomplete="off"\n                                   type="number"\n                                   class="form-control"\n                                   name="jedinicna_cijena_osnovna"\n                                   id="magacin-zaliha-jedinicna-cijena-osnovna"\n                                   placeholder="Cijena"\n                                   ng-model="ctrl.data.magacin_zaliha.jedinicna_cijena_osnovna"\n                                   ng-model-options="{ allowInvalid: true }"\n                                   required min="0.000001"\n                                   step="0.000001"\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.jedinicna_cijena_osnovna.$invalid }"\n                                   ng-change="ctrl.invoiceFactory.recalculateInvoiceItemTemplateFromUPB(ctrl.data.magacin_zaliha)"\n                                   ng-focus="$event.target.select()">\n                        </div>\n                        <div ng-messages="ctrl.forma.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-3">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-porez-procenat" class="form-label">Porez</label>\n                        <ui-select id="magacin-zaliha-porez-procenat"\n                                   name="porez_procenat"\n                                   ng-model="ctrl.data.magacin_zaliha.porez_procenat"\n                                   search-enabled="false"\n                                   required theme="select2"\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.porez_procenat.$invalid }"\n                                   ng-change="ctrl.invoiceFactory.recalculateInvoiceItemTemplate(ctrl.data.magacin_zaliha)">\n                            <ui-select-match placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.label"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.procenat as item in ctrl.poreskeStope">\n                                <span ng-bind="item.label"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.forma.porez_procenat.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-4" ng-if="ctrl.data.magacin_zaliha.porez_procenat === null">\n                    <label for="stavka-tax-exemption-reason-id-{{ $index }}" class="form-label">Razlog oslobo\u0111enja poreza</label>\n                    <ui-select id="stavka-tax-exemption-reason-id-{{ $index }}"\n                               name="tax_exemption_reason_id"\n                               ng-model="ctrl.data.magacin_zaliha.tax_exemption_reason_id"\n                               ng-required="ctrl.data.magacin_zaliha.porez_procenat === null"\n                               ng-disabled="stavka.isDisabled"\n                               theme="select2"\n                               data-search-enabled="false">\n                        <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                            <span ng-bind="$select.selected.description"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.tax_exemption_reasons | filter: $select.search) track by item.id">\n                            <span ng-bind="item.description"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.tax_exemption_reason_id.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-4">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-raspoloziva-kolicina" class="form-label">Koli\u010Dina</label>\n                        <input autocomplete="off"\n                               type="number"\n                               class="form-control"\n                               name="raspoloziva_kolicina"\n                               id="magacin-zaliha-raspoloziva-kolicina"\n                               ng-model="ctrl.data.magacin_zaliha.raspoloziva_kolicina"\n                               required\n                               step="0.001"\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.raspoloziva_kolicina.$invalid }">\n                        <div ng-messages="ctrl.forma.raspoloziva_kolicina.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12">\n                    <div class="form-group">\n                        <label for="artikal-opis" class="form-label">Opis</label>\n                        <textarea rows="5" type="text" class="form-control" name="opis" id="artikal-opis" ng-model="ctrl.data.artikal.opis"></textarea>\n                    </div>\n                </div>\n            </div>\n            <div class="mt-4 d-flex flex-column-reverse flex-md-row">\n                <button type="button" class="btn btn-dark flex-grow-1" ui-sref="artikal-pregled-lista">\n                    <i class="fa fa-close"></i> Odustani\n                </button>\n                <div class="me-4 mt-2"></div>\n                <button type="button" class="btn btn-success flex-grow-1" ng-click="ctrl.upis()">\n                    Sa\u010Duvaj artikal\n                </button>\n            </div>\n        </form>\n    </div>\n</div>');
$templateCache.put('app/views/artikal-pregled-lista/artikal-pregled-lista.template.html','<div class="container py-3 py-sm-5">\n    <h4 class="mb-3">Pregled artikala</h4>\n    <div class="row g-3">\n        <div class="col-12 col-md-6 col-lg-4">\n            <input class="form-control" ng-model="ctrl.pojam_za_pretragu" placeholder="Pretraga" type="text">\n        </div>\n        <div class="col-12 col-md-6 col-lg-8">\n            <button type="button" class="btn btn-dark me-2" ng-click="ctrl.pretrazi()">\n                <i class="fa fa-search"></i> Pretra\u017Ei\n            </button>\n            <a class="btn btn-success" ui-sref="artikal-unos">\n                <i class="fa fa-plus"></i> Dodaj artikal\n            </a>\n        </div>\n    </div>\n\n    <ul boundary-link-numbers="true" class="mt-3" direction-links="false" force-ellipses="true"\n        items-per-page="ctrl.strana.broj_stavki_po_stranici" max-size="4" ng-change="ctrl.promijeniStranicu()" ng-model="ctrl.broj_stranice"\n        ng-show="ctrl.strana.ukupan_broj_stavki > 0" rotate="true" total-items="ctrl.strana.ukupan_broj_stavki"\n        uib-pagination></ul>\n\n    <div class="row g-4">\n        <div class="col-12 col-lg-6 col-xl-4" ng-repeat="zaliha in ctrl.strana.stavke">\n            <div class="card shadow-sm">\n                <div class="card-header">\n                    <div class="d-flex justify-content-between align-items-center">\n                        <b class="text-lg">{{ zaliha.artikal.naziv }}</b>\n                        <b class="text-lg">{{ zaliha.jedinicna_cijena_puna }} \u20AC</b>\n                    </div>\n                </div>\n                <ul class="list-group list-group-flush">\n                    <li class="list-group-item">\n                        <div class="row">\n                            <div class="col-12 col-md-auto">\n                                <small class="fw-bold">\u0160ifra</small>\n                            </div>\n                            <div class="col-12 col-md-8 col-lg-6">\n                                {{ zaliha.artikal.sifra ? zaliha.artikal.sifra : \'--------\'; }}\n                            </div>\n                        </div>\n                    </li>\n                    <li class="list-group-item">\n                        <div class="row">\n                            <div class="col-12 col-md-auto">\n                                <small class="fw-bold">Barkod</small>\n                            </div>\n                            <div class="col-12 col-md-8 col-lg-6">\n                                {{ zaliha.artikal.barkod ? zaliha.artikal.barkod : \'--------\'; }}\n                            </div>\n                        </div>\n                    </li>\n                    <li class="list-group-item">\n                        <div class="row">\n                            <div class="col-12 col-md-auto">\n                                <small class="fw-bold">Raspolo\u017Eiva koli\u010Dina</small>\n                            </div>\n                            <div class="col-12 col-md-8 col-lg-6">\n                                {{ zaliha.raspoloziva_kolicina }}\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n                <div class="card-footer">\n                    <div class="d-flex">\n                        <button class="btn d-flex flex-column align-items-center" type="button" ui-sref="artikal-izmijeni({id: zaliha.artikal.id})">\n                            <i class="fa fa-edit"></i> <span>Izmijeni</span>\n                        </button>\n                        <button class="btn d-flex flex-column align-items-center" type="button" ng-click="ctrl.deleteInvoiceItemTemplate(zaliha.artikal.id)">\n                            <i class="fa fa-trash"></i> <span>Obri\u0161i</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ul boundary-link-numbers="true" class="mt-3" direction-links="false" force-ellipses="true"\n        items-per-page="ctrl.strana.broj_stavki_po_stranici" max-size="4" ng-change="ctrl.promijeniStranicu()" ng-model="ctrl.broj_stranice"\n        ng-show="ctrl.strana.ukupan_broj_stavki > 0" rotate="true" total-items="ctrl.strana.ukupan_broj_stavki"\n        uib-pagination></ul>\n</div>');
$templateCache.put('app/views/artikal-unos/artikal-unos.template.html','<div class="py-3 py-sm-5">\n    <div class="container">\n        <form name="ctrl.forma" novalidate>\n            <h4>Novi artikal</h4>\n            <div class="row g-3 mt-3">\n                <div class="col-12 col-md-6 col-lg-3">\n                    <div class="form-group">\n                        <label for="artikal-sifra" class="form-label">\u0160ifra</label>\n                        <input autocomplete="off"\n                               type="text"\n                               class="form-control"\n                               name="sifra"\n                               id="artikal-sifra"\n                               ng-model="ctrl.data.artikal.sifra"\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.sifra.$invalid }">\n                        <div ng-messages="ctrl.forma.sifra.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-3">\n                    <div class="form-group">\n                        <label for="artikal-barkod" class="form-label">Barkod</label>\n                        <input autocomplete="off"\n                               type="text"\n                               class="form-control"\n                               name="barkod"\n                               id="artikal-barkod"\n                               ng-model="ctrl.data.artikal.barkod"\n                               pattern="\\d*"\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.barkod.$invalid }">\n                        <div ng-messages="ctrl.forma.barkod.$error" role="alert" class="invalid-feedback">\n                            <div ng-message="pattern">Barkod smije sadr\u017Eati samo cifre</div>\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-6">\n                    <div class="form-group">\n                        <label for="artikal-naziv" class="form-label">Naziv</label>\n                        <input autocomplete="off"\n                               type="text"\n                               class="form-control"\n                               name="naziv"\n                               id="artikal-naziv"\n                               ng-model="ctrl.data.artikal.naziv"\n                               required\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                        <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-4">\n                    <div class="form-group">\n                        <label for="artikal-jedinica-mjere-id" class="form-label">Jedinica mjere</label>\n                        <ui-select id="artikal-jedinica-mjere-id"\n                                   name="jedinica_mjere_id"\n                                   ng-model="ctrl.data.artikal.jedinica_mjere_id"\n                                   theme="select2"\n                                   search-enabled="true"\n                                   required\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.jedinica_mjere_id.$invalid }">\n                            <ui-select-match placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.naziv"></span>\n                                -\n                                <span ng-bind="$select.selected.opis"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.id as item in (ctrl.jediniceMjere | filter: $select.search) track by item.id">\n                                <span ng-bind="item.naziv"></span>\n                                -\n                                <span ng-bind="item.opis"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.forma.jedinica_mjere_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-4">\n                    <div class="form-group">\n                        <label for="artikal-grupa-artikala-id" class="form-label">Grupa artikala</label>\n                        <div class="input-group">\n                            <ui-select id="artikal-grupa-artikala-id"\n                                       name="grupa_artikala_id"\n                                       ng-model="ctrl.data.artikal.grupa_artikala_id"\n                                       theme="select2"\n                                       search-enabled="true"\n                                       required\n                                       ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grupa_artikala_id.$invalid }">\n                                <ui-select-match placeholder="&nbsp;">\n                                    <span ng-bind="$select.selected.naziv"></span>\n                                </ui-select-match>\n                                <ui-select-choices repeat="item.id as item in (ctrl.grupeArtikala | filter: $select.search) track by item.id">\n                                    <span ng-bind="item.naziv"></span>\n                                </ui-select-choices>\n                            </ui-select>\n                        </div>\n                        <div ng-messages="ctrl.forma.grupa_artikala_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-3">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-jedinicna-cijena-puna" class="form-label">Prodajna cijena</label>\n                        <div class="input-group">\n                            <input autocomplete="off"\n                                   type="number"\n                                   class="form-control"\n                                   name="jedinicna_cijena_puna"\n                                   id="magacin-zaliha-jedinicna-cijena-puna"\n                                   placeholder="Cijena"\n                                   ng-model="ctrl.data.magacin_zaliha.jedinicna_cijena_puna"\n                                   ng-model-options="{ allowInvalid: true }"\n                                   required min="0.000001"\n                                   step="0.000001"\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.jedinicna_cijena_puna.$invalid }"\n                                   ng-change="ctrl.invoiceFactory.recalculateInvoiceItemTemplateFromUPA(ctrl.data.magacin_zaliha)"\n                                   ng-focus="$event.target.select()">\n                        </div>\n                        <div ng-messages="ctrl.forma.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-3">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-jedinicna-cijena-osnovna" class="form-label">Osnovica</label>\n                        <div class="input-group">\n                            <input autocomplete="off"\n                                   type="number"\n                                   class="form-control"\n                                   name="jedinicna_cijena_osnovna"\n                                   id="magacin-zaliha-jedinicna-cijena-osnovna"\n                                   placeholder="Cijena"\n                                   ng-model="ctrl.data.magacin_zaliha.jedinicna_cijena_osnovna"\n                                   ng-model-options="{ allowInvalid: true }"\n                                   required min="0.000001"\n                                   step="0.000001"\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.jedinicna_cijena_osnovna.$invalid }"\n                                   ng-change="ctrl.invoiceFactory.recalculateInvoiceItemTemplateFromUPB(ctrl.data.magacin_zaliha)"\n                                   ng-focus="$event.target.select()">\n                        </div>\n                        <div ng-messages="ctrl.forma.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-3">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-porez-procenat" class="form-label">Porez</label>\n                        <ui-select id="magacin-zaliha-porez-procenat"\n                                   name="porez_procenat"\n                                   ng-model="ctrl.data.magacin_zaliha.porez_procenat"\n                                   search-enabled="false"\n                                   required theme="select2"\n                                   ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.porez_procenat.$invalid }"\n                                   ng-change="ctrl.invoiceFactory.recalculateInvoiceItemTemplate(ctrl.data.magacin_zaliha)">\n                            <ui-select-match placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.label"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.procenat as item in ctrl.poreskeStope">\n                                <span ng-bind="item.label"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.forma.porez_procenat.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-4" ng-if="ctrl.data.magacin_zaliha.porez_procenat === null">\n                    <label for="stavka-tax-exemption-reason-id-{{ $index }}" class="form-label">Razlog oslobo\u0111enja poreza</label>\n                    <ui-select id="stavka-tax-exemption-reason-id-{{ $index }}"\n                               name="tax_exemption_reason_id"\n                               ng-model="ctrl.data.magacin_zaliha.tax_exemption_reason_id"\n                               ng-required="ctrl.data.magacin_zaliha.porez_procenat === null"\n                               ng-disabled="stavka.isDisabled"\n                               theme="select2"\n                               data-search-enabled="false">\n                        <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                            <span ng-bind="$select.selected.description"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.tax_exemption_reasons | filter: $select.search) track by item.id">\n                            <span ng-bind="item.description"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.tax_exemption_reason_id.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-lg-4">\n                    <div class="form-group">\n                        <label for="magacin-zaliha-raspoloziva-kolicina" class="form-label">Koli\u010Dina</label>\n                        <input autocomplete="off"\n                               type="number"\n                               class="form-control"\n                               name="raspoloziva_kolicina"\n                               id="magacin-zaliha-raspoloziva-kolicina"\n                               ng-model="ctrl.data.magacin_zaliha.raspoloziva_kolicina"\n                               required\n                               step="0.001"\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.raspoloziva_kolicina.$invalid }">\n                        <div ng-messages="ctrl.forma.raspoloziva_kolicina.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class="col-12">\n                    <div class="form-group">\n                        <label for="artikal-opis" class="form-label">Opis</label>\n                        <textarea rows="5" type="text" class="form-control" name="opis" id="artikal-opis" ng-model="ctrl.data.artikal.opis"></textarea>\n                    </div>\n                </div>\n            </div>\n            <div class="mt-4 d-flex flex-column-reverse flex-md-row">\n                <button type="button" class="btn btn-dark flex-grow-1" ui-sref="artikal-pregled-lista">\n                    <i class="fa fa-close"></i> Odustani\n                </button>\n                <div class="me-4 mt-2"></div>\n                <button type="button" class="btn btn-success flex-grow-1" ng-click="ctrl.upis()">\n                    Sa\u010Duvaj artikal\n                </button>\n            </div>\n        </form>\n    </div>\n</div>');
$templateCache.put('app/views/credit-note-view/credit-note-view.template.html','<div class="mt-3"></div>\n<div class="container" ng-if="ctrl.stranica.stavke.length === 0">\n    <div class="card card-body bg-light">\n        Nije izdato nijedno knji\u017Eno odobrenje.\n    </div>\n</div>\n<div class="container" ng-if="ctrl.stranica.stavke.length > 0">\n    <fis-pagination\n        data-page-data="ctrl.stranica"\n        data-on-page-change="ctrl.onPageChange()"\n        data-current-page="ctrl.odabranaStranica">\n    </fis-pagination>\n    <div class="row g-3 mt-3">\n        <div class="col-md-4" ng-repeat="item in ctrl.stranica.stavke">\n            <div class="card" ng-if="item.type === \'credit_note\'">\n                <div class="card-body">\n                    <div class="position-relative">\n                        <div>\n                            Redni broj: <span class="text-nowrap">{{ item.efi_ordinal_number }}</span>\n                        </div>\n                        <div>\n                            Interni broj: <span class="text-nowrap">{{ item.internal_ordinal_number }}</span>\n                        </div>\n                        <div>\n                            {{ item.efi_broj_fakture }}\n                        </div>\n                        <div>\n                            {{ item.datum_fiskalizacije | fisFormatDatetime }}\n                        </div>\n                        <div class="mt-1">\n                            <span class="badge" style="background: #9300ff; color: white;">\n                                knji\u017Eno odobrenje\n                            </span>\n                        </div>\n                        <a href="{{ item.efi_verify_url }}"\n                           target="_blank"\n                           class="btn btn-link text-decoration-none position-absolute lh-1 top-0 end-0">\n                            <i class="fa fa-external-link"></i><span>Provjera</span>\n                        </a>\n                    </div>\n                    <div class="mt-3">\n                        <div class="bg-light px-3 py-2 rounded">\n                            <div class="row">\n                                <div class="col-12">\n                                    <div class="fw-bold">Kupac:</div>\n                                    <div>\n                                        <a href="#"\n                                           class="text-decoration-none"\n                                           ui-sref="komitent-izmjena({ id: item.komitent.id })">\n                                            {{ item.komitent.naziv }}\n                                        </a>\n                                    </div>\n                                    <div class="text-muted small"\n                                         ng-if="$root.fisConfig.user.firma.settings.smtp_active">\n                                        {{ item.komitent.email }}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="mt-3 bg-white">\n                        <div class="fw-bold">Struktura cijene</div>\n                        <div class="dash-info">\n                            <div class="dash-info-start"><span>Povrat</span></div>\n                            <div class="dash-info-spacing"></div>\n                            <div class="dash-info-end text-nowrap">\n                                <span>{{ -1*item.return_amount_with_tax }}</span>\n                            </div>\n                        </div>\n                        <div class="dash-info">\n                            <div class="dash-info-start"><span>Povrat</span></div>\n                            <div class="dash-info-spacing"></div>\n                            <div class="dash-info-end text-nowrap">\n                                <span>{{ -1*item.discount_amount_with_tax }}</span>\n                            </div>\n                        </div>\n                        <div class="dash-info">\n                            <div class="dash-info-start"><span>Ukupno</span></div>\n                            <div class="dash-info-spacing"></div>\n                            <div class="dash-info-end text-nowrap">\n                                <span>{{ -1*item.return_and_discount_amount_with_tax }}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="mt-3 bg-white">\n                        <div class="fw-bold">Ra\u010Duni</div>\n                        <div class="dash-info" ng-repeat="iic_ref in item.iic_refs">\n                            <div class="dash-info-start">\n                                <div>\n                                    <a href="#"\n                                       class="text-decoration-none"\n                                       ng-click="ctrl.stampac.stampajFakturu(iic_ref.invoice_id, \'a4\'); $event.preventDefault();"\n                                       ng-if="iic_ref.invoice_id">\n                                        <span>{{ iic_ref.iic }}</span>\n                                    </a>\n                                    <a ng-href="{{ iic_ref.verification_url }}"\n                                       class="text-decoration-none"\n                                       ng-if="!iic_ref.invoice_id"\n                                       target="_blank">\n                                        <span>{{ iic_ref.iic }}</span>\n                                    </a>\n                                </div>\n                                <div><span class="text-muted small">{{ iic_ref.issue_datetime | fisFormatDatetime }}</span></div>\n                            </div>\n                            <div class="dash-info-spacing"></div>\n                            <div class="dash-info-end text-nowrap">\n                                <span>{{ iic_ref.amount }}</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="card-footer">\n                    <div class="row g-2">\n                        <div class="col-6">\n                            <button type="button"\n                                    class="btn btn-light border w-100 px-1 lh-1 py-2"\n                                    ng-click="ctrl.stampac.stampajKnjiznoOdobrenje(item.id)">\n                                <div><i class="fa fa-print mb-1"></i></div>\n                                <div>Kopija A4</div>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <invoice-card invoice="item" ng-if="item.type === \'invoice\'"></invoice-card>\n        </div>\n    </div>\n    <fis-pagination\n        class="mt-3"\n        data-page-data="ctrl.stranica"\n        data-on-page-change="ctrl.onPageChange()"\n        data-current-page="ctrl.odabranaStranica">\n    </fis-pagination>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/credit-note-create/credit-note-create.template.html','<form name="ctrl.mainForm">\n    <div class="container mt-3">\n        <div class="card mt-3">\n            <div class="card-header">\n                <div class="fw-bold">Kupac</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12">\n                        <label for="faktura-komitent-id" class="form-label">Pretraga kupaca</label>\n                        <buyer-typeahead\n                            id="faktura-komitent-id"\n                            name="komitent_id"\n                            required\n                            can-add\n                            on-select="ctrl.onBuyerTypeaheadSelect($model)">\n                        </buyer-typeahead>\n                    </div>\n                    <div class="col-12" ng-if="!ctrl.buyer">\n                        <div class="card"\n                             ng-class="{\n                                \'border-danger text-danger bg-danger bg-opacity-10\':\n                                    ctrl.mainForm.$submitted && ctrl.mainForm.komitent_id.$invalid,\n                                \'bg-light\':\n                                    !(ctrl.mainForm.$submitted && ctrl.mainForm.komitent_id.$invalid) }">\n                            <div class="card-body">\n                                Kupac nije odabran\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-12" ng-if="ctrl.buyer">\n                        <div class="card bg-light">\n                            <div class="card-body">\n                                <div class="fw-bold text-uppercase">\n                                    {{ ctrl.buyer.naziv }}\n                                </div>\n                                <div>\n                                <span class="fw-bold">\n                                    {{ ctrl.buyer.tip_identifikacione_oznake.naziv }}:\n                                </span>\n                                    {{ ctrl.buyer.identifikaciona_oznaka }}\n                                </div>\n                                <div>\n                                    <span class="fw-bold">Adresa:</span>\n                                    {{ ctrl.buyer.adresa }}\n                                </div>\n                                <div>\n                                    <span class="fw-bold">Grad:</span>\n                                    {{ ctrl.buyer.grad }}\n                                </div>\n                                <div class="d-none drzava">\n                                    <span class="fw-bold">Dr\u017Eava:</span>\n                                    {{ ctrl.buyer.drzava }}\n                                </div>\n                            </div>\n                            <div class="card-footer p-2">\n                                <button type="button" class="btn btn-link text-decoration-none" ng-click="ctrl.removeBuyer()">\n                                    <i class="fa fa-close"></i> Poni\u0161ti odabir\n                                </button>\n                                <button type="button" class="btn btn-link text-decoration-none" ng-click="ctrl.showBuyerUpdateModal()" ng-disabled="!ctrl.buyer">\n                                    <i class="fa fa-edit"></i> Izmijeni podatke\n                                </button>\n                            </div>\n                        </div>\n                        <div ng-messages="ctrl.forme.racun.komitent_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-message="nepotpuno">\n                                Podaci kupca su nepotpuni.\n                            </div>\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="card mt-3">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Ra\u010Duni</div>\n            </div>\n            <div class="card-body">\n                <div ng-show="ctrl.isLoadingInvoices">\n                    <div class="text-center">\n                        <div class="spinner-border spinner-lg"></div>\n                    </div>\n                </div>\n                <div ng-show="!ctrl.buyer">\n                    <div class="card card-body" ng-class="{ \'border-danger text-danger bg-danger bg-opacity-10\': ctrl.mainForm.$submitted && ctrl.mainForm.komitent_id.$invalid, \'bg-light\': !(ctrl.mainForm.$submitted && ctrl.mainForm.komitent_id.$invalid) }">\n                        <div class="small">Morate odabrati kupca</div>\n                    </div>\n                </div>\n                <div ng-show="ctrl.buyer">\n                    <div class="mb-3" ng-class="{ \'d-none\': ctrl.invoiceSelectMode }">\n                        <button class="btn btn-primary" ng-click="ctrl.invoiceSelectMode = !ctrl.invoiceSelectMode">\n                            Dodaj ra\u010Dun\n                        </button>\n                        <button class="btn btn-primary" ng-click="ctrl.addExternalInvoices()">\n                            Dodaj eksterni ra\u010Dun\n                        </button>\n                    </div>\n                    <div class="mb-3" ng-class="{ \'d-none\': !ctrl.invoiceSelectMode }">\n                        <div class="d-flex justify-content-between">\n                            <div>\n                                <button class="btn btn-primary" ng-click="ctrl.invoiceSelectMode = false">\n                                    <i class="fa fa-arrow-left"></i> Nazad\n                                </button>\n                            </div>\n\n                            <fis-pagination\n                                data-page-data="ctrl.stranica"\n                                data-current-page="ctrl.filters.broj_stranice"\n                                data-on-page-change="ctrl.onInvoicePageChange()"\n                                data-ng-class="{ \'pe-none\': ctrl.isLoadingInvoices }">\n                            </fis-pagination>\n                        </div>\n                    </div>\n\n                    <div class="card card-body bg-light" ng-class="{ \'d-none\': ctrl.invoiceSelectMode || ctrl.creditNote.iic_refs.length > 0 }">\n                        Nema definisanih ra\u010Duna za knji\u017Eno odobrenje.\n                    </div>\n\n                    <table class="table" ng-class="{ \'d-none\': ctrl.invoiceSelectMode || ctrl.creditNote.iic_refs.length === 0 }">\n                        <thead>\n                            <tr>\n                                <th>Ra\u010Dun</th>\n                                <th>Stopa 21%</th>\n                                <th>Stopa 7%</th>\n                                <th>Stopa 0%</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="ref in ctrl.creditNote.iic_refs">\n                                <td>\n                                    <div>{{ ref.iic }}</div>\n                                    <div><small>{{ ref.issue_datetime }}</small></div>\n                                </td>\n                                <td>\n                                    {{ ref.amount_21 }}\n                                </td>\n                                <td>\n                                    {{ ref.amount_7 }}\n                                </td>\n                                <td>\n                                    {{ ref.amount_0 }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <invoice-turnover-table\n                        data-credit-note="ctrl.creditNote"\n                        data-invoices="ctrl.stranica.stavke"\n                        data-selected-invoices="ctrl.creditNote.fakture"\n                        data-selection-changed="ctrl.onInvoiceSelect(action, invoice, event)"\n                        ng-class="{ \'d-none\': !ctrl.invoiceSelectMode }">\n                    </invoice-turnover-table>\n                    <div class="table-responsive d-none">\n                        <table class="table text-nowrap">\n                            <tbody>\n                            <tr>\n                                <td></td>\n                                <td></td>\n                                <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used }}</td>\n                                <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used_21 }}</td>\n                                <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used_7 }}</td>\n                                <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used_0 }}</td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div ng-if="ctrl.buyer && ctrl.mainForm.$error.turnover">\n                        <div class="card card-body border-danger text-danger bg-danger bg-opacity-10" ng-if="ctrl.mainForm.$error.turnover">\n                            <div class="small" ng-if="ctrl.mainForm.$error.noInvoices">Nije odabran nijedan ra\u010Dun.</div>\n                            <div class="small" ng-if="ctrl.mainForm.$error.notEnoughTurnover21">Nedovoljno prometa po stopi 21%. Potrebno je jo\u0161 {{ ctrl.creditNote.return_and_discount_amount_with_tax_21 - ctrl.creditNote.fakture_credit_note_turnover_remaining_21 }}</div>\n                            <div class="small" ng-if="ctrl.mainForm.$error.notEnoughTurnover7">Nedovoljno prometa po stopi 7%. Potrebno je jo\u0161 {{ ctrl.creditNote.return_and_discount_amount_with_tax_7 - ctrl.creditNote.fakture_credit_note_turnover_remaining_7 }}</div>\n                            <div class="small" ng-if="ctrl.mainForm.$error.notEnoughTurnover0">Nedovoljno prometa po stopi 0%. Potrebno je jo\u0161 {{ ctrl.creditNote.return_and_discount_amount_with_tax_0 - ctrl.creditNote.fakture_credit_note_turnover_remaining_0 }}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="card mt-3">\n            <div class="card-header">\n                <div class="d-flex justify-content-between align-items-center">\n                    <div class="fw-bold text-uppercase">Stavke povrata</div>\n                </div>\n            </div>\n            <div class="card-body" ng-if="ctrl.creditNote.stavkePovrata.length === 0">\n                <div class="card card-body" ng-class="{ \'border-danger text-danger bg-danger bg-opacity-10\': ctrl.mainForm.$error.noReturnAndDiscount, \'bg-light\': !ctrl.mainForm.$error.noReturnAndDiscount }">\n                    <div class="small">Nema stavki povrata</div>\n                </div>\n            </div>\n            <div class="card-body card-body-table" ng-if="ctrl.creditNote.stavkePovrata.length > 0">\n                <div class="table-responsive">\n                    <table class="table table-hover text-nowrap">\n                        <thead>\n                        <tr>\n                            <th class="w-1">#</th>\n                            <th class="w-auto">Opis</th>\n                            <th>Stopa</th>\n                            <th>Povrat</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat="creditNoteItem in ctrl.creditNote.stavkePovrata track by $index"\n                            ng-click="ctrl.showReturnItemModal(creditNoteItem, $index)">\n                            <td class="w-1">{{ $index + 1 }}</td>\n                            <td class="w-auto text-wrap">{{ creditNoteItem.description }}</td>\n                            <td>{{ creditNoteItem.tax_rate }}%</td>\n                            <td>{{ creditNoteItem.return_amount_with_tax }}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class="card-footer">\n                <div class="text-end">\n                    <button type="button"\n                            class="btn btn-primary"\n                            ng-click="ctrl.showReturnItemModal()">\n                        <i class="fa fa-plus"></i> Dodaj povrat\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class="card mt-3">\n            <div class="card-header">\n                <div class="d-flex justify-content-between align-items-center">\n                    <div class="fw-bold text-uppercase">Stavke popusta</div>\n                </div>\n            </div>\n            <div class="card-body" ng-if="ctrl.creditNote.stavkePopusta.length === 0">\n                <div class="card card-body"\n                     ng-class="{\n                        \'border-danger text-danger bg-danger bg-opacity-10\': ctrl.mainForm.$error.noReturnAndDiscount,\n                        \'bg-light\': !ctrl.mainForm.$error.noReturnAndDiscount }">\n                    <div class="small">Nema stavki popusta</div>\n                </div>\n            </div>\n            <div class="card-body" ng-if="ctrl.creditNote.stavkePopusta.length > 0">\n                <div class="table-responsive">\n                    <table class="table table-hover text-nowrap">\n                        <thead>\n                        <tr>\n                            <th class="w-1">#</th>\n                            <th class="w-auto">Opis</th>\n                            <th>Stopa</th>\n                            <th>Popust</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat="creditNoteItem in ctrl.creditNote.stavkePopusta track by $index"\n                            ng-click="ctrl.showDiscountItemModal(creditNoteItem, $index);">\n                            <td class="w-1">{{ $index + 1 }}</td>\n                            <td class="w-auto text-wrap">{{ creditNoteItem.description }}</td>\n                            <td>{{ creditNoteItem.tax_rate }}%</td>\n                            <td>{{ creditNoteItem.discount_amount_with_tax }}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class="card-footer">\n                <div class="text-end">\n                    <button type="button" class="btn btn-primary" ng-click="ctrl.showDiscountItemModal()">\n                        <i class="fa fa-plus"></i> Dodaj popust\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class="card mt-3">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Pregled</div>\n            </div>\n            <div class="card-body">\n                <div class="table-responsive">\n                    <table class="table">\n                        <thead>\n                        <tr>\n                            <th></th>\n                            <th class="text-end" style="min-width: 150px; width: 150px;">Ukupno</th>\n                            <th class="text-end" style="min-width: 150px; width: 150px;">Stopa 21%</th>\n                            <th class="text-end" style="min-width: 150px; width: 150px;">Stopa 7%</th>\n                            <th class="text-end" style="min-width: 150px; width: 150px;">Stopa 0%</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>Promet ra\u010Duna</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used_21 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used_7 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.fakture_credit_note_turnover_used_0 }}</td>\n                        </tr>\n                        <tr>\n                            <td>Povrat</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_amount_with_tax }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_amount_with_tax_21 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_amount_with_tax_7 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_amount_with_tax_0 }}</td>\n                        </tr>\n                        <tr>\n                            <td>Popust</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.discount_amount_with_tax }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.discount_amount_with_tax_21 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.discount_amount_with_tax_7 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.discount_amount_with_tax_0 }}</td>\n                        </tr>\n                        <tr>\n                            <td>Povrat i popust</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_and_discount_amount_with_tax }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_and_discount_amount_with_tax_21 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_and_discount_amount_with_tax_7 }}</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;">{{ ctrl.creditNote.return_and_discount_amount_with_tax_0 }}</td>\n                        </tr>\n                        <tr>\n                            <td>Preostali promet</td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;" ng-class="{ \'text-danger\': ctrl.creditNote.fakture_credit_note_turnover_remaining < 0 }">\n                                {{ ctrl.creditNote.fakture_credit_note_turnover_remaining }}\n                            </td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;" ng-class="{ \'text-danger\': ctrl.creditNote.fakture_credit_note_turnover_remaining_21 < 0 }">\n                                {{ ctrl.creditNote.fakture_credit_note_turnover_remaining_21 }}\n                            </td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;" ng-class="{ \'text-danger\': ctrl.creditNote.fakture_credit_note_turnover_remaining_7 < 0 }">\n                                {{ ctrl.creditNote.fakture_credit_note_turnover_remaining_7 }}\n                            </td>\n                            <td class="text-end" style="min-width: 150px; width: 150px;" ng-class="{ \'text-danger\': ctrl.creditNote.fakture_credit_note_turnover_remaining_0 < 0 }">\n                                {{ ctrl.creditNote.fakture_credit_note_turnover_remaining_0 }}\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class="card card-body mt-3">\n            <div class="text-end">\n                <button type="button" class="btn btn-primary" ng-click="ctrl.onSubmitButton()">\n                    Fiskalizuj\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class="scroll-buffer-large"></div>\n</form>\n');
$templateCache.put('app/views/depozit/depozit.template.html','<div class="py-3 py-lg-5">\n    <div class="container-lg">\n        <div class="row g-3">\n            <div class="col-12 col-md-6 col-xl-4">\n                <div class="card shadow-sm">\n                    <div class="card-body flex-grow-0">\n                        <span class="fw-bold">Depozit</span>\n                    </div>\n                    <div class="card-body">\n                        <form name="ctrl.formaPolog" novalidate>\n                            <div>\n                                <label for="depozit-iznos" class="form-label">Iznos depozita</label>\n                                <input type="number"\n                                       name="depozit"\n                                       id="depozit-iznos"\n                                       class="form-control text-end"\n                                       required min="0"\n                                       ng-focus="ctrl.depositInitialAmount = undefined"\n                                       ng-model="ctrl.depositInitialAmount"\n                                       ng-disabled="ctrl.stanje.danasnji_depozit && ctrl.stanje.danasnji_depozit.status === 2"\n                                       ng-class="{ \'is-invalid\': (ctrl.formaPolog.$submitted || ctrl.formaPolog.depozit.$dirty) && ctrl.formaPolog.depozit.$invalid  }">\n                                <div ng-messages="ctrl.formaPolog.depozit.$error" role="alert" class="invalid-feedback">\n                                    <div ng-message="pattern">Polje smije sadr\u017Eati samo brojeve</div>\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="d-flex mt-3">\n                                <button class="btn btn-dark flex-grow-1" ng-click="ctrl.postaviDepozit()" ng-if="!ctrl.stanje.danasnji_depozit || ctrl.stanje.danasnji_depozit.status !== 2">\n                                    Promijeni\n                                </button>\n                            </div>\n                        </form>\n                        <div class="alert alert-warning mb-0" ng-if="ctrl.stanje.danasnji_depozit && ctrl.stanje.danasnji_depozit.status === 2">\n                            <div class="small text-muted">\n                                Depozit za dana\u0161nji dan je registrovan i ne mo\u017Ee se promijeniti.\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12 col-md-6 col-xl-4">\n                <div class="card shadow-sm">\n                    <div class="card-body flex-grow-0">\n                        <span class="fw-bold">Podizanje novca</span>\n                    </div>\n                    <div class="card-body">\n                        <form name="ctrl.formaPodizanje" novalidate>\n                            <div class="form-group">\n                                <label for="razduzenje-iznos" class="form-label">Iznos gotovine za podizanje</label>\n                                <input type="number"\n                                       name="iznosIsplate"\n                                       id="razduzenje-iznos"\n                                       class="form-control text-end"\n                                       required\n                                       ng-max="ctrl.stanje.ukupno"\n                                       ng-focus="ctrl.depositWithdrawalAmount = undefined"\n                                       ng-model="ctrl.depositWithdrawalAmount"\n                                       ng-class="{ \'is-invalid\': (ctrl.formaPodizanje.$submitted || ctrl.formaPodizanje.iznosIsplate.$dirty) && ctrl.formaPodizanje.iznosIsplate.$invalid  }">\n                                <div ng-messages="ctrl.formaPodizanje.iznosIsplate.$error" role="alert" class="invalid-feedback">\n                                    <div ng-message="max">Iznos ne mo\u017Ee biti ve\u0107i od raspolo\u017Eivog stanja.</div>\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="d-flex mt-3">\n                                <button class="btn btn-dark flex-grow-1" ng-click="ctrl.podigniDepozit()">\n                                    Podigni\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <div class="col-12 col-md-12 col-xl-4 d-none">\n                <div class="card">\n                    <div class="card-header">\n                        <div class="fw-bold">Lista depozita</div>\n                    </div>\n                    <div class="card-body" ng-if="ctrl.deposits.length === 0">\n                        Nije definisan nijedan depozit za dana\u0161nji dan.\n                    </div>\n                    <div class="card-body p-0">\n                        <table class="table m-0">\n                            <tbody>\n                            <tr ng-repeat="deposit in ctrl.deposits">\n                                <td class="py-2 px-3">\n                                    <span ng-if="deposit.tip_depozita === 1">\n                                        Polaganje novca\n                                    </span>\n                                    <span ng-if="deposit.tip_depozita === 2">\n                                        Podizanje novca\n                                    </span>\n                                </td>\n                                <td class="py-2 px-3 d-none">\n                                    <span ng-if="deposit.tip_depozita === 1">\n                                        <i class="fa fa-arrow-down text-success"></i>\n                                    </span>\n                                    <span ng-if="deposit.tip_depozita === 2">\n                                        <i class="fa fa-arrow-up text-danger"></i>\n                                    </span>\n                                </td>\n                                <td class="py-2 px-3w-1 text-nowrap">\n                                    {{ deposit.datum_kreiranja | fisFormatDatetime }}\n                                </td>\n                                <td class="py-2 px-3w-1 text-nowrap">\n                                    {{ deposit.iznos }}\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/modals/payment-method-select-modal/payment-method-select-modal.template.html','<div class="modal-header position-sticky top-0 bg-white d-none d-md-block" style="z-index: 1;">\n    <h4 class="mb-0">{{ ctrl.title }}</h4>\n</div>\n<div class="modal-header d-md-none p-0 position-sticky top-0">\n    <div class="w-100 d-flex justify-content-between">\n        <div>\n            <button type="button" class="btn rounded-0" data-ng-click="$close({ isConfirmed: false })">\n                <i class="fa fa-arrow-left"></i> Nazad\n            </button>\n        </div>\n        <div>\n            <button type="button" class="btn btn-link text-decoration-none rounded-0" data-ng-click="ctrl.confirm()">\n                Potvrdi\n            </button>\n        </div>\n    </div>\n</div>\n<div class="modal-header p-0 border-bottom-0" ng-if="ctrl.tabs.length > 0">\n    <ul class="nav nav-tabs nav-tabs-underline w-100" data-bs-tabs="tabs" ng-click="ctrl.onTabChange();">\n        <li class="nav-item" ng-repeat="tab in ctrl.tabs">\n            <a class="nav-link" ng-class="{ \'active\': ctrl.tab === tab }" data-ng-click="ctrl.tab = tab;">\n                {{ tab }}\n            </a>\n        </li>\n    </ul>\n</div>\n<div class="modal-body flex-grow-0 border-bottom p-0" ng-if="ctrl.searchEnabled">\n    <div class="position-absolute top-0 left-0 w-100 h-100 px-3 d-flex align-items-center justify-content-end pe-none">\n        <button\n            class="btn btn-primary py-2 lh-1 pe-auto btn-sm"\n            data-ng-click="ctrl.search()">\n            <i class="fa fa-search d-md-none"></i>\n            <span class="d-none d-md-block">Pretra\u017Ei</span>\n        </button>\n    </div>\n    <input\n        type="text"\n        class="form-control py-3 ps-3 shadow-none border-0 fs-5"\n        style="padding-right: 100px;"\n        autofocus\n        placeholder="Pretraga..."\n        ng-model="ctrl.query"\n        ng-keydown="ctrl.searchOnInputEnter($event)">\n</div>\n<div class="modal-body bg-light overflow-y-scroll">\n    <div class="card card-body"\n         data-ng-click="ctrl.toggle(item)"\n         data-ng-class="{ \'mt-3\': !$first, \'border-primary bg-primary bg-opacity-10\': item.is_selected }"\n         ng-repeat="item in ctrl.items track by $index">\n        <h5 class="mb-0">{{ item.description }}</h5>\n    </div>\n    <button type="button" class="btn btn-primary w-100 mt-3"\n            data-ng-show="ctrl.hasMoreItems"\n            data-ng-click="ctrl.loadMoreItems($event)">\n        U\u010Ditaj jo\u0161 {{ ctrl.items.length }} / {{ ctrl.totalItems }}\n    </button>\n    <div class="p-5 text-center" ng-show="ctrl.isLoading">\n        <div class="spinner-border spinner-lg" role="status">\n            <span class="sr-only">Loading...</span>\n        </div>\n    </div>\n</div>\n<div class="modal-footer position-sticky bottom-0 bg-white d-none d-md-block" style="z-index: 1;">\n    <div class="text-end">\n        <button type="button" class="btn btn-light border" data-ng-click="$close({ isConfirmed: false })">\n            Nazad\n        </button>\n        <button type="button" class="btn btn-primary" data-ng-click="ctrl.confirm()">\n            Potvrdi\n        </button>\n    </div>\n</div>');
$templateCache.put('app/views/faktura-pos-unos/faktura-pos-unos.template.html','<div class="p-3 h-100 d-none d-lg-block">\n    <div class="container h-100">\n        <div class="d-flex flex-column gap-4 h-100" style="max-height: 600px;">\n            <invoice-item-typeahead\n              typeahead-popup-classes="\'position-absolute top-0 start-0 overflow-y-scroll h-100 border-0\'"\n              typeahead-append-to="\'#desktop-body\'"\n              typeahead-on-loading-change="ctrl.updateTypeaheadDesktopState({ isLoading: isLoading })"\n              typeahead-on-focus-change="ctrl.updateTypeaheadDesktopState({ isFocused: isFocused })"\n              typeahead-on-open-change="ctrl.updateTypeaheadDesktopState({ isOpen: isOpen })"\n              on-add="ctrl.addInvoiceItem($data, $eventType)">\n            </invoice-item-typeahead>\n            <div id="desktop-body" class="position-relative flex-grow-1">\n                <div class="card overflow-y-auto h-100" fis-on-overflow="ctrl.hasOverflow = hasOverflow">\n                    <div class="card-body p-0">\n                        <table class="table text-nowrap m-0">\n                            <thead>\n                                <tr>\n                                    <th class="px-0 w-1 text-end">\n                                        <div class="px-3">Kol.</div>\n                                    </th>\n                                    <th class="px-0 w-1 text-center">\n                                    </th>\n                                    <th class="px-0">\n                                        <div class="px-3">Artikal</div>\n                                    </th>\n                                    <th class="px-0 w-1">\n                                        <div class="px-3">Popust %</div>\n                                    </th>\n                                    <th class="px-0 w-1">\n                                        <div class="px-3">Popust</div>\n                                    </th>\n                                    <th class="px-0 w-1">\n                                        <div class="px-3">Za uplatu</div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody class="border-top-0" ng-show="ctrl.racun.stavke.length == 0">\n                                <tr>\n                                    <td class="px-3">---</td>\n                                    <td class="px-0"></td>\n                                    <td class="px-3">---</td>\n                                    <td class="px-3 text-end">---</td>\n                                    <td class="px-3 text-end">---</td>\n                                    <td class="px-3 text-end">---</td>\n                                </tr>\n                            </tbody>\n                            <tbody id="desktop-invoice-item-tbody" class="border-top-0" ng-show="ctrl.racun.stavke.length > 0">\n                                <tr\n                                  ng-if="ctrl.racun.stavke.length > 0"\n                                  ng-click="ctrl.editInvoiceItem($index)"\n                                  ng-repeat="stavka in ctrl.racun.stavke">\n                                    <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                        <div class="px-3">{{ stavka.kolicina }}</div>\n                                    </td>\n                                    <td class="px-0 w-1 text-center" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                        x\n                                    </td>\n                                    <td class="px-0 text-wrap" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                        <div class="px-3">{{ stavka.magacin_zaliha.artikal.naziv }}</div>\n                                    </td>\n                                    <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                        <div class="px-3">{{ stavka.rabat_procenat }}</div>\n                                    </td>\n                                    <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                        <div class="px-3">{{ stavka.rabat_iznos_prodajni }}</div>\n                                    </td>\n                                    <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                        <div class="px-3">{{ stavka.ukupna_cijena_prodajna }}</div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <div class="row g-3">\n                <div class="col-4">\n                    <div\n                      class="d-flex align-items-center justify-content-between bg-white rounded border h-100 px-3 fw-bold fs-5">\n                        <div>UKUPNO</div>\n                        <div>{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</div>\n                    </div>\n                </div>\n                <div class="col-3">\n                    <button\n                      type="button"\n                      class="btn w-100 px-3 py-2 h-100"\n                      ng-click="ctrl.fisModal.invoiceBuyerSelectModal(ctrl.racun)"\n                      style="overflow: hidden; text-overflow: ellipsis;"\n                      ng-class="{ \'btn-light border\': !ctrl.racun.komitent_id, \'btn-warning-light border-warning\': ctrl.racun.komitent_id }">\n                        <div><i class="fa fa-user"></i> Kupac</div>\n                        <div ng-if="!ctrl.racun.komitent_id">------</div>\n                        <div ng-if="ctrl.racun.komitent_id">\n                            {{ ctrl.racun.komitent.naziv }}\n                        </div>\n                    </button>\n                </div>\n                <div class="col-5">\n                    <div class="d-flex justify-content-end gap-3 h-100">\n                        <button type="button" class="btn btn-success flex-grow-1 py-3" ng-click="ctrl.upis(1)">\n                            <i class="fa fa-money"></i>\n                            Gotovina\n                        </button>\n                        <button type="button" class="btn btn-success flex-grow-1 py-3" ng-click="ctrl.upis(2)">\n                            <i class="fa fa-credit-card"></i>\n                            Kartica\n                        </button>\n                        <button type="button" class="btn btn-success flex-grow-1 py-3" ng-click="ctrl.upis(8)">\n                            <i class="fa fa-file"></i>\n                            Virman\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="position-absolute top-navbar left-0 w-100 h-no-navbar d-none py-4" style="max-height: 600px;">\n    <div\n        style="z-index: 1000;"\n        class="position-absolute top-0 start-0 w-100 h-100 d-none d-lg-block pe-none"\n        ng-class="{ \'d-lg-none\': !ctrl.typeaheadDesktopState.isOpen && !ctrl.typeaheadDesktopState.isLoading }">\n        <div class="h-100 d-flex flex-column">\n            <div class="container h-100 d-flex flex-column">\n                <div class="pt-4" ></div>\n                <div style="min-height: 51px;"></div>\n                <div class="pt-4" ></div>\n                <div class="flex-grow-1 overflow-y-hidden position-relative bg-white rounded border">\n                    <div\n                        class="text-center"\n                        ng-show="ctrl.typeaheadDesktopState.isLoading">\n                        <div class="mt-5"></div>\n                        <div class="spinner-border spinner-lg"></div>\n                    </div>\n                    <div class="h-100" ng-show="ctrl.typeaheadDesktopState.isOpen && !ctrl.typeaheadDesktopState.isLoading">\n                        <div id="desktop-invoice-item-template-container" class="pe-auto h-100"></div>\n                    </div>\n                </div>\n                <div class="pt-4" ></div>\n            </div>\n        </div>\n    </div>\n    <div class="container-lg h-100">\n        <div class="d-flex flex-column h-100">\n            <invoice-item-typeahead\n                typeahead-popup-classes="\'position-static top-0 start-0 overflow-y-scroll h-100 border-0\'"\n                typeahead-append-to="\'#desktop-invoice-item-template-container\'"\n                typeahead-on-loading-change="ctrl.updateTypeaheadDesktopState({ isLoading: isLoading })"\n                typeahead-on-focus-change="ctrl.updateTypeaheadDesktopState({ isFocused: isFocused })"\n                typeahead-on-open-change="ctrl.updateTypeaheadDesktopState({ isOpen: isOpen })"\n                on-add="ctrl.addInvoiceItem($data, $eventType)">\n            </invoice-item-typeahead>\n            <div class="mt-4"></div>\n            <div id="desktop-invoice-item-scroll-container" class="card overflow-y-auto h-100" fis-on-overflow="ctrl.hasOverflow = hasOverflow">\n                <div class="card-body p-0">\n                    <table class="table text-nowrap m-0">\n                        <thead>\n                        <tr>\n                            <th class="px-0 w-1 text-end">\n                                <div class="px-3">Kol.</div>\n                            </th>\n                            <th class="px-0 w-1 text-center">\n                            </th>\n                            <th class="px-0">\n                                <div class="px-3">Artikal</div>\n                            </th>\n                            <th class="px-0 w-1">\n                                <div class="px-3">Popust %</div>\n                            </th>\n                            <th class="px-0 w-1">\n                                <div class="px-3">Popust</div>\n                            </th>\n                            <th class="px-0 w-1">\n                                <div class="px-3">Za uplatu</div>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody class="border-top-0" ng-show="ctrl.racun.stavke.length == 0">\n                        <tr>\n                            <td class="px-3">---</td>\n                            <td class="px-0"></td>\n                            <td class="px-3">---</td>\n                            <td class="px-3 text-end">---</td>\n                            <td class="px-3 text-end">---</td>\n                            <td class="px-3 text-end">---</td>\n                        </tr>\n                        </tbody>\n                        <tbody id="desktop-invoice-item-tbody" class="border-top-0" ng-show="ctrl.racun.stavke.length > 0">\n                        <tr\n                            ng-if="ctrl.racun.stavke.length > 0"\n                            ng-click="ctrl.editInvoiceItem($index)"\n                            ng-repeat="stavka in ctrl.racun.stavke">\n                            <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                <div class="px-3">{{ stavka.kolicina }}</div>\n                            </td>\n                            <td class="px-0 w-1 text-center" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                x\n                            </td>\n                            <td class="px-0 text-wrap" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                <div class="px-3">{{ stavka.magacin_zaliha.artikal.naziv }}</div>\n                            </td>\n                            <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                <div class="px-3">{{ stavka.rabat_procenat }}</div>\n                            </td>\n                            <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                <div class="px-3">{{ stavka.rabat_iznos_prodajni }}</div>\n                            </td>\n                            <td class="px-0 w-1 text-end" ng-class="{ \'border-bottom-0\': $last && ctrl.hasOverflow }">\n                                <div class="px-3">{{ stavka.ukupna_cijena_prodajna }}</div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class="mt-4"></div>\n            <div class="row g-3">\n                <div class="col-4">\n                    <div\n                        class="d-flex align-items-center justify-content-between bg-white rounded border h-100 px-3 fw-bold fs-5">\n                        <div>UKUPNO</div>\n                        <div>{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</div>\n                    </div>\n                </div>\n                <div class="col-3">\n                    <button\n                        type="button"\n                        class="btn w-100 px-3 py-2 h-100"\n                        ng-click="ctrl.fisModal.invoiceBuyerSelectModal(ctrl.racun)"\n                        style="overflow: hidden; text-overflow: ellipsis;"\n                        ng-class="{ \'btn-light border\': !ctrl.racun.komitent_id, \'btn-warning-light border-warning\': ctrl.racun.komitent_id }">\n                        <div><i class="fa fa-user"></i> Kupac</div>\n                        <div ng-if="!ctrl.racun.komitent_id">------</div>\n                        <div ng-if="ctrl.racun.komitent_id">\n                            {{ ctrl.racun.komitent.naziv }}\n                        </div>\n                    </button>\n                </div>\n                <div class="col-5">\n                    <div class="d-flex justify-content-end gap-3 h-100">\n                        <button type="button" class="btn btn-success flex-grow-1 py-3" ng-click="ctrl.upis(1)">\n                            <i class="fa fa-money"></i>\n                            Gotovina\n                        </button>\n                        <button type="button" class="btn btn-success flex-grow-1 py-3" ng-click="ctrl.upis(2)">\n                            <i class="fa fa-credit-card"></i>\n                            Kartica\n                        </button>\n                        <button type="button" class="btn btn-success flex-grow-1 py-3" ng-click="ctrl.upis(8)">\n                            <i class="fa fa-file"></i>\n                            Virman\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Mobile Start -->\n<div class="h-100 d-lg-none d-flex flex-column">\n    <div class="bg-white position-relative">\n        <div class="px-3 py-2 position-relative bg-white border-bottom">\n            <div class="row align-items-center">\n                <div class="col-6">\n                    <div class="fs-3 fw-bold text-uppercase">\n                        UKUPNO\n                    </div>\n                </div>\n                <div class="col-6 text-end">\n                    <div class="fs-1 fw-bold">{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <invoice-item-typeahead\n        class="position-relative border-0 rounded-0 border-bottom"\n        is-rounded="false"\n        typeahead-popup-classes="\'position-static top-0 start-0 border-0 border-top border-bottom rounded-0\'"\n        typeahead-append-to="\'#mobile-invoice-item-template-container\'"\n        typeahead-on-focus-change="ctrl.updateTypeaheadMobileState({ isFocused: isFocused })"\n        typeahead-on-loading-change="ctrl.updateTypeaheadMobileState({ isLoading: isLoading })"\n        typeahead-on-open-change="ctrl.updateTypeaheadMobileState({ isOpen: isOpen })"\n        on-add="ctrl.addInvoiceItem($data, $eventType)">\n    </invoice-item-typeahead>\n    <div\n        class="flex-grow-1 flex-basis-0 overflow-y-scroll"\n        ng-show="ctrl.typeaheadMobileState.isOpen">\n        <div\n            class="text-center"\n            ng-show="ctrl.typeaheadMobileState.isLoading">\n            <div class="mt-5"></div>\n            <div class="spinner-border spinner-lg"></div>\n        </div>\n        <div ng-show="ctrl.typeaheadMobileState.isOpen && !ctrl.typeaheadMobileState.isLoading">\n            <div class="mt-4"></div>\n            <div id="mobile-invoice-item-template-container"></div>\n            <div class="mt-4"></div>\n        </div>\n    </div>\n    <div\n        id="mobile-invoice-item-scroll-container"\n        class="flex-grow-1 position-relative overflow-y-scroll flex-basis-0"\n        style="background-color: #f1f2f4;"\n        ng-show="!ctrl.typeaheadMobileState.isOpen">\n        <div class="mt-4"></div>\n        <table class="table mb-0">\n            <tbody id="mobile-invoice-item-tbody">\n            <tr class="bg-white" ng-repeat="stavka in ctrl.racun.stavke" ng-click="ctrl.editInvoiceItem($index)">\n                <td class="py-3 ps-3 pe-0 w-1 text-end text-nowrap">{{ stavka.kolicina }} x</td>\n                <td class="p-3">{{ stavka.magacin_zaliha.artikal.naziv }}</td>\n                <td class="py-3 ps-0 pe-3 w-1 text-end text-nowrap">\n                    {{ stavka.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class="mt-4"></div>\n    </div>\n    <div\n        ng-init="moreOptions = false"\n        ng-show="!ctrl.typeaheadMobileState.isOpen">\n        <div class="px-2 pt-2 border-top bg-white ng_animate__slide_in_up__slide_out_down" ng-show="moreOptions">\n            <div class="row g-2">\n                <div class="col-8">\n                    <button\n                        type="button"\n                        class="text-center btn flex-grow-1 py-2 w-100 lh-base"\n                        style="overflow: hidden; text-overflow: ellipsis;"\n                        ng-class="{\'btn-light border\': !ctrl.racun.komitent_id, \'btn-warning-light border-warning\': ctrl.racun.komitent_id}"\n                        ng-click="ctrl.fisModal.invoiceBuyerSelectModal(ctrl.racun)">\n                        <div><i class="fa fa-user"></i> Kupac</div>\n                        <div ng-if="!ctrl.racun.komitent_id">------</div>\n                        <div ng-if="ctrl.racun.komitent_id">\n                            {{ ctrl.racun.komitent.naziv }}\n                        </div>\n                    </button>\n                </div>\n                <div class="col-4">\n                    <button\n                        type="button"\n                        class="text-center btn btn-success flex-grow-1 py-2 w-100 lh-base"\n                        ng-click="ctrl.upis(8)">\n                        <div><i class="fa fa-file"></i></div>\n                        <div>Virman</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class="p-2 bg-white position-relative" style="z-index: 20;" ng-class="{ \'border-top\': !moreOptions }">\n            <div class="row g-2">\n                <div class="col-4">\n                    <button\n                        type="button"\n                        class="text-center btn btn-success flex-grow-1 py-2 w-100 lh-base"\n                        ng-click="ctrl.upis(1)">\n                        <div><i class="fa fa-money"></i></div>\n                        <div>Gotovina</div>\n                    </button>\n                </div>\n                <div class="col-4">\n                    <button\n                        type="button"\n                        class="text-center btn btn-success flex-grow-1 py-2 w-100 lh-base"\n                        ng-click="ctrl.upis(2)">\n                        <div><i class="fa fa-credit-card"></i></div>\n                        <div>Kartica</div>\n                    </button>\n                </div>\n                <div class="col-4">\n                    <button\n                        type="button"\n                        class="text-center btn btn-dark flex-grow-1 py-2 w-100 lh-base"\n                        data-bs-toggle="collapse"\n                        ng-click="moreOptions = !moreOptions">\n                        <div><i class="fa fa-ellipsis-h"></i></div>\n                        <div>Jo\u0161</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- Mobile End -->');
$templateCache.put('app/views/faktura-korekcija/faktura-korekcija.template.html','<div class="container-lg">\n    <div class="mt-3" ng-form="innerForm" novalidate ng-repeat="stavka in ctrl.updated_invoice.stavke">\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Stavka #{{ $index + 1 }}</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-md-12">\n                        <div class="form-group">\n                            <label for="item-{{$index}}-naziv" class="form-label">\n                                Naziv\n                            </label>\n                            <input id="item-{{$index}}-naziv"\n                                   type="text"\n                                   class="form-control"\n                                   ng-model="stavka.naziv"\n                                   disabled>\n                        </div>\n                    </div>\n                    <div class="col-6 col-md-2">\n                        <label for="item-{{$index}}-porez-procenat" class="form-label">\n                            Stopa poreza\n                        </label>\n                        <input id="item-{{$index}}-porez-procenat"\n                               type="text"\n                               class="form-control"\n                               value="{{ stavka.porez_procenat === undefined || stavka.porez_procenat === null ? \'Oslobo\u0111eno\' : stavka.porez_procenat + \'%\' }}"\n                               disabled>\n                    </div>\n                    <div class="col-6 col-md-2">\n                        <label for="item-{{$index}}-rabat-procenat" class="form-label">\n                            Popust %\n                        </label>\n                        <input id="item-{{$index}}-rabat-procenat"\n                               type="text"\n                               class="form-control"\n                               value="{{ stavka.rabat_procenat }}"\n                               disabled>\n                    </div>\n                    <div class="col-md-4">\n                        <label for="item-{{$index}}-jedinica" class="form-label">\n                            Jedinica mjere\n                        </label>\n                        <input id="item-{{$index}}-jedinica"\n                               type="text"\n                               class="form-control"\n                               value="{{ stavka.jedinica_mjere.naziv }} - {{ stavka.jedinica_mjere.opis }}"\n                               disabled>\n                    </div>\n                </div>\n                <div class="row g-3 d-none">\n                    <div class="col-sm-4 col-md-4 col-lg-3">\n                        <label for="stavka-{{$index}}-kolicina" class="form-label">\n                            Nova koli\u010Dina\n                        </label>\n                        <div class="input-group">\n                            <input id="stavka-{{$index}}-kolicina"\n                                   type="number"\n                                   class="form-control"\n                                   ng-model="stavka.kolicina"\n                                   ng-model-options="{ allowInvalid: true }"\n                                   ng-change="ctrl.onQuantityChange($index)">\n                        </div>\n                    </div>\n                    <div class="col-sm-4 col-md-4 col-lg-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="stavka-{{$index}}-ukupna-cijena-prodajna" class="form-label">\n                            Osnovica\n                        </label>\n                        <input id="stavka-{{$index}}-ukupna-cijena-prodajna"\n                               type="number"\n                               class="form-control"\n                               ng-disabled="stavka.izvor_kalkulacije != 1"\n                               ng-model="stavka.jedinicna_cijena_osnovna"\n                               ng-model-options="{ allowInvalid: true }"\n                               ng-change="ctrl.onPriceChange()">\n                    </div>\n                    <div class="col-sm-4 col-md-4 col-lg-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="stavka-{{$index}}-ukupna-cijena-prodajna-razlika" class="form-label">\n                            Cijena sa porezom\n                        </label>\n                        <input id="stavka-{{$index}}-ukupna-cijena-prodajna-razlika"\n                               type="number"\n                               class="form-control"\n                               ng-model="stavka.jedinicna_cijena_puna"\n                               ng-change="ctrl.onPriceChange()"\n                               ng-disabled="stavka.izvor_kalkulacije != 2">\n                    </div>\n                    <div class="col-sm-4 col-md-4 col-lg-3" ng-if="stavka.porez_procenat === undefined || stavka.porez_procenat === null">\n                        <label for="stavka-{{$index}}-tax-free-amount" class="form-label">\n                            Cijena\n                        </label>\n                        <input id="stavka-{{$index}}-tax-free-amount"\n                               type="number"\n                               class="form-control"\n                               ng-model="stavka.tax_exemption_amount"\n                               ng-model-options="{ allowInvalid: true }"\n                               ng-change="ctrl.onPriceChange($index)">\n                    </div>\n                </div>\n            </div>\n            <div class="card-body">\n                <div class="fw-bold text-uppercase">Trenutno stanje</div>\n                <div class="row g-3">\n                    <div class="col-md-3">\n                        <label for="item-{{$index}}-original-quantity" class="form-label">\n                            Koli\u010Dina\n                        </label>\n                        <input id="item-{{$index}}-original-quantity"\n                               type="number"\n                               class="form-control"\n                               ng-model="ctrl.original_invoice.stavke[$index].kolicina"\n                               disabled\n                               ng-model-options="{ allowInvalid: true }">\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat === undefined || stavka.porez_procenat === null">\n                        <label for="item-{{$index}}-tax-exemption-amount" class="form-label">\n                            Cijena\n                        </label>\n                        <input id="item-{{$index}}-tax-exemption-amount"\n                               type="number"\n                               class="form-control"\n                               ng-model="ctrl.original_invoice.stavke[$index].tax_exemption_amount"\n                               disabled>\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="item-{{$index}}-original-price" class="form-label">\n                            Osnovica\n                        </label>\n                        <input id="item-{{$index}}-original-price"\n                               type="number"\n                               class="form-control"\n                               ng-model="ctrl.original_invoice.stavke[$index].jedinicna_cijena_osnovna"\n                               disabled>\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="item-{{$index}}-jedinicna-cijena-puna" class="form-label">\n                            Cijena sa porezom\n                        </label>\n                        <input id="item-{{$index}}-jedinicna-cijena-puna"\n                               type="number"\n                               class="form-control"\n                               ng-model="ctrl.original_invoice.stavke[$index].jedinicna_cijena_puna"\n                               disabled>\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="item-{{$index}}-ukupna-cijena-prodajna" class="form-label">\n                            Za uplatu\n                        </label>\n                        <input id="item-{{$index}}-ukupna-cijena-prodajna"\n                               type="number"\n                               class="form-control"\n                               ng-model="ctrl.original_invoice.stavke[$index].ukupna_cijena_prodajna"\n                               disabled>\n                    </div>\n                </div>\n            </div>\n            <div class="card-body">\n                <div class="fw-bold text-uppercase">Novo stanje</div>\n                <div class="row g-3">\n                    <div class="col-md-3">\n                        <label for="item-{{$index}}-kolicina" class="form-label">\n                            Koli\u010Dina\n                        </label>\n                        <input id="item-{{$index}}-kolicina"\n                               type="number"\n                               class="form-control"\n                               ng-model="stavka.kolicina"\n                               ng-model-options="{ allowInvalid: true }"\n                               ng-change="ctrl.onInvoiceCorrection()">\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat === undefined || stavka.porez_procenat === null">\n                        <label for="item-{{$index}}-tax-free-amount" class="form-label">\n                            Cijena\n                        </label>\n                        <input id="item-{{$index}}-tax-free-amount"\n                               type="number"\n                               class="form-control"\n                               ng-model="stavka.tax_exemption_amount"\n                               ng-model-options="{ allowInvalid: true }"\n                               ng-change="ctrl.onInvoiceCorrection()">\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="item-{{$index}}-jedinicna-cijena-prodajna" class="form-label">\n                            Osnovica\n                        </label>\n                        <input id="item-{{$index}}-jedinicna-cijena-prodajna"\n                               type="number"\n                               class="form-control"\n                               ng-disabled="stavka.izvor_kalkulacije != 1"\n                               ng-model="stavka.jedinicna_cijena_osnovna"\n                               ng-model-options="{ allowInvalid: true }"\n                               ng-change="ctrl.onInvoiceCorrection()">\n                    </div>\n                    <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                        <label for="item-{{$index}}-jedicna-cijena-puna" class="form-label">\n                            Cijena sa porezom\n                        </label>\n                        <input id="item-{{$index}}-jedicna-cijena-puna"\n                               type="number"\n                               class="form-control"\n                               ng-model="stavka.jedinicna_cijena_puna"\n                               ng-change="ctrl.onInvoiceCorrection()"\n                               ng-disabled="stavka.izvor_kalkulacije != 2">\n                    </div>\n                    <div class="col-md-3">\n                        <label for="item-{{$index}}-za-uplatu" class="form-label">\n                            Za uplatu\n                        </label>\n                        <input id="item-{{$index}}-za-uplatu"\n                               type="number"\n                               class="form-control"\n                               ng-model="stavka.ukupna_cijena_prodajna"\n                               disabled>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="mt-4"></div>\n    <div class="card">\n        <div class="card-header">\n            <div class="fw-bold text-uppercase">Na\u010Dini pla\u0107anja</div>\n        </div>\n        <div class="card-body">\n            <div class="row g-3">\n                <div class="col-md-4">\n                    <label for="" class="form-label">Tip ra\u010Duna</label>\n                    <div class="btn-group w-100">\n                        <button type="button"\n                                class="btn"\n                                ng-class="{ \'btn-primary\': ctrl.updated_invoice.is_cash, \'btn-light border\': !ctrl.updated_invoice.is_cash }"\n                                ng-model="ctrl.updated_invoice.is_cash"\n                                uib-btn-radio="true"\n                                disabled>\n                            Gotovinski\n                        </button>\n                        <button type="button"\n                                class="btn"\n                                ng-class="{ \'btn-primary\': !ctrl.updated_invoice.is_cash, \'btn-light border\': ctrl.updated_invoice.is_cash }"\n                                ng-model="ctrl.updated_invoice.is_cash"\n                                uib-btn-radio="false"\n                                disabled>\n                            Bezgotovinski\n                        </button>\n                    </div>\n                </div>\n                <div class="col-md-8">\n                    <label for="" class="form-label">Odabir na\u010Dina pla\u0107anja</label>\n                    <div class="position-relative">\n                        <payment-method-typeahead is-cash="ctrl.updated_invoice.is_cash" on-select="ctrl.onPaymentMethodTypeaheadSelect($item, $model, $label)"></payment-method-typeahead>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="card-body" data-ng-if="ctrl.corrective_invoice.payment_methods.length === 0">\n            <div class="card card-body bg-light text-muted">\n                Nije definisan nijedan na\u010Din pla\u0107anja.\n            </div>\n        </div>\n        <div class="card-body" ng-repeat="payment_method in ctrl.corrective_invoice.payment_methods" data-ng-if="ctrl.corrective_invoice.payment_methods.length > 0">\n            <div ng-form="innerForm" novalidate>\n                <label for="" class="form-label">\n                    {{ payment_method.payment_method_type.description }}\n                </label>\n                <div class="row g-3">\n                    <div class="col-7 col-sm-5 col-md-4 col-xl-3">\n                        <input type="number"\n                               class="form-control"\n                               name="amount"\n                               ng-model="payment_method.amount"\n                               required\n                               ng-min="0.0001"\n                               ng-disabled="payment_method.payment_method_type_id === 7"\n                               ng-model-options="{ allowInvalid: true }"\n                               ng-change="ctrl.invoiceFactory.recalculatePaymentMethodTotals(ctrl.corrective_invoice, false);">\n                        <div ng-messages="innerForm.amount.$error" role="alert" class="invalid-feedback">\n                            <div ng-message="min" ng-if="payment_method.payment_method_type_id === 7">\n                                Vrijednost mora biti ve\u0107a od 0. Korigujte stavke avansa.\n                            </div>\n                            <div ng-message="min" ng-if="payment_method.payment_method_type_id === 7">\n                                Vrijednost mora biti ve\u0107a od 0. A\u017Eurirajte vrijednost ili obri\u0161ite stavku.\n                            </div>\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-5 col-sm-3 col-md-3 col-xl-2" ng-if="payment_method.payment_method_type_id !== 7">\n                        <button type="button" class="btn btn-light border d-block w-100" data-ng-click="ctrl.fisModal.deletePaymentMethod(ctrl.corrective_invoice, $index);">\n                            <i class="fa fa-trash"></i> Obri\u0161i\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="card-body">\n            <label for="" class="form-label">\n                Ukupan iznos ra\u010Duna\n            </label>\n            <div class="row g-3">\n                <div class="col-7 col-sm-5 col-md-4 col-xl-3">\n                    <input type="text" class="form-control"\n                           disabled\n                           ng-model="ctrl.corrective_invoice.ukupna_cijena_prodajna">\n                    <div ng-messages="ctrl.form.datumValute.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-5 col-sm-3 col-md-3 col-xl-2">\n                    <button type="button"\n                            class="btn btn-light border w-100 d-block"\n                            data-ng-click="ctrl.fisModal.distributeTotalEvenly(ctrl.corrective_invoice, ctrl.updated_invoice);">\n                        Rasporedi\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class="card-body" ng-if="ctrl.corrective_invoice.payment_methods_total_difference > 0">\n            <label for="" class="form-label">\n                Neraspore\u0111eni iznos ra\u010Duna\n            </label>\n            <div class="row g-3">\n                <div class="col-7 col-sm-5 col-md-4 col-xl-3">\n                    <input type="number" class="form-control show-validation"\n                           disabled\n                           max="0"\n                           ng-model="ctrl.corrective_invoice.payment_methods_total_difference">\n                </div>\n                <div class="col-5 col-sm-3 col-md-3 col-xl-2">\n                    <button type="button" class="btn btn-light border w-100 d-block" data-ng-click="ctrl.fisModal.distributeDifferenceEvenly(ctrl.corrective_invoice, ctrl.updated_invoice);">\n                        Rasporedi\n                    </button>\n                </div>\n            </div>\n            <div class="invalid-feedback show-validation ng-active">\n                Iznosi u na\u010Dinima pla\u0107anja su zbirno manji od ukupne cijene ra\u010Duna.\n            </div>\n        </div>\n        <div class="card-body" ng-if="ctrl.corrective_invoice.payment_methods_total_difference < 0">\n            <label for="" class="form-label">\n                Vi\u0161ak\n            </label>\n            <div class="row g-3">\n                <div class="col-7 col-sm-5 col-md-4 col-xl-3">\n                    <input type="number" class="form-control show-validation"\n                           disabled\n                           min="0"\n                           ng-model="ctrl.corrective_invoice.payment_methods_total_difference">\n                </div>\n            </div>\n            <div class="invalid-feedback show-validation ng-active">\n                Iznosi u na\u010Dinima pla\u0107anja su zbirno ve\u0107i od ukupne cijene ra\u010Duna.\n            </div>\n        </div>\n        <div class="card-body d-md-none">\n            <button type="button" class="btn btn-primary border w-100 w-md-auto"\n                    data-ng-click="ctrl.fisModal.addPaymentMethods(ctrl.corrective_invoice, ctrl.updated_invoice);">\n                Odaberi na\u010Dine pla\u0107anja\n            </button>\n        </div>\n    </div>\n</div>\n<div class="container-lg mt-3">\n    <div class="d-flex flex-column-reverse flex-md-row justify-content-xs-end">\n        <button type="button" class="btn btn-light border flex-grow-1 flex-xs-grow-0" ui-sref="faktura_pregled_redovnih()">\n            Odustani\n        </button>\n        <div class="me-2 mt-2"></div>\n        <button type="button" class="btn btn-primary flex-grow-1 flex-xs-grow-0" ng-click="ctrl.koriguj()">\n            Fiskalizuj\n        </button>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/faktura-pregled-avansa/faktura-pregled-avansa.template.html','<div class="container py-3">\n    <div class="alert alert-primary" ng-if="ctrl.stranica.total_items > ctrl.stranica.ukupan_broj_stavki">\n        {{ ctrl.stranica.ukupan_broj_stavki }} od {{ ctrl.stranica.total_items }} ra\u010Duna odgovara filterima.\n        <a href="#" ng-click="ctrl.ponistiPretragu($event);">Kliknite ili pritisnite ovdje da poni\u0161tite filtere.</a>\n    </div>\n    <div class="row g-3">\n        <div class="col-2 d-none">\n            <a class="btn btn-primary w-100" ui-sref="regularInvoiceInput">\n                <i class="fa fa-plus"></i> Dodaj\n            </a>\n        </div>\n        <div class="col-4 col-md-2">\n            <button type="button" class="btn btn-light border w-100" ng-click="ctrl.areFiltersVisible = !ctrl.areFiltersVisible">\n                <i class="fa" ng-class="{ \'fa-eye\': !ctrl.areFiltersVisible, \'fa-eye-slash\': ctrl.areFiltersVisible }"></i> Filteri\n            </button>\n        </div>\n        <div class="col-8 col-md-4">\n            <div class="btn-group w-100">\n                <div class="btn border"\n                     ng-click="ctrl.setViewType(\'grid\')"\n                     ng-class="{ \'text-primary btn-white\': ctrl.viewType === \'grid\', \'text-muted btn-light\': ctrl.viewType !== \'grid\' }">\n                    <i class="fa fa-th-large"></i> Kartice\n                </div>\n                <div class="btn border"\n                     ng-click="ctrl.setViewType(\'table\')"\n                     ng-class="{ \'text-primary btn-white\': ctrl.viewType === \'table\', \'text-muted btn-light\': ctrl.viewType !== \'table\' }">\n                    <i class="fa fa-table"></i> Tabela\n                </div>\n            </div>\n        </div>\n        <div class="col-12 col-md-6" ng-show="ctrl.stranica.ukupan_broj_stavki > 0">\n            <fis-pagination\n                class="justify-content-end"\n                data-current-page="ctrl.broj_stranice"\n                data-page-data="ctrl.stranica"\n                data-on-page-change="ctrl.promijeniStranicu()">\n            </fis-pagination>\n        </div>\n    </div>\n\n    <div\n        class="mt-3"\n        ng-show="ctrl.stranica.ukupan_broj_stavki === 0">\n        <div class="card card-body">\n            Ne postoji ra\u010Dun koji odgovara kriterijumima pretrage.\n        </div>\n    </div>\n\n    <invoice-filter-form\n        class="mt-3"\n        data-filters="ctrl.filters"\n        data-on-confirm="ctrl.applyFilters();"\n        data-on-close="ctrl.areFiltersVisible = false"\n        data-on-buyer-select="ctrl.applyFilters();"\n        ng-show="ctrl.areFiltersVisible">\n    </invoice-filter-form>\n\n    <div class="card card-body table-responsive mt-3" ng-if="ctrl.viewType === \'table\' && ctrl.stranica.stavke.length > 0">\n        <table class="table text-nowrap bg-white">\n            <thead>\n            <tr>\n                <th class="w-1">Fiskalni broj</th>\n                <th class="w-1">Tip</th>\n                <th class="w-1">Vrijeme</th>\n                <th class="w-1 text-end">Cijena</th>\n                <th class="w-1 text-end">Porez</th>\n                <th class="w-1">Na\u010Din pla\u0107anja</th>\n                <th class="w-1">Kupac</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat="racun in ctrl.stranica.stavke">\n                <td class="w-1">\n                    <span class="text-nowrap">{{ racun.efi_broj_fakture }}</span>\n                </td>\n                <td class="w-1">\n                    <invoice-badges invoice="racun"></invoice-badges>\n                </td>\n                <td class="w-1">{{ racun.datumfakture | fisFormatDatetime }}</td>\n                <td class="w-1 text-end">\n                    <div ng-if="racun.tip_fakture_id !== 1">\n                        {{ racun.ukupna_cijena_prodajna }}\n                    </div>\n                    <div ng-if="racun.tip_fakture_id === 1">\n                        <div ng-if="racun.je_korigovana">\n                            <span class="text-decoration-line-through">{{ racun.ukupna_cijena_prodajna }}</span>\n                        </div>\n                        <div>\n                            <span>{{ racun.korigovana_ukupna_cijena_prodajna }}</span>\n                        </div>\n                    </div>\n                </td>\n                <td class="w-1 text-end">\n                    <div ng-if="racun.tip_fakture_id !== 1">\n                        {{ racun.porez_iznos }}\n                    </div>\n                    <div ng-if="racun.tip_fakture_id === 1">\n                        <div ng-if="racun.je_korigovana">\n                            <span class="text-decoration-line-through">{{ racun.porez_iznos }}</span>\n                        </div>\n                        <div>\n                            <span>{{ racun.korigovani_porez_iznos }}</span>\n                        </div>\n                    </div>\n                </td>\n                <td class="w-1">\n                    <div ng-repeat="payment_method in racun.payment_methods">\n                        {{ payment_method.payment_method_type.description }}\n                    </div>\n                </td>\n                <td class="w-1">\n                    <div>{{ racun.komitent.naziv }}</div>\n                    <div ng-if="racun.komitent.napomena !== undefined && racun.komitent.napomena !== null && racun.komitent.napomena.length > 0">\n                        <div><small class="text-danger">Napomena:</small></div>\n                        <div>{{ racun.komitent.napomena }}</div>\n                    </div>\n                </td>\n                <td>\n                    <a href="#" class="btn border-secondary" ui-sref="faktura-korekcija({ id: racun.id })" ng-show="racun.tip_fakture_id === 1 && racun.status === 2">\n                        <i class="fa fa-edit"></i>\n                    </a>\n                    <button class="btn border-secondary" ng-click="ctrl.storniraj($index)" ng-show="racun.tip_fakture_id === 1 && racun.status === 2 && racun.korigovana_ukupna_cijena_prodajna !== 0">\n                        <i class="fa fa-remove"></i>\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.stampac.stampajFakturu(racun.id, \'a4\')">\n                        A4\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.stampac.stampajFakturu(racun.id, \'58mm\')" style="text-transform: none;">\n                        58mm\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.posaljiMail(racun.id)" ng-if="$root.fisConfig.user.firma.settings.smtp_active && racun.komitent_id && racun.komitent.email">\n                        <i class="fa fa-envelope"></i>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <div class="mt-3" ng-if="ctrl.viewType === \'grid\' && ctrl.stranica.stavke.length > 0">\n        <div class="row g-4">\n            <div class="col-12 col-md-6 col-xl-4" ng-repeat="racun in ctrl.stranica.stavke">\n                <invoice-card invoice="racun"></invoice-card>\n            </div>\n        </div>\n    </div>\n\n    <div class="mt-4" ng-show="ctrl.stranica.ukupan_broj_stavki > 0">\n        <fis-pagination\n            class="justify-content-end"\n            data-current-page="ctrl.broj_stranice"\n            data-page-data="ctrl.stranica"\n            data-on-page-change="ctrl.promijeniStranicu()">\n        </fis-pagination>\n    </div>\n\n    <div class="alert alert-primary mt-3" ng-if="ctrl.stranica.total_items > ctrl.stranica.ukupan_broj_stavki">\n        <div>\n            {{ ctrl.stranica.ukupan_broj_stavki }} od {{ ctrl.stranica.total_items }} ra\u010Duna odgovara filterima.\n            <a href="#" ng-click="ctrl.ponistiPretragu($event);">Kliknite ili pritisnite ovdje da poni\u0161tite filtere.</a>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/faktura-konacni-racun/faktura-konacni-racun.template.html','<div class="container-lg mt-3">\n    <form name="ctrl.form" novalidate>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Osnovni podaci</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-valute" class="form-label">Datum valute</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup\n                                   is-open="datumValuteIsOpen"\n                                   name="datumValute"\n                                   id="faktura-datum-valute"\n                                   ng-model="ctrl.racun.datumvalute"\n                                   ng-required="true"\n                                   pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button type="button" class="btn btn-light border" ng-click="datumValuteIsOpen = !datumValuteIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datumValute.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-poreski-period" class="form-label">Poreski period</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup="MM/yyyy"\n                                   is-open="poreskiPeriodIsOpen"\n                                   name="poreski_period"\n                                   id="faktura-poreski-period"\n                                   datepicker-options="{ datepickerMode: \'month\', minMode: \'month\' }"\n                                   ng-model="ctrl.racun.poreski_period"\n                                   ng-required="true"\n                                   pattern="((0[1-9])|(1[0-2]))\\/(\\d{4})">\n                            <button type="button" class="btn btn-light border" ng-click="poreskiPeriodIsOpen = !poreskiPeriodIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.poreski_period.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-prometa" class="form-label">Datum prometa</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup\n                                   is-open="datumPrometaIsOpen"\n                                   name="datum_prometa"\n                                   id="faktura-datum-prometa"\n                                   ng-model="ctrl.racun.datum_prometa"\n                                   ng-required="true"\n                                   pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button type="button" class="btn btn-light border" ng-click="datumPrometaIsOpen = !datumPrometaIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datum_prometa.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Valuta i kurs razmjene</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-8 col-xl-4">\n                        <label for="faktura-valuta-id" class="form-label">Valuta</label>\n                        <ui-select id="faktura-valuta-id"\n                                   name="valuta_id"\n                                   theme="select2"\n                                   search-enabled="true"\n                                   ng-model="ctrl.racun.valuta_id"\n                                   ng-required="true"\n                                   ng-change="ctrl.onCurrencyChange()">\n                            <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="$select.selected.naziv_me"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.id as item in (ctrl.valute | filter: $select.search) track by item.id">\n                                <span ng-bind="item.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="item.naziv_me"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.form.valuta_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-kurs-razmjene" class="form-label">Kurs razmjene</label>\n                        <input type="number"\n                               inputmode="decimal"\n                               class="form-control"\n                               name="kurs_razmjene"\n                               ng-disabled="ctrl.racun.valuta_id === 50"\n                               id="faktura-kurs-razmjene"\n                               ng-model="ctrl.racun.kurs_razmjene"\n                               ng-required="true"\n                               min="0.000001"\n                               step="0.000001">\n                        <div class="text-muted small mt-1" ng-if="ctrl.racun.valuta.iso_4217_alfanumericki_kod !== \'EUR\'">1 {{ ctrl.racun.valuta.iso_4217_alfanumericki_kod }} u EUR</div>\n                        <div ng-messages="ctrl.form.kurs_razmjene.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Kupac</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12">\n                        <invoice-buyer-picker\n                            data-invoice="ctrl.racun"\n                            name="komitent_id"\n                            ng-disabled="ctrl.updated_advance_invoice !== undefined"\n                            ng-model="ctrl.racun.komitent_id"\n                            ng-required="!ctrl.racun.is_cash">\n\n                            <div ng-messages="ctrl.form.komitent_id.$error" role="alert" class="invalid-feedback">\n                                <div ng-message="nepotpuno">\n                                    Podaci kupca su nepotpuni.\n                                </div>\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </invoice-buyer-picker>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n        <div ng-repeat="stavka in ctrl.racun.stavke track by $index">\n            <div class="position-relative">\n                <div id="invoice-item-{{ $index }}" style="position: absolute; top: -20px;"></div>\n            </div>\n            <div ng-form="innerForm" novalidate>\n                <input type="hidden" ng-model="stavka.izvor_kalkulacije" required>\n                <div class="mt-4"></div>\n                <div class="card">\n                    <div class="card-header">\n                        <div class="fw-bold text-uppercase">Stavka #{{ $index + 1 }}</div>\n                        <div ng-if="stavka.advance_invoice_item_index >= 0">\n                            <span class="badge bg-primary">kopirana sa avansa</span>\n                        </div>\n                    </div>\n                    <div class="card-body">\n                        <div class="row g-3">\n                            <div class="col-12 col-lg-4">\n                                <label class="form-label">Tip unosa</label>\n                                <div class="btn-group w-100">\n                                    <button type="button"\n                                            class="btn"\n                                            ng-class="{ \'btn-primary\': stavka.tipUnosa === \'slobodan_unos\', \'btn-light border\': stavka.tipUnosa !== \'slobodan_unos\' }"\n                                            ng-model="stavka.tipUnosa"\n                                            uib-btn-radio="\'slobodan_unos\'"\n                                            ng-disabled="stavka.isDisabled"\n                                            ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Slobodan unos\n                                    </button>\n                                    <button type="button"\n                                            class="btn"\n                                            ng-class="{ \'btn-primary\': stavka.tipUnosa === \'po_artiklu\', \'btn-light border\': stavka.tipUnosa !== \'po_artiklu\' }"\n                                            ng-model="stavka.tipUnosa"\n                                            uib-btn-radio="\'po_artiklu\'"\n                                            ng-disabled="stavka.isDisabled"\n                                            ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Po artiklu\n                                    </button>\n                                </div>\n                            </div>\n                            <div class="col-12 col-lg-8">\n                                <div ng-if="stavka.tipUnosa === \'slobodan_unos\'">\n                                    <label for="stavka-naziv-{{ $index }}" class="form-label">Naziv artikla ili usluge</label>\n                                    <textarea type="text" class="form-control"\n                                              name="naziv"\n                                              id="stavka-naziv-{{ $index }}"\n                                              fis-textarea-resize\n                                              ng-model="stavka.naziv"\n                                              ng-required="true"\n                                              ng-minlength="1"\n                                              ng-disabled="stavka.isDisabled">\n                                </textarea>\n                                    <div ng-messages="innerForm.naziv.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div ng-if="stavka.tipUnosa === \'po_artiklu\'">\n                                    <div id="invoice-item-template-dropdown-{{ $index }}" class="position-relative">\n                                        <label for="stavka-artikal" class="form-label">Odaberite artikal</label>\n                                        <input id="stavka-artikal"\n                                               type="text"\n                                               name="nazivTextarea"\n                                               class="form-control"\n                                               uib-typeahead="stavkaLagera as stavkaLagera.artikal.naziv for stavkaLagera in ctrl.getStavkeLagera($viewValue)"\n                                               typeahead-template-url="app/views/faktura-konacni-racun/invoice-item-template-popup.template.html"\n                                               typeahead-focus-first="false"\n                                               typeahead-loading="isLoading"\n                                               typeahead-min-length="0"\n                                               typeahead-focus-on-select="false"\n                                               typeahead-wait-ms="300"\n                                               typeahead-on-select="ctrl.onInvoiceItemTemplateSelect($index, $item, $model, $label)"\n                                               typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n                                               ng-model="stavka.query"\n                                               ng-required="true"\n                                               data-ng-disabled="stavka.isDisabled"\n                                               ng-focus="ctrl.onFocusItemTemplateSearch($index)"\n                                               ng-blur="ctrl.onBlurItemTemplateSearch($index)"\n                                               ng-class="{ \'is-invalid\': (innerForm.$submitted || innerForm.nazivTextarea.$dirty) && innerForm.nazivTextarea.$invalid }">\n                                        <div ng-messages="innerForm.nazivTextarea.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="mt-3"></div>\n                        <div class="row g-3">\n                            <div class="col-12 col-md-4">\n                                <label for="stavka-pdv-{{ $index }}" class="form-label">Stopa poreza</label>\n                                <ui-select id="stavka-pdv-{{ $index }}"\n                                           name="porez_procenat"\n                                           ng-model="stavka.porez_procenat"\n                                           search-enabled="false"\n                                           required\n                                           theme="select2"\n                                           ng-disabled="stavka.isDisabled"\n                                           ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka)">\n                                    <ui-select-match>\n                                        <span ng-bind="$select.selected.label"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.procenat as item in ctrl.poreskeStope">\n                                        <span ng-bind="item.label"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.porez_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-amount-{{ $index }}" class="form-label">\n                                    Iznos\n                                </label>\n                                <input type="number" inputmode="decimal"\n                                       class="form-control"\n                                       name="tax_exemption_amount"\n                                       id="stavka-tax-exemption-amount-{{ $index }}"\n                                       ng-model="stavka.tax_exemption_amount"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="stavka.porez_procenat === null"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="{{ stavka.porez_procenat === null ? 0.0001 : 0 }}"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.tax_exemption_amount.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-reason-id-{{ $index }}" class="form-label">Razlog oslobo\u0111enja poreza</label>\n                                <ui-select id="stavka-tax-exemption-reason-id-{{ $index }}"\n                                           name="tax_exemption_reason_id"\n                                           ng-model="stavka.tax_exemption_reason_id"\n                                           ng-required="stavka.porez_procenat === null"\n                                           ng-disabled="stavka.isDisabled"\n                                           theme="select2"\n                                           data-search-enabled="false"\n                                           ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();">\n                                    <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.description"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.tax_exemption_reasons | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.description"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.tax_exemption_reason_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-cijena-{{ $index }}" class="form-label">\n                                    Osnovica\n                                </label>\n                                <input type="number" inputmode="decimal"\n                                       class="form-control"\n                                       name="jedinicna_cijena_osnovna"\n                                       id="stavka-cijena-{{ $index }}"\n                                       ng-model="stavka.jedinicna_cijena_osnovna"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPB(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0.0001"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-jedinicna-cijena-puna-{{ $index }}" class="form-label">\n                                    Cijena sa porezom\n                                </label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       name="jedinicna_cijena_puna"\n                                       id="stavka-jedinicna-cijena-puna-{{ $index }}"\n                                       ng-model="stavka.jedinicna_cijena_puna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPA(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0.0001"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-kolicina-{{ $index }}" class="form-label">Koli\u010Dina</label>\n                                <input type="number"\n                                       inputmode="numeric"\n                                       class="form-control"\n                                       id="stavka-kolicina-{{ $index }}"\n                                       name="kolicina"\n                                       ng-model="stavka.kolicina"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onInvoiceItemQuantityChange($index); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       min="0.001"\n                                       ng-max="stavka.advance_invoice_item_index >= 0 ? ctrl.original_advance_invoice.stavke[$index].kolicina : undefined"\n                                       step="0.001">\n                                <div ng-messages="innerForm.kolicina.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-jedinica-mjere-id" class="form-label">Jedinica mjere</label>\n                                <ui-select id="stavka-jedinica-mjere-id"\n                                           name="jedinica_mjere_id"\n                                           ng-model="stavka.jedinica_mjere_id"\n                                           ng-disabled="stavka.isDisabled"\n                                           theme="select2"\n                                           search-enabled="true"\n                                           required>\n                                    <ui-select-match placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.naziv"></span>\n                                        -\n                                        <span ng-bind="$select.selected.opis"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.jediniceMjere | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.naziv"></span>\n                                        -\n                                        <span ng-bind="item.opis"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.jedinica_mjere_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-rabat-{{ $index }}" class="form-label">Popust %</label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       id="stavka-rabat-{{ $index }}"\n                                       name="rabat_procenat"\n                                       ng-model="stavka.rabat_procenat"\n                                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0"\n                                       max="100"\n                                       step="0.01">\n                                <div ng-messages="innerForm.rabat_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-cijena-sa-pdv-{{ $index }}" class="form-label">Za uplatu</label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       id="stavka-cijena-sa-pdv-{{ $index }}"\n                                       name="ukupna_cijena_prodajna"\n                                       ng-model="stavka.ukupna_cijena_prodajna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       disabled\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       min="0.0001"\n                                       step="0.0001"\n                                       ng-max="stavka.ukupna_cijena_puna">\n                                <div ng-messages="innerForm.ukupna_cijena_prodajna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="card-footer">\n                        <div class="text-center d-flex flex-column-reverse flex-md-row justify-content-end">\n                            <button type="button" class="btn btn-light border" ng-click="ctrl.deleteInvoiceItem($index)">\n                                <i class="fa fa-trash"></i> Obri\u0161i\n                            </button>\n                            <div class="me-2 mt-2"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="text-end mt-3">\n            <button type="button" class="btn btn-primary" ng-click="ctrl.addInvoiceItem()">\n                <i class="fa fa-plus"></i> Dodaj slede\u0107u stavku\n            </button>\n        </div>\n\n        <div ng-if="ctrl.updated_advance_invoice">\n            <div class="mt-4"></div>\n            <div ng-form="innerForm">\n                <div class="card" ng-class="{ \'mt-3\': !$first }" ng-repeat="stavka in ctrl.updated_advance_invoice.stavke">\n                    <div class="card-header">\n                        <div class="fw-bold text-uppercase">Korekcija avansa - Stavka #{{ $index + 1 }}</div>\n                    </div>\n                    <div class="card-body">\n                        <div class="row g-3">\n                            <div class="col-md-12">\n                                <div class="form-group">\n                                    <label for="advance-invoice-item-naziv" class="form-label">\n                                        Naziv\n                                    </label>\n                                    <input id="advance-invoice-item-naziv"\n                                           type="text"\n                                           class="form-control"\n                                           ng-model="stavka.naziv"\n                                           disabled>\n                                </div>\n                            </div>\n                            <div class="col-6 col-md-2">\n                                <label for="advance-invoice-item-porez-procenat" class="form-label">\n                                    Stopa poreza\n                                </label>\n                                <input id="advance-invoice-item-porez-procenat"\n                                       type="text"\n                                       class="form-control"\n                                       value="{{ stavka.porez_procenat === undefined || stavka.porez_procenat === null ? \'Oslobo\u0111eno\' : stavka.porez_procenat + \'%\' }}"\n                                       disabled>\n                            </div>\n                            <div class="col-6 col-md-2">\n                                <label for="advance-invoice-item-rabat-procenat" class="form-label">\n                                    Popust %\n                                </label>\n                                <input id="advance-invoice-item-rabat-procenat"\n                                       type="text"\n                                       class="form-control"\n                                       value="{{ stavka.rabat_procenat }}"\n                                       disabled>\n                            </div>\n                            <div class="col-md-4">\n                                <label for="advance-invoice-item-jedinica" class="form-label">\n                                    Jedinica mjere\n                                </label>\n                                <input id="advance-invoice-item-jedinica"\n                                       type="text"\n                                       class="form-control"\n                                       value="{{ stavka.jedinica_mjere.naziv }} - {{ stavka.jedinica_mjere.opis }}"\n                                       disabled>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="card-body">\n                        <div class="fw-bold text-uppercase">Trenutno stanje</div>\n                        <div class="row g-3">\n                            <div class="col-md-3">\n                                <label for="advance-invoice-item-original-quantity" class="form-label">\n                                    Koli\u010Dina\n                                </label>\n                                <input id="advance-invoice-item-original-quantity"\n                                       type="number"\n                                       class="form-control"\n                                       ng-model="ctrl.original_advance_invoice.stavke[$index].kolicina"\n                                       disabled\n                                       ng-model-options="{ allowInvalid: true }">\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat === undefined || stavka.porez_procenat === null">\n                                <label for="advance-invoice-item-tax-exemption-amount" class="form-label">\n                                    Cijena\n                                </label>\n                                <input id="advance-invoice-item-tax-exemption-amount"\n                                       type="number"\n                                       class="form-control"\n                                       ng-model="ctrl.original_advance_invoice.stavke[$index].tax_exemption_amount"\n                                       disabled>\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                                <label for="advance-invoice-item-original-price" class="form-label">\n                                    Osnovica\n                                </label>\n                                <input id="advance-invoice-item-original-price"\n                                       type="number"\n                                       class="form-control"\n                                       ng-model="ctrl.original_advance_invoice.stavke[$index].jedinicna_cijena_osnovna"\n                                       disabled>\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                                <label for="advance-invoice-item-jedinicna-cijena-puna" class="form-label">\n                                    Cijena sa porezom\n                                </label>\n                                <input id="advance-invoice-item-jedinicna-cijena-puna"\n                                       type="number"\n                                       class="form-control"\n                                       ng-model="ctrl.original_advance_invoice.stavke[$index].jedinicna_cijena_puna"\n                                       disabled>\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                                <label for="advance-invoice-item-ukupna-cijena-prodajna" class="form-label">\n                                    Za uplatu\n                                </label>\n                                <input id="advance-invoice-item-ukupna-cijena-prodajna"\n                                       type="number"\n                                       class="form-control"\n                                       ng-model="ctrl.original_advance_invoice.stavke[$index].ukupna_cijena_prodajna"\n                                       disabled>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="card-body">\n                        <div class="fw-bold text-uppercase">Novo stanje</div>\n                        <div class="row g-3">\n                            <div class="col-md-3">\n                                <label for="advance-invoice-item-kolicina" class="form-label">\n                                    Koli\u010Dina\n                                </label>\n                                <input id="advance-invoice-item-kolicina"\n                                       type="number"\n                                       class="form-control"\n                                       name="advance_invoice_item_kolicina"\n                                       ng-model="stavka.kolicina"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onAdvanceInvoiceCorrection()"\n                                       ng-max="ctrl.original_advance_invoice.stavke[$index].kolicina">\n                                <div ng-messages="innerForm.advance_invoice_item_kolicina.$error" role="alert" class="invalid-feedback">\n                                    <div ng-message="max">\n                                        Vrijednost ne smije biti ve\u0107a od trenutne na fakturi.\n                                    </div>\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat === undefined || stavka.porez_procenat === null">\n                                <label for="advance-invoice-item-tax-free-amount" class="form-label">\n                                    Cijena\n                                </label>\n                                <input id="advance-invoice-item-tax-free-amount"\n                                       type="number"\n                                       class="form-control"\n                                       name="advance_invoice_item_tax_free_amount"\n                                       ng-model="stavka.tax_exemption_amount"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onAdvanceInvoiceCorrection()"\n                                       ng-max="ctrl.original_advance_invoice.stavke[$index].tax_free_amount">\n                                <div ng-messages="innerForm.advance_invoice_item_tax_free_amount.$error" role="alert" class="invalid-feedback">\n                                    <div ng-message="max">\n                                        Vrijednost ne smije biti ve\u0107a od trenutne na fakturi.\n                                    </div>\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                                <label for="advance-invoice-item-jedinicna-cijena-prodajna" class="form-label">\n                                    Osnovica\n                                </label>\n                                <input id="advance-invoice-item-jedinicna-cijena-prodajna"\n                                       type="number"\n                                       class="form-control"\n                                       name="advance_invoice_item_jedinicna_cijena_prodajna"\n                                       ng-model="stavka.jedinicna_cijena_osnovna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onAdvanceInvoiceCorrection()"\n                                       ng-max="ctrl.original_advance_invoice.stavke[$index].jedinicna_cijena_prodajna"\n                                       ng-disabled="stavka.izvor_kalkulacije != 1">\n                                <div ng-messages="innerForm.advance_invoice_item_jedinicna_cijena_prodajna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-message="max">\n                                        Vrijednost ne smije biti ve\u0107a od trenutne na fakturi.\n                                    </div>\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-md-3" ng-if="stavka.porez_procenat !== undefined && stavka.porez_procenat !== null">\n                                <label for="advance-invoice-item-jedicna-cijena-puna" class="form-label">\n                                    Cijena sa porezom\n                                </label>\n                                <input id="advance-invoice-item-jedicna-cijena-puna"\n                                       type="number"\n                                       class="form-control"\n                                       name="advance_invoice_item_jedicna_cijena_puna"\n                                       ng-model="stavka.jedinicna_cijena_puna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onAdvanceInvoiceCorrection()"\n                                       ng-max="ctrl.original_advance_invoice.stavke[$index].jedinicna_cijena_puna"\n                                       ng-disabled="stavka.izvor_kalkulacije != 2">\n                                <div ng-messages="innerForm.advance_invoice_item_jedicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-message="max">\n                                        Vrijednost ne smije biti ve\u0107a od trenutne na fakturi.\n                                    </div>\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-md-3">\n                                <label for="advance-invoice-item-za-uplatu" class="form-label">\n                                    Za uplatu\n                                </label>\n                                <input id="advance-invoice-item-za-uplatu"\n                                       type="number"\n                                       class="form-control"\n                                       ng-model="stavka.ukupna_cijena_prodajna"\n                                       disabled>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Na\u010Dini pla\u0107anja</div>\n            </div>\n            <div class="px-3 pt-3 d-none d-md-block">\n                <div class="row">\n                    <div ng-class="{ \'col-md-6\': ctrl.updated_advance_invoice, \'col-12\': !ctrl.updated_advance_invoice }">\n                        <label class="form-label" for="invoice-payment-method-type">\n                            Na\u010Din pla\u0107anja\n                        </label>\n                    </div>\n                    <div class="col-md-6" ng-if="ctrl.updated_advance_invoice">\n                        <label class="form-label" form="invoice-payment-method">\n                            Iznos\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class="pb-3 d-md-none"></div>\n                <div class="px-3 pb-3">\n                    <div class="row g-3">\n                        <div ng-class="{ \'col-md-6\': ctrl.updated_advance_invoice, \'col-12\': !ctrl.updated_advance_invoice }">\n                            <label class="form-label d-md-none" for="primary-payment-method-type">\n                                Na\u010Din pla\u0107anja\n                            </label>\n                            <ui-select id="primary-payment-method-type"\n                                       name="invoice_payment_method"\n                                       theme="select2"\n                                       search-enabled="true"\n                                       ng-model="ctrl.primary_payment_method.payment_method_type_id"\n                                       ng-required="true"\n                                       ng-change="ctrl.setPaymentMethod();">\n                                <ui-select-match placeholder="&nbsp;">\n                                    {{ $select.selected.description }}\n                                </ui-select-match>\n                                <ui-select-choices repeat="payment_method_type.id as payment_method_type in (ctrl.payment_method_types | filter: $select.search) track by payment_method_type.id">\n                                    {{ payment_method_type.description }}\n                                </ui-select-choices>\n                            </ui-select>\n                        </div>\n                        <div class="col-md-6" ng-if="ctrl.updated_advance_invoice">\n                            <label class="form-label d-md-none" form="invoice-payment-method">\n                                Iznos\n                            </label>\n                            <input type="text"\n                                   class="form-control"\n                                   ng-required="!ctrl.updated_advance_invoice"\n                                   ng-model="ctrl.primary_payment_method.amount"\n                                   disabled>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div ng-if="ctrl.updated_advance_invoice">\n                <div class="border-top d-md-none"></div>\n                <div class="pb-3 d-md-none"></div>\n                <div class="px-3 pb-3">\n                    <div class="row g-3">\n                        <div class="col-md-6">\n                            <label class="form-label d-md-none" for="advance-payment-method-type">\n                                Na\u010Din pla\u0107anja\n                            </label>\n                            <input type="text"\n                                   id="advance-payment-method-type"\n                                   class="form-control"\n                                   ng-model="ctrl.advance_payment_method.payment_method_type.description"\n                                   disabled>\n                        </div>\n                        <div class="col-md-6">\n                            <label class="form-label d-md-none" form="invoice-payment-method">\n                                Iznos\n                            </label>\n                            <input type="text"\n                                   class="form-control"\n                                   ng-model="ctrl.advance_payment_method.amount"\n                                   disabled>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Napomena</div>\n            </div>\n            <textarea name="napomena"\n                      id="napomena"\n                      rows="5"\n                      class="form-control border-0"\n                      ng-model="ctrl.racun.napomena"\n                      style="min-height: 80px;"\n                      fis-textarea-resize>\n            </textarea>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Za uplatu</div>\n            </div>\n            <div class="card-body">\n                <div class="text-nowrap text-end">\n                    <span class="fs-1">{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</span>\n                    <span>{{ $root.currency }}</span>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-3"></div>\n        <div class="d-flex flex-column-reverse flex-md-row justify-content-end gap-2">\n            <button\n                type="button"\n                class="btn btn-light border"\n                ui-sref="faktura_pregled_redovnih()">\n                <i class="fa fa-close"></i> Odustani\n            </button>\n            <button\n                type="button"\n                class="btn btn-primary"\n                ng-click="ctrl.createInvoice()">\n                Fiskalizuj\n            </button>\n        </div>\n    </form>\n</div>\n\n<div class="scroll-buffer-large"></div>\n');
$templateCache.put('app/views/faktura-konacni-racun/invoice-item-template-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n        <div class="d-flex justify-content-between align-items-center fs-5">\n            <div>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.sifra">\n                    \u0160ifra <span ng-bind-html="match.model.artikal.sifra | uibTypeaheadHighlight:query"></span>\n                </span>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.barkod">\n                    Barkod <span ng-bind-html="match.model.artikal.barkod | uibTypeaheadHighlight:query"></span>\n                </span>\n            </div>\n            <div>\n                <span class="badge bg-light border text-dark">\n                    {{ match.model.jedinicna_cijena_puna }} EUR\n                </span>\n            </div>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/views/dospjela-faktura-pregled/dospjela-faktura-pregled.template.html','<div class="py-3 py-sm-5">\n    <div class="container-lg">\n        <p>U nastavku mo\u017Eete preuzeti dospjele ra\u010Dune</p>\n        <p>\n            <a ng-href="/api/customer/firma/dospjela_faktura/{{dospjela_faktura.id}}/dokument/listaj" ng-repeat="dospjela_faktura in ctrl.dospjele_fakture">\n                {{ dospjela_faktura.opis }}\n            </a>\n        </p>\n    </div>\n</div>');
$templateCache.put('app/views/faktura-unos-po-grupama/faktura-unos-po-grupama.template.html','<div class="d-flex h-100">\n    <div class="d-none d-lg-block flex-grow-1 h-100">\n        <div ng-if="ctrl.odabrana_grupa === undefined" class="d-flex flex-column h-100">\n            <div class="bg-white border-bottom d-flex justify-content-between">\n                <div>\n                    <button class="btn btn-primary-light py-3 px-4 rounded-0 fw-bold">\n                        Sve grupe\n                    </button>\n                </div>\n                <div class="d-flex">\n                    <div class="dropdown">\n                        <button type="button" class="btn btn-light py-3 px-4 rounded-0 border-start" data-bs-toggle="dropdown" aria-expanded="false">\n                            <i class="fa fa-bars"></i> {{ ctrl.grupaArtikalaGrid.rowNum }}\n                        </button>\n                        <ul class="dropdown-menu">\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 3); $event.preventDefault();">3 reda</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 4); $event.preventDefault();">4 reda</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 5); $event.preventDefault();">5 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 6); $event.preventDefault();">6 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 8); $event.preventDefault();">8 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 10); $event.preventDefault();">10 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, ctrl.grupaArtikalaGrid.colNum, 12); $event.preventDefault();">12 redova</a></li>\n                        </ul>\n                    </div>\n                    <div class="dropdown">\n                        <button type="button" class="btn btn-light py-3 px-4 rounded-0 border-start border-end" data-bs-toggle="dropdown" aria-expanded="false">\n                            <i class="fa fa-bars fa-rotate-90"></i> {{ ctrl.grupaArtikalaGrid.colNum }}\n                        </button>\n                        <ul class="dropdown-menu">\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 3, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">3 kolone</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 4, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">4 kolone</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 5, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">5 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 6, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">6 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 8, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">8 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 10, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">10 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.grupaArtikalaGrid, 12, ctrl.grupaArtikalaGrid.rowNum); $event.preventDefault();">12 kolona</a></li>\n                        </ul>\n                    </div>\n                    <div class="ms-3"></div>\n                    <button class="btn btn-light border-start py-3 px-4 rounded-0" ng-click="ctrl.prevPage(ctrl.grupaArtikalaGrid)">\n                        <i class="fa fa-arrow-left"></i>\n                    </button>\n                    <div class="fs-5 fw-bold bg-light d-flex align-items-center justify-content-center border-start" style="width: 100px;">\n                        {{ ctrl.grupaArtikalaGrid.currentPage }}/{{ ctrl.grupaArtikalaGrid.totalPages }}\n                    </div>\n                    <button class="btn btn-light border-start py-3 px-4 rounded-0" ng-click="ctrl.nextPage(ctrl.grupaArtikalaGrid)">\n                        <i class="fa fa-arrow-right"></i>\n                    </button>\n                </div>\n            </div>\n            <div class="d-flex flex-column h-100 gap-3 m-3">\n                <div class="d-flex flex-row flex-grow-1 flex-basis-0 h-100 gap-3" ng-repeat="grupaArtikalaRow in ctrl.grupaArtikalaGrid.rows track by $index">\n                    <div class="flex-grow-1 flex-basis-0" ng-repeat="grupaArtikala in grupaArtikalaRow track by $index">\n                        <div class="card h-100" ng-if="grupaArtikala !== null" ng-click="ctrl.selectItemGroup(grupaArtikala)" ng-style="{ backgroundColor: grupaArtikala.boja }">\n                            <div class="card-body d-flex flex-column justify-content-between fw-bold">\n                                <div class="fs-5">{{ grupaArtikala.naziv }}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div ng-if="ctrl.odabrana_grupa !== undefined" class="d-flex flex-column h-100">\n            <div class="bg-white border-bottom d-flex justify-content-between align-items-center">\n                <div>\n                    <button class="btn btn-light py-3 px-4 rounded-0 fw-bold" data-ng-click="ctrl.deselectItemTemplateGroup();">\n                        Sve grupe\n                    </button>\n                    <button  class="btn btn-primary-light py-3 px-4 rounded-0 fw-bold" ng-style="{ backgroundColor: ctrl.odabrana_grupa.boja, borderColor: ctrl.odabrana_grupa.boja }">\n                        {{ ctrl.odabrana_grupa.naziv }} ({{ ctrl.artikalGrid.currentPage }}/{{ ctrl.artikalGrid.totalPages }})\n                    </button>\n                </div>\n                <div class="d-flex">\n                    <div class="dropdown">\n                        <button type="button" class="btn btn-light py-3 px-4 rounded-0 border-start" data-bs-toggle="dropdown" aria-expanded="false">\n                            <i class="fa fa-bars"></i> {{ ctrl.artikalGrid.rowNum }}\n                        </button>\n                        <ul class="dropdown-menu">\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 3); $event.preventDefault();">3 reda</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 4); $event.preventDefault();">4 reda</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 5); $event.preventDefault();">5 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 6); $event.preventDefault();">6 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 8); $event.preventDefault();">8 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 10); $event.preventDefault();">10 redova</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, ctrl.artikalGrid.colNum, 12); $event.preventDefault();">12 redova</a></li>\n                        </ul>\n                    </div>\n                    <div class="dropdown">\n                        <button type="button" class="btn btn-light py-3 px-4 rounded-0 border-start border-end" data-bs-toggle="dropdown" aria-expanded="false">\n                            <i class="fa fa-bars fa-rotate-90"></i> {{ ctrl.artikalGrid.colNum }}\n                        </button>\n                        <ul class="dropdown-menu">\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 3, ctrl.artikalGrid.rowNum); $event.preventDefault();">3 kolone</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 4, ctrl.artikalGrid.rowNum); $event.preventDefault();">4 kolone</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 5, ctrl.artikalGrid.rowNum); $event.preventDefault();">5 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 6, ctrl.artikalGrid.rowNum); $event.preventDefault();">6 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 8, ctrl.artikalGrid.rowNum); $event.preventDefault();">8 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 10, ctrl.artikalGrid.rowNum); $event.preventDefault();">10 kolona</a></li>\n                            <li><a class="dropdown-item" href="#" ng-click="ctrl.updateGridLayout(ctrl.artikalGrid, 12, ctrl.artikalGrid.rowNum); $event.preventDefault();">12 kolona</a></li>\n                        </ul>\n                    </div>\n                    <div class="ms-3"></div>\n                    <button class="btn btn-light py-3 px-4 rounded-0 border-start" ng-click="ctrl.prevPage(ctrl.artikalGrid)">\n                        <i class="fa fa-arrow-left"></i>\n                    </button>\n                    <div class="bg-light d-flex align-items-center justify-content-center border-start" style="width: 100px;">\n                        {{ ctrl.artikalGrid.currentPage }}/{{ ctrl.artikalGrid.totalPages }}\n                    </div>\n                    <button class="btn btn-light py-3 px-4 rounded-0 border-start" ng-click="ctrl.nextPage(ctrl.artikalGrid)">\n                        <i class="fa fa-arrow-right"></i>\n                    </button>\n                </div>\n            </div>\n            <div class="d-flex flex-column h-100 gap-3 m-3 overflow-y-auto">\n                <div class="d-flex flex-row flex-grow-1 flex-basis-0 h-100 gap-3" ng-repeat="red in ctrl.artikalGrid.rows track by $index">\n                    <div class="flex-grow-1 flex-basis-0" ng-repeat="zaliha in red track by $index">\n                        <div\n                            class="card h-100"\n                            ng-click="ctrl.odaberiZalihuTablet(zaliha);"\n                            ng-if="zaliha !== null">\n                            <div class="card-body flex-grow-1 rounded-top bg-white">\n                                <div class="fs-5 fw-bold" title="{{ zaliha.artikal.naziv }}">\n                                    <span ng-if="zaliha.artikal.naziv.length > 100">\n                                        {{ zaliha.artikal.naziv.substring(0, 100) }}...\n                                    </span>\n                                    <span ng-if="zaliha.artikal.naziv.length <= 100">\n                                        {{ zaliha.artikal.naziv }}\n                                    </span>\n                                </div>\n                            </div>\n                            <div class="card-body flex-grow-0">\n                                <div class="d-flex justify-content-end fs-5 fw-bold text-danger">\n                                    <div class="d-flex" ng-show="zaliha.invoiceItem !== null">\n                                        {{ zaliha.invoiceItem.kolicina }}\n                                        <div class="px-2">x</div>\n                                    </div>\n                                    <div>{{ zaliha.jedinicna_cijena_puna | fisRoundHalfUp:2 }} {{ $root.currency }}</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="p-3 flex-grow-1 d-none" style="overflow-y: auto;">\n                <div class="row g-3">\n                    <div class="col-3" ng-repeat="zaliha in ctrl.zalihe track by $index">\n                        <div class="card h-100">\n                            <div class="card-body">\n                                <div>\n                                    {{ zaliha.artikal.naziv }}\n                                </div>\n                                <div>\n                                    <b>Cijena:</b>\n                                    <span>{{ zaliha.jedinicna_cijena_puna }}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div id="unos-po-grupama-right-panel" class="h-100 border-start">\n        <div class="bg-white d-flex flex-column h-100">\n            <div class="d-flex align-items-center justify-content-between px-3" style="height: 51px; min-height: 51px;">\n                <span class="fw-bold">Prodajna cijena</span>\n                <span class="fw-bold fs-4">{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }} {{ $root.currency }} </span>\n            </div>\n            <div class="border-bottom d-none d-lg-block"></div>\n            <ul class="nav nav-tabs d-lg-none" data-bs-tabs="tabs">\n                <li class="nav-item d-lg-none">\n                    <a\n                      class="nav-link"\n                      ng-class="{ \'active\': ctrl.invoiceTab === \'product_groups_list\' }"\n                      ng-click="ctrl.invoiceTab = \'product_groups_list\'; ctrl.odabrana_grupa = undefined;">\n                        Grupe\n                    </a>\n                </li>\n                <li class="nav-item">\n                    <a\n                      class="nav-link"\n                      ng-class="{ \'active\': ctrl.invoiceTab === \'items\' }"\n                      ng-click="ctrl.invoiceTab = \'items\'">\n                        Stavke\n                    </a>\n                </li>\n                <li class="nav-item">\n                    <a\n                      class="nav-link"\n                      ng-class="{ \'active\': ctrl.invoiceTab === \'buyer\' }"\n                      ng-click="ctrl.invoiceTab = \'buyer\'">\n                        Kupac\n                    </a>\n                </li>\n            </ul>\n            <div class="flex-grow-1 flex-basis-0" style="overflow-y: auto;">\n                <div ng-if="ctrl.invoiceTab === \'product_groups_list\'">\n                    <div ng-if="ctrl.odabrana_grupa === undefined">\n                        <button\n                          type="button"\n                          class="btn btn-outline-secondary border-0 border-bottom text-start rounded-0 w-100 p-3"\n                          ng-repeat="grupa_artikala in ctrl.grupe_artikala"\n                          ng-click="ctrl.selectItemGroup(grupa_artikala); ctrl.invoiceTab = \'product_list\'">\n                            {{ grupa_artikala.naziv }}\n                        </button>\n                    </div>\n                </div>\n                <div ng-if="ctrl.invoiceTab === \'product_list\'">\n                    <div ng-if="ctrl.odabrana_grupa !== undefined">\n                        <div class="p-3 border-bottom" ng-repeat="zaliha in ctrl.zalihe">\n                            <div class="fs-5">{{ zaliha.artikal.naziv }}</div>\n                            <div class="d-flex flex-wrap">\n                                <div>\n                                    <span class="fs-5" ng-show="zaliha.invoiceItem !== null">{{ zaliha.invoiceItem.kolicina }}</span>\n                                    <span class="fs-5" ng-show="zaliha.invoiceItem === null">0</span>\n                                    <span> x </span>\n                                    <span class="fs-5">{{ zaliha.jedinicna_cijena_puna }}</span>\n                                    <span>{{ $root.currency }}</span>\n                                </div>\n                                <div class="ms-auto" ng-if="zaliha.invoiceItem !== null">\n                                    <span> = </span>\n                                    <span class="fs-5">{{ zaliha.invoiceItem.ukupna_cijena_prodajna }}</span>\n                                    <span>{{ $root.currency }}</span>\n                                </div>\n                            </div>\n                            <div class="mt-3" ng-if="zaliha.artikal.jedinica_mjere.naziv === \'kom\'">\n                                <button type="button" class="btn btn-light border" data-ng-click="ctrl.decrementQuantity(zaliha);">\n                                    <i class="fa fa-minus"></i>\n                                </button>\n                                <button type="button" class="btn btn-light border" data-ng-click="ctrl.incrementQuantity(zaliha);">\n                                    <i class="fa fa-plus"></i>\n                                </button>\n                            </div>\n                            <div class="mt-3" ng-if="zaliha.artikal.jedinica_mjere.naziv !== \'kom\'">\n                                <button type="button" class="btn btn-light border" data-ng-click="ctrl.editQuantityInNumericModal(zaliha);">\n                                    <i class="fa fa-edit"></i>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div ng-if="ctrl.invoiceTab === \'items\'">\n                    <div ng-if="ctrl.racun.stavke.length === 0">\n                        <div class="p-3">\n                            <div class="card bg-light">\n                                <div class="card-body">\n                                    Ra\u010Dun ne sadr\u017Ei nijednu stavku.\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div ng-if="ctrl.racun.stavke.length > 0">\n                        <table class="table m-0">\n                            <tbody>\n                            <tr class="bg-white" ng-repeat="stavka in ctrl.racun.stavke" ng-click="ctrl.azurirajStavku($index)">\n                                <td class="ps-4 py-3 w-1 text-end text-nowrap">{{ stavka.kolicina }} x</td>\n                                <td class="py-3">{{ stavka.magacin_zaliha.artikal.naziv }}</td>\n                                <td class="py-3 w-1 text-end text-nowrap">{{ stavka.ukupna_cijena_prodajna }} {{ $root.currency }}</td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div ng-if="ctrl.invoiceTab === \'buyer\'">\n                    <div class="p-3">\n                        <invoice-buyer-picker\n                            data-invoice="ctrl.racun"\n                            button-responsive-classes="col-6"\n                            ng-model="ctrl.racun.komitent_id">\n\n                        </invoice-buyer-picker>\n                    </div>\n                </div>\n            </div>\n            <div class="d-flex gap-3 p-3 border-top">\n                <button class="btn btn-success py-2 lh-base flex-grow-1" ng-click="ctrl.upis(1)">\n                    <div><i class="fa fa fa-money"></i></div>\n                    <div>Gotovina</div>\n                </button>\n                <button class="btn btn-success py-2 lh-base flex-grow-1" ng-click="ctrl.upis(2)">\n                    <div><i class="fa fa-credit-card"></i></div>\n                    <div>Kartica</div>\n                </button>\n                <button class="btn btn-success py-2 lh-base flex-grow-1" ng-click="ctrl.upisSaKupcem(8)">\n                    <div><i class="fa fa-file"></i></div>\n                    <div>Virman</div>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n');
$templateCache.put('app/views/faktura-pregled-redovnih/faktura-pregled-redovnih.template.html','<div class="container py-3">\n    <div class="alert alert-primary" ng-if="ctrl.stranica.total_items > ctrl.stranica.ukupan_broj_stavki">\n        {{ ctrl.stranica.ukupan_broj_stavki }} od {{ ctrl.stranica.total_items }} ra\u010Duna odgovara filterima.\n        <a href="#" ng-click="ctrl.ponistiPretragu($event);">Kliknite ili pritisnite ovdje da poni\u0161tite filtere.</a>\n    </div>\n    <div class="row g-3">\n        <div class="col-2 d-none">\n            <a class="btn btn-primary w-100" ui-sref="regularInvoiceInput">\n                <i class="fa fa-plus"></i> Dodaj\n            </a>\n        </div>\n        <div class="col-4 col-md-2">\n            <button type="button" class="btn btn-light border w-100" ng-click="ctrl.areFiltersVisible = !ctrl.areFiltersVisible">\n                <i class="fa" ng-class="{ \'fa-eye\': !ctrl.areFiltersVisible, \'fa-eye-slash\': ctrl.areFiltersVisible }"></i> Filteri\n            </button>\n        </div>\n        <div class="col-8 col-md-4">\n            <div class="btn-group w-100">\n                <div class="btn border"\n                     ng-click="ctrl.setViewType(\'grid\')"\n                     ng-class="{ \'text-primary btn-white\': ctrl.viewType === \'grid\', \'text-muted btn-light\': ctrl.viewType !== \'grid\' }">\n                    <i class="fa fa-th-large"></i> Kartice\n                </div>\n                <div class="btn border"\n                     ng-click="ctrl.setViewType(\'table\')"\n                     ng-class="{ \'text-primary btn-white\': ctrl.viewType === \'table\', \'text-muted btn-light\': ctrl.viewType !== \'table\' }">\n                    <i class="fa fa-table"></i> Tabela\n                </div>\n            </div>\n        </div>\n        <div class="col-12 col-md-6" ng-if="ctrl.stranica.ukupan_broj_stavki > ctrl.stranica.broj_stavki_po_stranici">\n            <fis-pagination\n                class="justify-content-end"\n                data-current-page="ctrl.broj_stranice"\n                data-page-data="ctrl.stranica"\n                data-on-page-change="ctrl.promijeniStranicu()">\n            </fis-pagination>\n        </div>\n    </div>\n\n    <div\n        class="mt-3"\n        ng-show="ctrl.stranica.ukupan_broj_stavki === 0">\n        <div class="card card-body">\n            Ne postoji ra\u010Dun koji odgovara kriterijumima pretrage.\n        </div>\n    </div>\n\n    <invoice-filter-form\n        class="mt-3"\n        data-filters="ctrl.filters"\n        data-on-confirm="ctrl.applyFilters();"\n        data-on-close="ctrl.areFiltersVisible = false"\n        data-on-buyer-select="ctrl.applyFilters();"\n        ng-show="ctrl.areFiltersVisible">\n    </invoice-filter-form>\n\n    <div class="card card-body table-responsive mt-3" ng-if="ctrl.viewType === \'table\' && ctrl.stranica.stavke.length > 0">\n        <table class="table text-nowrap bg-white">\n            <thead>\n            <tr>\n                <th class="w-1">Fiskalni broj</th>\n                <th class="w-1">Tip</th>\n                <th class="w-1">Vrijeme</th>\n                <th class="w-1 text-end">Cijena</th>\n                <th class="w-1 text-end">Porez</th>\n                <th class="w-1">Na\u010Din pla\u0107anja</th>\n                <th class="w-1">Kupac</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat="racun in ctrl.stranica.stavke">\n                <td class="w-1">\n                    <span class="text-nowrap">{{ racun.efi_broj_fakture }}</span>\n                </td>\n                <td class="w-1">\n                    <invoice-badges invoice="racun"></invoice-badges>\n                </td>\n                <td class="w-1">{{ racun.datumfakture | fisFormatDatetime }}</td>\n                <td class="w-1 text-end">\n                    <div ng-if="racun.tip_fakture_id !== 1">\n                        {{ racun.ukupna_cijena_prodajna }}\n                    </div>\n                    <div ng-if="racun.tip_fakture_id === 1">\n                        <div ng-if="racun.je_korigovana">\n                            <span class="text-decoration-line-through">{{ racun.ukupna_cijena_prodajna }}</span>\n                        </div>\n                        <div>\n                            <span>{{ racun.korigovana_ukupna_cijena_prodajna }}</span>\n                        </div>\n                    </div>\n                </td>\n                <td class="w-1 text-end">\n                    <div ng-if="racun.tip_fakture_id !== 1">\n                        {{ racun.porez_iznos }}\n                    </div>\n                    <div ng-if="racun.tip_fakture_id === 1">\n                        <div ng-if="racun.je_korigovana">\n                            <span class="text-decoration-line-through">{{ racun.porez_iznos }}</span>\n                        </div>\n                        <div>\n                            <span>{{ racun.korigovani_porez_iznos }}</span>\n                        </div>\n                    </div>\n                </td>\n                <td class="w-1">\n                    <div ng-repeat="payment_method in racun.payment_methods">\n                        {{ payment_method.payment_method_type.description }}\n                    </div>\n                </td>\n                <td class="w-1">\n                    <div>{{ racun.komitent.naziv }}</div>\n                    <div ng-if="racun.komitent.napomena !== undefined && racun.komitent.napomena !== null && racun.komitent.napomena.length > 0">\n                        <div><small class="text-danger">Napomena:</small></div>\n                        <div>{{ racun.komitent.napomena }}</div>\n                    </div>\n                </td>\n                <td>\n                    <a href="#" class="btn border-secondary" ui-sref="faktura-korekcija({ id: racun.id })" ng-show="racun.tip_fakture_id === 1 && racun.status === 2">\n                        <i class="fa fa-edit"></i>\n                    </a>\n                    <button class="btn border-secondary" ng-click="ctrl.storniraj($index)" ng-show="racun.tip_fakture_id === 1 && racun.status === 2 && racun.korigovana_ukupna_cijena_prodajna !== 0">\n                        <i class="fa fa-remove"></i>\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.stampac.stampajFakturu(racun.id, \'a4\')">\n                        A4\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.stampac.stampajFakturu(racun.id, \'58mm\')" style="text-transform: none;">\n                        58mm\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.posaljiMail(racun.id)" ng-if="$root.fisConfig.user.firma.settings.smtp_active && racun.komitent_id && racun.komitent.email">\n                        <i class="fa fa-envelope"></i>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <div class="mt-3" ng-if="ctrl.viewType === \'grid\' && ctrl.stranica.stavke.length > 0">\n        <div class="row g-4">\n            <div class="col-12 col-md-6 col-xl-4" ng-repeat="racun in ctrl.stranica.stavke">\n                <invoice-card invoice="racun"></invoice-card>\n            </div>\n        </div>\n    </div>\n\n    <div class="mt-4" ng-show="ctrl.stranica.ukupan_broj_stavki > 0">\n        <fis-pagination\n            class="justify-content-end"\n            data-current-page="ctrl.broj_stranice"\n            data-page-data="ctrl.stranica"\n            data-on-page-change="ctrl.promijeniStranicu()">\n        </fis-pagination>\n    </div>\n\n    <div class="alert alert-primary mt-3" ng-if="ctrl.stranica.total_items > ctrl.stranica.ukupan_broj_stavki">\n        <div>\n            {{ ctrl.stranica.ukupan_broj_stavki }} od {{ ctrl.stranica.total_items }} ra\u010Duna odgovara filterima.\n            <a href="#" ng-click="ctrl.ponistiPretragu($event);">Kliknite ili pritisnite ovdje da poni\u0161tite filtere.</a>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/firma-izmjena/firma-izmjena.template.html','<div class="py-4">\n    <div class="container-lg">\n        <div class="row">\n            <div class="col-12 col-lg-9">\n                <div class="card shadow-sm">\n                    <div class="card-header py-3">\n                        <h5 class="m-0">Logotip</h5>\n                    </div>\n                    <div class="card-body">\n                        <img ng-if="ctrl.logoUrl !== null" ng-src="{{ ctrl.logoUrl }}" alt="" class="mx-auto w-100 border rounded" style="max-width: 320px;">\n                        <div ng-if="ctrl.logoUrl === null">\n                            Logotip firme nije postavljen\n                        </div>\n                    </div>\n                    <div class="card-footer">\n                        <div class="d-flex flex-column-reverse flex-md-row">\n                            <button class="btn btn-outline-secondary" data-ng-click="ctrl.deleteLogo()">\n                                <i class="fa fa-close"></i> Ukloni\n                            </button>\n                            <div class="me-2 mt-2"></div>\n                            <button class="btn btn-outline-secondary" data-file-selection-changed="ctrl.uploadLogo(files[0])">\n                                <i class="fa fa-upload"></i> A\u017Euriraj\n                            </button>\n                            <div class="me-2 mt-2"></div>\n                            <button class="btn btn-primary" data-ng-click="ctrl.updateLogo()">Sa\u010Duvaj</button>\n                        </div>\n                    </div>\n                </div>\n                <form name="ctrl.forma" novalidate>\n                    <div class="card shadow-sm mt-4">\n                        <div class="card-header py-3">\n                            <h5 class="m-0">Podaci firme</h5>\n                        </div>\n                        <div class="card-body">\n                            <div class="row g-3">\n                                <div class="col-12 col-lg-8">\n                                    <div class="form-group">\n                                        <label for="firma-naziv" class="form-label">Naziv</label>\n                                        <input type="text" class="form-control" name="naziv" id="firma-naziv" placeholder="Naziv" ng-model="ctrl.firma.naziv" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                                        <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-lg-4">\n                                    <div class="form-group">\n                                        <label for="firma-pdvbroj" class="form-label">PDV broj</label>\n                                        <input type="text" class="form-control" name="pdvbroj" id="firma-pdvbroj" placeholder="PDV broj" ng-model="ctrl.firma.pdvbroj" ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.pdvbroj.$invalid }">\n                                        <div ng-messages="ctrl.forma.pdvbroj.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-xl-6">\n                                    <div class="form-group">\n                                        <label for="firma-adresa" class="form-label">Adresa</label>\n                                        <input type="text" class="form-control" name="adresa" id="firma-adresa" placeholder="Adresa" ng-model="ctrl.firma.adresa" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.adresa.$invalid }">\n                                        <div ng-messages="ctrl.forma.adresa.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6 col-xl-3">\n                                    <div class="form-group">\n                                        <label for="firma-grad" class="form-label">Grad</label>\n                                        <input type="text" class="form-control" name="grad" id="firma-grad" placeholder="Grad" ng-model="ctrl.firma.grad" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grad.$invalid }">\n                                        <div ng-messages="ctrl.forma.grad.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6 col-xl-3">\n                                    <div class="form-group">\n                                        <label for="firma-drzava" class="form-label">Dr\u017Eava</label>\n                                        <ui-select\n                                            name="drzava"\n                                            id="firma-drzava"\n                                            theme="select2"\n                                            required\n                                            ng-model="ctrl.firma.drzava"\n                                            ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.drzava.$invalid }">\n                                            <ui-select-match placeholder="Odaberite dr\u017Eavu">\n                                                <span ng-bind="$select.selected.drzava"></span>\n                                            </ui-select-match>\n                                            <ui-select-choices repeat="item.id as item in (ctrl.drzave | filter: $select.search) track by item.id">\n                                                <span ng-bind="item.drzava"></span>\n                                            </ui-select-choices>\n                                        </ui-select>\n                                        <div ng-messages="ctrl.forma.drzava.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-lg-4">\n                                    <div class="form-group">\n                                        <label for="firma-ziroracun" class="form-label">\u017Diro ra\u010Dun</label>\n                                        <input type="text" class="form-control" name="ziroracun" id="firma-ziroracun" placeholder="\u017Diro ra\u010Dun" ng-model="ctrl.firma.ziroracun" ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.ziroracun.$invalid }">\n                                        <div ng-messages="ctrl.forma.ziroracun.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-lg-4">\n                                    <div class="form-group">\n                                        <label for="firma-telefon" class="form-label">Telefon</label>\n                                        <input type="text" class="form-control" name="telefon" id="firma-telefon" placeholder="Telefon" ng-model="ctrl.firma.telefon" ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.telefon.$invalid }">\n                                        <div ng-messages="ctrl.forma.telefon.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-lg-4">\n                                    <div class="form-group">\n                                        <label for="firma-imejl" class="form-label">Imejl</label>\n                                        <input type="text" class="form-control" name="email" id="firma-imejl" placeholder="Imejl" ng-model="ctrl.firma.email" ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.email.$invalid }">\n                                        <div ng-messages="ctrl.forma.email.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="card-footer">\n                            <div class="d-flex flex-column-reverse flex-md-row">\n                                <button class="btn btn-primary" ng-click="ctrl.updateCompanyData()">Sa\u010Duvaj</button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                <form name="ctrl.userForm" novalidate>\n                    <div class="card shadow-sm mt-4">\n                        <div class="card-header py-3">\n                            <h5 class="m-0">Podaci operatera</h5>\n                        </div>\n                        <div class="card-body">\n                            <div class="row g-3">\n                                <div class="col-12">\n                                    <label for="user-naziv" class="form-label">Puno ime</label>\n                                    <input\n                                        id="user-naziv"\n                                        name="naziv"\n                                        type="text"\n                                        class="form-control"\n                                        readonly\n                                        ng-model="ctrl.user.ime">\n                                </div>\n                                <div class="col-12 col-md-6">\n                                    <label for="user-lozinka" class="form-label">Lozinka</label>\n                                    <input\n                                        id="user-lozinka"\n                                        name="lozinka"\n                                        type="password"\n                                        class="form-control"\n                                        ng-model="ctrl.user.lozinka"\n                                        required\n                                        ng-minlength="4">\n                                    <div ng-messages="ctrl.userForm.lozinka.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6">\n                                    <label for="user-lozinka-potvrda" class="form-label">Potvrdi lozinku</label>\n                                    <input\n                                        id="user-lozinka-potvrda"\n                                        name="lozinkaPotvrda"\n                                        type="password"\n                                        class="form-control"\n                                        ng-model="ctrl.user.lozinkaPotvrda"\n                                        required\n                                        ng-minlength="4"\n                                        fis-model-match="ctrl.user.lozinka">\n                                    <div ng-messages="ctrl.userForm.lozinkaPotvrda.$error" role="alert" class="invalid-feedback">\n                                        <div ng-message="confirm">\n                                            Lozinka i potvrda se ne podudaraju.\n                                        </div>\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="card-footer">\n                            <div class="d-flex flex-column-reverse flex-md-row gap-3">\n                                <button class="btn btn-primary" data-ng-click="ctrl.updateUser()">Sa\u010Duvaj</button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                <form name="ctrl.organisationalUnitForm" novalidate>\n                    <div class="card shadow-sm mt-4">\n                        <div class="card-header py-3">\n                            <h5 class="m-0">Podaci organizacione jedinice</h5>\n                        </div>\n                        <div class="card-body">\n                            <div class="row g-3">\n                                <div class="col-12 col-lg-8">\n                                    <div class="form-group">\n                                        <label for="organizaciona-jedinica-naziv" class="form-label">Naziv</label>\n                                        <input type="text" class="form-control" name="naziv" id="organizaciona-jedinica-naziv" placeholder="Naziv" ng-model="ctrl.organizacionaJedinica.naziv" ng-class="{ \'is-invalid\': ctrl.organisationalUnitForm.$submitted && ctrl.organisationalUnitForm.naziv.$invalid }">\n                                        <div ng-messages="ctrl.organisationalUnitForm.naziv.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-xl-6">\n                                    <div class="form-group">\n                                        <label for="organizaciona-jedinica-adresa" class="form-label">Adresa</label>\n                                        <input type="text" class="form-control" name="adresa" id="organizaciona-jedinica-adresa" placeholder="Adresa" ng-model="ctrl.organizacionaJedinica.adresa" required ng-class="{ \'is-invalid\': ctrl.organisationalUnitForm.$submitted && ctrl.organisationalUnitForm.adresa.$invalid }">\n                                        <div ng-messages="ctrl.organisationalUnitForm.adresa.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6 col-xl-3">\n                                    <div class="form-group">\n                                        <label for="organizaciona-jedinica-grad" class="form-label">Grad</label>\n                                        <input type="text" class="form-control" name="grad" id="organizaciona-jedinica-grad" placeholder="Grad" ng-model="ctrl.organizacionaJedinica.grad" required ng-class="{ \'is-invalid\': ctrl.organisationalUnitForm.$submitted && ctrl.organisationalUnitForm.grad.$invalid }">\n                                        <div ng-messages="ctrl.organisationalUnitForm.grad.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6 col-xl-3">\n                                    <div class="form-group">\n                                        <label for="organizaciona-jedinica-grad-drzava" class="form-label">Dr\u017Eava</label>\n                                        <ui-select name="drzava" id="organizaciona-jedinica-grad-drzava" ng-model="ctrl.organizacionaJedinica.drzava_id" theme="select2" search-enabled="false" required ng-class="{ \'is-invalid\': ctrl.organisationalUnitForm.$submitted && ctrl.organisationalUnitForm.drzava.$invalid }">\n                                            <ui-select-match placeholder="Odaberite dr\u017Eavu">\n                                                <span ng-bind="$select.selected.drzava"></span>\n                                            </ui-select-match>\n                                            <ui-select-choices repeat="item.id as item in (ctrl.drzave | filter: $select.search) track by item.id">\n                                                <span ng-bind="item.drzava"></span>\n                                            </ui-select-choices>\n                                        </ui-select>\n                                        <div ng-messages="ctrl.organisationalUnitForm.drzava.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="card-footer">\n                            <div class="d-flex flex-column-reverse flex-md-row">\n                                <button class="btn btn-primary" ng-click="ctrl.upisOrganizacioneJedinice()">Sa\u010Duvaj</button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                <form name="ctrl.mailSettingsForm" novalidate>\n                    <div class="card mt-4">\n                        <div class="card-header py-3">\n                            <h5 class="m-0">E-Mail pode\u0161avanja</h5>\n                        </div>\n                        <div class="card-body">\n                            <div class="col-12">\n                                <div>Slanje e-Mail-a po fakturi</div>\n                                <div class="form-text">\n                                    Kada je opcija uklju\u010Dena, na ra\u010Dunima u pregledu ra\u010Duna je vidljivo dugme za slanje kopije ra\u010Duna na e-Mail adresu klijenta, za ra\u010Dune na kojima postoji kupac i za kupce kojima je definisana e-Mail adresa. Kada je opcija isklju\u010Dena ova dugmad nisu vidljiva. Zahtijeva ispravna SMTP pode\u0161avanja u nastavku.\n                                </div>\n                                <div class="mt-3">\n                                    <button class="btn flex-grow-0" ng-class="{ \'btn-secondary\': !ctrl.mailSettings.smtp_active, \'btn-outline-secondary\': ctrl.mailSettings.smtp_active }" ng-model="ctrl.mailSettings.smtp_active" uib-btn-radio="false">Isklju\u010Deno</button>\n                                    <button class="btn flex-grow-0" ng-class="{ \'btn-primary\': ctrl.mailSettings.smtp_active, \'btn-outline-primary\': !ctrl.mailSettings.smtp_active }" ng-model="ctrl.mailSettings.smtp_active" uib-btn-radio="true">Uklju\u010Deno</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="card-body border-top">\n                            <div class="row g-3">\n                                <div class="col-12 col-md-8">\n                                    <label for="smtp_host" class="form-label">SMTP host</label>\n                                    <input id="smtp_host" name="smtp_host" type="text" class="form-control" ng-disabled="!ctrl.mailSettings.smtp_active" ng-required="ctrl.mailSettings.smtp_active" ng-model="ctrl.mailSettings.smtp_host" ng-class="{ \'is-invalid\': ctrl.mailSettingsForm.$submitted && ctrl.mailSettingsForm.smtp_host.$invalid }">\n                                    <div ng-messages="ctrl.mailSettingsForm.smtp_host.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-4">\n                                    <label for="smtp_port" class="form-label">SMTP port</label>\n                                    <input id="smtp_port" name="smtp_port" type="number" class="form-control" ng-disabled="!ctrl.mailSettings.smtp_active" ng-required="ctrl.mailSettings.smtp_active" ng-model="ctrl.mailSettings.smtp_port" ng-class="{ \'is-invalid\': ctrl.mailSettingsForm.$submitted && ctrl.mailSettingsForm.smtp_port.$invalid }">\n                                    <div ng-messages="ctrl.mailSettingsForm.smtp_port.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div class="col-12">\n                                    <label for="smtp_mail" class="form-label">E-Mail</label>\n                                    <input id="smtp_mail" name="smtp_mail" type="text" class="form-control" ng-disabled="!ctrl.mailSettings.smtp_active" ng-required="ctrl.mailSettings.smtp_active" ng-model="ctrl.mailSettings.smtp_mail" ng-class="{ \'is-invalid\': ctrl.mailSettingsForm.$submitted && ctrl.mailSettingsForm.smtp_mail.$invalid }">\n                                    <div ng-messages="ctrl.mailSettingsForm.smtp_mail.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6">\n                                    <label for="smtp_username" class="form-label">Korisni\u010Dko ime</label>\n                                    <input id="smtp_username" name="smtp_username" type="text" class="form-control" ng-disabled="!ctrl.mailSettings.smtp_active" ng-required="ctrl.mailSettings.smtp_active" ng-model="ctrl.mailSettings.smtp_username" ng-class="{ \'is-invalid\': ctrl.mailSettingsForm.$submitted && ctrl.mailSettingsForm.smtp_username.$invalid }">\n                                    <div ng-messages="ctrl.mailSettingsForm.smtp_username.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div class="col-12 col-md-6">\n                                    <label for="smtp_password" class="form-label">Lozinka</label>\n                                    <input id="smtp_password" name="smtp_password" type="password" class="form-control" ng-disabled="!ctrl.mailSettings.smtp_active" ng-required="ctrl.mailSettings.smtp_active" ng-model="ctrl.mailSettings.smtp_password" ng-class="{ \'is-invalid\': ctrl.mailSettingsForm.$submitted && ctrl.mailSettingsForm.smtp_password.$invalid }">\n                                    <div ng-messages="ctrl.mailSettingsForm.smtp_password.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="card-footer">\n                            <div class="d-flex flex-column-reverse flex-md-row">\n                                <button type="button" class="btn btn-primary" ng-click="ctrl.saveMailSettings()">Sa\u010Duvaj</button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/views/grupa-artikala-izmjena/grupa-artikala-izmjena.template.html','<form name="ctrl.forma" novalidate ng-submit="ctrl.upis();">\n    <div class="container">\n        <div class="row g-3">\n            <div class="col-12 col-md-8">\n                <label for="artikal-naziv" class="form-label">Naziv</label>\n                <input\n                    type="text"\n                    class="form-control"\n                    fis-autofocus\n                    name="naziv"\n                    id="artikal-naziv"\n                    ng-model="ctrl.grupaArtikala.naziv"\n                    required\n                    ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12 col-md-4">\n                <label for="grupa-artikala-boja" class="form-label">Boja</label>\n                <div class="dropdown">\n                    <button\n                        type="button"\n                        class="btn border w-100"\n                        data-bs-toggle="dropdown"\n                        aria-expanded="false"\n                        ng-style="{ backgroundColor: ctrl.grupaArtikala.boja ? ctrl.grupaArtikala.boja : \'#fff\' }">\n                        &nbsp;\n                    </button>\n                    <div class="dropdown-menu p-2">\n                        <div class="d-flex gap-2">\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #de6464;" ng-click="ctrl.grupaArtikala.boja = \'#de6464\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #e76f51;" ng-click="ctrl.grupaArtikala.boja = \'#e76f51\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #f69284;" ng-click="ctrl.grupaArtikala.boja = \'#f69284\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #f4a261;" ng-click="ctrl.grupaArtikala.boja = \'#f4a261\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #ffdf74;" ng-click="ctrl.grupaArtikala.boja = \'#ffdf74\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #f6dda7;" ng-click="ctrl.grupaArtikala.boja = \'#f6dda7\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #ffefad;" ng-click="ctrl.grupaArtikala.boja = \'#ffefad\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #fff384;" ng-click="ctrl.grupaArtikala.boja = \'#fff384\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #0096c7;" ng-click="ctrl.grupaArtikala.boja = \'#0096c7\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #00b2ed;" ng-click="ctrl.grupaArtikala.boja = \'#00b2ed\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #95dfe3;" ng-click="ctrl.grupaArtikala.boja = \'#95dfe3\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #a7f4ff;" ng-click="ctrl.grupaArtikala.boja = \'#a7f4ff\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #20ad6b;" ng-click="ctrl.grupaArtikala.boja = \'#20ad6b\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #00c783;" ng-click="ctrl.grupaArtikala.boja = \'#00c783\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #00ed9c;" ng-click="ctrl.grupaArtikala.boja = \'#00ed9c\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #abe997;" ng-click="ctrl.grupaArtikala.boja = \'#abe997\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #2a9d8f;" ng-click="ctrl.grupaArtikala.boja = \'#2a9d8f\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #53af8b;" ng-click="ctrl.grupaArtikala.boja = \'#53af8b\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #82a18f;" ng-click="ctrl.grupaArtikala.boja = \'#82a18f\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #a0c7b0;" ng-click="ctrl.grupaArtikala.boja = \'#a0c7b0\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #9b72e7;" ng-click="ctrl.grupaArtikala.boja = \'#9b72e7\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #bb7dff;" ng-click="ctrl.grupaArtikala.boja = \'#bb7dff\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #b19cd9;" ng-click="ctrl.grupaArtikala.boja = \'#b19cd9\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #d8bfd8;" ng-click="ctrl.grupaArtikala.boja = \'#d8bfd8\'"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="mt-4 d-flex flex-column-reverse flex-md-row gap-2">\n            <button type="button" class="btn btn-dark flex-grow-1" ui-sref="grupa-artikala-pregled-lista">\n                <i class="fa fa-close"></i> Odustani\n            </button>\n            <button type="submit" class="btn btn-success flex-grow-1">\n                <i class="fa fa-check"></i> Potvrdi unos\n            </button>\n        </div>\n    </div>\n</form>\n');
$templateCache.put('app/views/faktura-slobodan-unos-avansa/faktura-slobodan-unos-avansa.template.html','<div class="container-lg mt-3">\n    <form name="ctrl.form" novalidate>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Osnovni podaci</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-valute" class="form-label">Datum valute</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup\n                                   is-open="datumValuteIsOpen"\n                                   name="datumValute"\n                                   id="faktura-datum-valute"\n                                   ng-model="ctrl.racun.datumvalute"\n                                   ng-required="true"\n                                   pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button type="button" class="btn btn-light border" ng-click="datumValuteIsOpen = !datumValuteIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datumValute.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-poreski-period" class="form-label">Poreski period</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup="MM/yyyy"\n                                   is-open="poreskiPeriodIsOpen"\n                                   name="poreski_period"\n                                   id="faktura-poreski-period"\n                                   datepicker-options="{ datepickerMode: \'month\', minMode: \'month\' }"\n                                   ng-model="ctrl.racun.poreski_period"\n                                   ng-required="true"\n                                   pattern="((0[1-9])|(1[0-2]))\\/(\\d{4})">\n                            <button type="button" class="btn btn-light border" ng-click="poreskiPeriodIsOpen = !poreskiPeriodIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.poreski_period.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-prometa" class="form-label">Datum prometa</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup\n                                   is-open="datumPrometaIsOpen"\n                                   name="datum_prometa"\n                                   id="faktura-datum-prometa"\n                                   ng-model="ctrl.racun.datum_prometa"\n                                   ng-required="true"\n                                   pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button type="button" class="btn btn-light border" ng-click="datumPrometaIsOpen = !datumPrometaIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datum_prometa.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Valuta i kurs razmjene</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-8 col-xl-4">\n                        <label for="faktura-valuta-id" class="form-label">Valuta</label>\n                        <ui-select id="faktura-valuta-id"\n                                   name="valuta_id"\n                                   theme="select2"\n                                   search-enabled="true"\n                                   ng-model="ctrl.racun.valuta_id"\n                                   ng-required="true"\n                                   ng-change="ctrl.onCurrencyChange()">\n                            <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="$select.selected.naziv_me"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.id as item in (ctrl.valute | filter: $select.search) track by item.id">\n                                <span ng-bind="item.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="item.naziv_me"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.form.valuta_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-kurs-razmjene" class="form-label">Kurs razmjene</label>\n                        <input type="number"\n                               inputmode="decimal"\n                               class="form-control"\n                               name="kurs_razmjene"\n                               ng-disabled="ctrl.racun.valuta_id === 50"\n                               id="faktura-kurs-razmjene"\n                               ng-model="ctrl.racun.kurs_razmjene"\n                               ng-required="true"\n                               min="0.000001"\n                               step="0.000001">\n                        <div class="text-muted small mt-1" ng-if="ctrl.racun.valuta.iso_4217_alfanumericki_kod !== \'EUR\'">1 {{ ctrl.racun.valuta.iso_4217_alfanumericki_kod }} u EUR</div>\n                        <div ng-messages="ctrl.form.kurs_razmjene.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Kupac</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12">\n                        <invoice-buyer-picker\n                            data-invoice="ctrl.racun"\n                            name="komitent_id"\n                            ng-disabled="ctrl.updated_advance_invoice !== undefined"\n                            ng-model="ctrl.racun.komitent_id"\n                            ng-required="!ctrl.racun.is_cash">\n\n                            <div ng-messages="ctrl.form.komitent_id.$error" role="alert" class="invalid-feedback">\n                                <div ng-message="nepotpuno">\n                                    Podaci kupca su nepotpuni.\n                                </div>\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </invoice-buyer-picker>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n        <div ng-repeat="stavka in ctrl.racun.stavke track by $index">\n            <div class="position-relative">\n                <div id="invoice-item-{{ $index }}" style="position: absolute; top: -20px;"></div>\n            </div>\n            <div ng-form="innerForm" novalidate>\n                <input type="hidden" ng-model="stavka.izvor_kalkulacije" required>\n                <div class="mt-4"></div>\n                <div class="card">\n                    <div class="card-header">\n                        <div class="fw-bold text-uppercase">Stavka #{{ $index + 1 }}</div>\n                        <div ng-if="stavka.advance_invoice_item_index >= 0">\n                            <span class="badge bg-primary">kopirana sa avansa</span>\n                        </div>\n                    </div>\n                    <div class="card-body">\n                        <div class="row g-3">\n                            <div class="col-12 col-lg-4">\n                                <label class="form-label">Tip unosa</label>\n                                <div class="btn-group w-100">\n                                    <button type="button"\n                                            class="btn"\n                                            ng-class="{ \'btn-primary\': stavka.tipUnosa === \'slobodan_unos\', \'btn-light border\': stavka.tipUnosa !== \'slobodan_unos\' }"\n                                            ng-model="stavka.tipUnosa"\n                                            uib-btn-radio="\'slobodan_unos\'"\n                                            ng-disabled="stavka.isDisabled"\n                                            ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Slobodan unos\n                                    </button>\n                                    <button type="button"\n                                            class="btn"\n                                            ng-class="{ \'btn-primary\': stavka.tipUnosa === \'po_artiklu\', \'btn-light border\': stavka.tipUnosa !== \'po_artiklu\' }"\n                                            ng-model="stavka.tipUnosa"\n                                            uib-btn-radio="\'po_artiklu\'"\n                                            ng-disabled="stavka.isDisabled"\n                                            ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Po artiklu\n                                    </button>\n                                </div>\n                            </div>\n                            <div class="col-12 col-lg-8">\n                                <div ng-if="stavka.tipUnosa === \'slobodan_unos\'">\n                                    <label for="stavka-naziv-{{ $index }}" class="form-label">Naziv artikla ili usluge</label>\n                                    <textarea type="text" class="form-control"\n                                              name="naziv"\n                                              id="stavka-naziv-{{ $index }}"\n                                              fis-textarea-resize\n                                              ng-model="stavka.naziv"\n                                              ng-required="true"\n                                              ng-minlength="1"\n                                              ng-disabled="stavka.isDisabled">\n                                </textarea>\n                                    <div ng-messages="innerForm.naziv.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div ng-if="stavka.tipUnosa === \'po_artiklu\'">\n                                    <div id="invoice-item-template-dropdown-{{ $index }}" class="position-relative">\n                                        <label for="stavka-artikal" class="form-label">Odaberite artikal</label>\n                                        <input id="stavka-artikal"\n                                               type="text"\n                                               name="nazivTextarea"\n                                               class="form-control"\n                                               uib-typeahead="stavkaLagera as stavkaLagera.artikal.naziv for stavkaLagera in ctrl.getStavkeLagera($viewValue)"\n                                               typeahead-template-url="app/views/faktura-slobodan-unos-redovnih/invoice-item-template-popup.template.html"\n                                               typeahead-focus-first="false"\n                                               typeahead-loading="isLoading"\n                                               typeahead-min-length="0"\n                                               typeahead-focus-on-select="false"\n                                               typeahead-wait-ms="300"\n                                               typeahead-on-select="ctrl.onInvoiceItemTemplateSelect($index, $item, $model, $label)"\n                                               typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n                                               ng-model="stavka.query"\n                                               ng-required="true"\n                                               data-ng-disabled="stavka.isDisabled"\n                                               ng-focus="ctrl.onFocusItemTemplateSearch($index)"\n                                               ng-blur="ctrl.onBlurItemTemplateSearch($index)"\n                                               ng-class="{ \'is-invalid\': (innerForm.$submitted || innerForm.nazivTextarea.$dirty) && innerForm.nazivTextarea.$invalid }">\n                                        <div ng-messages="innerForm.nazivTextarea.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="mt-3"></div>\n                        <div class="row g-3">\n                            <div class="col-12 col-md-4">\n                                <label for="stavka-pdv-{{ $index }}" class="form-label">Stopa poreza</label>\n                                <ui-select id="stavka-pdv-{{ $index }}"\n                                           name="porez_procenat"\n                                           ng-model="stavka.porez_procenat"\n                                           search-enabled="false"\n                                           required\n                                           theme="select2"\n                                           ng-disabled="stavka.isDisabled"\n                                           ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka)">\n                                    <ui-select-match>\n                                        <span ng-bind="$select.selected.label"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.procenat as item in ctrl.poreskeStope">\n                                        <span ng-bind="item.label"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.porez_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-amount-{{ $index }}" class="form-label">\n                                    Iznos\n                                </label>\n                                <input type="number" inputmode="decimal"\n                                       class="form-control"\n                                       name="tax_exemption_amount"\n                                       id="stavka-tax-exemption-amount-{{ $index }}"\n                                       ng-model="stavka.tax_exemption_amount"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="stavka.porez_procenat === null"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="{{ stavka.porez_procenat === null ? 0.0001 : 0 }}"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.tax_exemption_amount.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-reason-id-{{ $index }}" class="form-label">Razlog oslobo\u0111enja poreza</label>\n                                <ui-select id="stavka-tax-exemption-reason-id-{{ $index }}"\n                                           name="tax_exemption_reason_id"\n                                           ng-model="stavka.tax_exemption_reason_id"\n                                           ng-required="stavka.porez_procenat === null"\n                                           ng-disabled="stavka.isDisabled"\n                                           theme="select2"\n                                           data-search-enabled="false"\n                                           ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();">\n                                    <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.description"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.tax_exemption_reasons | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.description"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.tax_exemption_reason_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-cijena-{{ $index }}" class="form-label">\n                                    Osnovica\n                                </label>\n                                <input type="number" inputmode="decimal"\n                                       class="form-control"\n                                       name="jedinicna_cijena_osnovna"\n                                       id="stavka-cijena-{{ $index }}"\n                                       ng-model="stavka.jedinicna_cijena_osnovna"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPB(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0.0001"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-jedinicna-cijena-puna-{{ $index }}" class="form-label">\n                                    Cijena sa porezom\n                                </label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       name="jedinicna_cijena_puna"\n                                       id="stavka-jedinicna-cijena-puna-{{ $index }}"\n                                       ng-model="stavka.jedinicna_cijena_puna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPA(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0.0001"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-kolicina-{{ $index }}" class="form-label">Koli\u010Dina</label>\n                                <input type="number"\n                                       inputmode="numeric"\n                                       class="form-control"\n                                       id="stavka-kolicina-{{ $index }}"\n                                       name="kolicina"\n                                       ng-model="stavka.kolicina"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onInvoiceItemQuantityChange($index); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       min="0.001"\n                                       ng-max="stavka.advance_invoice_item_index >= 0 ? ctrl.original_advance_invoice.stavke[$index].kolicina : undefined"\n                                       step="0.001">\n                                <div ng-messages="innerForm.kolicina.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-jedinica-mjere-id" class="form-label">Jedinica mjere</label>\n                                <ui-select id="stavka-jedinica-mjere-id"\n                                           name="jedinica_mjere_id"\n                                           ng-model="stavka.jedinica_mjere_id"\n                                           ng-disabled="stavka.isDisabled"\n                                           theme="select2"\n                                           search-enabled="true"\n                                           required>\n                                    <ui-select-match placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.naziv"></span>\n                                        -\n                                        <span ng-bind="$select.selected.opis"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.jediniceMjere | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.naziv"></span>\n                                        -\n                                        <span ng-bind="item.opis"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.jedinica_mjere_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-rabat-{{ $index }}" class="form-label">Popust %</label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       id="stavka-rabat-{{ $index }}"\n                                       name="rabat_procenat"\n                                       ng-model="stavka.rabat_procenat"\n                                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0"\n                                       max="100"\n                                       step="0.01">\n                                <div ng-messages="innerForm.rabat_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-cijena-sa-pdv-{{ $index }}" class="form-label">Za uplatu</label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       id="stavka-cijena-sa-pdv-{{ $index }}"\n                                       name="ukupna_cijena_prodajna"\n                                       ng-model="stavka.ukupna_cijena_prodajna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       disabled\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       min="0.0001"\n                                       step="0.0001"\n                                       ng-max="stavka.ukupna_cijena_puna">\n                                <div ng-messages="innerForm.ukupna_cijena_prodajna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="card-footer">\n                        <div class="text-center d-flex flex-column-reverse flex-md-row justify-content-end">\n                            <button type="button" class="btn btn-light border" ng-click="ctrl.deleteInvoiceItem($index)">\n                                <i class="fa fa-trash"></i> Obri\u0161i\n                            </button>\n                            <div class="me-2 mt-2"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="text-end mt-3">\n            <button type="button" class="btn btn-primary" ng-click="ctrl.addInvoiceItem()">\n                <i class="fa fa-plus"></i> Dodaj slede\u0107u stavku\n            </button>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Na\u010Dini pla\u0107anja</div>\n            </div>\n            <div class="px-3 pt-3 d-none d-md-block">\n                <div class="row">\n                    <div ng-class="{ \'col-md-6\': ctrl.updated_advance_invoice, \'col-12\': !ctrl.updated_advance_invoice }">\n                        <label class="form-label" for="invoice-payment-method-type">\n                            Na\u010Din pla\u0107anja\n                        </label>\n                    </div>\n                    <div class="col-md-6" ng-if="ctrl.updated_advance_invoice">\n                        <label class="form-label" form="invoice-payment-method">\n                            Iznos\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class="pb-3 d-md-none"></div>\n                <div class="px-3 pb-3">\n                    <div class="row g-3">\n                        <div ng-class="{ \'col-md-6\': ctrl.updated_advance_invoice, \'col-12\': !ctrl.updated_advance_invoice }">\n                            <label class="form-label d-md-none" for="primary-payment-method-type">\n                                Na\u010Din pla\u0107anja\n                            </label>\n                            <ui-select id="primary-payment-method-type"\n                                       name="invoice_payment_method"\n                                       theme="select2"\n                                       search-enabled="true"\n                                       ng-model="ctrl.primary_payment_method.payment_method_type_id"\n                                       ng-required="true"\n                                       ng-change="ctrl.setPaymentMethod();">\n                                <ui-select-match placeholder="&nbsp;">\n                                    {{ $select.selected.description }}\n                                </ui-select-match>\n                                <ui-select-choices repeat="payment_method_type.id as payment_method_type in (ctrl.payment_method_types | filter: $select.search) track by payment_method_type.id">\n                                    {{ payment_method_type.description }}\n                                </ui-select-choices>\n                            </ui-select>\n                        </div>\n                        <div class="col-md-6" ng-if="ctrl.updated_advance_invoice">\n                            <label class="form-label d-md-none" form="invoice-payment-method">\n                                Iznos\n                            </label>\n                            <input type="text"\n                                   class="form-control"\n                                   ng-required="!ctrl.updated_advance_invoice"\n                                   ng-model="ctrl.primary_payment_method.amount"\n                                   disabled>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div ng-if="ctrl.updated_advance_invoice">\n                <div class="border-top d-md-none"></div>\n                <div class="pb-3 d-md-none"></div>\n                <div class="px-3 pb-3">\n                    <div class="row g-3">\n                        <div class="col-md-6">\n                            <label class="form-label d-md-none" for="advance-payment-method-type">\n                                Na\u010Din pla\u0107anja\n                            </label>\n                            <input type="text"\n                                   id="advance-payment-method-type"\n                                   class="form-control"\n                                   ng-model="ctrl.advance_payment_method.payment_method_type.description"\n                                   disabled>\n                        </div>\n                        <div class="col-md-6">\n                            <label class="form-label d-md-none" form="invoice-payment-method">\n                                Iznos\n                            </label>\n                            <input type="text"\n                                   class="form-control"\n                                   ng-model="ctrl.advance_payment_method.amount"\n                                   disabled>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Napomena</div>\n            </div>\n            <textarea name="napomena"\n                      id="napomena"\n                      rows="5"\n                      class="form-control border-0"\n                      ng-model="ctrl.racun.napomena"\n                      style="min-height: 80px;"\n                      fis-textarea-resize>\n            </textarea>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Za uplatu</div>\n            </div>\n            <div class="card-body">\n                <div class="text-nowrap text-end">\n                    <span class="fs-1">{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</span>\n                    <span>{{ $root.currency }}</span>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-3"></div>\n        <div class="d-flex flex-column-reverse flex-md-row justify-content-end gap-2">\n            <button\n                type="button"\n                class="btn btn-light border"\n                ui-sref="faktura_pregled_redovnih()">\n                <i class="fa fa-close"></i> Odustani\n            </button>\n            <button\n                type="button"\n                class="btn btn-primary"\n                ng-click="ctrl.createInvoice()">\n                Fiskalizuj\n            </button>\n        </div>\n    </form>\n</div>\n\n\n<div class="scroll-buffer-large"></div>\n');
$templateCache.put('app/views/faktura-slobodan-unos-avansa/invoice-item-template-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n        <div class="d-flex justify-content-between align-items-center fs-5">\n            <div>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.sifra">\n                    \u0160ifra <span ng-bind-html="match.model.artikal.sifra | uibTypeaheadHighlight:query"></span>\n                </span>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.barkod">\n                    Barkod <span ng-bind-html="match.model.artikal.barkod | uibTypeaheadHighlight:query"></span>\n                </span>\n            </div>\n            <div>\n                <span class="badge bg-light border text-dark">\n                    {{ match.model.jedinicna_cijena_puna }} EUR\n                </span>\n            </div>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/views/faktura-slobodan-unos-redovnih/faktura-slobodan-unos-redovnih.template.html','<div class="container-lg mt-3">\n    <form name="ctrl.form" novalidate>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">\n                    Osnovni podaci\n                </div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-valute" class="form-label">\n                            Datum valute\n                        </label>\n                        <div class="input-group">\n                            <input\n                                type="text"\n                                class="form-control"\n                                uib-datepicker-popup\n                                is-open="datumValuteIsOpen"\n                                name="datumValute"\n                                id="faktura-datum-valute"\n                                ng-model="ctrl.racun.datumvalute"\n                                ng-required="true"\n                                pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button\n                                type="button"\n                                class="btn btn-light border"\n                                ng-click="datumValuteIsOpen = !datumValuteIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datumValute.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-poreski-period" class="form-label">\n                            Poreski period\n                        </label>\n                        <div class="input-group">\n                            <input\n                                type="text"\n                                class="form-control"\n                                uib-datepicker-popup="MM/yyyy"\n                                is-open="poreskiPeriodIsOpen"\n                                name="poreski_period"\n                                id="faktura-poreski-period"\n                                datepicker-options="{ datepickerMode: \'month\', minMode: \'month\' }"\n                                ng-model="ctrl.racun.poreski_period"\n                                ng-required="true"\n                                pattern="((0[1-9])|(1[0-2]))\\/(\\d{4})">\n                            <button\n                                type="button"\n                                class="btn btn-light border"\n                                ng-click="poreskiPeriodIsOpen = !poreskiPeriodIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.poreski_period.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-prometa" class="form-label">\n                            Datum prometa\n                        </label>\n                        <div class="input-group">\n                            <input\n                                type="text"\n                                class="form-control"\n                                uib-datepicker-popup\n                                is-open="datumPrometaIsOpen"\n                                name="datum_prometa"\n                                id="faktura-datum-prometa"\n                                ng-model="ctrl.racun.datum_prometa"\n                                ng-required="true"\n                                pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button\n                                type="button"\n                                class="btn btn-light border"\n                                ng-click="datumPrometaIsOpen = !datumPrometaIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datum_prometa.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">\n                    Valuta i kurs razmjene\n                </div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-8 col-xl-4">\n                        <label for="faktura-valuta-id" class="form-label">\n                            Valuta\n                        </label>\n                        <ui-select\n                            id="faktura-valuta-id"\n                            name="valuta_id"\n                            theme="select2"\n                            search-enabled="true"\n                            ng-model="ctrl.racun.valuta_id"\n                            ng-required="true"\n                            ng-change="ctrl.onCurrencyChange()">\n                            <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="$select.selected.naziv_me"></span>\n                            </ui-select-match>\n                            <ui-select-choices\n                                repeat="item.id as item in (ctrl.valute | filter: $select.search) track by item.id">\n                                <span ng-bind="item.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="item.naziv_me"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.form.valuta_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-kurs-razmjene" class="form-label">\n                            Kurs razmjene\n                        </label>\n                        <input\n                            type="number"\n                            inputmode="decimal"\n                            class="form-control"\n                            name="kurs_razmjene"\n                            ng-disabled="ctrl.racun.valuta_id === 50"\n                            id="faktura-kurs-razmjene"\n                            ng-model="ctrl.racun.kurs_razmjene"\n                            ng-required="true"\n                            min="0.0001"\n                            step="0.0001">\n                        <div\n                            class="text-muted small mt-1"\n                            ng-if="ctrl.racun.valuta.iso_4217_alfanumericki_kod !== \'EUR\'">\n                            1 {{ ctrl.racun.valuta.iso_4217_alfanumericki_kod }} u EUR\n                        </div>\n                        <div ng-messages="ctrl.form.kurs_razmjene.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">\n                    Kupac\n                </div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12">\n                        <invoice-buyer-picker\n                            data-invoice="ctrl.racun"\n                            name="komitent_id"\n                            ng-model="ctrl.racun.komitent_id"\n                            ng-required="!ctrl.racun.is_cash">\n                            <div ng-messages="ctrl.form.komitent_id.$error" role="alert" class="invalid-feedback">\n                                <div ng-message="nepotpuno">\n                                    Podaci kupca su nepotpuni.\n                                </div>\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </invoice-buyer-picker>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div ng-repeat="stavka in ctrl.racun.stavke track by $index">\n            <div class="position-relative">\n                <div id="invoice-item-{{ $index }}" style="position: absolute; top: -20px;"></div>\n            </div>\n            <div ng-form="innerForm" novalidate>\n                <input type="hidden" ng-model="stavka.izvor_kalkulacije" required>\n                <div class="mt-4"></div>\n                <div class="card">\n                    <div class="card-header">\n                        <div class="fw-bold text-uppercase">\n                            Stavka #{{ $index + 1 }}\n                        </div>\n                    </div>\n                    <div class="card-body">\n                        <div class="row g-3">\n                            <div class="col-12 col-lg-4">\n                                <label class="form-label">\n                                    Tip unosa\n                                </label>\n                                <div class="btn-group w-100">\n                                    <button\n                                        type="button"\n                                        class="btn"\n                                        ng-class="{ \'btn-primary\': stavka.tipUnosa === \'slobodan_unos\', \'btn-light border\': stavka.tipUnosa !== \'slobodan_unos\' }"\n                                        ng-model="stavka.tipUnosa"\n                                        uib-btn-radio="\'slobodan_unos\'"\n                                        ng-disabled="stavka.isDisabled"\n                                        ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Slobodan unos\n                                    </button>\n                                    <button\n                                        type="button"\n                                        class="btn"\n                                        ng-class="{ \'btn-primary\': stavka.tipUnosa === \'po_artiklu\', \'btn-light border\': stavka.tipUnosa !== \'po_artiklu\' }"\n                                        ng-model="stavka.tipUnosa"\n                                        uib-btn-radio="\'po_artiklu\'"\n                                        ng-disabled="stavka.isDisabled"\n                                        ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Po artiklu\n                                    </button>\n                                </div>\n                            </div>\n                            <div class="col-12 col-lg-8">\n                                <div ng-if="stavka.tipUnosa === \'slobodan_unos\'">\n                                    <label for="stavka-naziv-{{ $index }}" class="form-label">\n                                        Naziv artikla ili usluge\n                                    </label>\n                                    <textarea\n                                        type="text" class="form-control"\n                                        name="naziv"\n                                        id="stavka-naziv-{{ $index }}"\n                                        fis-textarea-resize\n                                        ng-model="stavka.naziv"\n                                        ng-required="true"\n                                        ng-minlength="1"\n                                        ng-disabled="stavka.isDisabled">\n                                </textarea>\n                                    <div ng-messages="innerForm.naziv.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div ng-if="stavka.tipUnosa === \'po_artiklu\'">\n                                    <div id="invoice-item-template-dropdown-{{ $index }}" class="position-relative">\n                                        <label for="stavka-artikal" class="form-label">\n                                            Odaberite artikal\n                                        </label>\n                                        <input\n                                            id="stavka-artikal"\n                                            type="text"\n                                            name="nazivTextarea"\n                                            class="form-control"\n                                            uib-typeahead="stavkaLagera as stavkaLagera.artikal.naziv for stavkaLagera in ctrl.getStavkeLagera($viewValue)"\n                                            typeahead-template-url="app/views/faktura-slobodan-unos-avansa/invoice-item-template-popup.template.html"\n                                            typeahead-focus-first="false"\n                                            typeahead-loading="isLoading"\n                                            typeahead-min-length="0"\n                                            typeahead-focus-on-select="false"\n                                            typeahead-wait-ms="300"\n                                            typeahead-on-select="ctrl.onInvoiceItemTemplateSelect($index, $item, $model, $label)"\n                                            typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n                                            ng-model="stavka.query"\n                                            ng-required="true"\n                                            data-ng-disabled="stavka.isDisabled"\n                                            ng-focus="ctrl.onFocusItemTemplateSearch($index)"\n                                            ng-blur="ctrl.onBlurItemTemplateSearch($index)"\n                                            ng-class="{ \'is-invalid\': (innerForm.$submitted || innerForm.nazivTextarea.$dirty) && innerForm.nazivTextarea.$invalid }">\n                                        <div ng-messages="innerForm.nazivTextarea.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="mt-3"></div>\n                        <div class="row g-3">\n                            <div class="col-12 col-md-4">\n                                <label for="stavka-pdv-{{ $index }}" class="form-label">\n                                    Stopa poreza\n                                </label>\n                                <ui-select\n                                    id="stavka-pdv-{{ $index }}"\n                                    name="porez_procenat"\n                                    ng-model="stavka.porez_procenat"\n                                    search-enabled="false"\n                                    required\n                                    theme="select2"\n                                    ng-disabled="stavka.isDisabled"\n                                    ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka)">\n                                    <ui-select-match>\n                                        <span ng-bind="$select.selected.label"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.procenat as item in ctrl.poreskeStope">\n                                        <span ng-bind="item.label"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.porez_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-amount-{{ $index }}" class="form-label">\n                                    Iznos\n                                </label>\n                                <input\n                                    type="number"\n                                    inputmode="decimal"\n                                    class="form-control"\n                                    name="tax_exemption_amount"\n                                    id="stavka-tax-exemption-amount-{{ $index }}"\n                                    ng-model="stavka.tax_exemption_amount"\n                                    ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                    ng-required="stavka.porez_procenat === null"\n                                    ng-disabled="stavka.isDisabled"\n                                    min="{{ stavka.porez_procenat === null ? 0.0001 : 0 }}"\n                                    step="0.0001">\n                                <div ng-messages="innerForm.tax_exemption_amount.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-reason-id-{{ $index }}" class="form-label">\n                                    Razlog oslobo\u0111enja poreza\n                                </label>\n                                <ui-select\n                                    id="stavka-tax-exemption-reason-id-{{ $index }}"\n                                    name="tax_exemption_reason_id"\n                                    ng-model="stavka.tax_exemption_reason_id"\n                                    ng-required="stavka.porez_procenat === null"\n                                    ng-disabled="stavka.isDisabled"\n                                    theme="select2"\n                                    data-search-enabled="false"\n                                    ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();">\n                                    <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.description"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.tax_exemption_reasons | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.description"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.tax_exemption_reason_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-cijena-{{ $index }}" class="form-label">\n                                    Osnovica\n                                </label>\n                                <input\n                                    type="number"\n                                    inputmode="decimal"\n                                    class="form-control"\n                                    name="jedinicna_cijena_osnovna"\n                                    id="stavka-cijena-{{ $index }}"\n                                    ng-model="stavka.jedinicna_cijena_osnovna"\n                                    ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPB(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                    ng-required="true"\n                                    ng-disabled="stavka.isDisabled"\n                                    min="0.0001"\n                                    step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-jedinicna-cijena-puna-{{ $index }}" class="form-label">\n                                    Cijena sa porezom\n                                </label>\n                                <input\n                                    type="number"\n                                    inputmode="decimal"\n                                    class="form-control"\n                                    name="jedinicna_cijena_puna"\n                                    id="stavka-jedinicna-cijena-puna-{{ $index }}"\n                                    ng-model="stavka.jedinicna_cijena_puna"\n                                    ng-model-options="{ allowInvalid: true }"\n                                    ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPA(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                    ng-required="true"\n                                    ng-disabled="stavka.isDisabled"\n                                    min="0.0001"\n                                    step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-kolicina-{{ $index }}" class="form-label">\n                                    Koli\u010Dina\n                                </label>\n                                <input\n                                    type="number"\n                                    inputmode="numeric"\n                                    class="form-control"\n                                    id="stavka-kolicina-{{ $index }}"\n                                    name="kolicina"\n                                    ng-model="stavka.kolicina"\n                                    ng-model-options="{ allowInvalid: true }"\n                                    ng-change="ctrl.onInvoiceItemQuantityChange($index); ctrl.onItemUpdate();"\n                                    ng-required="true"\n                                    min="0.001"\n                                    step="0.001">\n                                <div ng-messages="innerForm.kolicina.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-jedinica-mjere-id" class="form-label">\n                                    Jedinica mjere\n                                </label>\n                                <ui-select\n                                    id="stavka-jedinica-mjere-id"\n                                    name="jedinica_mjere_id"\n                                    ng-model="stavka.jedinica_mjere_id"\n                                    ng-disabled="stavka.isDisabled"\n                                    theme="select2"\n                                    search-enabled="true"\n                                    required>\n                                    <ui-select-match placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.naziv"></span>\n                                        -\n                                        <span ng-bind="$select.selected.opis"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.jediniceMjere | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.naziv"></span>\n                                        -\n                                        <span ng-bind="item.opis"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.jedinica_mjere_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-rabat-{{ $index }}" class="form-label">\n                                    Popust %\n                                </label>\n                                <input\n                                    type="number"\n                                    inputmode="decimal"\n                                    class="form-control"\n                                    id="stavka-rabat-{{ $index }}"\n                                    name="rabat_procenat"\n                                    ng-model="stavka.rabat_procenat"\n                                    ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                    ng-required="true"\n                                    ng-disabled="stavka.isDisabled"\n                                    min="0"\n                                    max="100"\n                                    step="0.01">\n                                <div ng-messages="innerForm.rabat_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-cijena-sa-pdv-{{ $index }}" class="form-label">\n                                    Za uplatu\n                                </label>\n                                <input\n                                    type="number"\n                                    inputmode="decimal"\n                                    class="form-control"\n                                    id="stavka-cijena-sa-pdv-{{ $index }}"\n                                    name="ukupna_cijena_prodajna"\n                                    ng-model="stavka.ukupna_cijena_prodajna"\n                                    ng-model-options="{ allowInvalid: true }"\n                                    disabled\n                                    ng-required="true"\n                                    ng-disabled="stavka.isDisabled"\n                                    ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                    min="0.0001"\n                                    step="0.0001"\n                                    ng-max="stavka.ukupna_cijena_puna">\n                                <div ng-messages="innerForm.ukupna_cijena_prodajna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="card-footer">\n                        <button\n                            type="button"\n                            class="btn btn-light border"\n                            ng-click="ctrl.deleteInvoiceItem($index)">\n                            <i class="fa fa-trash"></i> Obri\u0161i\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="text-end mt-3">\n            <button\n                type="button"\n                class="btn btn-primary"\n                ng-click="ctrl.addInvoiceItem()">\n                <i class="fa fa-plus"></i> Dodaj slede\u0107u stavku\n            </button>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">\n                    Na\u010Dini pla\u0107anja\n                </div>\n            </div>\n            <div class="card-body">\n                <label class="form-label" for="primary-payment-method-type">\n                    Na\u010Din pla\u0107anja\n                </label>\n                <ui-select\n                    id="primary-payment-method-type"\n                    name="invoice_payment_method"\n                    theme="select2"\n                    search-enabled="true"\n                    ng-model="ctrl.primary_payment_method.payment_method_type_id"\n                    ng-required="true"\n                    ng-change="ctrl.setPaymentMethod();">\n                    <ui-select-match placeholder="&nbsp;">\n                        {{ $select.selected.description }}\n                    </ui-select-match>\n                    <ui-select-choices repeat="payment_method_type.id as payment_method_type in (ctrl.payment_method_types | filter: $select.search) track by payment_method_type.id">\n                        {{ payment_method_type.description }}\n                    </ui-select-choices>\n                </ui-select>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">\n                    Napomena\n                </div>\n            </div>\n            <textarea\n                name="napomena"\n                id="napomena"\n                rows="5"\n                class="form-control border-0"\n                ng-model="ctrl.racun.napomena"\n                style="min-height: 80px;"\n                fis-textarea-resize>\n            </textarea>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">\n                    Za uplatu\n                </div>\n            </div>\n            <div class="card-body">\n                <div class="text-nowrap text-end">\n                    <span class="fs-1">{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</span>\n                    <span>{{ $root.currency }}</span>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-3"></div>\n        <div class="d-flex flex-column-reverse flex-md-row justify-content-end gap-2">\n            <button\n                type="button"\n                class="btn btn-light border"\n                ui-sref="faktura_pregled_redovnih()">\n                <i class="fa fa-close"></i> Odustani\n            </button>\n            <button\n                type="button"\n                class="btn btn-light border"\n                ng-click="ctrl.createInvoiceTemplate()">\n                Napravi predra\u010Dun\n            </button>\n            <button\n                type="button"\n                class="btn btn-primary"\n                ng-click="ctrl.createInvoice()">\n                Fiskalizuj\n            </button>\n        </div>\n    </form>\n</div>\n\n<div class="scroll-buffer-large"></div>\n');
$templateCache.put('app/views/faktura-slobodan-unos-redovnih/invoice-item-template-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n        <div class="d-flex justify-content-between align-items-center fs-5">\n            <div>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.sifra">\n                    \u0160ifra <span ng-bind-html="match.model.artikal.sifra | uibTypeaheadHighlight:query"></span>\n                </span>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.barkod">\n                    Barkod <span ng-bind-html="match.model.artikal.barkod | uibTypeaheadHighlight:query"></span>\n                </span>\n            </div>\n            <div>\n                <span class="badge bg-light border text-dark">\n                    {{ match.model.jedinicna_cijena_puna }} EUR\n                </span>\n            </div>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/views/grupa-artikala-unos/grupa-artikala-unos.template.html','<form name="ctrl.forma" novalidate ng-submit="ctrl.upis();">\n    <div class="container">\n        <div class="row g-3">\n            <div class="col-12 col-md-8">\n                <label for="artikal-naziv" class="form-label">Naziv</label>\n                <input\n                    type="text"\n                    class="form-control"\n                    fis-autofocus\n                    name="naziv"\n                    id="artikal-naziv"\n                    ng-model="ctrl.grupaArtikala.naziv"\n                    required\n                    ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid }">\n                <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                    <div ng-messages-include="error-messages"></div>\n                </div>\n            </div>\n            <div class="col-12 col-md-4">\n                <label for="grupa-artikala-boja" class="form-label">Boja</label>\n                <div class="dropdown">\n                    <button\n                        type="button"\n                        class="btn border w-100"\n                        data-bs-toggle="dropdown"\n                        aria-expanded="false"\n                        ng-style="{ backgroundColor: ctrl.grupaArtikala.boja ? ctrl.grupaArtikala.boja : \'#fff\' }">\n                        &nbsp;\n                    </button>\n                    <div class="dropdown-menu p-2">\n                        <div class="d-flex gap-2">\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #de6464;" ng-click="ctrl.grupaArtikala.boja = \'#de6464\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #e76f51;" ng-click="ctrl.grupaArtikala.boja = \'#e76f51\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #f69284;" ng-click="ctrl.grupaArtikala.boja = \'#f69284\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #f4a261;" ng-click="ctrl.grupaArtikala.boja = \'#f4a261\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #ffdf74;" ng-click="ctrl.grupaArtikala.boja = \'#ffdf74\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #f6dda7;" ng-click="ctrl.grupaArtikala.boja = \'#f6dda7\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #ffefad;" ng-click="ctrl.grupaArtikala.boja = \'#ffefad\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #fff384;" ng-click="ctrl.grupaArtikala.boja = \'#fff384\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #0096c7;" ng-click="ctrl.grupaArtikala.boja = \'#0096c7\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #00b2ed;" ng-click="ctrl.grupaArtikala.boja = \'#00b2ed\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #95dfe3;" ng-click="ctrl.grupaArtikala.boja = \'#95dfe3\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #a7f4ff;" ng-click="ctrl.grupaArtikala.boja = \'#a7f4ff\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #20ad6b;" ng-click="ctrl.grupaArtikala.boja = \'#20ad6b\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #00c783;" ng-click="ctrl.grupaArtikala.boja = \'#00c783\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #00ed9c;" ng-click="ctrl.grupaArtikala.boja = \'#00ed9c\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #abe997;" ng-click="ctrl.grupaArtikala.boja = \'#abe997\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #2a9d8f;" ng-click="ctrl.grupaArtikala.boja = \'#2a9d8f\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #53af8b;" ng-click="ctrl.grupaArtikala.boja = \'#53af8b\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #82a18f;" ng-click="ctrl.grupaArtikala.boja = \'#82a18f\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #a0c7b0;" ng-click="ctrl.grupaArtikala.boja = \'#a0c7b0\'"></div>\n                            </div>\n                            <div class="d-flex flex-column gap-2">\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #9b72e7;" ng-click="ctrl.grupaArtikala.boja = \'#9b72e7\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #bb7dff;" ng-click="ctrl.grupaArtikala.boja = \'#bb7dff\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #b19cd9;" ng-click="ctrl.grupaArtikala.boja = \'#b19cd9\'"></div>\n                                <div class="rounded" href="#" style="width: 3rem; height: 3rem; background-color: #d8bfd8;" ng-click="ctrl.grupaArtikala.boja = \'#d8bfd8\'"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="mt-4 d-flex flex-column-reverse flex-md-row gap-2">\n            <button type="button" class="btn btn-dark flex-grow-1" ui-sref="grupa-artikala-pregled-lista">\n                <i class="fa fa-close"></i> Odustani\n            </button>\n            <button type="submit" class="btn btn-success flex-grow-1">\n                <i class="fa fa-check"></i> Potvrdi unos\n            </button>\n        </div>\n    </div>\n</form>\n');
$templateCache.put('app/views/izvjestaj-dnevni-forma/izvjestaj-dnevni-forma.template.html','<div class="container-lg mt-3">\n    <div class="row">\n        <div class="col-12 col-md-8 col-lg-6 col-xl-4">\n            <div class="card">\n                <div class="card-header position-sticky top-navbar">\n                    <div class="fw-bold">Dnevni izvje\u0161taj</div>\n                </div>\n                <div class="card-body">\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.dnevniIzvjestaj(fisReportService.getDayRelative(-2))">prekju\u010De</span>\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.dnevniIzvjestaj(fisReportService.getDayRelative(-1))">ju\u010De</span>\n                </div>\n                <div class="card-body">\n                    <div class="p-2 text-center bg-light">Izvje\u0161tajni dan</div>\n                    <div id="datum" uib-datepicker ng-model="ctrl.datum" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                </div>\n                <div class="card-footer">\n                    <button class="btn btn-success d-block w-100 wd-md-100p" ng-click="fisReportService.dnevniIzvjestaj(ctrl.datum)">\n                        <i class="fa fa-print"></i> \u0160tampaj\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/faktura-slobodan-unos-korekcije/faktura-slobodan-unos-korekcije.template.html','<div class="container-lg mt-3">\n    <form name="ctrl.form" novalidate>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Osnovni podaci</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-valute" class="form-label">Datum valute</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup\n                                   is-open="datumValuteIsOpen"\n                                   name="datumValute"\n                                   id="faktura-datum-valute"\n                                   ng-model="ctrl.racun.datumvalute"\n                                   ng-required="true"\n                                   pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button type="button" class="btn btn-light border" ng-click="datumValuteIsOpen = !datumValuteIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datumValute.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-poreski-period" class="form-label">Poreski period</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup="MM/yyyy"\n                                   is-open="poreskiPeriodIsOpen"\n                                   name="poreski_period"\n                                   id="faktura-poreski-period"\n                                   datepicker-options="{ datepickerMode: \'month\', minMode: \'month\' }"\n                                   ng-model="ctrl.racun.poreski_period"\n                                   ng-required="true"\n                                   pattern="((0[1-9])|(1[0-2]))\\/(\\d{4})">\n                            <button type="button" class="btn btn-light border" ng-click="poreskiPeriodIsOpen = !poreskiPeriodIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.poreski_period.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-datum-prometa" class="form-label">Datum prometa</label>\n                        <div class="input-group">\n                            <input type="text"\n                                   class="form-control"\n                                   uib-datepicker-popup\n                                   is-open="datumPrometaIsOpen"\n                                   name="datum_prometa"\n                                   id="faktura-datum-prometa"\n                                   ng-model="ctrl.racun.datum_prometa"\n                                   ng-required="true"\n                                   pattern="\\d{4}-\\d{2}-\\d{2}">\n                            <button type="button" class="btn btn-light border" ng-click="datumPrometaIsOpen = !datumPrometaIsOpen">\n                                <i class="fa fa-calendar"></i>\n                            </button>\n                        </div>\n                        <div ng-messages="ctrl.form.datum_prometa.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Valuta i kurs razmjene</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-sm-8 col-xl-4">\n                        <label for="faktura-valuta-id" class="form-label">Valuta</label>\n                        <ui-select id="faktura-valuta-id"\n                                   name="valuta_id"\n                                   theme="select2"\n                                   search-enabled="true"\n                                   ng-model="ctrl.racun.valuta_id"\n                                   ng-required="true"\n                                   ng-change="ctrl.onCurrencyChange()">\n                            <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                <span ng-bind="$select.selected.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="$select.selected.naziv_me"></span>\n                            </ui-select-match>\n                            <ui-select-choices repeat="item.id as item in (ctrl.valute | filter: $select.search) track by item.id">\n                                <span ng-bind="item.iso_4217_alfanumericki_kod"></span>\n                                -\n                                <span ng-bind="item.naziv_me"></span>\n                            </ui-select-choices>\n                        </ui-select>\n                        <div ng-messages="ctrl.form.valuta_id.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-sm-4 col-xl-2">\n                        <label for="faktura-kurs-razmjene" class="form-label">Kurs razmjene</label>\n                        <input type="number"\n                               inputmode="decimal"\n                               class="form-control"\n                               name="kurs_razmjene"\n                               ng-disabled="ctrl.racun.valuta_id === 50"\n                               id="faktura-kurs-razmjene"\n                               ng-model="ctrl.racun.kurs_razmjene"\n                               ng-required="true"\n                               min="0.000001"\n                               step="0.000001">\n                        <div class="text-muted small mt-1" ng-if="ctrl.racun.valuta.iso_4217_alfanumericki_kod !== \'EUR\'">1 {{ ctrl.racun.valuta.iso_4217_alfanumericki_kod }} u EUR</div>\n                        <div ng-messages="ctrl.form.kurs_razmjene.$error" role="alert" class="invalid-feedback">\n                            <div ng-messages-include="error-messages"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Kupac</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12">\n                        <invoice-buyer-picker\n                            data-invoice="ctrl.racun"\n                            name="komitent_id"\n                            ng-model="ctrl.racun.komitent_id"\n                            ng-required="!ctrl.racun.is_cash">\n\n                            <div ng-messages="ctrl.form.komitent_id.$error" role="alert" class="invalid-feedback">\n                                <div ng-message="nepotpuno">\n                                    Podaci kupca su nepotpuni.\n                                </div>\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </invoice-buyer-picker>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Referentni ra\u010Dun</div>\n            </div>\n            <div class="card-body">\n                <div class="row g-3">\n                    <div class="col-12 col-lg-4 d-none">\n                        <div class="btn-group w-100">\n                            <button type="button"\n                                    class="btn"\n                                    ng-class="{ \'btn-primary\': ctrl.racun.tipReferentnogRacuna === \'invoice\', \'btn-light border\': ctrl.racun.tipReferentnogRacuna !== \'invoice\' }"\n                                    ng-model="ctrl.racun.tipReferentnogRacuna"\n                                    uib-btn-radio="\'invoice\'">\n                                Ra\u010Dun\n                            </button>\n                            <button type="button"\n                                    class="btn"\n                                    ng-class="{ \'btn-primary\': ctrl.racun.tipReferentnogRacuna === \'credit_note\', \'btn-light border\': ctrl.racun.tipReferentnogRacuna !== \'creditNote\' }"\n                                    ng-model="ctrl.racun.tipReferentnogRacuna"\n                                    uib-btn-radio="\'credit_note\'">\n                                Knji\u017Eno odobrenje\n                            </button>\n                        </div>\n                    </div>\n                    <div class="col-12">\n                        <label for="corrected-invoice-reference-id" class="form-label">\n                            Pretraga knji\u017Enih odobrenja\n                        </label>\n                        <credit-note-typeahead\n                            id="corrected-invoice-reference-id"\n                            on-select="ctrl.invoiceFactory.setCorrectedCreditNoteReference(ctrl.racun, $model)">\n                        </credit-note-typeahead>\n                    </div>\n                    <div class="col-12" ng-if="ctrl.racun.correctedInvoiceReference">\n                        <div class="card card-body bg-light">\n                            <div class="fw-bold text-uppercase">\n                                Knji\u017Eno odobrenje {{ ctrl.racun.correctedInvoiceReference.creditNote.ordinalNumber }}\n                            </div>\n                            <div class="d-flex align-items-center">\n                                <div style="min-width: 64px;" class="fw-bold">Promet:</div>\n                                <div>\n                                    <span class="fs-5 fw-bold" ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.returnAndDiscountAmountWithTax | fisRoundHalfUp:2"></span>\n                                    <span class="fw-bold" ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.currency.isoCode"></span>\n                                </div>\n                            </div>\n                            <div class="mb-1"></div>\n                            <div class="d-flex">\n                                <div style="min-width: 64px;" class="fw-bold">Datum:</div>\n                                <div>\n                                    <span ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.fiscalizationDate | fisFormatDatetime"></span>\n                                </div>\n                            </div>\n                            <div class="d-flex">\n                                <div style="min-width: 64px;" class="fw-bold">Kupac:</div>\n                                <div>\n                                    <span ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.buyer.name"></span>\n                                </div>\n                            </div>\n                            <div class="d-flex">\n                                <div style="min-width: 64px;" class="fw-bold">{{ ctrl.racun.correctedInvoiceReference.creditNote.buyer.identificationType.description }}:</div>\n                                <div>\n                                    <span ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.buyer.identificationNumber"></span>\n                                </div>\n                            </div>\n                            <div class="d-flex">\n                                <div style="min-width: 64px;" class="fw-bold">Adresa:</div>\n                                <div>\n                                    <span ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.buyer.address"></span>\n                                </div>\n                            </div>\n                            <div class="d-flex">\n                                <div style="min-width: 64px;" class="fw-bold">Grad:</div>\n                                <div>\n                                    <span ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.buyer.city"></span>,\n                                    <span ng-bind-html="ctrl.racun.correctedInvoiceReference.creditNote.buyer.country.name"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div ng-repeat="stavka in ctrl.racun.stavke track by $index">\n            <div class="position-relative">\n                <div id="invoice-item-{{ $index }}" style="position: absolute; top: -20px;"></div>\n            </div>\n            <div ng-form="innerForm" novalidate>\n                <input type="hidden" ng-model="stavka.izvor_kalkulacije" required>\n                <div class="mt-4"></div>\n                <div class="card">\n                    <div class="card-header">\n                        <div class="fw-bold text-uppercase">Stavka #{{ $index + 1 }}</div>\n                    </div>\n                    <div class="card-body">\n                        <div class="row g-3">\n                            <div class="col-12 col-lg-4">\n                                <label class="form-label">Tip unosa</label>\n                                <div class="btn-group w-100">\n                                    <button type="button"\n                                            class="btn"\n                                            ng-class="{ \'btn-primary\': stavka.tipUnosa === \'slobodan_unos\', \'btn-light border\': stavka.tipUnosa !== \'slobodan_unos\' }"\n                                            ng-model="stavka.tipUnosa"\n                                            uib-btn-radio="\'slobodan_unos\'"\n                                            ng-disabled="stavka.isDisabled"\n                                            ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Slobodan unos\n                                    </button>\n                                    <button type="button"\n                                            class="btn"\n                                            ng-class="{ \'btn-primary\': stavka.tipUnosa === \'po_artiklu\', \'btn-light border\': stavka.tipUnosa !== \'po_artiklu\' }"\n                                            ng-model="stavka.tipUnosa"\n                                            uib-btn-radio="\'po_artiklu\'"\n                                            ng-disabled="stavka.isDisabled"\n                                            ng-change="ctrl.naPromjenuTipaUnosa($index)">\n                                        Po artiklu\n                                    </button>\n                                </div>\n                            </div>\n                            <div class="col-12 col-lg-8">\n                                <div ng-if="stavka.tipUnosa === \'slobodan_unos\'">\n                                    <label for="stavka-naziv-{{ $index }}" class="form-label">Naziv artikla ili usluge</label>\n                                    <textarea type="text" class="form-control"\n                                              name="naziv"\n                                              id="stavka-naziv-{{ $index }}"\n                                              fis-textarea-resize\n                                              ng-model="stavka.naziv"\n                                              ng-required="true"\n                                              ng-minlength="1"\n                                              ng-disabled="stavka.isDisabled">\n                                </textarea>\n                                    <div ng-messages="innerForm.naziv.$error" role="alert" class="invalid-feedback">\n                                        <div ng-messages-include="error-messages"></div>\n                                    </div>\n                                </div>\n                                <div ng-if="stavka.tipUnosa === \'po_artiklu\'">\n                                    <div id="invoice-item-template-dropdown-{{ $index }}" class="position-relative">\n                                        <label for="stavka-artikal" class="form-label">Odaberite artikal</label>\n                                        <input id="stavka-artikal"\n                                               type="text"\n                                               name="nazivTextarea"\n                                               class="form-control"\n                                               uib-typeahead="stavkaLagera as stavkaLagera.artikal.naziv for stavkaLagera in ctrl.getStavkeLagera($viewValue)"\n                                               typeahead-template-url="app/views/faktura-slobodan-unos-korekcije/invoice-item-template-popup.template.html"\n                                               typeahead-focus-first="false"\n                                               typeahead-loading="isLoading"\n                                               typeahead-min-length="0"\n                                               typeahead-focus-on-select="false"\n                                               typeahead-wait-ms="300"\n                                               typeahead-on-select="ctrl.onInvoiceItemTemplateSelect($index, $item, $model, $label)"\n                                               typeahead-additional-options="{ openOnFocus: true, clearOnFocus: true }"\n                                               ng-model="stavka.query"\n                                               ng-required="true"\n                                               data-ng-disabled="stavka.isDisabled"\n                                               ng-focus="ctrl.onFocusItemTemplateSearch($index)"\n                                               ng-blur="ctrl.onBlurItemTemplateSearch($index)"\n                                               ng-class="{ \'is-invalid\': (innerForm.$submitted || innerForm.nazivTextarea.$dirty) && innerForm.nazivTextarea.$invalid }">\n                                        <div ng-messages="innerForm.nazivTextarea.$error" role="alert" class="invalid-feedback">\n                                            <div ng-messages-include="error-messages"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="mt-3"></div>\n                        <div class="row g-3">\n                            <div class="col-12 col-md-4">\n                                <label for="stavka-pdv-{{ $index }}" class="form-label">Stopa poreza</label>\n                                <ui-select id="stavka-pdv-{{ $index }}"\n                                           name="porez_procenat"\n                                           ng-model="stavka.porez_procenat"\n                                           search-enabled="false"\n                                           required\n                                           theme="select2"\n                                           ng-disabled="stavka.isDisabled"\n                                           ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka)">\n                                    <ui-select-match>\n                                        <span ng-bind="$select.selected.label"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.procenat as item in ctrl.poreskeStope">\n                                        <span ng-bind="item.label"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.porez_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-amount-{{ $index }}" class="form-label">\n                                    Iznos\n                                </label>\n                                <input type="number" inputmode="decimal"\n                                       class="form-control"\n                                       name="tax_exemption_amount"\n                                       id="stavka-tax-exemption-amount-{{ $index }}"\n                                       ng-model="stavka.tax_exemption_amount"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="stavka.porez_procenat === null"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="{{ stavka.porez_procenat === null ? 0.0001 : 0 }}"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.tax_exemption_amount.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat === null">\n                                <label for="stavka-tax-exemption-reason-id-{{ $index }}" class="form-label">Razlog oslobo\u0111enja poreza</label>\n                                <ui-select id="stavka-tax-exemption-reason-id-{{ $index }}"\n                                           name="tax_exemption_reason_id"\n                                           ng-model="stavka.tax_exemption_reason_id"\n                                           ng-required="stavka.porez_procenat === null"\n                                           ng-disabled="stavka.isDisabled"\n                                           theme="select2"\n                                           data-search-enabled="false"\n                                           ng-change="ctrl.invoiceFactory.recalculateItemBasedOnExemption(ctrl.racun, stavka); ctrl.onItemUpdate();">\n                                    <ui-select-match allow-clear="true" placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.description"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.tax_exemption_reasons | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.description"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.tax_exemption_reason_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-cijena-{{ $index }}" class="form-label">\n                                    Osnovica\n                                </label>\n                                <input type="number" inputmode="decimal"\n                                       class="form-control"\n                                       name="jedinicna_cijena_osnovna"\n                                       id="stavka-cijena-{{ $index }}"\n                                       ng-model="stavka.jedinicna_cijena_osnovna"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPB(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0.0001"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_osnovna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-4" ng-if="stavka.porez_procenat !== null">\n                                <label for="stavka-jedinicna-cijena-puna-{{ $index }}" class="form-label">\n                                    Cijena sa porezom\n                                </label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       name="jedinicna_cijena_puna"\n                                       id="stavka-jedinicna-cijena-puna-{{ $index }}"\n                                       ng-model="stavka.jedinicna_cijena_puna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.invoiceFactory.recalculateItemBasedOnUPA(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0.0001"\n                                       step="0.0001">\n                                <div ng-messages="innerForm.jedinicna_cijena_puna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-kolicina-{{ $index }}" class="form-label">Koli\u010Dina</label>\n                                <input type="number"\n                                       inputmode="numeric"\n                                       class="form-control"\n                                       id="stavka-kolicina-{{ $index }}"\n                                       name="kolicina"\n                                       ng-model="stavka.kolicina"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       ng-change="ctrl.onInvoiceItemQuantityChange($index); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       step="0.001">\n                                <div ng-messages="innerForm.kolicina.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-jedinica-mjere-id" class="form-label">Jedinica mjere</label>\n                                <ui-select id="stavka-jedinica-mjere-id"\n                                           name="jedinica_mjere_id"\n                                           ng-model="stavka.jedinica_mjere_id"\n                                           ng-disabled="stavka.isDisabled"\n                                           theme="select2"\n                                           search-enabled="true"\n                                           required>\n                                    <ui-select-match placeholder="&nbsp;">\n                                        <span ng-bind="$select.selected.naziv"></span>\n                                        -\n                                        <span ng-bind="$select.selected.opis"></span>\n                                    </ui-select-match>\n                                    <ui-select-choices repeat="item.id as item in (ctrl.jediniceMjere | filter: $select.search) track by item.id">\n                                        <span ng-bind="item.naziv"></span>\n                                        -\n                                        <span ng-bind="item.opis"></span>\n                                    </ui-select-choices>\n                                </ui-select>\n                                <div ng-messages="innerForm.jedinica_mjere_id.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-rabat-{{ $index }}" class="form-label">Popust %</label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       id="stavka-rabat-{{ $index }}"\n                                       name="rabat_procenat"\n                                       ng-model="stavka.rabat_procenat"\n                                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       min="0"\n                                       max="100"\n                                       step="0.01">\n                                <div ng-messages="innerForm.rabat_procenat.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                            <div class="col-12 col-md-3">\n                                <label for="stavka-cijena-sa-pdv-{{ $index }}" class="form-label">Za uplatu</label>\n                                <input type="number"\n                                       inputmode="decimal"\n                                       class="form-control"\n                                       id="stavka-cijena-sa-pdv-{{ $index }}"\n                                       name="ukupna_cijena_prodajna"\n                                       ng-model="stavka.ukupna_cijena_prodajna"\n                                       ng-model-options="{ allowInvalid: true }"\n                                       disabled\n                                       ng-required="true"\n                                       ng-disabled="stavka.isDisabled"\n                                       ng-change="ctrl.invoiceFactory.recalculateItem(ctrl.racun, stavka); ctrl.onItemUpdate();"\n                                       step="0.0001"\n                                       ng-max="stavka.ukupna_cijena_puna">\n                                <div ng-messages="innerForm.ukupna_cijena_prodajna.$error" role="alert" class="invalid-feedback">\n                                    <div ng-messages-include="error-messages"></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="card-footer">\n                        <div class="text-center d-flex flex-column-reverse flex-md-row justify-content-end">\n                            <button type="button" class="btn btn-light border" ng-click="ctrl.deleteInvoiceItem($index)">\n                                <i class="fa fa-trash"></i> Obri\u0161i\n                            </button>\n                            <div class="me-2 mt-2"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="text-end mt-3">\n            <button type="button" class="btn btn-primary" ng-click="ctrl.addInvoiceItem()">\n                <i class="fa fa-plus"></i> Dodaj slede\u0107u stavku\n            </button>\n        </div>\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Na\u010Dini pla\u0107anja</div>\n            </div>\n            <div class="px-3 pt-3 d-none d-md-block">\n                <div class="row">\n                    <div class="col-12">\n                        <label class="form-label" for="invoice-payment-method-type">\n                            Na\u010Din pla\u0107anja\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class="pb-3 d-md-none"></div>\n                <div class="px-3 pb-3">\n                    <div class="row g-3">\n                        <div class="col-12">\n                            <label class="form-label d-md-none" for="primary-payment-method-type">\n                                Na\u010Din pla\u0107anja\n                            </label>\n                            <ui-select id="primary-payment-method-type"\n                                       name="invoice_payment_method"\n                                       theme="select2"\n                                       search-enabled="true"\n                                       ng-model="ctrl.primary_payment_method.payment_method_type_id"\n                                       ng-required="true"\n                                       ng-change="ctrl.setPaymentMethod();">\n                                <ui-select-match placeholder="&nbsp;">\n                                    {{ $select.selected.description }}\n                                </ui-select-match>\n                                <ui-select-choices repeat="payment_method_type.id as payment_method_type in (ctrl.payment_method_types | filter: $select.search) track by payment_method_type.id">\n                                    {{ payment_method_type.description }}\n                                </ui-select-choices>\n                            </ui-select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Napomena</div>\n            </div>\n            <textarea name="napomena"\n                      id="napomena"\n                      rows="5"\n                      class="form-control border-0"\n                      ng-model="ctrl.racun.napomena"\n                      style="min-height: 80px;"\n                      fis-textarea-resize>\n            </textarea>\n        </div>\n\n        <div class="mt-4"></div>\n        <div class="card">\n            <div class="card-header">\n                <div class="fw-bold text-uppercase">Za uplatu</div>\n            </div>\n            <div class="card-body">\n                <div class="text-nowrap text-end">\n                    <span class="fs-1">{{ ctrl.racun.ukupna_cijena_prodajna | fisRoundHalfUp:2 }}</span>\n                    <span>{{ $root.currency }}</span>\n                </div>\n            </div>\n        </div>\n\n        <div class="mt-3"></div>\n        <div class="d-flex flex-column-reverse flex-md-row justify-content-end gap-2">\n            <button type="button"\n                    class="btn btn-light border"\n                    ui-sref="faktura_pregled_redovnih()">\n                <i class="fa fa-close"></i> Odustani\n            </button>\n            <button type="button"\n                    class="btn btn-primary"\n                    ng-click="ctrl.createInvoice()">\n                Fiskalizuj\n            </button>\n        </div>\n    </form>\n</div>\n\n\n<div class="scroll-buffer-large"></div>\n');
$templateCache.put('app/views/faktura-slobodan-unos-korekcije/invoice-item-template-popup.template.html','<a class="dropdown-item py-3">\n    <div style="max-width: 500px;">\n        <h5 ng-bind-html="match.label | uibTypeaheadHighlight:query"></h5>\n        <div class="d-flex justify-content-between align-items-center fs-5">\n            <div>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.sifra">\n                    \u0160ifra <span ng-bind-html="match.model.artikal.sifra | uibTypeaheadHighlight:query"></span>\n                </span>\n                <span class="badge bg-light border text-dark" ng-if="match.model.artikal.barkod">\n                    Barkod <span ng-bind-html="match.model.artikal.barkod | uibTypeaheadHighlight:query"></span>\n                </span>\n            </div>\n            <div>\n                <span class="badge bg-light border text-dark">\n                    {{ match.model.jedinicna_cijena_puna }} EUR\n                </span>\n            </div>\n        </div>\n    </div>\n</a>');
$templateCache.put('app/views/izvjestaj-periodicni-forma/izvjestaj-periodicni-forma.template.html','<div class="container-lg mt-3">\n    <div class="row">\n        <div class="col-12 col-sm-10 col-md-12 col-xl-9 col-xxl-8">\n            <div class="card">\n                <div class="card-header position-sticky top-navbar">\n                    <div class="fw-bold">Periodi\u010Dni izvje\u0161taj</div>\n                </div>\n                <div class="card-body">\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.periodicniIzvjestaj(fisReportService.getMonthStartRelative(-1), fisReportService.getMonthEndRelative(-1))">prethodni mjesec</span>\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.periodicniIzvjestaj(fisReportService.getMonthStartRelative(), fisReportService.getMonthEndRelative())">teku\u0107i mjesec</span>\n                </div>\n                <div class="card-body">\n                    <div class="row g-3">\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Po\u010Detni datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumOd" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumOd" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Krajnji datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumDo" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumDo" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="card-footer">\n                    <button class="btn btn-success d-block w-100 wd-md-100p" ng-click="fisReportService.periodicniIzvjestaj(ctrl.datumOd, ctrl.datumDo)">\n                        <i class="fa fa-print"></i> \u0160tampaj\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/izvjestaj-zurnal-forma/izvjestaj-zurnal-forma.template.html','<div class="container-lg mt-3">\n    <div class="row">\n        <div class="col-12 col-sm-10 col-md-12 col-xl-9 col-xxl-8">\n            <div class="card">\n                <div class="card-header position-sticky top-navbar">\n                    <div class="fw-bold">\u017Durnal</div>\n                </div>\n                <div class="card-body">\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.zurnal(fisReportService.getMonthStartRelative(-1), fisReportService.getMonthEndRelative(-1))">prethodni mjesec</span>\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.zurnal(fisReportService.getMonthStartRelative(), fisReportService.getMonthEndRelative())">teku\u0107i mjesec</span>\n                </div>\n                <div class="card-body">\n                    <div class="row g-3">\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Po\u010Detni datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumOd" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumOd" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Krajnji datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumDo" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumDo" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="card-footer">\n                    <button class="btn btn-success d-block w-100 wd-md-100p" ng-click="fisReportService.zurnal(ctrl.datumOd, ctrl.datumDo)">\n                        <i class="fa fa-print"></i> \u0160tampaj\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/izvjestaj-po-artiklima-forma/izvjestaj-po-artiklima-forma.template.html','<div class="container-lg mt-3">\n    <div class="row">\n        <div class="col-12 col-sm-10 col-md-12 col-xl-9 col-xxl-8">\n            <div class="card">\n                <div class="card-header position-sticky top-navbar">\n                    <div class="fw-bold">Izvje\u0161taj po artiklima</div>\n                </div>\n                <div class="card-body">\n                    <div class="d-flex gap-3 flex-wrap">\n                        <div class="w-100 w-md-auto">\n                            <label for="input-format" class="form-label">\n                                Format\n                            </label>\n                            <div id="input-format" class="d-flex gap-2">\n                                <div\n                                    class="btn flex-grow-1 flex-md-grow-0"\n                                    style="min-width: 80px;"\n                                    ng-class="{ \'btn-light border\': ctrl.pageFormat !== \'58mm\', \'btn-primary\': ctrl.pageFormat === \'58mm\' }"\n                                    ng-click="ctrl.pageFormat = \'58mm\'">\n                                    58mm\n                                </div>\n                                <div\n                                    class="btn flex-grow-1 flex-md-grow-0"\n                                    style="min-width: 80px;"\n                                    ng-class="{ \'btn-light border\': ctrl.pageFormat !== \'A4\', \'btn-primary\': ctrl.pageFormat === \'A4\' }"\n                                    ng-click="ctrl.pageFormat = \'A4\'">\n                                    A4\n                                </div>\n                            </div>\n                        </div>\n                        <div class="flex-grow-1">\n                            <label for="input-format" class="form-label">\n                                Kupac\n                            </label>\n                            <buyer-typeahead\n                                keep-on-blur\n                                on-select="ctrl.buyerId = $model.id">\n                            </buyer-typeahead>\n                        </div>\n                    </div>\n                </div>\n                <div class="card-body">\n                    <span\n                        class="btn btn-light border"\n                        ng-click="ctrl.fetchReport(fisReportService.getMonthStartRelative(-1), fisReportService.getMonthEndRelative(-1))">\n                        prethodni mjesec\n                    </span>\n                    <span\n                        class="btn btn-light border"\n                        ng-click="ctrl.fetchReport(fisReportService.getMonthStartRelative(), fisReportService.getMonthEndRelative())">\n                        teku\u0107i mjesec\n                    </span>\n                </div>\n                <div class="card-body">\n                    <div class="row g-3">\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Po\u010Detni datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumOd" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumOd" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Krajnji datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumDo" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumDo" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="card-footer">\n                    <button class="btn btn-primary d-block w-100 wd-md-100p" ng-click="ctrl.fetchReport(ctrl.datumOd, ctrl.datumDo)">\n                        <i class="fa fa-print"></i> \u0160tampaj\n                    </button>\n                    <button class="btn btn-success d-block w-100 wd-md-100p d-none" ng-click="fisReportService.poArtiklima(ctrl.datumOd, ctrl.datumDo)">\n                        <i class="fa fa-print"></i> \u0160tampaj\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/izvjestaj-po-artiklima-forma/report-58mm.template.html','<style>\n    table td {\n        font-family: monospace;\n        vertical-align: top;\n    }\n\n    table td:first-child {\n        width: 1px;\n        white-space: nowrap;\n    }\n\n    body {\n        padding: 0;\n        margin: 0;\n        font-size: 11px;\n    }\n\n    table {\n        width: 100%;\n        max-width: 58mm;\n        margin: 0 auto;\n    }\n\n    @page {\n        margin: 4mm 0;\n    }\n\n    .text-center {\n        text-align: center;\n    }\n\n    .text-end {\n        text-align: right;\n    }\n</style>\n<table>\n    <tr>\n        <td colspan="2">\n            <div style="border-top: 1px dashed #000"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            <div style="border-top: 1px dashed #000; margin-bottom: 4px;"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan="2" class="text-center">Izvje\u0161taj po artiklima i uslugama</td>\n    </tr>\n    <tr>\n        <td colspan="2" class="text-center">Od: {{ data.start | fisFormatDatetime }}</td>\n    </tr>\n    <tr>\n        <td colspan="2" class="text-center">Do: {{ data.end | fisFormatDatetime }}</td>\n    </tr>\n    <tr ng-if="data.buyer !== null">\n        <td colspan="2">\n            <div style="border-top: 1px dashed #000; margin-bottom: 4px;"></div>\n        </td>\n    </tr>\n    <tr ng-if="data.buyer !== null">\n        <td colspan="2">\n            Kupac: {{ data.buyer.name }}\n        </td>\n    </tr>\n    <tr ng-repeat-start="item in data.items">\n        <td colspan="2">\n            <div style="border-top: 1px dashed #000; margin: 4px 0;"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan="2" style="white-space: normal;">Artikal: {{ item.item_template_description }}</td>\n    </tr>\n    <tr>\n        <td>Za uplatu:</td>\n        <td class="text-end">{{ item.total_price | fisRoundHalfUp:2 }}</td>\n    </tr>\n    <tr ng-repeat-end="">\n        <td>Koli\u010Dina:</td>\n        <td class="text-end">{{ item.quantity | fisRoundHalfUp:2 }}</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            <div style="border-top: 1px dashed #000; margin-bottom: 4px;"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan="2">Datum dokumenta: {{ data.document_datetime | fisFormatDatetime:\'date\' }}</td>\n    </tr>\n    <tr>\n        <td colspan="2">Vrijeme dokumenta: {{ data.document_datetime | fisFormatDatetime:\'time\' }}</td>\n    </tr>\n    <tr>\n        <td colspan="2">Kod operatera: {{ data.operator_efi_code }}</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            <div style="border-top: 1px dashed #000; margin-top: 4px;"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan="2" style="border-top: 1px dashed #000"></td>\n    </tr>\n</table>\n\n\n');
$templateCache.put('app/views/izvjestaj-po-artiklima-forma/report-a4.template.html','<style>\n    table td {\n        font-family: monospace;\n        vertical-align: top;\n    }\n\n    .table th {\n        text-align: left;\n    }\n\n    table td:first-child {\n        width: 1px;\n        white-space: nowrap;\n    }\n\n    body {\n        padding: 0;\n        margin: 0;\n        font-size: 11px;\n        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;\n    }\n\n    table {\n        max-width: 210mm;\n        border-collapse: collapse;\n    }\n\n    table th,\n    table td {\n        border: 1px solid #ddd;\n        padding: .25rem .5rem;\n        text-align: left;\n    }\n\n    @page {\n        margin: 4mm;\n    }\n\n    .text-center {\n        text-align: center;\n    }\n\n    .text-end {\n        text-align: right;\n    }\n\n    .mt-3 {\n        margin-top: 1rem;\n    }\n\n    .w-100 {\n        width: 100%;\n    }\n\n    .mx-auto {\n        margin-left: auto;\n        margin-right: auto;\n    }\n\n    * {\n        -webkit-print-color-adjust: exact !important; /*Chrome, Safari */\n        color-adjust: exact !important; /*Firefox*/\n    }\n\n    .table-striped tr:nth-child(even) td {\n        background-color: #f4f4f4;\n    }\n\n    .table-definition td:first-child {\n        background-color: #eee;\n    }\n</style>\n<div>\n    <h2>Izvje\u0161taj po artiklima i uslugama</h2>\n    <table class="table-definition">\n        <tbody>\n            <tr>\n                <td>Po\u010Detni datum</td>\n                <td>{{ data.start | fisFormatDatetime }}</td>\n            </tr>\n            <tr>\n                <td>Krajnji datum</td>\n                <td>{{ data.end | fisFormatDatetime }}</td>\n            </tr>\n            <tr>\n                <td>Datum dokumenta</td>\n                <td>{{ data.document_datetime | fisFormatDatetime }}</td>\n            </tr>\n            <tr>\n                <td>Kod operatera</td>\n                <td>{{ data.operator_efi_code }}</td>\n            </tr>\n            <tr ng-if="data.buyer !== null">\n                <td>Kupac</td>\n                <td>{{ data.buyer.name }}</td>\n            </tr>\n        </tbody>\n    </table>\n\n    <table class="table-striped mt-3 w-100 mx-auto">\n        <thead>\n        <tr>\n            <th style="background-color: #eee;">Artikal</th>\n            <th style="background-color: #eee;" class="text-end">Koli\u010Dina</th>\n            <th style="background-color: #eee;" class="text-end">Za uplatu</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr ng-repeat="item in data.items">\n            <td>{{ item.item_template_description }}</td>\n            <td class="text-end" style="width: 1px;">{{ item.quantity | fisRoundHalfUp:2 }}</td>\n            <td class="text-end" style="width: 1px;">{{ item.total_price | fisRoundHalfUp:2 }}</td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n');
$templateCache.put('app/views/grupa-artikala-pregled-lista/grupa-artikala-pregled-lista.template.html','<div class="py-5">\n    <div class="container-lg">\n        <div class="row g-3">\n            <div class="col-12 col-md-4" ng-repeat="grupaArtikala in ctrl.grupeArtikala">\n                <div class="card">\n                    <div class="card-header">\n                        <div class="d-flex justify-content-between">\n                            <b>{{ grupaArtikala.naziv }}</b>\n                            <span\n                                class="rounded-circle top-0 end-0 shadow-sm align-self-start mt-1"\n                                style="padding-top: 1rem; padding-left: 1rem;"\n                                ng-style="{ backgroundColor: grupaArtikala.boja }"\n                                ng-if="grupaArtikala.boja !== undefined && grupaArtikala.boja !== null">\n                            </span>\n                        </div>\n                    </div>\n                    <div class="card-body text-end">\n                        <button class="btn" ui-sref="grupa-artikala-izmjena({ id: grupaArtikala.id })" tabindex="{{ $index + 1 }}">\n                            <i class="fa fa-edit"></i> Izmijeni\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/views/komitent-izmjena/komitent-izmjena.template.html','<div class="py-5">\n    <div class="container-lg">\n        <form name="ctrl.forma" novalidate ng-submit="ctrl.upis()">\n            <h4>Izmjena partnera</h4>\n            <div class="row g-3 mt-3">\n                <div class="col-12">\n                    <label for="komitent-naziv" class="form-label">Ime / Naziv</label>\n                    <input type="text" class="form-control" name="naziv" id="komitent-naziv" ng-model="ctrl.komitent.naziv" required ng-class="{\'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid}">\n                    <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="tip-identifikacione-oznake-id" class="form-label">Tip identifikacione oznake</label>\n                    <ui-select\n                        name="tip_identifikacione_oznake_id"\n                        id="tip-identifikacione-oznake-id"\n                        ng-model="ctrl.komitent.tip_identifikacione_oznake_id"\n                        theme="select2"\n                        search-enabled="false"\n                        required\n                        ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.tip_identifikacione_oznake_id.$invalid }">\n                        <ui-select-match placeholder="&nbsp;" allow-clear="true">\n                            <span ng-bind="$select.selected.naziv"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.tipoviIdentifikacioneOznake | filter: $select.search) track by item.id">\n                            <span ng-bind="item.naziv"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.tip_identifikacione_oznake_id.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="identifikaciona-oznaka" class="form-label">Identifikaciona oznaka</label>\n                    <input\n                        type="text"\n                        class="form-control"\n                        name="identifikaciona_oznaka"\n                        id="identifikaciona-oznaka"\n                        ng-model="ctrl.komitent.identifikaciona_oznaka"\n                        required\n                        ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.identifikaciona_oznaka.$invalid }">\n                    <div ng-messages="ctrl.forma.identifikaciona_oznaka.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-12 col-lg-4">\n                    <label for="komitent-pdvbroj" class="form-label">PDV broj</label>\n                    <input type="text" class="form-control" name="pdvbroj" id="komitent-pdvbroj" ng-model="ctrl.komitent.pdvbroj">\n                </div>\n                <div class="col-12 col-lg-6">\n                    <label for="komitent-adresa" class="form-label">Adresa</label>\n                    <input type="text" class="form-control" name="adresa" id="komitent-adresa" ng-model="ctrl.komitent.adresa" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.adresa.$invalid }">\n                    <div ng-messages="ctrl.forma.adresa.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-3">\n                    <label for="komitent-grad" class="form-label">Grad</label>\n                    <input type="text" class="form-control" name="grad" id="komitent-grad" ng-model="ctrl.komitent.grad" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grad.$invalid }">\n                    <div ng-messages="ctrl.forma.grad.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-3">\n                    <label for="komitent-drzava" class="form-label">Dr\u017Eava</label>\n                    <ui-select id="komitent-drzava" name="drzava" ng-model="ctrl.komitent.drzava" theme="select2" search-enabled="true" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.drzava.$invalid }">\n                        <ui-select-match placeholder="&nbsp;">\n                            <span ng-bind="$select.selected.drzava"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.drzave | filter: $select.search) track by item.id">\n                            <span ng-bind="item.drzava"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.drzava.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-12 col-lg-4">\n                    <label for="komitent-ziroracun" class="form-label">\u017Diro ra\u010Dun</label>\n                    <input type="text" class="form-control" name="ziroracun" id="komitent-ziroracun" ng-model="ctrl.komitent.ziroracun">\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="komitent-telefon" class="form-label">Telefon</label>\n                    <input type="text" class="form-control" name="telefon" id="komitent-telefon" ng-model="ctrl.komitent.telefon">\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="komitent-email" class="form-label">Imejl</label>\n                    <input type="text" class="form-control" name="email" id="komitent-email" ng-model="ctrl.komitent.email">\n                </div>\n                <div class="col-12">\n                    <label for="komitent-napomena" class="form-label">Napomena</label>\n                    <textarea class="form-control" name="napomena" id="komitent-napomena" ng-model="ctrl.komitent.napomena" rows="5"></textarea>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="show_total_debt_container" class="form-label">\n                        Prika\u017Ei dug u \u0161tampi\n                    </label>\n                    <div id="show_total_debt_container" class="d-flex">\n                        <button type="button" class="btn w-100" ng-class="{ \'btn-secondary\': !ctrl.komitent.show_total_debt, \'btn-outline-secondary\': ctrl.komitent.show_total_debt }" ng-click="ctrl.komitent.show_total_debt = false">\n                            Ne\n                        </button>\n                        <div class="me-3"></div>\n                        <button type="button" class="btn w-100" ng-class="{ \'btn-primary\': ctrl.komitent.show_total_debt, \'btn-outline-primary\': !ctrl.komitent.show_total_debt }" ng-click="ctrl.komitent.show_total_debt = true">\n                            Da\n                        </button>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="komitent-previous-debt" class="form-label">Prethodni dug</label>\n                    <input type="number" class="form-control" name="previous_debt" id="komitent-previous-debt" ng-model="ctrl.komitent.previous_debt" ng-min="0" required ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.previous_debt.$invalid }">\n                    <div ng-messages="ctrl.forma.previous_debt.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="mt-4 d-flex flex-column-reverse flex-md-row">\n                <a href="#" type="button" class="btn btn-dark flex-grow-1" ui-sref="komitent-pregled-lista">\n                    <i class="fa fa-close"></i> Odustani\n                </a>\n                <div class="me-4 mt-2"></div>\n                <button class="btn btn-success flex-grow-1">\n                    Izmijeni partnera\n                </button>\n            </div>\n        </form>\n    </div>\n</div>');
$templateCache.put('app/views/komitent-pregled-lista/komitent-pregled-lista.template.html','<div class="py-5">\n    <div class="container-lg">\n        <h4 class="mb-3">Pregled partnera</h4>\n        <div class="row g-3">\n            <div class="col-12 col-md-6 col-lg-4">\n                <input type="text" class="form-control" id="pretraga-pojam  " placeholder="Pretraga" ng-model="ctrl.upit_za_pretragu">\n            </div>\n            <div class="col-12 col-md-6 col-lg-8">\n                <button type="button" class="btn btn-dark me-2" ng-click="ctrl.naPromjenuStranice()">\n                    <i class="fa fa-search"></i> Pretra\u017Ei\n                </button>\n                <button type="button" class="btn btn-success" ui-sref="komitent-unos">\n                    <i class="fa fa-plus"></i> Dodaj partnera\n                </button>\n            </div>\n        </div>\n\n        <div class="card card-body mt-4" ng-show="ctrl.strana.ukupan_broj_stavki === 0">\n            Nema partnera koji odgovara pojmu pretrage.\n        </div>\n\n        <ul boundary-link-numbers="true" class="mt-3" direction-links="false" force-ellipses="true"\n            items-per-page="ctrl.strana.broj_stavki_po_stranici" max-size="4" ng-change="ctrl.naPromjenuStranice()" ng-model="ctrl.broj_stranice"\n            ng-show="ctrl.strana.ukupan_broj_stavki > 0" rotate="true" total-items="ctrl.strana.ukupan_broj_stavki"\n            uib-pagination></ul>\n\n        <div class="row g-4">\n            <div class="col-12 col-md-6 col-xl-4" ng-repeat="komitent in ctrl.strana.stavke">\n                <div class="card shadow-sm">\n                    <div class="card-header">\n                        <b>{{ komitent.naziv }}</b>\n                    </div>\n                    <ul class="list-group list-group-flush">\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Identifikacija</small></div>\n                                <div class="col-md-8">\n                                    <span ng-if="komitent.tip_identifikacione_oznake_id">\n                                        <span class="user-select-none pe-none">{{ komitent.tip_identifikacione_oznake.naziv }} |</span><span class="ms-1">{{ komitent.identifikaciona_oznaka }}</span>\n                                    </span>\n                                    <span class="text-muted" ng-if="!komitent.tip_identifikacione_oznake_id">\n                                        <div>--------</div>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Grad</small></div>\n                                <div class="col-md-8">{{ komitent.grad }}</div>\n                            </div>\n                        </div>\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Adresa</small></div>\n                                <div class="col-md-8">{{ komitent.adresa }}</div>\n                            </div>\n                        </div>\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Telefon</small></div>\n                                <div class="col-md-8">{{ komitent.telefon }}</div>\n                            </div>\n                        </div>\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Fakturisani iznos</small></div>\n                                <div class="col-md-8">{{ komitent.fiscalized_debt + komitent.previous_debt }}</div>\n                            </div>\n                        </div>\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Upla\u0107eni iznos</small></div>\n                                <div class="col-md-8">{{ komitent.total_payments }}</div>\n                            </div>\n                        </div>\n                        <div class="list-group-item">\n                            <div class="row">\n                                <div class="col-md-auto"><small class="fw-bold">Saldo</small></div>\n                                <div class="col-md-8">{{ komitent.total_payments - komitent.fiscalized_debt - komitent.previous_debt  }}</div>\n                            </div>\n                        </div>\n                    </ul>\n                    <div class="card-footer text-end">\n                        <div class="d-flex flex-wrap">\n                            <button type="button" class="btn d-flex flex-column align-items-center me-auto me-sm-0" ui-sref="komitent-pregled-placanja({ id: komitent.id })">\n                                <i class="fa fa-table"></i> <span>Pregled pla\u0107anja</span>\n                            </button>\n                            <button type="button" class="btn d-flex flex-column align-items-center me-auto me-sm-0" ui-sref="komitent-izmjena({ id: komitent.id })">\n                                <i class="fa fa-edit"></i> <span>Izmijeni</span>\n                            </button>\n                            <button type="button" class="btn d-flex flex-column align-items-center me-auto me-sm-0" ng-click="ctrl.stampajKarticuKupca(komitent.id)">\n                                <i class="fa fa-print"></i> <span>Kartica kupca</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <ul boundary-link-numbers="true" class="mt-3" direction-links="false" force-ellipses="true"\n            items-per-page="ctrl.strana.broj_stavki_po_stranici" max-size="4" ng-change="ctrl.naPromjenuStranice()" ng-model="ctrl.broj_stranice"\n            ng-show="ctrl.strana.ukupan_broj_stavki > 0" rotate="true" total-items="ctrl.strana.ukupan_broj_stavki"\n            uib-pagination></ul>\n    </div>\n</div>');
$templateCache.put('app/views/komitent-unos/komitent-unos.template.html','<div class="py-3 py-sm-5">\n    <div class="container">\n        <form name="ctrl.forma" novalidate>\n            <h4>Novi partner</h4>\n            <div class="row g-3 mt-3">\n                <div class="col-12">\n                    <label for="komitent-naziv" class="form-label">Ime / Naziv</label>\n                    <input type="text"\n                           class="form-control"\n                           name="naziv"\n                           id="komitent-naziv"\n                           ng-model="ctrl.komitent.naziv"\n                           required\n                           ng-class="{\'is-invalid\': ctrl.forma.$submitted && ctrl.forma.naziv.$invalid}">\n                    <div ng-messages="ctrl.forma.naziv.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="tip-identifikacione-oznake-id" class="form-label">Tip identifikacione oznake</label>\n                    <ui-select\n                        name="tip_identifikacione_oznake_id"\n                        id="tip-identifikacione-oznake-id"\n                        ng-model="ctrl.komitent.tip_identifikacione_oznake_id"\n                        theme="select2"\n                        search-enabled="false"\n                        required\n                        ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.tip_identifikacione_oznake_id.$invalid }">\n                        <ui-select-match placeholder="&nbsp;" allow-clear="true">\n                            <span ng-bind="$select.selected.naziv"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.tipoviIdentifikacioneOznake | filter: $select.search) track by item.id">\n                            <span ng-bind="item.naziv"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.tip_identifikacione_oznake_id.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="identifikaciona-oznaka" class="form-label">Identifikaciona oznaka</label>\n                    <input\n                        type="text"\n                        class="form-control"\n                        name="identifikaciona_oznaka"\n                        id="identifikaciona-oznaka"\n                        ng-model="ctrl.komitent.identifikaciona_oznaka"\n                        required\n                        ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.identifikaciona_oznaka.$invalid }">\n                    <div ng-messages="ctrl.forma.identifikaciona_oznaka.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-12 col-lg-4">\n                    <label for="komitent-pdvbroj" class="form-label">PDV broj</label>\n                    <input type="text"\n                           class="form-control"\n                           name="pdvbroj"\n                           id="komitent-pdvbroj"\n                           ng-model="ctrl.komitent.pdvbroj">\n                </div>\n                <div class="col-12 col-lg-6">\n                    <label for="komitent-adresa" class="form-label">Adresa</label>\n                    <input type="text"\n                           class="form-control"\n                           name="adresa"\n                           id="komitent-adresa"\n                           ng-model="ctrl.komitent.adresa"\n                           required\n                           ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.adresa.$invalid }">\n                    <div ng-messages="ctrl.forma.adresa.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-3">\n                    <label for="komitent-grad" class="form-label">Grad</label>\n                    <input type="text"\n                           class="form-control"\n                           name="grad"\n                           id="komitent-grad"\n                           ng-model="ctrl.komitent.grad"\n                           required\n                           ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.grad.$invalid }">\n                    <div ng-messages="ctrl.forma.grad.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-3">\n                    <label for="komitent-drzava" class="form-label">Dr\u017Eava</label>\n                    <ui-select id="komitent-drzava"\n                               name="drzava"\n                               ng-model="ctrl.komitent.drzava"\n                               theme="select2"\n                               search-enabled="true"\n                               required\n                               ng-class="{ \'is-invalid\': ctrl.forma.$submitted && ctrl.forma.drzava.$invalid }">\n                        <ui-select-match placeholder="&nbsp;">\n                            <span ng-bind="$select.selected.drzava"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item.id as item in (ctrl.drzave | filter: $select.search) track by item.id">\n                            <span ng-bind="item.drzava"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.drzava.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-12 col-md-12 col-lg-4">\n                    <label for="komitent-ziroracun" class="form-label">\u017Diro ra\u010Dun</label>\n                    <input type="text"\n                           class="form-control"\n                           name="ziroracun"\n                           id="komitent-ziroracun"\n                           ng-model="ctrl.komitent.ziroracun">\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="komitent-telefon" class="form-label">Telefon</label>\n                    <input type="text"\n                           class="form-control"\n                           name="telefon"\n                           id="komitent-telefon"\n                           ng-model="ctrl.komitent.telefon">\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="komitent-email" class="form-label">Imejl</label>\n                    <input type="text"\n                           class="form-control"\n                           name="email"\n                           id="komitent-email"\n                           ng-model="ctrl.komitent.email">\n                </div>\n                <div class="col-12">\n                    <label for="komitent-napomena" class="form-label">Napomena</label>\n                    <textarea class="form-control"\n                              name="napomena"\n                              id="komitent-napomena"\n                              ng-model="ctrl.komitent.napomena"\n                              rows="5"></textarea>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="show_total_debt_container" class="form-label">\n                        Prika\u017Ei dug u \u0161tampi\n                    </label>\n                    <div id="show_total_debt_container" class="d-flex">\n                        <button type="button" class="btn w-100"\n                                ng-class="{\n                                    \'btn-light border\': !ctrl.komitent.show_total_debt,\n                                    \'btn-primary\': ctrl.komitent.show_total_debt }"\n                                ng-click="ctrl.komitent.show_total_debt = false">\n                            Ne\n                        </button>\n                        <div class="me-3"></div>\n                        <button type="button" class="btn w-100"\n                                ng-class="{\n                                    \'btn-primary\': ctrl.komitent.show_total_debt,\n                                    \'btn-light border\': !ctrl.komitent.show_total_debt }"\n                                ng-click="ctrl.komitent.show_total_debt = true">\n                            Da\n                        </button>\n                    </div>\n                </div>\n                <div class="col-12 col-md-6 col-lg-4">\n                    <label for="komitent-previous-debt" class="form-label">Prethodni dug</label>\n                    <input type="number"\n                           class="form-control"\n                           name="previous_debt"\n                           id="komitent-previous-debt"\n                           ng-model="ctrl.komitent.previous_debt"\n                           ng-min="0"\n                           required>\n                    <div ng-messages="ctrl.forma.previous_debt.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="mt-4 d-flex flex-column-reverse flex-md-row">\n                <a href="#" type="button" class="btn btn-dark flex-grow-1" ui-sref="komitent-pregled-lista">\n                    <i class="fa fa-close"></i> Odustani\n                </a>\n                <div class="me-4 mt-2"></div>\n                <button type="button" class="btn btn-success flex-grow-1" ng-click="ctrl.upis()">\n                    Sa\u010Duvaj partnera\n                </button>\n            </div>\n        </form>\n    </div>\n</div>');
$templateCache.put('app/views/komitent-unos-placanja/komitent-unos-placanja.template.html','<div class="py-3 py-lg-5 bg-white border-bottom">\n    <div class="container-lg">\n        <form name="ctrl.forma">\n            <div class="row">\n                <div class="col-3">\n                    <label for="placanje-datum-placanja" class="form-label">\n                        Datum pla\u0107anja\n                    </label>\n                    <div class="input-group">\n                        <input type="text" class="form-control" name="datum_placanja" id="placanje-datum-placanja" ng-model="ctrl.placanje.datum_placanja" uib-datepicker-popup="" required is-open="ctrl.odOpen" ng-class="{ \'is-invalid\': (ctrl.forma.$submitted || ctrl.forma.datum_placanja.$dirty) && ctrl.forma.datum_placanja.$invalid }">\n                        <button type="button" class="btn btn-dark" ng-click="ctrl.odOpen = !ctrl.odOpen">\n                            <i class="fa fa-calendar"></i>\n                        </button>\n                    </div>\n                    <div ng-messages="ctrl.forma.datum_placanja.$error" role="alert" class="invalid-feedback" ng-class="{ \'d-block\': (ctrl.forma.$submitted || ctrl.forma.datum_placanja.$dirty) && ctrl.forma.datum_placanja.$invalid }">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-3">\n                    <label for="placanje-komitent-id" class="form-label">Kupac</label>\n                    <ui-select id="placanje-komitent-id" name="komitent" ng-model="ctrl.placanje.komitent" theme="select2" search-enabled="true" required ng-class="{ \'is-invalid\': (ctrl.forma.$submitted || ctrl.forma.komitent.$dirty) && ctrl.forma.komitent.$invalid }">\n                        <ui-select-match allow-clear="true" placeholder="Odaberite kupca">\n                            <span ng-bind="$select.selected.naziv"></span>\n                        </ui-select-match>\n                        <ui-select-choices repeat="item in (ctrl.komitenti | filter: $select.search) track by item.id">\n                            <span ng-bind="item.naziv"></span>\n                        </ui-select-choices>\n                    </ui-select>\n                    <div ng-messages="ctrl.forma.komitent.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-3">\n                    <label for="placanje-iznos" class="form-label">Iznos</label>\n                    <input type="number" class="form-control" id="placanje-iznos" name="iznos" ng-model="ctrl.placanje.iznos" required ng-class="{ \'is-invalid\': (ctrl.forma.$submitted || ctrl.forma.iznos.$dirty) && ctrl.forma.iznos.$invalid }">\n                    <div ng-messages="ctrl.forma.iznos.$error" role="alert" class="invalid-feedback">\n                        <div ng-messages-include="error-messages"></div>\n                    </div>\n                </div>\n                <div class="col-3">\n                    <button type="button" class="btn btn-dark w-100 btn-form-offset-md" ng-click="ctrl.dodaj()">\n                        <i class="fa fa-plus"></i> Dodaj\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n<div class="border-bottom bg-light" ng-repeat="placanje in ctrl.placanja">\n    <div class="container-lg py-3">\n        <div class="row">\n            <div class="col-9">\n                <div>\n                    <b>Komitent:</b> {{ placanje.komitent.naziv }}\n                </div>\n                <div>\n                    <b>Datum:</b> {{ placanje.datum_placanja }}\n                </div>\n                <div>\n                    <b>Iznos:</b> {{ placanje.iznos }}\n                </div>\n            </div>\n            <div class="col-3">\n                <button type="button" class="btn btn-danger w-100" ng-click="ctrl.obrisi($index)">\n                    <i class="fa fa-trash"></i> Obri\u0161i\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="border-bottom bg-white" ng-if="ctrl.placanja.length > 0">\n    <div class="container-lg py-3">\n        <div class="row">\n            <div class="col-3 offset-9">\n                <button type="button" class="btn btn-success w-100" ng-click="ctrl.upis()">\n                    Potvrdi upis\n                </button>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/views/prijemnica-unos/prijemnica-unos.template.html','<div class="container">\n    <div class="mt-3"></div>\n    <div class="card">\n        <div class="card-header">\n            <div class="fw-bold text-uppercase">Osnovne informacije</div>\n        </div>\n        <div class="card-body">\n            <form name="ctrl.forma" novalidate>\n                <div class="row g-3">\n                    <div class="col-12 col-md-6 col-lg-3">\n                        <div class="form-group">\n                            <label for="prijemnica-magacin-id" class="form-label">Magacin</label>\n                            <ui-select id="prijemnica-magacin-id" name="magacin_id" ng-model="ctrl.prijemnica.magacin_id" theme="select2" search-enabled="true">\n                                <ui-select-match placeholder="&nbsp;">\n                                    <span ng-bind="$select.selected.naziv"></span>\n                                </ui-select-match>\n                                <ui-select-choices repeat="item.id as item in (ctrl.magacini | filter: $select.search) track by item.id">\n                                    <span ng-bind="item.naziv"></span>\n                                </ui-select-choices>\n                            </ui-select>\n                            <div ng-messages="ctrl.forma.magacin_id.$error" role="alert" class="invalid-feedback">\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-md-6 col-lg-3">\n                        <div class="form-group">\n                            <label for="prijemnica-dobavljac-id" class="form-label">Dobavlja\u010D</label>\n                            <!-- TODO autofocus -->\n                            <ui-select id="prijemnica-dobavljac-id" name="dobavljac_id" ng-model="ctrl.prijemnica.dobavljac_id" theme="select2" search-enabled="true">\n                                <ui-select-match placeholder="&nbsp;">\n                                    <span ng-bind="$select.selected.naziv"></span>\n                                </ui-select-match>\n                                <ui-select-choices repeat="item.id as item in (ctrl.komitenti | filter: $select.search) track by item.id">\n                                    <span ng-bind="item.naziv"></span>\n                                </ui-select-choices>\n                            </ui-select>\n                        </div>\n                    </div>\n                    <div class="col-12 col-md-6 col-lg-3">\n                        <div class="form-group">\n                            <label for="prijemnica-broj-ulazne-fakture" class="form-label">Broj ulazne fakture</label>\n                            <input type="text" class="form-control" name="broj_ulazne_fakture" id="prijemnica-broj-ulazne-fakture" ng-model="ctrl.prijemnica.broj_ulazne_fakture">\n                        </div>\n                    </div>\n                    <div class="col-12 col-md-6 col-lg-3">\n                        <div class="form-group">\n                            <label for="faktura-datum-ulazne-fakture" class="form-label">Datum ulazne fakture</label>\n                            <div class="input-group">\n                                <input type="text" class="form-control" uib-datepicker-popup is-open="datum_ulazne_fakture_is_opened" name="datum_ulazne_fakture" id="faktura-datum-ulazne-fakture" ng-model="ctrl.prijemnica.datum_ulazne_fakture">\n                                <button type="button" class="btn btn-dark" ng-click="datum_ulazne_fakture_is_opened = !datum_ulazne_fakture_is_opened">\n                                    <i class="fa fa-calendar"></i>\n                                </button>\n                            </div>\n                            <div ng-messages="ctrl.forme.racun.datum_ulazne_fakture.$error" role="alert" class="invalid-feedback">\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class="mt-3"></div>\n    <div class="card">\n        <div class="card-header">\n            <div class="fw-bold text-uppercase">Stavke prijemnice</div>\n        </div>\n        <div class="card-body">\n            <form name="ctrl.formaStavka" novalidate>\n                <div class="row g-3">\n                    <div class="col-12 col-md-6 col-lg-3">\n                        <div class="form-group">\n                            <label for="prijemnica-stavka-kolicina" class="form-label">Koli\u010Dina</label>\n                            <input type="number" class="form-control" name="kolicina" id="prijemnica-stavka-kolicina" ng-model="ctrl.stavka.kolicina" required min="0.001" step="0.001" ng-class="{ \'is-invalid\': ctrl.formaStavka.$submitted && ctrl.formaStavka.kolicina.$invalid }">\n                            <div ng-messages="ctrl.formaStavka.kolicina.$error" role="alert" class="invalid-feedback">\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-md-6 col-lg-6">\n                        <div class="form-group">\n                            <label for="prijemnica-artikal-id" class="form-label">Artikal</label>\n                            <ui-select id="prijemnica-artikal-id" name="artikal" ng-model="ctrl.stavka.artikal" theme="select2" search-enabled="true" required ng-class="{ \'is-invalid\': ctrl.formaStavka.$submitted && ctrl.formaStavka.artikal.$invalid }">\n                                <ui-select-match placeholder="&nbsp;">\n                                    <span ng-bind="$select.selected.naziv"></span>\n                                </ui-select-match>\n                                <ui-select-choices repeat="item as item in (ctrl.artikli | filter: $select.search)">\n                                    <span ng-bind="item.naziv"></span>\n                                </ui-select-choices>\n                            </ui-select>\n                            <div ng-messages="ctrl.formaStavka.artikal.$error" role="alert" class="invalid-feedback">\n                                <div ng-messages-include="error-messages"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-12 col-md-3">\n                        <button class="btn btn-success btn-form-offset-lg" ng-click="ctrl.dodajStavku()">\n                            <i class="fa fa-plus"></i> Dodaj stavku\n                        </button>\n                    </div>\n                </div>\n            </form>\n\n            <div class="overflow-x-auto mt-3">\n                <div class="w-max-content w-sm-100">\n                    <div class="card card-body p-0 mt-3">\n                        <table class="table table-nowrap mb-0">\n                            <thead>\n                            <tr>\n                                <th style="width: 1px;">Koli\u010Dina</th>\n                                <th style="width: 1px;"></th>\n                                <th>Artikal</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <tr ng-repeat="stavka in ctrl.prijemnica.stavke" ng-click="ctrl.obrisiStavku($index)">\n                                <td class="text-end" style="width: 1px;">{{ stavka.kolicina }}</td>\n                                <td style="width: 1px;">x</td>\n                                <td>{{ stavka.artikal.naziv }}</td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="mt-3"></div>\n    <div class="d-flex flex-column-reverse flex-md-row justify-content-end gap-3">\n        <button class="btn btn-light border" ui-sref="artikal-pregled-lista">\n            <i class="fa fa-close"></i> Odustani\n        </button>\n        <button class="btn btn-success" ng-click="ctrl.upis()">\n            Sa\u010Duvaj prijemnicu\n        </button>\n    </div>\n</div>');
$templateCache.put('app/views/stanje/stanje.template.html','<div class="py-3 py-lg-5">\n    <div class="container-lg">\n        <div class="row g-3">\n            <div class="col-12 col-md-6 col-xl-4">\n                <div class="card shadow-sm h-100">\n                    <div class="card-body flex-grow-0">\n                        <div class="d-flex justify-content-between">\n                            <div><span class="fw-bold">Stanje</span></div>\n                            <div><span class="fw-bold">{{ ctrl.stanje.ukupno }} \u20AC</span></div>\n                        </div>\n                    </div>\n                    <ul class="list-group list-group-flush flex-grow-1 d-flex justify-content-evenly">\n                        <li class="list-group-item flex-grow-1 d-flex justify-content-between align-items-center">\n                            <span>Depozit</span>\n                            <span>{{ ctrl.stanje.depozit }} \u20AC</span>\n                        </li>\n                        <li class="list-group-item flex-grow-1 d-flex justify-content-between align-items-center">\n                            <span>Razdu\u017Eenja</span>\n                            <span>{{ ctrl.stanje.isplate }} \u20AC</span>\n                        </li>\n                        <li class="list-group-item flex-grow-1 d-flex justify-content-between align-items-center">\n                            <span>Pla\u0107anja</span>\n                            <span>{{ ctrl.stanje.suma_racuna }} \u20AC</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/views/izvjestaj-po-grupama-artikala-forma/izvjestaj-po-grupama-artikala-forma.template.html','<div class="container-lg mt-3">\n    <div class="row">\n        <div class="col-12 col-sm-10 col-md-12 col-xl-9 col-xxl-8">\n            <div class="card">\n                <div class="card-header position-sticky top-navbar">\n                    <div class="fw-bold">Izvje\u0161taj po grupama artikala</div>\n                </div>\n                <div class="card-body">\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.poGrupamaArtikala(fisReportService.getMonthStartRelative(-1), fisReportService.getMonthEndRelative(-1))">prethodni mjesec</span>\n                    <span class="btn btn-outline-dark btn-sm" ng-click="fisReportService.poGrupamaArtikala(fisReportService.getMonthStartRelative(), fisReportService.getMonthEndRelative())">teku\u0107i mjesec</span>\n                </div>\n                <div class="card-body">\n                    <div class="row g-3">\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Po\u010Detni datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumOd" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumOd" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                        <div class="col-12 col-md-6">\n                            <div class="border pb-3">\n                                <div class="p-2 text-center bg-light">Krajnji datum</div>\n                                <div uib-datepicker ng-model="ctrl.datumDo" datepicker-options="{ customClass: ctrl.customClass }"></div>\n                                <div uib-timepicker ng-model="ctrl.datumDo" class="mt-3 d-flex justify-content-center"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="card-footer">\n                    <button class="btn btn-success d-block w-100 wd-md-100p" ng-click="fisReportService.poGrupamaArtikala(ctrl.datumOd, ctrl.datumDo)">\n                        <i class="fa fa-print"></i> \u0160tampaj\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views2/certificates-list-view/certificates-list-view.template.html','<div class="p-3">\n  <div class="container">\n    <div class="card shadow-sm">\n      <div class="card-header">\n        Sertifikati\n      </div>\n      <div class="card-body" ng-if="ctrl.certificates.length === 0">\n        Nema nijednog sertifikata.\n      </div>\n      <div class="table-responsive">\n        <table class="table table-flush" ng-if="ctrl.certificates.length > 0">\n          <thead>\n            <tr>\n              <th style="width: auto;">Identifikator</th>\n              <th class="text-nowrap" style="width: 1px;">Va\u017Ei od</th>\n              <th class="text-nowrap" style="width: 1px;">Va\u017Ei do</th>\n              <th class="text-nowrap" style="width: 1px;"></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr ng-repeat="certificate in ctrl.certificates">\n              <td style="width: auto;">{{ certificate.fingerprint }}</td>\n              <td class="text-nowrap" style="width: 1px;">{{ certificate.not_valid_before | fisFormatDatetime }}</td>\n              <td class="text-nowrap" style="width: 1px;">{{ certificate.not_valid_after | fisFormatDatetime }}</td>\n              <td class="text-nowrap py-2" style="width: 1px;" data-ng-click="ctrl.openConfirmDeletionModal(certificate.id)">\n                <button type="button" class="btn btn-light border">\n                  <i class="fa fa-trash"></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div class="card-footer">\n        <button type="button" class="btn btn-primary" ng-click="ctrl.openCertificateUploadModal()">\n          <i class="fa fa-plus"></i> Novi sertifikat\n        </button>\n      </div>\n    </div>\n  </div>\n</div>');
$templateCache.put('app/views/prijemnica-pregled-lista/prijemnica-pregled-lista.template.html','<div class="py-3 py-sm-5">\n    <div class="container">\n        <div class="row g-3">\n            <div class="col-12 col-md-3">\n                <input type="text" class="form-control" id="pretraga-pojam" placeholder="Pretraga" ng-model="upit">\n            </div>\n            <div class="col-12 col-md-4">\n                <button class="btn btn-success" ui-sref="prijemnica-unos">\n                    <i class="fa fa-plus"></i> Dodaj prijemnicu\n                </button>\n            </div>\n            <div class="col-12 col-md-5" ng-if="ctrl.stranica.ukupan_broj_stavki > ctrl.stranica.broj_stavki_po_stranici">\n                <fis-pagination\n                    class="justify-content-end"\n                    data-current-page="ctrl.broj_stranice"\n                    data-page-data="ctrl.stranica"\n                    data-on-page-change="ctrl.promijeniStranicu()">\n                </fis-pagination>\n            </div>\n        </div>\n        <div class="overflow-x-auto mt-3">\n            <div class="w-max-content" style="min-width: 100%;">\n                <div class="card card-body">\n                    <table class="table table-nowrap mb-0">\n                        <thead>\n                        <tr>\n                            <th>Broj</th>\n                            <th>Magacin</th>\n                            <th>Dobavlja\u010D</th>\n                            <th>Operater</th>\n                            <th>Datum unosa</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat="prijemnica in ctrl.stranica.stavke">\n                            <td>{{ prijemnica.redni_broj_kalkulacije }}</td>\n                            <td>{{ prijemnica.magacin.naziv }}</td>\n                            <td>{{ prijemnica.dobavljac.naziv }}</td>\n                            <td>{{ prijemnica.operater.ime }}</td>\n                            <td>{{ prijemnica.datum_kalkulacije | fisFormatDatetime }}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
$templateCache.put('app/views/profaktura-pregled-redovnih/profaktura-pregled-redovnih.template.html','<div class="container py-3">\n    <div class="alert alert-primary" ng-if="ctrl.stranica.total_items > ctrl.stranica.ukupan_broj_stavki">\n        {{ ctrl.stranica.ukupan_broj_stavki }} od {{ ctrl.stranica.total_items }} ra\u010Duna odgovara filterima.\n        <a href="#" ng-click="ctrl.ponistiPretragu($event);">Kliknite ili pritisnite ovdje da poni\u0161tite filtere.</a>\n    </div>\n    <div class="row g-3">\n        <div class="col-2 d-none">\n            <a class="btn btn-primary w-100" ui-sref="regularInvoiceInput">\n                <i class="fa fa-plus"></i> Dodaj\n            </a>\n        </div>\n        <div class="col-4 col-md-2">\n            <button type="button" class="btn btn-light border w-100" ng-click="ctrl.areFiltersVisible = !ctrl.areFiltersVisible">\n                <i class="fa" ng-class="{ \'fa-eye\': !ctrl.areFiltersVisible, \'fa-eye-slash\': ctrl.areFiltersVisible }"></i> Filteri\n            </button>\n        </div>\n        <div class="col-8 col-md-4">\n            <div class="btn-group w-100">\n                <div class="btn border"\n                     ng-click="ctrl.setViewType(\'grid\')"\n                     ng-class="{ \'text-primary btn-white\': ctrl.viewType === \'grid\', \'text-muted btn-light\': ctrl.viewType !== \'grid\' }">\n                    <i class="fa fa-th-large"></i> Kartice\n                </div>\n                <div class="btn border"\n                     ng-click="ctrl.setViewType(\'table\')"\n                     ng-class="{ \'text-primary btn-white\': ctrl.viewType === \'table\', \'text-muted btn-light\': ctrl.viewType !== \'table\' }">\n                    <i class="fa fa-table"></i> Tabela\n                </div>\n            </div>\n        </div>\n        <div class="col-12 col-md-6" ng-show="ctrl.stranica.ukupan_broj_stavki > 0">\n            <fis-pagination\n                class="justify-content-end"\n                data-current-page="ctrl.broj_stranice"\n                data-page-data="ctrl.stranica"\n                data-on-page-change="ctrl.promijeniStranicu()">\n            </fis-pagination>\n        </div>\n    </div>\n\n    <div\n        class="mt-3"\n        ng-show="ctrl.stranica.ukupan_broj_stavki === 0">\n        <div class="card card-body">\n            Ne postoji ra\u010Dun koji odgovara kriterijumima pretrage.\n        </div>\n    </div>\n\n    <invoice-filter-form\n        class="mt-3"\n        data-filters="ctrl.filters"\n        data-on-confirm="ctrl.applyFilters();"\n        data-on-close="ctrl.areFiltersVisible = false"\n        data-on-buyer-select="ctrl.applyFilters();"\n        ng-show="ctrl.areFiltersVisible">\n    </invoice-filter-form>\n\n    <div class="card card-body table-responsive mt-3" ng-if="ctrl.viewType === \'table\' && ctrl.stranica.stavke.length > 0">\n        <table class="table text-nowrap bg-white">\n            <thead>\n            <tr>\n                <th class="w-1">Fiskalni broj</th>\n                <th class="w-1">Tip</th>\n                <th class="w-1">Vrijeme</th>\n                <th class="w-1 text-end">Cijena</th>\n                <th class="w-1 text-end">Porez</th>\n                <th class="w-1">Na\u010Din pla\u0107anja</th>\n                <th class="w-1">Kupac</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat="racun in ctrl.stranica.stavke">\n                <td class="w-1">\n                    <span class="text-nowrap">{{ racun.efi_broj_fakture }}</span>\n                </td>\n                <td class="w-1">\n                    <invoice-badges invoice="racun"></invoice-badges>\n                </td>\n                <td class="w-1">{{ racun.datumfakture | fisFormatDatetime }}</td>\n                <td class="w-1 text-end">\n                    <div ng-if="racun.tip_fakture_id !== 1">\n                        {{ racun.ukupna_cijena_prodajna }}\n                    </div>\n                    <div ng-if="racun.tip_fakture_id === 1">\n                        <div ng-if="racun.je_korigovana">\n                            <span class="text-decoration-line-through">{{ racun.ukupna_cijena_prodajna }}</span>\n                        </div>\n                        <div>\n                            <span>{{ racun.korigovana_ukupna_cijena_prodajna }}</span>\n                        </div>\n                    </div>\n                </td>\n                <td class="w-1 text-end">\n                    <div ng-if="racun.tip_fakture_id !== 1">\n                        {{ racun.porez_iznos }}\n                    </div>\n                    <div ng-if="racun.tip_fakture_id === 1">\n                        <div ng-if="racun.je_korigovana">\n                            <span class="text-decoration-line-through">{{ racun.porez_iznos }}</span>\n                        </div>\n                        <div>\n                            <span>{{ racun.korigovani_porez_iznos }}</span>\n                        </div>\n                    </div>\n                </td>\n                <td class="w-1">\n                    <div ng-repeat="payment_method in racun.payment_methods">\n                        {{ payment_method.payment_method_type.description }}\n                    </div>\n                </td>\n                <td class="w-1">\n                    <div>{{ racun.komitent.naziv }}</div>\n                    <div ng-if="racun.komitent.napomena !== undefined && racun.komitent.napomena !== null && racun.komitent.napomena.length > 0">\n                        <div><small class="text-danger">Napomena:</small></div>\n                        <div>{{ racun.komitent.napomena }}</div>\n                    </div>\n                </td>\n                <td>\n                    <a href="#" class="btn border-secondary" ui-sref="faktura-korekcija({ id: racun.id })" ng-show="racun.tip_fakture_id === 1 && racun.status === 2">\n                        <i class="fa fa-edit"></i>\n                    </a>\n                    <button class="btn border-secondary" ng-click="ctrl.storniraj($index)" ng-show="racun.tip_fakture_id === 1 && racun.status === 2 && racun.korigovana_ukupna_cijena_prodajna !== 0">\n                        <i class="fa fa-remove"></i>\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.stampac.stampajFakturu(racun.id, \'a4\')">\n                        A4\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.stampac.stampajFakturu(racun.id, \'58mm\')" style="text-transform: none;">\n                        58mm\n                    </button>\n                    <button type="button" class="btn border-secondary" ng-click="ctrl.posaljiMail(racun.id)" ng-if="$root.fisConfig.user.firma.settings.smtp_active && racun.komitent_id && racun.komitent.email">\n                        <i class="fa fa-envelope"></i>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <div class="mt-3" ng-if="ctrl.viewType === \'grid\' && ctrl.stranica.stavke.length > 0">\n        <div class="row g-4">\n            <div class="col-12 col-md-6 col-xl-4" ng-repeat="racun in ctrl.stranica.stavke">\n                <invoice-card invoice="racun"></invoice-card>\n            </div>\n        </div>\n    </div>\n\n    <div class="mt-4" ng-show="ctrl.stranica.ukupan_broj_stavki > 0">\n        <fis-pagination\n            class="justify-content-end"\n            data-current-page="ctrl.broj_stranice"\n            data-page-data="ctrl.stranica"\n            data-on-page-change="ctrl.promijeniStranicu()">\n        </fis-pagination>\n    </div>\n\n    <div class="alert alert-primary mt-3" ng-if="ctrl.stranica.total_items > ctrl.stranica.ukupan_broj_stavki">\n        <div>\n            {{ ctrl.stranica.ukupan_broj_stavki }} od {{ ctrl.stranica.total_items }} ra\u010Duna odgovara filterima.\n            <a href="#" ng-click="ctrl.ponistiPretragu($event);">Kliknite ili pritisnite ovdje da poni\u0161tite filtere.</a>\n        </div>\n    </div>\n</div>\n<div class="scroll-buffer-large"></div>');
$templateCache.put('app/views/komitent-pregled-placanja/komitent-pregled-placanja.template.html','<div class="border-bottom bg-light">\n    <div class="container-lg py-3">\n        <h4 class="mb-3">{{ ctrl.komitent.naziv }}</h4>\n        <div>{{ ctrl.komitent.grad }}, {{ ctrl.komitent.adresa }}</div>\n    </div>\n</div>\n<div class="border-bottom bg-light" ng-repeat="placanje in ctrl.komitent.placanja">\n    <div class="container-lg py-3">\n        <div class="row">\n            <div class="col-9">\n                <div>\n                    <b>Datum:</b> {{ placanje.datum_placanja }}\n                </div>\n                <div>\n                    <b>Iznos:</b> {{ placanje.iznos }}\n                </div>\n            </div>\n            <div class="col-3">\n                <button type="button" class="btn btn-danger w-100" ng-click="ctrl.obrisi($index)">\n                    <i class="fa fa-trash"></i> Obri\u0161i\n                </button>\n            </div>\n        </div>\n    </div>\n</div>');}]);
angular.module('app').config(['$httpProvider', function ($httpProvider) {
    $httpProvider.interceptors.push(["$q", "$window", function ($q, $window) {
        return {
            responseError: function (rejection) {
                if (rejection.status === -1) {
                    return;
                }

                if (rejection.config.url.match('^/api')) {
                    if (rejection.status === 401) {
                        $window.location.href = './login.html';
                        return;
                    }

                    if (rejection.status === 403) {
                        $window.location.href = './forbidden.html';
                        return;
                    }
                }

                $window.location.href = './login.html';
            }
        }
    }]);
}]);


angular
    .module('app')
    .config(uiBootstrapRefreshDatepicker);

uiBootstrapRefreshDatepicker.$inject = ['$provide'];

function uiBootstrapRefreshDatepicker($provide) {
    $provide.decorator('uibDatepickerDirective', ["$delegate", function ($delegate) {
        var directive = $delegate[0];
        var link = directive.link;

        directive.compile = function () {
            return function (scope, element, attrs, ctrls) {
                link.apply(this, arguments);

                var datepickerCtrl = ctrls[0];
                var ngModelCtrl = ctrls[1];

                if (ngModelCtrl) {
                    // Listen for 'refreshDatepickers' event...
                    scope.$on('refreshDatepickers', function refreshView() {
                        datepickerCtrl.refreshView();
                    });
                }
            }
        };
        return $delegate;
    }]);
}
angular
    .module('app')
    .config(uiRouterDatetimeMatcher);

uiRouterDatetimeMatcher.$inject = ['$urlMatcherFactoryProvider'];

function uiRouterDatetimeMatcher($urlMatcherFactoryProvider) {
    $urlMatcherFactoryProvider.type('datetime', {
        name: 'datetime',
        encode: function (value) {
            if (angular.isDefined(value)) {
                return moment(value).format();
            }
        },
        decode: function (value) {
            var timestamp;

            if (angular.isDate(value)) {
                return value;
            }

            if (angular.isString(value)) {
                return moment(value).toDate();
            }

            timestamp = Date.parse(value);

            if (!isNaN(timestamp)) {
                return new Date(timestamp);
            }
        },

        /**
         * @description
         * Detects whether a value is of a particular type. Accepts a native (decoded) value and determines whether
         * it matches the current Type object.
         */
        is: function (value) {
            return angular.isDefined(value) && this.decode(value) === value;
        }
    })
}
angular.module('app').config(['uibDatepickerConfig', function (uibDatepickerConfig) {
    uibDatepickerConfig.showWeeks = false;
    uibDatepickerConfig.startingDay = 1;
}]);
angular.module('app').config(['uibDatepickerPopupConfig', function (uibDatepickerPopupConfig) {
    uibDatepickerPopupConfig.showWeeks = false;
    uibDatepickerPopupConfig.clearText = 'Poništi';
    uibDatepickerPopupConfig.closeText = 'Zatvori';
    uibDatepickerPopupConfig.currentText = 'Danas';
}]);
angular.module('app').config(['uibPaginationConfig', function (uibPaginationConfig) {
    uibPaginationConfig.firstText = 'Prva';
    uibPaginationConfig.previousText = 'Prethodna';
    uibPaginationConfig.nextText = 'Sledeća';
    uibPaginationConfig.lastText = 'Poslednja';
}]);
angular.module('app').config(['uibTimepickerConfig', function (uibTimepickerConfig) {
    uibTimepickerConfig.showMeridian = false;
    uibTimepickerConfig.mousewheel = false;
    uibTimepickerConfig.showSpinners = false;
    uibTimepickerConfig.showSeconds = true;
}]);
angular
    .module('app')
    .config(routesConfig);

routesConfig.$inject = ['$urlRouterProvider', '$stateProvider', 'fisConfigProvider', 'fisInvoiceConfig'];

function routesConfig($urlRouterProvider, $stateProvider, fisConfigProvider, fisInvoiceConfig) {
    $urlRouterProvider.otherwise(fisConfigProvider.service.user.podesavanja_aplikacije.pocetna_stranica);

    $stateProvider.state({
        name: 'artikal-izmijeni',
        url: '/artikal/:id/izmijeni',
        templateUrl: 'app/views/artikal-izmjena/artikal-izmjena.template.html',
        controller: 'ArtikalIzmjenaController',
        controllerAs: 'ctrl',
        resolve: {
            initialData: ['$stateParams', 'api', function($stateParams, api) {
                return api.api__frontend__artikal__po_id__izmijeni($stateParams.id).then(function(data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'artikal-pregled-lista',
        url: '/artikal/pregled?broj_stranice&broj_stavki_po_stranici&pojam_za_pretragu',
        templateUrl: 'app/views/artikal-pregled-lista/artikal-pregled-lista.template.html',
        controller: 'ArtikalPregledListalController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            strana: ['$stateParams', 'api', 'fisConfig', function ($stateParams, api, fisConfig) {
                return api.magacin.poId.zalihe.listaj(fisConfig.user.magacin_id, {
                    pojam_za_pretragu: $stateParams.pojam_za_pretragu,
                    broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
                    broj_stranice: $stateParams.broj_stranice
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'artikal-unos',
        url: '/artikal/unos',
        templateUrl: 'app/views/artikal-unos/artikal-unos.template.html',
        controller: 'ArtikalUnosController',
        controllerAs: 'ctrl',
        resolve: {
            initialData: ['api', function(api) {
                return api.api__frontend__artikal__unos().then(function(data) {
                    return data;
                });
            }],
        }
    });

    $stateProvider.state({
        name: 'credit_note_create',
        url: '/credit_note/new',
        templateUrl: 'app/views/credit-note-create/credit-note-create.template.html',
        controller: 'CreditNoteCreateController',
        controllerAs: 'ctrl',
        resolve: {
            viewData: ['fisCustomerApi', function(fisCustomerApi) {
                return fisCustomerApi.views__credit_note_create__on_load();
            }]
        }
    });

    $stateProvider.state({
        name: 'credit_note_view',
        url: '/knjizno_odobrenje/pregled?broj_stranice&broj_stavki_po_stranici',
        templateUrl: 'app/views/credit-note-view/credit-note-view.template.html',
        controller: 'CreditNoteViewController',
        controllerAs: 'ctrl',
        params: {

        },
        resolve: {
            viewData: ['$stateParams', 'fisCustomerApi', function($stateParams, fisCustomerApi) {
                return fisCustomerApi.views__credit_note_view__on_load({
                    broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
                    broj_stranice: $stateParams.broj_stranice
                }).then(function(data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'depozit',
        url: '/depozit',
        templateUrl: 'app/views/depozit/depozit.template.html',
        controller: 'DepozitController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            initialData: ['api', function (api) {
                return api.api__frontend__deposit().then(function(data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'firma-dospjela-faktura-listaj',
        url: '/firma/dospjela_faktura/pregled',
        templateUrl: 'app/views/dospjela-faktura-pregled/dospjela-faktura-pregled.template.html',
        controller: 'DospjelaFakturaPregledController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            dospjele_fakture: ['$stateParams', 'api', function($stateParams, api) {
                return api.dospjelaFaktura.listaj();
            }]
        }
    });

    $stateProvider.state({
        title: 'Konačni račun',
        showDesktopTitle: true,

        name: 'finalInvoiceInput',
        url: '/final_invoice/create?advance_invoice_id',
        templateUrl: 'app/views/faktura-konacni-racun/faktura-konacni-racun.template.html',
        controller: 'FakturaKonacniRacunController',
        controllerAs: 'ctrl',
        params: {
            invoice_template_id: {type: 'int', value: null, squash: true},
            invoice_type_id: {type: 'int', value: null, squash: true},
            advance_invoice_id: {type: 'int', value: null}
        },
        resolve: {
            /* @ngInject */
            initialData: ['$stateParams', 'api', function($stateParams, api) {
                return api.api__frontend__final_invoice__create($stateParams.advance_invoice_id).then(function (data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'faktura-korekcija',
        url: '/faktura/:id/korekcija',
        templateUrl: 'app/views/faktura-korekcija/faktura-korekcija.template.html',
        controller: 'FakturaKorekcijaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            faktura: ['$stateParams', 'api', function($stateParams, api) {
                return api.faktura.poId.listaj($stateParams.id);
            }]
        }
    });

    $stateProvider.state({
        title: 'Prodaja po artiklima',
        showDesktopTitle: false,

        name: 'prodaja-racun-unos',
        url: '/prodaja/racun/unos',
        templateUrl: 'app/views/faktura-pos-unos/faktura-pos-unos.template.html',
        controller: 'FakturaPosUnosController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'faktura_preged_avansa',
        url: '/racun/avans/pregled?broj_stranice&broj_stavki_po_stranici&{ordinal_id}&{client_id}&{payment_type_id}&{total_price_gte}&{total_price_lte}&{fiscalization_date_gte}&{fiscalization_date_lte}',
        templateUrl: 'app/views/faktura-pregled-avansa/faktura-pregled-avansa.template.html',
        controller: 'FakturaPregledAvansaController',
        controllerAs: 'ctrl',
        params: {
            ordinal_id: {type: 'int'},
            client_id: {array: true, type: 'int', value: []},
            payment_type_id: {array: true, type: 'int', value: []},
            total_price_gte: {type: 'int'},
            total_price_lte: {type: 'int'},
            fiscalization_date_gte: {type: 'datetime'},
            fiscalization_date_lte: {type: 'datetime'},
        },
        resolve: {
            /* @ngInject */
            initialData: ['$http', '$stateParams', 'fisInvoiceConfig', function ($http, $stateParams, fisInvoiceConfig) {
                let params = {
                    broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici || fisInvoiceConfig.itemsPerPage,
                    broj_stranice: $stateParams.broj_stranice || 1,
                    ordinal_id: $stateParams.ordinal_id,
                    total_price_gte: $stateParams.total_price_gte,
                    total_price_lte: $stateParams.total_price_lte,
                    fiscalization_date_gte: $stateParams.fiscalization_date_gte,
                    fiscalization_date_lte: $stateParams.fiscalization_date_lte,
                    payment_type_id: $stateParams.payment_type_id,
                    client_id: $stateParams.client_id
                }

                return $http({
                    method: 'GET',
                    url: '/api/customer/frontend/invoice/advance/all',
                    params: params
                }).then(function (response) {
                    return response.data;
                });
            }]
        }
    });

    $stateProvider.state({
        title: 'Pregled računa',
        showDesktopTitle: true,

        name: 'faktura_pregled_redovnih',
        url: '/racun/redovni/pregled?broj_stranice&broj_stavki_po_stranici&{ordinal_id}&{client_id}&{payment_type_id}&{total_price_gte}&{total_price_lte}&{fiscalization_date_gte}&{fiscalization_date_lte}',
        templateUrl: 'app/views/faktura-pregled-redovnih/faktura-pregled-redovnih.template.html',
        controller: 'FakturaPregledRedovnihController',
        controllerAs: 'ctrl',
        params: {
            broj_stranice: {
                type: 'int',
                value: 1
            },
            broj_stavki_po_stranici: {
                type: 'int',
                value: fisInvoiceConfig.itemsPerPage
            },
            ordinal_id: {
                type: 'int',
                value: undefined
            },
            total_price_gte: {
                type: 'int',
                value: undefined
            },
            total_price_lte: {
                type: 'int',
                value: undefined
            },
            fiscalization_date_gte: {
                type: 'datetime',
                value: undefined
            },
            fiscalization_date_lte: {
                type: 'datetime',
                value: undefined
            },
            client_id: {
                type: 'int',
                array: true
            },
            payment_type_id: {
                type: 'int',
                array: true
            },
        },
        resolve: {
            /* @ngInject */
            initialData: ['api', '$stateParams', function (api, $stateParams) {
                let params = {
                    ordinal_id: $stateParams.ordinal_id,
                    broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
                    broj_stranice: $stateParams.broj_stranice,
                    total_price_gte: $stateParams.total_price_gte,
                    total_price_lte: $stateParams.total_price_lte,
                    fiscalization_date_gte: $stateParams.fiscalization_date_gte,
                    fiscalization_date_lte: $stateParams.fiscalization_date_lte,
                    payment_type_id: $stateParams.payment_type_id,
                    client_id: $stateParams.client_id
                }

                return api.api__frontend__invoice__regular__all(params);
            }]
        }
    });

    $stateProvider.state({
        title: 'Slobodan unos avansa',
        showDesktopTitle: true,

        name: 'advanceInvoiceInput',
        url: '/advance/create',
        templateUrl: 'app/views/faktura-slobodan-unos-avansa/faktura-slobodan-unos-avansa.template.html',
        controller: 'FakturaSlobodanUnosAvansaController',
        controllerAs: 'ctrl',
        params: {
            invoice_template_id: {type: 'int', value: null, squash: true},
            invoice_type_id: {type: 'int', value: null, squash: true}
        },
        resolve: {
            /* @ngInject */
            initialData: ['$stateParams', 'api', function($stateParams, api) {
                return api.api__frontend__invoice__create__type1($stateParams.invoice_template_id).then(function (data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        title: 'Slobodan unos korekcije',
        showDesktopTitle: true,

        name: 'corrective-invoice-create',
        url: '/corrective/create',
        templateUrl: 'app/views/faktura-slobodan-unos-korekcije/faktura-slobodan-unos-korekcije.template.html',
        controller: 'FakturaSlobodanUnosKorekcijeController',
        controllerAs: 'ctrl',
        params: {
            invoice_template_id: {type: 'int', value: null, squash: true},
            invoice_type_id: {type: 'int', value: null, squash: true}
        }
    });

    $stateProvider.state({
        title: 'Slobodan unos računa',
        showDesktopTitle: true,

        name: 'regularInvoiceInput',
        url: '/racun/opsti_unos',
        templateUrl: 'app/views/faktura-slobodan-unos-redovnih/faktura-slobodan-unos-redovnih.template.html',
        controller: 'FakturaSlobodanUnosRedovnihController',
        controllerAs: 'ctrl',
        params: {
            invoice_template_id: {type: 'int', value: null, squash: true},
            invoice_type_id: {type: 'int', value: null, squash: true}
        },
        resolve: {
            /* @ngInject */
            initialData: ['$stateParams', 'api', function($stateParams, api) {
                return api.api__frontend__invoice__create__type1($stateParams.invoice_template_id).then(function (data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        title: 'Unos po grupama',
        showDesktopTitle: false,

        name: 'faktura-unos-po-grupama',
        url: '/faktura/grupe/unos',
        templateUrl: 'app/views/faktura-unos-po-grupama/faktura-unos-po-grupama.template.html',
        controller: 'FakturaUnosPoGrupamaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            grupe_artikala: ['$rootScope', 'api', function($rootScope, api) {
                return api.grupaArtikala.listaj().then(function (data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'firma-azuriraj',
        url: '/firma/azuriraj',
        templateUrl: 'app/views/firma-izmjena/firma-izmjena.template.html',
        controller: 'FirmaIzmjenaController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        title: 'Izmjena grupe artikala',
        showDesktopTitle: true,

        name: 'grupa-artikala-izmjena',
        url: '/grupa_artikala/:id/izmjena',
        templateUrl: 'app/views/grupa-artikala-izmjena/grupa-artikala-izmjena.template.html',
        controller: 'GrupaArtikalaIzmjenaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            grupaArtikala: ['$stateParams', 'api', function($stateParams, api) {
                return api.grupaArtikala.poId.listaj($stateParams.id);
            }]
        }
    });

    $stateProvider.state({
        name: 'grupa-artikala-pregled-lista',
        url: '/grupa_artikala/pregled',
        templateUrl: 'app/views/grupa-artikala-pregled-lista/grupa-artikala-pregled-lista.template.html',
        controller: 'GrupaArtikalaPregledListaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            grupeArtikala: ['api', function(api) {
                return api.grupaArtikala.listaj().then(function(data) {
                    return data;
                });
            }]
        }
    });

    $stateProvider.state({
        title: 'Nova grupa artikala',
        showDesktopTitle: true,

        name: 'grupa-artikala-unos',
        url: '/grupa_artikala/unos',
        templateUrl: 'app/views/grupa-artikala-unos/grupa-artikala-unos.template.html',
        controller: 'GrupaArtikalaUnosController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'izvjestaj_dnevni_izvjestaj',
        url: '/izvjestaj/dnevni_izvjestaj',
        templateUrl: 'app/views/izvjestaj-dnevni-forma/izvjestaj-dnevni-forma.template.html',
        controller: 'IzvjestajDnevniFormaController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'izvjestaj_periodicni_izvjestaj',
        url: '/izvjestaj/periodicni_izvjestaj',
        templateUrl: 'app/views/izvjestaj-periodicni-forma/izvjestaj-periodicni-forma.template.html',
        controller: 'IzvjestajPeriodicniFormaController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'izvjestaj_po_artiklima',
        url: '/izvjestaj/po_artiklima',
        templateUrl: 'app/views/izvjestaj-po-artiklima-forma/izvjestaj-po-artiklima-forma.template.html',
        controller: 'IzvjestajPoArtiklimaFormaController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'izvjestaj_po_grupama_artikala',
        url: '/izvjestaj/po_grupama_artikala',
        templateUrl: 'app/views/izvjestaj-po-grupama-artikala-forma/izvjestaj-po-grupama-artikala-forma.template.html',
        controller: 'IzvjestajPoGrupamaArtikalaFormaController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'izvjestaj_zurnal',
        url: '/izvjestaj/zurnal',
        templateUrl: 'app/views/izvjestaj-zurnal-forma/izvjestaj-zurnal-forma.template.html',
        controller: 'IzvjestajZurnalFormaController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'komitent-izmjena',
        url: '/komitent/:id/izmjena',
        templateUrl: 'app/views/komitent-izmjena/komitent-izmjena.template.html',
        controller: 'KomitentIzmjenaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            komitent: ['$stateParams', 'api', function($stateParams, api) {
                return api.komitent.poId.listaj($stateParams.id);
            }]
        }
    });

    $stateProvider.state({
        name: 'komitent-pregled-lista',
        url: '/komitent/pregled?broj_stavki_po_stranici&broj_stranice&upit_za_pretragu',
        templateUrl: 'app/views/komitent-pregled-lista/komitent-pregled-lista.template.html',
        controller: 'KomitentPregledListaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            strana: ['$stateParams', 'fisCustomerApi', function($stateParams, fisCustomerApi) {
                return fisCustomerApi.views__komitent_pregled_lista__on_load({
                    'query': $stateParams.upit_za_pretragu,
                    'broj_stranice': $stateParams.broj_stranice,
                    'broj_stavki_po_stranici': $stateParams.broj_stavki_po_stranici
                }).then(function(data) {
                    return data.pagedData;
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'komitent-pregled-placanja',
        url: '/komitent/:id/placanja/pregled',
        templateUrl: 'app/views/komitent-pregled-placanja/komitent-pregled-placanja.template.html',
        controller: 'KomitentPregledPlacanjaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            komitent: ['$stateParams', 'api', function($stateParams, api) {
                return api.komitent.poId.listaj($stateParams.id);
            }]
        }
    });

    $stateProvider.state({
        name: 'komitent-unos',
        url: '/komitent/unos',
        templateUrl: 'app/views/komitent-unos/komitent-unos.template.html',
        controller: 'KomitentUnosController',
        controllerAs: 'ctrl'
    });

    $stateProvider.state({
        name: 'komitent-unos-placanja',
        url: '/komitent/placanja/unos',
        templateUrl: 'app/views/komitent-unos-placanja/komitent-unos-placanja.template.html',
        controller: 'KomitentUnosPlacanjaController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            komitenti: ['$stateParams', 'api', function($stateParams, api) {
                return api.komitent.listaj();
            }]
        }
    });

    $stateProvider.state({
        name: 'prijemnica-pregled-lista',
        url: '/prijemnica/pregled?broj_stranice&broj_stavki_po_stranici',
        templateUrl: 'app/views/prijemnica-pregled-lista/prijemnica-pregled-lista.template.html',
        controller: 'PrijemnicaPregledListaController',
        controllerAs: 'ctrl',
        params: {
            broj_stranice: {
                type: 'int',
                value: 1
            },
            broj_stavki_po_stranici: {
                type: 'int',
                value: 10
            },
        },
        resolve: {
            /* @ngInject */
            stranica: ['$stateParams', 'api', function ($stateParams, api) {
                return api.kalkulacija.listaj({
                    broj_stranice: $stateParams.broj_stranice,
                    broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici
                });
            }]
        }
    });

    $stateProvider.state({
        name: 'prijemnica-unos',
        url: '/prijemnica/unos',
        templateUrl: 'app/views/prijemnica-unos/prijemnica-unos.template.html',
        controller: 'PrijemnicaUnosController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            magacini: ['api', function (api) {
                return api.magacin.listaj().then(function (data) {
                    return data;
                });
            }],
            /* @ngInject */
            komitenti: ['api', function (api) {
                return api.komitent.listaj().then(function (data) {
                    return data;
                });
            }],
            /* @ngInject */
            artikli: ['api', function (api) {
                return api.artikal.listaj().then(function (data) {
                    return data;
                });
            }],
        }
    });

    $stateProvider.state({
        title: "Pregled predračuna",
        showDesktopTitle: true,

        name: 'profaktura-pregled',
        url: '/profaktura/pregled?broj_stranice&broj_stavki_po_stranici&{ordinal_id}&{client_id}&{payment_type_id}&{total_price_gte}&{total_price_lte}&{fiscalization_date_gte}&{fiscalization_date_lte}',
        templateUrl: 'app/views/profaktura-pregled-redovnih/profaktura-pregled-redovnih.template.html',
        controller: 'ProfakturaPregledRedovnihController',
        controllerAs: 'ctrl',
        params: {
            broj_stranice: { type: 'int', value: 1 },
            broj_stavki_po_stranici: {type: 'int', value: fisInvoiceConfig.itemsPerPage },
            ordinal_id: {type: 'int'},
            client_id: {array: true, type: 'int', value: []},
            payment_type_id: {array: true, type: 'int', value: []},
            total_price_gte: {type: 'int'},
            total_price_lte: {type: 'int'},
            fiscalization_date_gte: {type: 'datetime'},
            fiscalization_date_lte: {type: 'datetime'},
        },
        resolve: {
            /* @ngInject */
            initialData: ['api', '$stateParams', function (api, $stateParams) {
                let params = {
                    ordinal_id: $stateParams.ordinal_id,
                    broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
                    broj_stranice: $stateParams.broj_stranice,
                    total_price_gte: $stateParams.total_price_gte,
                    total_price_lte: $stateParams.total_price_lte,
                    fiscalization_date_gte: $stateParams.fiscalization_date_gte,
                    fiscalization_date_lte: $stateParams.fiscalization_date_lte,
                    payment_type_id: $stateParams.payment_type_id,
                    client_id: $stateParams.client_id
                }

                return api.api__frontend__invoice__template__all(params);
            }]
        }
    });

    $stateProvider.state({
        name: 'stanje',
        url: '/stanje',
        templateUrl: 'app/views/stanje/stanje.template.html',
        controller: 'StanjeController',
        controllerAs: 'ctrl',
        resolve: {
            /* @ngInject */
            stanje: ['api', function (api) {
                return api.stanje.listaj();
            }]
        }
    });

    $stateProvider.state({
        name: 'certificates-list-view',
        url: '/certificates-list-view',
        templateUrl: 'app/views2/certificates-list-view/certificates-list-view.template.html',
        controller: 'CertificatesListViewController',
        controllerAs: 'ctrl',
        resolve: {
            viewData: ['fisCustomerApi', function(fisCustomerApi) {
                return fisCustomerApi.certificatesListViewLoad()
            }]
        }
    });
}

angular
    .module('app')
    .run(run);

run.$inject = [
    '$rootScope', '$transitions', '$q', '$timeout', '$window', '$state', 'api', 'fisGui', 'breakpointsService',
    'fisReportService', 'fisModal', 'fisConfig', 'fisInvoiceConfig', 'fisCustomerApi'
];

function run(
    $rootScope, $transitions, $q, $timeout, $window, $state, api, fisGui, breakpointsService,
    fisReportService, fisModal, fisConfig, fisInvoiceConfig, fisCustomerApi
) {

    $rootScope.currency = 'EUR';  // All price input is in domestic currency

    $rootScope.showLoader = false;

    $rootScope.fisConfig = fisConfig;

    $rootScope.fisModal = fisModal;
    $rootScope.fisReportService = fisReportService;

    $rootScope.math = Math;

    $rootScope.breakpoints = breakpointsService;

    $rootScope.isCompanyCollapsed = true;
    $rootScope.isRacuniCollapsed = true;
    $rootScope.isCreditNoteCollapsed = true;
    $rootScope.isArtikliCollapsed = true;
    $rootScope.isPartneriCollapsed = true;
    $rootScope.isReportCollapsed = true;

    $rootScope.goToHomepage = goToHomepage;

    $rootScope.logout = logout;

    $transitions.onStart({}, transitionsOnStart);

    $transitions.onBefore({ to: 'prodaja-racun-unos' }, onBeforeRequireDeposit);
    $transitions.onFinish({}, onTransitionFinishCheckDuePayments);

    $transitions.onFinish({}, transitionsOnFinish);

    angular.element($window).on('resize', onResize);

    $rootScope.$watch('showSidebar', onShowSidebar);

    $rootScope.setCertificateExpirationDate = setCertificateExpirationDate;

    setCertificateExpirationDate(fisConfig.certificate_expiration_date);

    function setCertificateExpirationDate(value) {
        $rootScope.certificate_expiration_date = value;
        $rootScope.certificate_status = 'valid';
        if ($rootScope.certificate_expiration_date === null) {
            $rootScope.certificate_status = 'no-certificate';
        } else {
            const diff = new Date($rootScope.certificate_expiration_date).getTime() - new Date().getTime();
            if (diff <= 0) {
                $rootScope.certificate_status = 'invalid';
            } else if (diff < 604800000) {
                $rootScope.certificate_status = 'expires-soon';
            } else if (diff < 2592000000) {
                $rootScope.certificate_status = 'expires-warning';
            } else {
                $rootScope.certificate_status = 'valid';
            }
        }
    }

    function goToHomepage() {
        if (fisConfig.user.podesavanja_aplikacije.pocetna_stranica === '/prodaja/racun/unos') {
            $state.go('prodaja-racun-unos', null, { reload: true });
        } else if (fisConfig.user.podesavanja_aplikacije.pocetna_stranica === '/racun/opsti_unos') {
            $state.go('regularInvoiceInput', null, { reload: true });
        } else if (fisConfig.user.podesavanja_aplikacije.pocetna_stranica === '/faktura/grupe/unos') {
            $state.go('faktura-unos-po-grupama', null, { reload: true });
        }
    }

    function transitionsOnStart(transition) {
        return $q.all([
            fisGui.showLoader(),
            fisGui.hideSidebar(),
            $timeout(function() {
                $window.document.body.scrollTop = document.documentElement.scrollTop = 0;
            }, 150)
        ]).finally(function() {
            return transition;
        });
    }

    function transitionsOnFinish(transition) {
        let to = transition.to();
        $rootScope.showDesktopTitle = to.showDesktopTitle !== undefined ? to.showDesktopTitle : false;
        $rootScope.title = to.title ? to.title : '';
        return fisGui.hideLoader();
    }

    function onBeforeRequireDeposit(transition) {
        let to = transition.to();
        let from = transition.from();

        fisGui.hideSidebar();
        return fisGui.wrapInLoader(function() {
            return api.stanje.listaj().then(function (data) {
                return data;
            });
        }).then(function(data) {
            if (!data.danasnji_depozit || data.danasnji_depozit.status !== 2) {
                return fisModal.depositNeededModal().then(function (result) {
                    if (result.isConfirmed) {
                        return transition.router.stateService.target('depozit', {'#': 'depozit-iznos'});
                    }

                    if (from.url === '^' && fisConfig.user.podesavanja_aplikacije.pocetna_stranica === to.url) {
                        return transition.router.stateService.target('faktura_pregled_redovnih', {
                            broj_stavki_po_stranici: fisInvoiceConfig.itemsPerPage,
                            broj_stranice: 1
                        });
                    }

                    return false;
                });
            } else {
                return transition;
            }
        });
    }

    function logout() {
        fisModal.confirmOrCancel({
            headerText: 'Odjava',
            bodyText: "Da li ste sigurni da želite da se odjavite?",
            confirmButtonText: 'Odjavi me',
            cancelButtonText: 'Odustani'
        }).then((result) => {
            if (result.isConfirmed) {
                api.korisnik.odjavi().then(function () {
                    if (result.isConfirmed) {
                        window.location.href = "./login.html"
                    }
                });
            }
        });
    }

    function onTransitionFinishCheckDuePayments() {
        return api.dospjelaFaktura.notifikacija.listaj().then(function(data) {
            return;

            if (data.notifications.length === 0) {
                return;
            }

            return fisModal.duePaymentNotificationModal(data).then(function() {
                let notificationIds = data.notifications.map(function(notification) {
                    return notification.id;
                });

                fisCustomerApi.on_transition_finish_check_due_payments__turn_off_notifications({
                    notificationIds: notificationIds
                });
            });
        });
    }

    function onResize() {
        const windowEl = angular.element($window);
        if (windowEl.width() >= 992 && $rootScope.showSidebar) {
            $rootScope.showSidebar = false;
            $rootScope.$apply();
        }
    }

    function onShowSidebar(newVal) {
        if (newVal === false) {
            $rootScope.isCompanyCollapsed = true;
            $rootScope.isRacuniCollapsed = true;
            $rootScope.isCreditNoteCollapsed = true;
            $rootScope.isArtikliCollapsed = true;
            $rootScope.isPartneriCollapsed = true;
            $rootScope.isReportCollapsed = true;
        }
    }
}

angular
    .module('app')
    .filter('fisFormatDatetime', fisFormatDatetime);

fisFormatDatetime.$inject = [];

function fisFormatDatetime() {
    return function(x, type) {
        if (!angular.isString(x)) {
            return '---';
        }

        if (type === undefined) {
            return x.slice(0, 10) + ' ' + x.slice(11, 19);
        } else if (type === 'date') {
            return x.slice(0, 10);
        } else if (type === 'date2') {
            return x.slice(8, 10) + '.' + x.slice(5, 7) + '.' + x.slice(0, 4);
        } else if (type === 'time') {
            return x.slice(11, 19)
        } else if (type === 'taxPeriod') {
            return x.slice(5, 7) + '/' + x.slice(0, 4)
        } else {
            throw Error('Invlid type: ' + type);
        }
    }
}
angular
    .module('app')
    .filter('fisRoundHalfUp', fisRoundHalfUp);

fisRoundHalfUp.$inject = [];

function fisRoundHalfUp() {
    return function(x, decimal_places) {
        return (new Big(x)).round(decimal_places).toNumber().toFixed(decimal_places);
    }
}
angular
    .module('app')
    .service('api', ApiService);

ApiService.$inject = ['$http', '$q', 'invoiceFactory']

function ApiService($http, $q, invoiceFactory) {
    let api = {};

    api.korisnik = {};
    api.korisnik.listaj = apiKorisnikListaj;
    api.korisnik.odjavi = apiKorisnikOdjavi;
    api.korisnik.poId = {};
    api.korisnik.poId.izmijeni = api__korisnik__izmijeni;

    api.organizacionaJedinica = {};
    api.organizacionaJedinica.poId = {};
    api.organizacionaJedinica.poId.izmijeni = api__organizaciona_jedinica__po_id__izmijeni;

    api.api__frontend__initial = api__frontend__initial;
    api.api__frontend__artikal__unos = api__frontend__artikal__unos;
    api.api__frontend__artikal__po_id__izmijeni = api__frontend__artikal__po_id__izmijeni;
    api.api__frontend__invoice__create__type1 = api__frontend__invoice__create__type1;
    api.api__frontend__final_invoice__create = api__frontend__final_invoice__create;
    api.api__frontend__invoice__regular__all = api__frontend__invoice__regular__all;
    api.api__frontend__invoice__advance__all = api__frontend__invoice__advance__all;
    api.api__frontend__invoice__template__all = api__frontend__invoice__template__all;
    api.api__frontend__deposit = api__frontend__deposit;
    api.api__final_invoice__create = api__final_invoice__create;

    api.faktura = {};
    api.faktura.listaj = apiFakturaListaj;
    api.api__faktura__dodaj = api__faktura__dodaj;
    api.api__advance__create = api__advance__create;
    api.faktura.storniraj = apiFakturaStorniraj;
    api.faktura.poId = {};
    api.faktura.poId.listaj = apiFakturaPoIdListaj;
    api.api__faktura__po_id__koriguj = api__faktura__po_id__koriguj;
    api.faktura.poId.mail = apiFakturaPoIdMail;
    api.faktura.poId.dokument = {};
    api.faktura.poId.dokument.upload = apiFakturaPoIdDokumentUpload;
    api.faktura.poId.invoice_schedule = {};
    api.faktura.poId.invoice_schedule.add = api__faktura__pd_id__invoice_schedule__add;

    api.profaktura = {};
    api.profaktura.listaj = apiProfakturaListaj;
    api.profaktura.dodaj = apiProfakturaDodaj;
    api.profaktura.poId = {};
    api.profaktura.poId.listaj = apiProfakturaPoIdListaj;

    api.komitent = {};
    api.komitent.listaj = apiKomitentListaj;
    api.komitent.dodaj = apiKomitentDodaj;
    api.komitent.poId = {};
    api.komitent.poId.listaj = apiKomitentPoIdListaj;
    api.komitent.poId.izmijeni = apiKomitentPoIdIzmijeni;
    api.komitent.placanje = {};
    api.komitent.placanje.dodaj_bulk = apiKomitentPoIdPlacanjeDodajBulk;
    api.komitent.placanje.poId = {};
    api.komitent.placanje.poId.obrisi = apiKomitentPoIdPlacanjePoIdObrisi;

    api.vrstaPlacanja = {};
    api.vrstaPlacanja.listaj = apiVrstaPlacanjaListaj;

    api.artikal = {};
    api.artikal.listaj = apiArtikalListaj;
    api.artikal.dodaj = apiArtikalDodaj;
    api.artikal.izmijeni = apiArtikalIzmijeni;
    api.artikal.trazi = apiArtikalTrazi;
    api.artikal.poId = {};
    api.artikal.poId.listaj = apiArtikalPoIdListaj;
    api.artikal__poId__obrisi = artikal__poId__obrisi;

    api.grupaArtikala = {};
    api.grupaArtikala.listaj = apiGrupaArtikalaListaj;
    api.grupaArtikala.dodaj = apiGrupaArtikalaDodaj;
    api.grupaArtikala.poId = {};
    api.grupaArtikala.poId.listaj = apiGrupaArtikalaPoIdListaj;
    api.grupaArtikala.poId.izmijeni = apiGrupaArtikalaPoIdIzmijeni;
    api.grupaArtikala.poId.zaliha = {};
    api.grupaArtikala.poId.zaliha.listaj = apiGrupaArtikalaPoIdZalihaListaj;

    api.jedinicaMjere = {};
    api.jedinicaMjere.listaj = apiJedinicaMjereListaj;

    api.poreskaStopa = {};
    api.poreskaStopa.listaj = apiPoreskaStopaListaj;

    api.magacin = {};
    api.magacin.listaj = apiMagacinListaj;
    api.magacin.poId = {};
    api.magacin.poId.zalihe = {};
    api.magacin.poId.zalihe.listaj = apiMagacinPoIdZaliheListaj;

    api.kalkulacija = {};
    api.kalkulacija.listaj = apiKalkulacijaListaj;
    api.kalkulacija.dodaj = apiKalkulacijaDodaj;

    api.stanje = {};
    api.stanje.listaj = apiStanjeListaj;

    api.depozit = {};
    api.depozit.polozi = apiDepozitPolozi;
    api.depozit.podigni = apiDepozitPodigni;

    api.izvjestaj = {}
    api.izvjestaj.stanje = apiIzvjestajStanje;

    api.tipIdentifikacioneOznake = {};
    api.tipIdentifikacioneOznake.listaj = apiTipIdentifikacioneOznakeListaj;

    api.firma = {};
    api.firma.listaj = apiFirmaListaj;
    api.firma.logo = {};
    api.firma.logo.izmijeni = apiFirmaLogoIzmijeni;
    api.firma.izmijeni = apiFirmaIzmijeni;
    api.firma.podesavanja = {};
    api.firma.podesavanja.smtp = {};
    api.firma.podesavanja.smtp.izmijeni = apiFirmaPodesavanjaSMTPIzmijeni;

    api.dospjelaFaktura = {};
    api.dospjelaFaktura.listaj = apiDospjelaFakturaListaj;
    api.dospjelaFaktura.notifikacija = {};
    api.dospjelaFaktura.notifikacija.listaj = apiDospjelaFakturaNotifikacijaListaj;
    api.dospjelaFaktura.poId = {};
    api.dospjelaFaktura.poId.dokument = {};
    api.dospjelaFaktura.poId.dokument.listaj = apiDospjelaFakturaPoIdDokumentListaj;

    return api;

    //------------------------------------------------------------------------------------------------------------------

    function _getRequest(requestObject) {
        let canceler = $q.defer();
        requestObject.timeout = canceler.promise;

        let httpPromise = $http(requestObject).then(function(response) {
            return response.data;
        });

        httpPromise.cancel = function() {
            canceler.resolve();
        }

        return httpPromise;
    }

    function apiKorisnikListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/korisnik/listaj'
        });
    }

    function apiKorisnikOdjavi() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/korisnik/odjavi'
        });
    }

    function api__organizaciona_jedinica__po_id__izmijeni(organizacionaJedinicaId, data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/organizaciona_jedinica/' + organizacionaJedinicaId + '/izmijeni',
            data: data
        });
    }

    function api__frontend__initial() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/initial'
        });
    }

    function api__frontend__artikal__unos() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/artikal/unos'
        });
    }

    function api__frontend__artikal__po_id__izmijeni(artikalId) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/artikal/' + artikalId + '/izmijeni'
        });
    }

    function api__frontend__invoice__create__type1(invoice_template_id) {
        let url = new URL('/api/customer/frontend/invoice/create/type1', document.location.origin)
        if (invoice_template_id !== null) {
            url.searchParams.append('invoice_template_id', invoice_template_id);
        }

        return _getRequest({
            method: 'GET',
            url: url.toString()
        });
    }

    function api__frontend__final_invoice__create(advance_invoice_id) {
        let url = new URL('/api/customer/frontend/final_invoice/create', document.location.origin)
        url.searchParams.append('advance_invoice_id', advance_invoice_id);

        return _getRequest({
            method: 'GET',
            url: url.toString()
        });
    }

    function api__frontend__invoice__regular__all(params) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/invoice/regular/all',
            params: params
        });
    }

    function api__frontend__invoice__advance__all(params) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/invoice/advance/all',
            params: params
        });
    }

    function api__frontend__invoice__template__all(params) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/invoice/template/all',
            params: params
        });
    }

    function api__frontend__deposit() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/frontend/deposit'
        });
    }

    function api__final_invoice__create(final_invoice, corrected_advance_invoice, corrective_for_advance_invoice) {
        // corrective_for_advance_invoice['payment_methods'] = [{
        //     amount: corrective_for_advance_invoice.ukupna_cijena_prodajna,
        //     payment_method_type_id: PAYMENT_METHOD_TYPE_ACCOUNT,
        //     payment_method_type: invoiceFactory.createPaymentMethod(7),
        //     advance_invoice_id: corrected_advance_invoice.id,
        //     advance_invoice: {
        //         id: corrected_advance_invoice.id
        //     }
        // }];

        corrective_for_advance_invoice['payment_methods'] = [{
            amount: corrective_for_advance_invoice.ukupna_cijena_prodajna,
            payment_method_type_id: PAYMENT_METHOD_TYPE_ACCOUNT,
            payment_method_type: invoiceFactory.createPaymentMethod(7)
        }];

        return _getRequest({
            method: 'POST',
            url: '/api/customer/final_invoice/create',
            data: {
                final_invoice: final_invoice,
                advance_invoice: corrected_advance_invoice,
                corrective_invoice: corrective_for_advance_invoice
            }
        });
    }

    function apiFakturaListaj(params) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/faktura/listaj',
            params: params
        });
    }

    function api__faktura__dodaj(podaciRacuna) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/faktura/dodaj',
            data: podaciRacuna
        });
    }

    function api__advance__create(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/advance/create',
            data: data
        });
    }

    function apiFakturaStorniraj(fakturaId) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/faktura/' + fakturaId + '/storniraj'
        });
    }

    function apiFakturaPoIdListaj(fakturaId) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/faktura/' + fakturaId + '/listaj'
        });
    }

    function api__faktura__po_id__koriguj(fakturaId, corrected_invoice, corrective_invoice) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/faktura/' + fakturaId + '/koriguj',
            data: {
                corrected_invoice: corrected_invoice,
                corrective_invoice: corrective_invoice
            }
        });
    }

    function apiFakturaPoIdMail(fakturaId) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/faktura/' + fakturaId + '/mail'
        });
    }

    function apiFakturaPoIdDokumentUpload(fakturaId, datoteka) {
        let formData = new FormData();
        formData.append('dokument', datoteka);

        return _getRequest({
            method: 'POST',
            url: '/api/customer/faktura/' + fakturaId + '/dokument/upload',
            headers: {
                'Content-Type': undefined
            },
            data: formData,
            transformRequest: angular.identity
        });
    }

    function api__faktura__pd_id__invoice_schedule__add(invoiceId, data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/faktura/' + invoiceId + '/invoice_schedule/add',
            data: data
        });
    }

    function apiProfakturaDodaj(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/profaktura/dodaj',
            data: data
        });
    }

    function apiProfakturaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/profaktura/listaj'
        });
    }

    function apiProfakturaPoIdListaj(profakturaId) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/profaktura/' + profakturaId + '/listaj'
        });
    }

    function apiKomitentListaj(upitZaPretragu, brojStranice, brojStavkiPoStranici) {
        if (upitZaPretragu) {
            upitZaPretragu = upitZaPretragu.replaceAll('ć', 'c');
            upitZaPretragu = upitZaPretragu.replaceAll('Ć', 'C');
            upitZaPretragu = upitZaPretragu.replaceAll('č', 'c');
            upitZaPretragu = upitZaPretragu.replaceAll('Č', 'C');
            upitZaPretragu = upitZaPretragu.replaceAll('ž', 'z');
            upitZaPretragu = upitZaPretragu.replaceAll('Ž', 'z');
            upitZaPretragu = upitZaPretragu.replaceAll('đ', 'd');
            upitZaPretragu = upitZaPretragu.replaceAll('Đ', 'D');
            upitZaPretragu = upitZaPretragu.replaceAll('š', 's');
            upitZaPretragu = upitZaPretragu.replaceAll('Š', 'S');
        }

        return _getRequest({
            method: 'GET',
            url: '/api/customer/komitent/listaj',
            params: {
                upit_za_pretragu: upitZaPretragu,
                broj_stavki_po_stranici: brojStavkiPoStranici,
                broj_stranice: brojStranice
            }
        });
    }

    function apiKomitentDodaj(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/komitent/dodaj',
            data: data
        });
    }

    function apiKomitentPoIdListaj(komitentId) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/komitent/' + komitentId + '/listaj'
        });
    }

    function apiKomitentPoIdIzmijeni(komitentId, data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/komitent/' + komitentId + '/izmijeni',
            data: data
        });
    }

    function apiKomitentPoIdPlacanjeDodajBulk(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/komitent/placanje/dodaj_bulk',
            data: data
        });
    }

    function apiKomitentPoIdPlacanjePoIdObrisi(placanjeId) {
        return _getRequest({
            method: 'DELETE',
            url: '/api/customer/komitent/placanje/' + placanjeId + '/obrisi'
        });
    }

    function apiVrstaPlacanjaListaj(params) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/vrsta_placanja/listaj',
            params: params
        });
    }

    function apiArtikalListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/artikal/listaj'
        });
    }

    function apiArtikalDodaj(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/artikal/dodaj',
            data: data
        });
    }

    function apiArtikalIzmijeni(artikalId, data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/artikal/' + artikalId + '/izmijeni',
            data: data
        });
    }

    function apiArtikalTrazi(pojam) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/artikal/trazi',
            data: {
                pojam: pojam
            }
        });
    }

    function apiArtikalPoIdListaj(artikalId) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/artikal/' + artikalId + '/listaj'
        });
    }

    function artikal__poId__obrisi(artikalId) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/artikal/' + artikalId + '/obrisi'
        });
    }

    function apiGrupaArtikalaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/grupa_artikala/listaj'
        });
    }

    function apiGrupaArtikalaDodaj(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/grupa_artikala/dodaj',
            data: data
        });
    }

    function apiGrupaArtikalaPoIdListaj(grupa_artikala_id) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/grupa_artikala/' + grupa_artikala_id + '/listaj'
        });
    }

    function apiGrupaArtikalaPoIdIzmijeni(grupa_artikala_id, data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/grupa_artikala/' + grupa_artikala_id + '/izmijeni',
            data: data
        });
    }

    function apiGrupaArtikalaPoIdZalihaListaj(grupa_artikala_id) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/firma/grupa_artikala/' + grupa_artikala_id + '/zaliha/listaj'
        });
    }

    function apiJedinicaMjereListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/jedinica_mjere/listaj'
        });
    }

    function apiPoreskaStopaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/poreska_stopa/listaj'
        });
    }

    function apiDrzavaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/drzava/listaj'
        });
    }

    function apiMagacinListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/magacin/listaj'
        });
    }

    function apiMagacinPoIdZaliheListaj(magacinId, queryParams) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/magacin/' + magacinId + '/lager/listaj',
            params: queryParams
        });
    }

    function apiKalkulacijaListaj(params) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/kalkulacija/listaj',
            params: params
        });
    }

    function apiKalkulacijaDodaj(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/kalkulacija/dodaj',
            data: data
        });
    }

    function apiStanjeListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/stanje/listaj'
        });
    }

    function apiDepozitPolozi(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/depozit/polozi',
            data: data
        });
    }

    function apiDepozitPodigni(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/depozit/podigni',
            data: data
        });
    }

    function apiIzvjestajStanje(datumOd, datumDo) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/izvjestaj/stanje/' + datumOd + '/' + datumDo
        });
    }

    function apiTipIdentifikacioneOznakeListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/tip_identifikacione_oznake/listaj'
        });
    }

    function apiFirmaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/firma/listaj'
        });
    }

    function apiFirmaLogoIzmijeni(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/firma/logo/izmijeni',
            data: data,
            headers: {
                'Content-Type': undefined
            },
            transformRequest: angular.identity
        });
    }

    function apiFirmaIzmijeni(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/firma/izmijeni',
            data: data
        });
    }

    function apiFirmaPodesavanjaSMTPIzmijeni(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/firma/podesavanja/smtp/izmijeni',
            data: data
        });
    }

    function api__korisnik__izmijeni(data) {
        return _getRequest({
            method: 'POST',
            url: '/api/customer/korisnik/izmijeni',
            data: data
        });
    }

    function apiDospjelaFakturaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/firma/dospjela_faktura/listaj'
        });
    }

    function apiDospjelaFakturaNotifikacijaListaj() {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/firma/dospjela_faktura/notifikacija/listaj'
        });
    }

    function apiDospjelaFakturaPoIdDokumentListaj(dospjelaFakturaId) {
        return _getRequest({
            method: 'GET',
            url: '/api/customer/firma/dospjela_faktura/' + dospjelaFakturaId + '/dokument/listaj'
        });
    }
}
angular
    .module('breakpoints', [])
    .service('breakpointsService', breakpointsService);

breakpointsService.$inject = ['$rootScope', '$window'];

function breakpointsService($rootScope, $window) {
    let service = {
        keys: {
            xs: 'xs',
            sm: 'sm',
            md: 'md',
            lg: 'lg',
            xl: 'xl',
            xxl: 'xxl'
        },
        breakpoints: {
            xs: 0,
            sm: 576,
            md: 768,
            lg: 992,
            xl: 1200,
            xxl: 1400,
        }
    };

    service.current = getCurrent();

    $window.addEventListener('resize', function() {
        service.current = getCurrent();
        $rootScope.$apply();
    });
    service.gte = gte;
    service.ls = ls;

    function gte(key) {
        if (key in service.breakpoints) {
            return $window.innerWidth >= service.breakpoints[key];
        } else {
            throw Error('Invalid breakpoint "' + key + '"');
        }
    }

    function ls(key) {
        if (key in service.breakpoints) {
            return $window.innerWidth < service.breakpoints[key];
        } else {
            throw Error('Invalid breakpoint "' + key + '"');
        }
    }

    function getCurrent() {
        let keys = Object.keys(service.breakpoints);

        for (let ii = keys.length; ii >= 0; ii--) {
            if ($window.innerWidth >= service.breakpoints[keys[ii]]) {
                return keys[ii];
            }
        }
    }

    return service;
}
angular
    .module('app')
    .service('creditNoteFactory', creditNoteFactory);

creditNoteFactory.$inject = [];

function creditNoteFactory() {
    service = {};
    service.PRECISION = 4;
    service.create = create;
    service.clearInvoices = clearInvoices;
    service.addReturnItem = addReturnItem;
    service.removeReturnItem = removeReturnItem;
    service.addDiscountItem = addDiscountItem;
    service.removeDiscountItem = removeDiscountItem;
    service.getPayload = getPayload;
    service.getReturnItemFromAmountWithTax = getReturnItemFromAmountWithTax;
    service.getDiscountItemFromAmountWithTax = getDiscountItemFromAmountWithTax;
    service.recalculateTotals = recalculateTotals;
    service.recalculateTaxGroupTotals = recalculateTaxGroupTotals;
    service.recalculateTaxGroupLimits = recalculateTaxGroupLimits;
    return service;

    function clearInvoices(creditNote) {
        creditNote.fakture = [];
    }

    function create() {
        let creditNote = {};
        creditNote.komitent_id = undefined;
        creditNote.valuta_id = 50

        creditNote.tax_amount = 0;
        creditNote.return_amount = 0;
        creditNote.return_amount_with_tax = 0;
        creditNote.discount_amount = 0;
        creditNote.discount_amount_with_tax = 0;
        creditNote.return_and_discount_amount = 0;
        creditNote.return_and_discount_amount_with_tax = 0;

        creditNote.tax_amount_21 = 0;
        creditNote.return_amount_21 = 0;
        creditNote.return_amount_with_tax_21 = 0;
        creditNote.discount_amount_21 = 0;
        creditNote.discount_amount_with_tax_21 = 0;
        creditNote.return_and_discount_amount_21 = 0;
        creditNote.return_and_discount_amount_with_tax_21 = 0;

        creditNote.tax_amount_7 = 0;
        creditNote.return_amount_7 = 0;
        creditNote.return_amount_with_tax_7 = 0;
        creditNote.discount_amount_7 = 0;
        creditNote.discount_amount_with_tax_7 = 0;
        creditNote.return_and_discount_amount_7 = 0;
        creditNote.return_and_discount_amount_with_tax_7 = 0;

        creditNote.tax_amount_0 = 0;
        creditNote.return_amount_0 = 0;
        creditNote.return_amount_with_tax_0 = 0;
        creditNote.discount_amount_0 = 0;
        creditNote.discount_amount_with_tax_0 = 0;
        creditNote.return_and_discount_amount_0 = 0;
        creditNote.return_and_discount_amount_with_tax_0 = 0;

        creditNote.fakture_credit_note_turnover_remaining = 0;
        creditNote.fakture_credit_note_turnover_remaining_21 = 0;
        creditNote.fakture_credit_note_turnover_remaining_7 = 0;
        creditNote.fakture_credit_note_turnover_remaining_0 = 0;
        creditNote.stavkePovrata = [];
        creditNote.stavkePopusta = [];
        creditNote.fakture = [];  // view data
        creditNote.invoice_ids = [];
        creditNote.grupe_poreza = [21, 7, 0].map(function (taxRate) {
            return {
                number_of_items: 0,
                tax_rate: taxRate,
                tax_amount: 0,
                return_amount: 0,
                return_amount_with_tax: 0,
                discount_amount: 0,
                discount_amount_with_tax: 0,
                return_and_discount_amount: 0,
                return_and_discount_amount_with_tax: 0,
                fakture_credit_note_turnover_remaining: 0,
                fakture_credit_note_turnover_used: 0
            };
        });

        creditNote.iic_refs = [];

        return creditNote;
    }

    function addReturnItem(creditNote) {
        let item = {
            tax_rate: undefined,
            tax_amount: 0,
            return_amount: 0,
            return_amount_with_tax: 0,
            discount_amount: 0,
            discount_amount_with_tax: 0,
            type: 1
        };

        creditNote.stavkePovrata.push(item);

        return item;
    }


    function removeReturnItem(creditNote, index) {
        creditNote.stavkePovrata.splice(index, 1);
    }

    function addDiscountItem(creditNote) {
        let item = {
            tax_rate: undefined,
            return_amount: 0,
            return_amount_with_tax: 0,
            discount_amount: 0,
            discount_amount_with_tax: 0,
            return_and_discount_amount: 0,
            return_and_discount_amount_with_tax: 0
        };

        creditNote.stavkePopusta.push(item);

        return item;
    }

    function removeDiscountItem(creditNote, index) {
        creditNote.stavkePopusta.splice(index, 1);
    }

    function getPayload(creditNote) {
        let payload = {};
        payload.komitent_id = creditNote.komitent_id;
        payload.valuta_id = creditNote.valuta_id;
        payload.tax_amount = creditNote.tax_amount;
        payload.return_amount = creditNote.return_amount;
        payload.return_amount_with_tax = creditNote.return_amount_with_tax;
        payload.discount_amount = creditNote.discount_amount;
        payload.discount_amount_with_tax = creditNote.discount_amount_with_tax;
        payload.return_and_discount_amount = creditNote.return_and_discount_amount;
        payload.return_and_discount_amount_with_tax = creditNote.return_and_discount_amount_with_tax;

        payload.grupe_poreza = [];
        for (let ii = 0; ii < creditNote.grupe_poreza.length; ii++) {
            let taxGroup = creditNote.grupe_poreza[ii];
            if (taxGroup.return_and_discount_amount_with_tax === 0) {
                continue;
            }

            payload.grupe_poreza.push({
                tax_rate: taxGroup.tax_rate,
                tax_amount: taxGroup.tax_amount,
                return_amount: taxGroup.return_amount,
                return_amount_with_tax: taxGroup.return_amount_with_tax,
                discount_amount: taxGroup.discount_amount,
                discount_amount_with_tax: taxGroup.discount_amount_with_tax,
                return_and_discount_amount: taxGroup.return_and_discount_amount,
                return_and_discount_amount_with_tax: taxGroup.return_and_discount_amount_with_tax
            });
        }

        payload.iic_refs = angular.copy(creditNote.iic_refs);

        payload.stavke = [];
        for (let ii = 0; ii < creditNote.stavkePovrata.length; ii++) {
            let returnItem = creditNote.stavkePovrata[ii];
            payload.stavke.push({
                type: returnItem.type,
                description: returnItem.description,
                tax_rate: returnItem.tax_rate,
                tax_amount: returnItem.tax_amount,
                return_amount: returnItem.return_amount,
                return_amount_with_tax: returnItem.return_amount_with_tax,
                discount_amount: returnItem.discount_amount,
                discount_amount_with_tax: returnItem.discount_amount_with_tax
            });
        }
        for (let ii = 0; ii < creditNote.stavkePopusta.length; ii++) {
            let discountItem = creditNote.stavkePopusta[ii];
            payload.stavke.push({
                description: discountItem.description,
                type: discountItem.type,
                tax_rate: discountItem.tax_rate,
                tax_amount: discountItem.tax_amount,
                return_amount: discountItem.return_amount,
                return_amount_with_tax: discountItem.return_amount_with_tax,
                discount_amount: discountItem.discount_amount,
                discount_amount_with_tax: discountItem.discount_amount_with_tax
            });
        }

        return payload;
    }

    function getReturnItemFromAmountWithTax(description, taxRate, amountWithTax) {
        amountWithTax = new Big(amountWithTax)
        let taxMultiplier = _getTaxMultiplier(taxRate);
        let amountWithoutTax = amountWithTax.div(taxMultiplier).round(service.PRECISION);

        return {
            description: description,
            tax_rate: taxRate,
            tax_amount: amountWithTax.minus(amountWithoutTax).toNumber(),
            discount_amount: 0,
            discount_amount_with_tax: 0,
            return_amount: amountWithoutTax.toNumber(),
            return_amount_with_tax: amountWithTax.toNumber(),
            type: 1
        };
    }

    function getDiscountItemFromAmountWithTax(description, taxRate, amountWithTax) {
        amountWithTax = new Big(amountWithTax)
        let taxMultiplier = _getTaxMultiplier(taxRate);
        let amountWithoutTax = amountWithTax.div(taxMultiplier).round(service.PRECISION)

        return {
            description: description,
            tax_rate: taxRate,
            tax_amount: amountWithTax.minus(amountWithoutTax).toNumber(),
            discount_amount: amountWithoutTax.toNumber(),
            discount_amount_with_tax: amountWithTax.toNumber(),
            return_amount: 0,
            return_amount_with_tax: 0,
            type: 2
        };
    }

    function _getTaxMultiplier(taxRate) {
        return (new Big(taxRate)).div(100).plus(1).toNumber();
    }

    function recalculateTotals(creditNote) {
        let tax_amount = new Big(0);
        let return_amount = new Big(0);
        let return_amount_with_tax = new Big(0);
        let discount_amount = new Big(0);
        let discount_amount_with_tax = new Big(0);
        let return_and_discount_amount = new Big(0);
        let return_and_discount_amount_with_tax = new Big(0);

        for (let ii = 0; ii < creditNote.stavkePovrata.length; ii++) {
            let stavka = creditNote.stavkePovrata[ii];
            tax_amount = tax_amount.plus(stavka.tax_amount);
            return_amount = return_amount.plus(stavka.return_amount);
            return_amount_with_tax = return_amount_with_tax.plus(stavka.return_amount_with_tax);
            return_and_discount_amount = return_and_discount_amount.plus(stavka.return_amount);
            return_and_discount_amount_with_tax = return_and_discount_amount_with_tax.plus(stavka.return_amount_with_tax);
        }

        for (let ii = 0; ii < creditNote.stavkePopusta.length; ii++) {
            let stavka = creditNote.stavkePopusta[ii];
            tax_amount = tax_amount.plus(stavka.tax_amount);
            discount_amount = discount_amount.plus(stavka.discount_amount);
            discount_amount_with_tax = discount_amount_with_tax.plus(stavka.discount_amount_with_tax);
            return_and_discount_amount = return_and_discount_amount.plus(stavka.discount_amount);
            return_and_discount_amount_with_tax = return_and_discount_amount_with_tax.plus(stavka.discount_amount_with_tax);
        }

        creditNote.tax_amount = tax_amount.toNumber();
        creditNote.return_amount = return_amount.toNumber();
        creditNote.return_amount_with_tax = return_amount_with_tax.toNumber();
        creditNote.discount_amount = discount_amount.toNumber();
        creditNote.discount_amount_with_tax = discount_amount_with_tax.toNumber();
        creditNote.return_and_discount_amount = return_and_discount_amount.toNumber();
        creditNote.return_and_discount_amount_with_tax = return_and_discount_amount_with_tax.toNumber();
    }

    function recalculateTaxGroupTotals(creditNote) {
        for (let ii = 0; ii < creditNote.grupe_poreza.length; ii++) {
            let taxGroup = creditNote.grupe_poreza[ii];

            taxGroup.tax_amount = new Big(0);
            taxGroup.return_amount = new Big(0);
            taxGroup.return_amount_with_tax = new Big(0);
            taxGroup.discount_amount = new Big(0);
            taxGroup.discount_amount_with_tax = new Big(0);
            taxGroup.return_and_discount_amount = new Big(0);
            taxGroup.return_and_discount_amount_with_tax = new Big(0);

            for (let ii = 0; ii < creditNote.stavkePovrata.length; ii++) {
                let stavka = creditNote.stavkePovrata[ii];

                if (taxGroup.tax_rate !== stavka.tax_rate) {
                    continue;
                }

                taxGroup.tax_amount = taxGroup.tax_amount.plus(stavka.tax_amount);
                taxGroup.return_amount = taxGroup.return_amount.plus(stavka.return_amount);
                taxGroup.return_amount_with_tax = taxGroup.return_amount_with_tax.plus(stavka.return_amount_with_tax);
                taxGroup.return_and_discount_amount = taxGroup.return_and_discount_amount.plus(stavka.return_amount);
                taxGroup.return_and_discount_amount_with_tax = taxGroup.return_and_discount_amount_with_tax.plus(stavka.return_amount_with_tax);
            }

            for (let ii = 0; ii < creditNote.stavkePopusta.length; ii++) {
                let stavka = creditNote.stavkePopusta[ii];

                if (taxGroup.tax_rate !== stavka.tax_rate) {
                    continue;
                }

                taxGroup.tax_amount = taxGroup.tax_amount.plus(stavka.tax_amount);
                taxGroup.discount_amount = taxGroup.discount_amount.plus(stavka.discount_amount);
                taxGroup.discount_amount_with_tax = taxGroup.discount_amount_with_tax.plus(stavka.discount_amount_with_tax);
                taxGroup.return_and_discount_amount = taxGroup.return_and_discount_amount.plus(stavka.discount_amount);
                taxGroup.return_and_discount_amount_with_tax = taxGroup.return_and_discount_amount_with_tax.plus(stavka.discount_amount_with_tax);
            }

            taxGroup.tax_amount = taxGroup.tax_amount.round(service.PRECISION).toNumber();
            taxGroup.return_amount = taxGroup.return_amount.round(service.PRECISION).toNumber();
            taxGroup.return_amount_with_tax = taxGroup.return_amount_with_tax.round(service.PRECISION).toNumber();
            taxGroup.discount_amount = taxGroup.discount_amount.round(service.PRECISION).toNumber();
            taxGroup.discount_amount_with_tax = taxGroup.discount_amount_with_tax.round(service.PRECISION).toNumber();
            taxGroup.return_and_discount_amount = taxGroup.return_and_discount_amount.round(service.PRECISION).toNumber();
            taxGroup.return_and_discount_amount_with_tax = taxGroup.return_and_discount_amount_with_tax.round(service.PRECISION).toNumber();

            creditNote['tax_amount_' + taxGroup.tax_rate] = taxGroup.tax_amount;
            creditNote['return_amount_' + taxGroup.tax_rate] = taxGroup.return_amount;
            creditNote['return_amount_with_tax_' + taxGroup.tax_rate] = taxGroup.return_amount_with_tax;
            creditNote['discount_amount_' + taxGroup.tax_rate] = taxGroup.discount_amount;
            creditNote['discount_amount_with_tax_' + taxGroup.tax_rate] = taxGroup.discount_amount_with_tax;
            creditNote['return_and_discount_amount_' + taxGroup.tax_rate] = taxGroup.return_and_discount_amount;
            creditNote['return_and_discount_amount_with_tax_' + taxGroup.tax_rate] = taxGroup.return_and_discount_amount_with_tax;
        }
    }

    function recalculateTaxGroupLimits(creditNote) {
        for (let ii = 0; ii < creditNote.grupe_poreza.length; ii++) {
            creditNote.grupe_poreza[ii].fakture_credit_note_turnover_remaining = new Big(0);
            creditNote.grupe_poreza[ii].fakture_credit_note_turnover_used = new Big(0);
        }

        for (let ii = 0; ii < creditNote.iic_refs.length; ii++) {
            let iicRef = creditNote.iic_refs[ii];

            let taxGroup21 = creditNote.grupe_poreza.find(function (x) { return x.tax_rate === 21; });
            let remaining_21 = (new Big(iicRef.total_21)).minus(iicRef.amount_21)
            taxGroup21.fakture_credit_note_turnover_remaining = taxGroup21.fakture_credit_note_turnover_remaining.plus(remaining_21);
            taxGroup21.fakture_credit_note_turnover_used = taxGroup21.fakture_credit_note_turnover_used.plus(iicRef.amount_21);

            let taxGroup7 = creditNote.grupe_poreza.find(function (x) { return x.tax_rate === 7; });
            let remaining_7 = (new Big(iicRef.total_7)).minus(iicRef.amount_7)
            taxGroup7.fakture_credit_note_turnover_remaining = taxGroup7.fakture_credit_note_turnover_remaining.plus(remaining_7);
            taxGroup7.fakture_credit_note_turnover_used = taxGroup7.fakture_credit_note_turnover_used.plus(iicRef.amount_7);

            let taxGroup0 = creditNote.grupe_poreza.find(function (x) { return x.tax_rate === 0; });
            let remaining_0 = (new Big(iicRef.total_0)).minus(iicRef.amount_0)
            taxGroup0.fakture_credit_note_turnover_remaining = taxGroup0.fakture_credit_note_turnover_remaining.plus(remaining_0);
            taxGroup0.fakture_credit_note_turnover_used = taxGroup0.fakture_credit_note_turnover_used.plus(iicRef.amount_0);
        }

        creditNote.fakture_credit_note_turnover_remaining = (new Big(0));
        creditNote.fakture_credit_note_turnover_used = (new Big(0));
        for (let ii = 0; ii < creditNote.grupe_poreza.length; ii++) {
            let grupa_poreza = creditNote.grupe_poreza[ii];
            grupa_poreza.fakture_credit_note_turnover_remaining = grupa_poreza.fakture_credit_note_turnover_remaining.round(service.PRECISION);
            grupa_poreza.fakture_credit_note_turnover_used = grupa_poreza.fakture_credit_note_turnover_used.round(service.PRECISION);

            creditNote.fakture_credit_note_turnover_remaining = creditNote.fakture_credit_note_turnover_remaining.plus(grupa_poreza.fakture_credit_note_turnover_remaining);
            creditNote.fakture_credit_note_turnover_used = creditNote.fakture_credit_note_turnover_used.plus(grupa_poreza.fakture_credit_note_turnover_used);

            creditNote['fakture_credit_note_turnover_remaining_' + grupa_poreza.tax_rate.toString()] = grupa_poreza.fakture_credit_note_turnover_remaining;
            creditNote['fakture_credit_note_turnover_used_' + grupa_poreza.tax_rate.toString()] = grupa_poreza.fakture_credit_note_turnover_used;

            grupa_poreza.fakture_credit_note_turnover_remaining = grupa_poreza.fakture_credit_note_turnover_remaining.toNumber()
            grupa_poreza.fakture_credit_note_turnover_used = grupa_poreza.fakture_credit_note_turnover_used.toNumber()
        }

        creditNote.fakture_credit_note_turnover_remaining = creditNote.fakture_credit_note_turnover_remaining.toNumber();
        creditNote.fakture_credit_note_turnover_used = creditNote.fakture_credit_note_turnover_used.toNumber();
    }
}

angular
    .module('app')
    .service('fisCustomerApi', fisCustomerApi);

fisCustomerApi.$inject = ['$q', '$http'];

function fisCustomerApi($q, $http) {
    const service = {};
    service.on_transition_finish_check_due_payments__get_notifications = on_transition_finish_check_due_payments__get_notifications;
    service.on_transition_finish_check_due_payments__turn_off_notifications = on_transition_finish_check_due_payments__turn_off_notifications;
    service.directives__credit_note_typeahead__on_typeahead_input_change = directives__credit_note_typeahead__on_typeahead_input_change;
    service.views__faktura_slobodan_unos_korekcije__fiskalizuj = views__faktura_slobodan_unos_korekcije__fiskalizuj;
    service.views__credit_note_view__on_load = views__credit_note_view__on_load;
    service.views__credit_note_create__on_buyer_typeahead_select = views__credit_note_create__on_buyer_typeahead_select;
    service.views__credit_note_create__on_fiscalize = views__credit_note_create__on_fiscalize;
    service.views__credit_note_create__on_invoice_page_change = views__credit_note_create__on_invoice_page_change;
    service.views__credit_note_create__on_load = views__credit_note_create__on_load;
    service.views__izvjestaj_po_artiklima_forma__on_submit = views__izvjestaj_po_artiklima_forma__on_submit;
    service.views__komitent_pregled_lista__on_load = views__komitent_pregled_lista__on_load;
    service.certificateUploadModalSubmit = certificateUploadModalSubmit;
    service.certificatesListViewLoad = certificatesListViewLoad;
    service.certificatesListViewDeleteCertificate = certificatesListViewDeleteCertificate;
    return service;

    function _createRequest(requestObject) {
        let canceler = $q.defer();
        requestObject.timeout = canceler.promise;

        let httpPromise = $http(requestObject).then(function(response) {
            return response.data;
        });

        httpPromise.cancel = function() {
            canceler.resolve();
        }

        return httpPromise;
    }

    function on_transition_finish_check_due_payments__get_notifications() {
        let url = new URL('/api/customer/on_transition_finish_check_due_payments/get_notifications', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function on_transition_finish_check_due_payments__turn_off_notifications(data) {
        let url = new URL('/api/customer/on_transition_finish_check_due_payments/turn_off_notifications', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function directives__credit_note_typeahead__on_typeahead_input_change(data) {
        let url = new URL('/api/customer/directives/credit_note_typeahead/on_typeahead_input_change', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__faktura_slobodan_unos_korekcije__fiskalizuj(data) {
        let url = new URL('/api/customer/views/faktura_slobodan_unos_korekcije/fiskalizuj', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__credit_note_view__on_load(data) {
        let url = new URL('/api/customer/views/credit_note_view/on_load', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__credit_note_create__on_buyer_typeahead_select(data) {
        let url = new URL('/api/customer/views/credit_note_create/on_buyer_typeahead_select', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__credit_note_create__on_fiscalize(data) {
        let url = new URL('/api/customer/views/credit_note_create/on_fiscalize', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__credit_note_create__on_invoice_page_change(data) {
        let url = new URL('/api/customer/views/credit_note_create/on_invoice_page_change', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__credit_note_create__on_load() {
        let url = new URL('/api/customer/views/credit_note_create/on_load', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString()
        });
    }

    function views__izvjestaj_po_artiklima_forma__on_submit(data) {
        let url = new URL('/api/customer/views/izvjestaj_po_artiklima_forma/on_submit', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function views__komitent_pregled_lista__on_load(data) {
        let url = new URL('/api/customer/views/komitent_pregled_lista/on_load', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: data
        });
    }

    function certificateUploadModalSubmit(certFile, password) {
        let url = new URL('/api/customer/certificate-upload-modal/submit', document.location.origin);

        const formData = new FormData();
        formData.append('certificate', certFile);
        formData.append('password', password);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: formData,
            headers: {
                'Content-Type': undefined
            },
            transformRequest: angular.identity
        });
    }

    function certificatesListViewLoad() {
        let url = new URL('/api/customer/certificates-list-view/load', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString()
        });
    }

    function certificatesListViewDeleteCertificate(certificateId) {
        let url = new URL('/api/customer/certificates-list-view/delete', document.location.origin);

        return _createRequest({
            method: 'POST',
            url: url.toString(),
            data: {
                certificate_id: certificateId
            }
        });
    }
}
angular
    .module('escpos', [])
    .service('fisEscpos', fisEscpos);

fisEscpos.$inject = ['fisConfig'];

function fisEscpos(fisConfig) {
    let service = {};


    service.encoder = new TextEncoder();

    service.CODEPAGE = {};
    service.CODEPAGE._ISO_8859_2 = 36;

    service.LF = 10;
    service.ESC = 27;
    service.GS = 29;

    service.QRModel = {};
    service.QRModel._1 = 48;
    service.QRModel._2 = 49;

    service.QRErrorCorrection = {};
    service.QRErrorCorrection._L = 48; //  7%
    service.QRErrorCorrection._M = 49; // 15%
    service.QRErrorCorrection._Q = 50; // 25%
    service.QRErrorCorrection._H = 51; // 30%

    service.CPI_MODE = {};
    service.CPI_MODE._11 = 48;
    service.CPI_MODE._15 = 49;
    service.CPI_MODE._20 = 50;

    service.FONT = {};
    service.FONT._A = 0;
    service.FONT._B = 48;
    service.FONT._C = 49;
    service.FONT._D = 50;

    service.WEIGHT = {};
    service.WEIGHT._NORMAL = 0;
    service.WEIGHT._BOLD = 1;

    service.WIDTH = {};
    service.WIDTH._1 = 0;
    service.WIDTH._2 = 1;
    service.WIDTH._3 = 2;
    service.WIDTH._4 = 3;
    service.WIDTH._5 = 4;
    service.WIDTH._6 = 5;
    service.WIDTH._7 = 6;

    service.HEIGHT = {};
    service.HEIGHT._1 = 0;
    service.HEIGHT._2 = 1;
    service.HEIGHT._3 = 2;
    service.HEIGHT._4 = 3;
    service.HEIGHT._5 = 4;
    service.HEIGHT._6 = 5;
    service.HEIGHT._7 = 6;

    service.UNDERLINE = {};
    service.UNDERLINE._NONE = 48;
    service.UNDERLINE._ONE_DOT_THICK = 49;
    service.UNDERLINE._TWO_DOT_THICK = 50;

    service.JUSTIFICATION = {};
    service.JUSTIFICATION._LEFT = 48;
    service.JUSTIFICATION._CENTER = 49;
    service.JUSTIFICATION._RIGHT = 50;

    service.COLOR_MODE = {};
    service.COLOR_MODE._BLACK_ON_WHITE = 0;
    service.COLOR_MODE._WHITE_ON_BLACK = 1;


    service.setCodepage = setCodepage;

    service.selectFontA = selectFontA;
    service.selectFontC = selectFontC;
    service.selectFontD = selectFontD;

    service.initialize = initialize;
    service.setCPIMode = setCPIMode;
    service.setFont = setFont;
    service.setWeight = setWeight;
    service.setFontSize = setFontSize;
    service.setUnderline = setUnderline;
    service.setJustification = setJustification;
    service.setDefaultLineSpacing = setDefaultLineSpacing;
    service.setLineSpacing = setLineSpacing;
    service.setColorMode = setColorMode;
    service.feed = feed;
    service.write = write;
    service.writeLF = writeLF;

    service.wrapWords = wrapWords;
    service.lines = lines;

    service.qrcode = qrcode;


    service.printInvoice = printInvoice;
    service.sendToPrinter = sendToPrinter;

    return service

    function setCodepage(buffer, pageNumber) {
        buffer.push(service.ESC);
        buffer.push(116); // t
        buffer.push(pageNumber);
    }

    function selectFontA(buffer) {
        // PIPO: Selects smaller font.
        buffer.push(service.ESC, 80);
    }

    function selectFontC(buffer) {
        // PIPO: Selects bigger font.
        buffer.push(service.ESC, 84);
    }

    function selectFontD(buffer) {
        // PIPO: Selects smaller font.
        buffer.push(service.ESC, 85);
    }

    function initialize(buffer) {
        buffer.push(service.ESC, 64);
    }

    function setCPIMode(buffer, cpiMode) {
        if (Object.values(service.CPI_MODE).indexOf(cpiMode) < 0) {
            throw Error('Invalid font name value.');
        }

        buffer.push(service.ESC, 193, cpiMode);
    }

    function setFont(buffer, font) {
        if (Object.values(service.FONT).indexOf(font) < 0) {
            throw Error('Invalid font name value.');
        }

        buffer.push(service.ESC, 77, font);
    }

    function setWeight(buffer, weight) {
        if (Object.values(service.WEIGHT).indexOf(weight) < 0) {
            throw Error('Invalid font weight value.');
        }

        buffer.push(service.ESC, 69, weight);
    }


    function setFontSize(buffer, width, height) {
        if (Object.values(service.WIDTH).indexOf(width) < 0) {
            throw Error('Invalid font width value.');
        }

        if (Object.values(service.HEIGHT).indexOf(height) < 0) {
            throw Error('Invalid font height value.');
        }

        // GS ! n
        buffer.push(service.GS, 33, width << 4 | height);
    }

    function setUnderline(buffer, underline) {
        if (Object.values(service.UNDERLINE).indexOf(underline) < 0) {
            throw Error('Invalid underline value.');
        }

        buffer.push(service.ESC, 45, underline);
    }

    function setJustification(buffer, justification) {
        if (Object.values(service.JUSTIFICATION).indexOf(justification) < 0) {
            throw Error('Invalid justification value.');
        }

        buffer.push(service.ESC, 97, justification);
    }

    function setDefaultLineSpacing(buffer) {
        buffer.push(service.ESC, 50);
    }

    function setLineSpacing(buffer, lineSpacing) {
        if (lineSpacing < 0 || lineSpacing > 255) {
            throw Error('lineSpacing must be between 0 and 255');
        }

        buffer.push(service.ESC, 51, lineSpacing);
    }

    function setColorMode(buffer, colorMode) {
        if (Object.values(service.COLOR_MODE).indexOf(colorMode) < 0) {
            throw Error('Invalid justification value.');
        }

        buffer.push(service.GS, 66, colorMode);
    }

    function feed(buffer, nLines) {
        nLines = nLines === undefined ? 1 : nLines;

        if (nLines < 1 || nLines > 255) {
            throw Error('nLines must be between 1 and 255');
        }

        for (let ii = 0; ii < nLines; ii++) {
            buffer.push(service.LF);
        }
    }

    function write(buffer, text) {
        let bytes = service.encoder.encode(text);

        for (let ii = 0; ii < bytes.length; ii++) {
            buffer.push(bytes[ii]);
        }
    }

    function writeLF(buffer, text, nLines) {
        service.write(buffer, text);
        service.feed(buffer, nLines);
    }

    function wrapWords(text, maxLength) {
        if (!text || text.length <= maxLength) {
            return text;
        }

        let wrappedText = '';
        let currentLine = '';

        const words = text.split(' ');

        for (let i = 0; i < words.length; i++) {
            let word = words[i];

            if (word.length > maxLength) {
                wrappedText += currentLine.trim() + '\n';
                while(word.length > maxLength) {
                    wrappedText += word.substring(0, 32) + '\n';
                    word = word.substring(32, word.length);
                }
                currentLine = '';
                word = '-' + word;
            }

            if (currentLine.length + word.length > maxLength) {
                wrappedText += currentLine.trim() + '\n';
                currentLine = '';
            }

            currentLine += word + ' ';
        }

        return wrappedText + currentLine.trim();
    }

    function lines(buffer, text, maxLength) {
        let lines = wrapWords(text, maxLength).split('\n');

        for (let ii = 0; ii < lines.length; ii++) {
            service.write(buffer, lines[ii]);
            service.feed(buffer);
        }
    }

    function qrcode(buffer, data, model, size, errorCorrectionLevel) {
        // Function 065
        buffer.push(
            service.GS,
            40, // (
            107, // k
            4, // pL size of bytes
            0, // pH size of bytes
            49, // cn
            65, // fn
            model, // n1
            0 // n2
        )

        // Function 067
        buffer.push(
            service.GS,
            40, // (
            107, // k
            3, // pL size of bytes
            0, // pH size of bytes
            49, // cn
            67, // fn
            size // n
        );

        // Function 069
        buffer.push(
            service.GS,
            40, // (
            107, // k
            3, // pL size of bytes
            0, // pH size of bytes
            49, // cn
            69, // fn
            errorCorrectionLevel // n
        );

        let bytes = service.encoder.encode(data);

        // Function 080
        let numberOfBytes = bytes.length + 3;
        let pL = numberOfBytes % 256;
        let pH = Math.floor(numberOfBytes / 256);

        buffer.push(
            service.GS,
            40, // (
            107, // k
            pL, // pL size of bytes
            pH, // pH size of bytes
            49, // cn
            80, // fn
            48 // m
        );

        for (let ii = 0; ii < bytes.length; ii++) {
            buffer.push(bytes[ii]);
        }

        // Function 081
        buffer.push(
            service.GS,
            40, // (
            107, // k
            3, // pL size of bytes
            0, // pH size of bytes
            49, // cn
            81, // fn
            48 // m
        );
    }

    function printInvoice(invoice) {
        let buffer = [];

        service.initialize(buffer);
        service.setCodepage(buffer, service.CODEPAGE._ISO_8859_2);
        service.setFontSize(buffer, service.WIDTH._1, service.HEIGHT._1);
        service.setDefaultLineSpacing(buffer);

        service.setJustification(buffer, service.JUSTIFICATION._CENTER);
        service.writeLF(buffer, '--------------------------------');
        service.writeLF(buffer, fisConfig.user.firma.naziv);
        service.writeLF(buffer, 'PIB: ' + fisConfig.user.firma.pib);
        service.writeLF(buffer, fisConfig.user.firma.adresa);
        service.writeLF(buffer, fisConfig.user.firma.grad);
        service.writeLF(buffer, '--------------------------------');


        service.setJustification(buffer, service.JUSTIFICATION._LEFT);
        service.setFont(buffer, service.FONT._B);
        service.writeLF(buffer, 'Redni broj računa: ' + invoice.efi_ordinal_number);
        service.writeLF(buffer, 'Broj računa: ' + invoice.efi_broj_fakture);
        service.writeLF(buffer, 'Operater: ' + invoice.operater.ime);
        service.writeLF(buffer, 'Kod operatera: ' + invoice.operater.kodoperatera);

        for (let ii = 0; ii < invoice.payment_methods.length; ii++) {
            service.writeLF(buffer, 'Način plaćanja #' + ii + 1 + ': ' + invoice.payment_methods[ii].payment_method_type.description);
        }

        service.writeLF(buffer, 'IKOF: ' + invoice.ikof);
        service.writeLF(buffer, 'JIKR: ' + invoice.jikr);

        service.setFont(buffer, service.FONT._A);
        service.writeLF(buffer, '--------------------------------');
        service.setJustification(buffer, service.JUSTIFICATION._CENTER);
        service.writeLF(buffer, 'Kupac');
        service.setJustification(buffer, service.JUSTIFICATION._LEFT);
        service.writeLF(buffer, '--------------------------------')
        service.writeLF(buffer, 'Naziv/ime: ' + invoice.komitent.naziv);
        service.writeLF(buffer, invoice.komitent.tip_identifikacione_oznake.naziv + ': ' + invoice.komitent.naziv);
        service.writeLF(buffer, 'Adresa: ' + invoice.komitent.adresa + ', ' + invoice.komitent.grad);
        service.writeLF(buffer, 'Naziv/ime: ' + invoice.komitent.naziv);
        service.writeLF(buffer, '--------------------------------');

        let items_print = [];
        let item_padding = 4;
        let c1_max_length = 0;
        let c2_max_length = 0;
        let c3_max_length = 0;
        let c4_max_length = 0;
        for (let ii = 0; ii < invoice.stavke.length; ii++) {
            let item = invoice.stavke[ii];

            let obj = {};
            obj.naziv = item.naziv;

            obj.c1 = item.kolicina.toString();
            obj.c1_length = obj.c1.length;
            c1_max_length = Math.max(c1_max_length, obj.c1_length);

            obj.c2 = item.jedinicna_cijena_prodajna.toString();
            obj.c2_length = obj.c2.length;
            c2_max_length = Math.max(c2_max_length, obj.c2_length);

            obj.c3 = item.porez_procenat.toString();
            obj.c3_length = obj.c3.length;
            c3_max_length = Math.max(c3_max_length, obj.c3_length);

            obj.c4 = item.ukupna_cijena_prodajna.toString();
            obj.c4_length = obj.c4.length;
            c4_max_length = Math.max(c4_max_length, obj.c4_length);

            items_print.push(obj);
        }

        for (let ii = 0; ii < items_print.length; ii++) {
            let item = items_print[ii];

            if (ii > 0) {
                service.setLineSpacing(buffer,40);
            }
            service.writeLF(buffer, item.naziv);

            let left = item.c1 + ' x ' + item.c2 + ' (' + item.c3 + '%)';

            let lines = service.wrapWords(left, 32 - c4_max_length).split('\n');

            lines[0] = lines[0].padEnd(32 - c4_max_length, ' ') + item.c4.padStart(c4_max_length, ' ');
            for (let jj = 1; jj < lines.length; jj++) {
                lines[jj] = lines[jj].padEnd(32 - c4_max_length + item_padding, ' ');
            }

            let lastLine = lines.pop();

            for (let jj = 0; jj < lines.length; jj++) {
                buffer.writeLF(buffer, lines[jj]);
            }

            service.setDefaultLineSpacing(buffer);
            service.writeLF(buffer, lastLine);
        }

        service.writeLF(buffer, '--------------------------------');
        for (let ii = 0; ii < invoice.grupe_poreza.length; ii++) {
            let tax_group = invoice.grupe_poreza[ii];
            service.writeLF(buffer, ('Stopa ' + tax_group.porez_procenat + '%, osnovica').padEnd(19, ' ') + tax_group.ukupna_cijena_rabatisana.toString().padStart(13, ' '));
            service.writeLF(buffer, ('Stopa ' + tax_group.porez_procenat + '%, porez').padEnd(16, ' ') + tax_group.porez_iznos.toString().padStart(16, ' '));
            service.writeLF(buffer, '--------------------------------');
        }

        service.writeLF(buffer, 'Ukupna osnovica: ' + invoice.ukupna_cijena_rabatisana.toString().padStart(15, ' '))
        service.writeLF(buffer, 'Ukupan porez: ' + invoice.porez_iznos.toString().padStart(18, ' '))
        service.writeLF(buffer, '--------------------------------');
        service.writeLF(buffer, 'Puna cijena: ' + invoice.ukupna_cijena_puna.toString().padStart(19, ' '));
        service.writeLF(buffer, 'Popust: ' + invoice.rabat_iznos_prodajni.toString().padStart(24, ' '));
        service.setFontSize(buffer, service.WIDTH._2, service. HEIGHT._2);
        service.setWeight(buffer, service.WEIGHT._BOLD);
        service.writeLF(buffer, 'UKUPNO: ' + invoice.ukupna_cijena_prodajna.toString().padStart(8, ' '));
        service.setFontSize(buffer, service.WIDTH._1, service. HEIGHT._1);
        service.writeLF(buffer, '--------------------------------');
        service.setJustification(buffer, service.JUSTIFICATION._CENTER);
        service.qrcode(buffer, invoice.efi_verify_url, service.QRModel._1, 6, service.QRErrorCorrection._Q)
        service.writeLF(buffer, '--------------------------------');

        service.feed(buffer, 6);
        service.sendToPrinter(buffer);
    }

    function sendToPrinter(buffer) {
        let a = document.createElement('a');
        a.href = 'pipoprint:' + btoa(buffer.join(","));
        a.style = 'position: absolute; top: 110%; right: 100%;';
        document.body.append(a);
        a.click();
    }
}
angular
    .module('app')
    .service('fisGui', fisGui);

fisGui.$inject = ['$rootScope', '$q', '$timeout'];

function fisGui($rootScope, $q, $timeout) {
    let service = {};
    // service.isLoaderVisible = false;
    service.loaderAnimationTime = 0;

    // service.isSidebarVisible = false;
    service.siderbarAnimationTime = 0;

    service.showLoader = showLoader;
    service.hideLoader = hideLoader;
    service.wrapInLoader = wrapInLoader;
    service.showSidebar = showSidebar;
    service.hideSidebar = hideSidebar;
    service.scrollToSelector = scrollToSelector;
    service.scrollToNgInvalid = scrollToNgInvalid;
    service.scrollToInvalidFeedback = scrollToInvalidFeedback;

    return service;

    // -----------------------------------------------------------------------------------------------------------------

    function showLoader() {
        let deffered = $q.defer();

        $rootScope.showLoader = true;  // TODO Replace with service variable

        $timeout(function() {
            deffered.resolve();
        }, service.loaderAnimationTime);

        return deffered.promise;
    }

    function hideLoader() {
        let deffered = $q.defer();

        $rootScope.showLoader = false;  // TODO Replace with service variable

        $timeout(function() {
            deffered.resolve();
        }, service.loaderAnimationTime);

        return deffered.promise;
    }

    function wrapInLoader(fn) {
        return service.showLoader().then(fn).finally(function() {
            return service.hideLoader();
        });
    }

    function showSidebar() {
        let deffered = $q.defer();

        $rootScope.showSidebar = true;  // TODO Replace with service variable

        $timeout(function() {
            deffered.resolve();
        }, service.loaderAnimationTime);

        return deffered.promise;
    }

    function hideSidebar() {
        let deffered = $q.defer();

        $rootScope.showSidebar = false;  // TODO Replace with service variable

        $timeout(function() {
            deffered.resolve();
        }, service.loaderAnimationTime);

        return deffered.promise;
    }

    function scrollToSelector(selector, yOffset, timeout) {
        if (timeout === undefined) {
            timeout = 0;
        }

        return $timeout(function () {
            document.activeElement.blur();
            const el = document.querySelector(selector);
            const y = el.getBoundingClientRect().top + window.scrollY + yOffset;
            window.scrollTo({top: y, behavior: 'smooth'});
        }, timeout);
    }

    function scrollToNgInvalid(yOffset, timeout) {
        scrollToSelector('.ng-invalid:not(form):not([type=hidden])', yOffset, timeout);
    }

    function scrollToInvalidFeedback(yOffset, timeout) {
        scrollToSelector('.invalid-feedback.ng-active', yOffset, timeout);
    }
}
angular
    .module('app')
    .service('fisModal', fisModal);

fisModal.$inject = ['$q', '$uibModal', 'fisConfig', 'api', 'invoiceFactory'];

function fisModal($q, $uibModal, fisConfig, api, invoiceFactory) {
    let service = {};
    service.confirm = confirm;
    service.confirmOrCancel = confirmOrCancel;
    service.creditNoteExternalInvoice = creditNoteExternalInvoice;
    service.creditNoteItemModal = creditNoteItemModal;
    service.creditNoteTurnoverUsedModal = creditNoteTurnoverUsedModal;
    service.duePaymentNotificationModal = duePaymentNotificationModal;
    service.invoiceBuyerSelectModal = invoiceBuyerSelectModal;
    service.invoiceItemEdit = invoiceItemEdit;
    service.invoiceItemTemplatePicker = invoiceItemTemplatePicker;
    service.invoicePriceStructure = invoicePriceStructure;
    service.invoiceScheduleModal = invoiceScheduleModal;
    service.numericInput = numericInput;
    service.buyerUpdateModal = buyerUpdateModal;
    service.buyerCreateModal = buyerCreateModal;
    service.addPaymentMethods = addPaymentMethods;
    service.deletePaymentMethod = deletePaymentMethod;
    service.distributeDifferenceEvenly = distributeDifferenceEvenly;
    service.distributeTotalEvenly = distributeTotalEvenly;
    service.depositNeededModal = depositNeededModal;
    service.invalidForm = invalidForm;
    service.certificateUpload = certificateUpload;

    return service;

    //------------------------------------------------------------------------------------------------------------------

    function confirm(data) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/confirm-modal/confirm-modal.template.html',
            controller: 'ConfirmModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {data: data}
        });

        return modalInstance.result;
    }

    function confirmOrCancel(data) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/confirm-or-cancel-modal/confirm-or-cancel-modal.template.html',
            controller: 'ConfirmOrCancelModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {data: data}
        });

        return modalInstance.result;
    }

    function creditNoteExternalInvoice() {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/credit-note-external-invoice-modal/credit-note-external-invoice-modal.template.html',
            controller: 'CreditNoteExternalInvoiceModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {  }
        });

        return modalInstance.result;
    }

    function creditNoteItemModal(modalData) {
        return $uibModal.open({
            templateUrl: 'app/modals/credit-note-item-modal/credit-note-item-modal.template.html',
            controller: 'CreditNoteItemModal',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                modalData: modalData
            }
        });
    }

    function creditNoteTurnoverUsedModal(modalData) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/credit-note-turnover-used-modal/credit-note-turnover-used-modal.template.html',
            controller: 'CreditNoteTurnoverUsedModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: { modalData: modalData }
        });

        return modalInstance.result;
    }

    function duePaymentNotificationModal(data) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/due-payment-notification-modal/due-payment-notification-modal.template.html',
            controller: 'DuePaymentNotificationModal',
            controllerAs: 'ctrl',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                initialData: data
            }
        });

        return modalInstance.result;
    }

    function invoiceBuyerSelectModal(invoice) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/invoice-buyer-select-modal/invoice-buyer-select-modal.template.html',
            controller: 'InvoiceBuyerSelectModal',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                initialData: {
                    invoice: invoice
                }
            }
        });

        return modalInstance.result;
    }

    function invoiceItemEdit(invoice, itemIndex) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/invoice-item-edit-modal/invoice-item-edit-modal.template.html',
            controller: 'InvoiceItemEditModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                initialData: {
                    invoice: invoice,
                    itemIndex: itemIndex
                }
            }
        });

        return modalInstance.result;
    }

    function invoiceItemTemplatePicker() {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/invoice-item-template-picker-modal/invoice-item-template-picker-modal.template.html',
            controller: 'InvoiceItemTemplatePickerModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fullscreen.template.html'
        });

        return modalInstance.result;
    }

    function invoicePriceStructure(invoice) {
        return $uibModal.open({
            templateUrl: 'app/modals/invoice-price-structure-modal/invoice-price-structure-modal.template.html',
            controller: 'InvoicePriceStructureModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                initialData: {
                    invoice: invoice
                }
            }
        });
    }

    function invoiceScheduleModal(invoice) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/invoice-schedule-modal/invoice-schedule-modal.template.html',
            controller: 'InvoiceScheduleModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                initialData: {
                    invoiceId: invoice.id,
                    invoiceSchedule: invoice.active_invoice_schedule
                }
            }
        });

        return modalInstance.result;
    }

    function numericInput(initialData) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/numeric-input-modal/numeric-input-modal.template.html',
            controller: 'NumericInputModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: { initialData: initialData }
        });

        return modalInstance.result;
    }

    function buyerCreateModal() {
        return $uibModal.open({
            templateUrl: 'app/modals/komitent-unos-modal/komitent-unos-modal.template.html',
            controller: 'KomitentUnosModalController',
            controllerAs: 'ctrl',
            size: 'lg',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html'
        });
    }

    function buyerUpdateModal(buyerId) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/komitent-izmjena-modal/komitent-izmjena-modal.template.html',
            controller: 'KomitentIzmjenaModalController',
            controllerAs: 'ctrl',
            size: 'lg',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html',
            resolve: {
                komitent: api.komitent.poId.listaj(buyerId)
            }
        });

        return modalInstance.result;
    }

    // -----------------------------------------------------------------------------------------------------------------
    // Derived modals
    // -----------------------------------------------------------------------------------------------------------------

    function addPaymentMethods(invoice, updated_invoice, advance_invoice, corrective_for_advance_invoice) {
        let settings = {};
        settings.isMultiselect = true;

        if (advance_invoice) {
            settings.isCash = invoice.is_cash;
            settings.showCashTab = false;
            settings.showNonCashTab = true;
        } else if (updated_invoice !== undefined && updated_invoice !== null) {
            settings.isCash = updated_invoice.is_cash;
            settings.showCashTab = updated_invoice.is_cash;
            settings.showNonCashTab = !updated_invoice.is_cash;
        } else {
            settings.isCash = invoice.is_cash;
        }

        paymentMethodPicker(settings).then(function(result) {
            if (!result.isConfirmed) {
                return;
            }

            invoiceFactory.sortPaymentMethodTypes(result.items);

            let modal_payment_methods = [];
            if (advance_invoice) {
                let advance_payment_method = invoiceFactory.createPaymentMethod(7);
                advance_payment_method.amount = (new Big(corrective_for_advance_invoice.ukupna_cijena_prodajna))
                    .times(-1)
                    .toNumber();
                advance_payment_method.advance_invoice = advance_invoice;
                advance_payment_method.advance_invoice_id = advance_invoice.id;
                modal_payment_methods.push(advance_payment_method);
            }

            for (let ii = 0; ii < result.items.length; ii++) {
                modal_payment_methods.push(invoiceFactory.createPaymentMethod(result.items[ii].id));
                invoiceFactory.addPaymentMethodByTypeId(invoice, result.items[ii].id);
            }

            invoice.payment_methods = modal_payment_methods;
            invoice.is_cash = modal_payment_methods[0].payment_method_type.is_cash;
            invoiceFactory.recalculatePaymentMethodTotals(invoice);
        });
    }

    function deletePaymentMethod(invoice, index) {
        invoice.payment_methods.splice(index, 1);
        invoiceFactory.recalculatePaymentMethodTotals(invoice, false);
    }

    function distributeDifferenceEvenly(invoice, updated_invoice, advance_invoice) {
        let settings = {};
        settings.isMultiselect = true;

        if (advance_invoice) {
            settings.isCash = invoice.is_cash;
            settings.showCashTab = false;
            settings.showNonCashTab = true;
        } else if (updated_invoice !== undefined && updated_invoice !== null) {
            settings.isCash = updated_invoice.is_cash;
            settings.showCashTab = updated_invoice.is_cash;
            settings.showNonCashTab = !updated_invoice.is_cash;
        } else {
            settings.isCash = invoice.is_cash;
        }

        paymentMethodPicker(settings).then(function(result) {
            if (!result.isConfirmed) {
                return;
            }

            invoiceFactory.sortPaymentMethodTypes(result.items);

            let modal_payment_methods = [];
            let parts = invoiceFactory.splitAmount(invoice.payment_methods_total_difference, result.items.length);
            for (let ii = 0; ii < result.items.length; ii++) {
                let payment_method = invoiceFactory.createPaymentMethod(result.items[ii].id);
                payment_method.amount = parts[ii];
                modal_payment_methods.push(payment_method);
            }

            modal_payment_methods = invoiceFactory.mergePaymentMethods(invoice.payment_methods, modal_payment_methods);

            let bodyText = '<div class="mb-3">Načini plaćanja će biti izmijenjeni na sledeći način:</div>';
            for (let ii = 0; ii < modal_payment_methods.length; ii++) {
                let label = modal_payment_methods[ii].payment_method_type.description;
                let value = modal_payment_methods[ii].amount;

                bodyText += "<div class=\"dash-info bg-white\">\n" +
                    "            <div class=\"dash-info-start\"><span>" + label + "</span></div>\n" +
                    "            <div class=\"dash-info-spacing\"></div>\n" +
                    "            <div class=\"dash-info-end\"><span>" + value + "</span></div>\n" +
                    "        </div>";
            }

            service.confirmOrCancel({
                headerText: 'Raspoređivanje',
                bodyText: bodyText,
                confirmButtonText: 'Da, rasporedi',
                cancelButtonText: 'Odustani'
            }).then(function(result) {
                if (result.isConfirmed) {
                    invoice.payment_methods = modal_payment_methods;
                    invoice.is_cash = modal_payment_methods[0].payment_method_type.is_cash;
                    invoiceFactory.recalculatePaymentMethodTotals(invoice);
                }
            });
        });
    }

    function distributeTotalEvenly(invoice, updated_invoice, advance_invoice, corrective_for_advance_invoice) {
        if (invoice.ukupna_cijena_prodajna === 0) {
            service.confirm({
                headerText: 'Raspoređivanje',
                bodyText: 'Račun je prazan.'
            });
            return;
        }

        let settings = {};
        settings.isMultiselect = true;

        if (advance_invoice) {
            settings.isCash = invoice.is_cash;
            settings.showCashTab = false;
            settings.showNonCashTab = true;
        } else if (updated_invoice !== undefined && updated_invoice !== null) {
            settings.isCash = updated_invoice.is_cash;
            settings.showCashTab = updated_invoice.is_cash;
            settings.showNonCashTab = !updated_invoice.is_cash;
        } else {
            settings.isCash = invoice.is_cash;
        }

        paymentMethodPicker(settings).then(function(result) {
            if (!result.isConfirmed) {
                return;
            }

            invoiceFactory.sortPaymentMethodTypes(result.items);

            let modal_payment_methods = [];
            if (advance_invoice) {
                let advance_payment_method = invoiceFactory.createPaymentMethod(7);
                advance_payment_method.amount = (new Big(corrective_for_advance_invoice.ukupna_cijena_prodajna))
                    .times(-1)
                    .toNumber();
                advance_payment_method.advance_invoice = advance_invoice;
                advance_payment_method.advance_invoice_id = advance_invoice.id;
                modal_payment_methods.push(advance_payment_method);
            }

            let amount = (new Big(invoice.ukupna_cijena_prodajna));
            for (let ii = 0; ii < modal_payment_methods.length; ii++) {
                amount = amount.minus(modal_payment_methods[ii].amount);
            }
            amount = amount.toNumber();


            let parts = invoiceFactory.splitAmount(amount, result.items.length);
            for (let ii = 0; ii < result.items.length; ii++) {
                let payment_method = invoiceFactory.createPaymentMethod(result.items[ii].id);
                payment_method.amount = parts[ii];
                modal_payment_methods.push(payment_method);
            }

            let bodyText = '<div class="mb-3">Načini plaćanja će biti izmijenjeni na sledeći način:</div>';
            for (let ii = 0; ii < modal_payment_methods.length; ii++) {
                let label = modal_payment_methods[ii].payment_method_type.description;
                let value = modal_payment_methods[ii].amount;
                bodyText += "<div class=\"dash-info bg-white\">\n" +
                    "            <div class=\"dash-info-start\"><span>" + label + "</span></div>\n" +
                    "            <div class=\"dash-info-spacing\"></div>\n" +
                    "            <div class=\"dash-info-end\"><span>" + value + "</span></div>\n" +
                    "        </div>";
            }

            service.confirmOrCancel({
                headerText: 'Raspoređivanje',
                bodyText: bodyText,
                confirmButtonText: 'Da, rasporedi',
                cancelButtonText: 'Odustani'
            }).then(function(result) {
                if (result.isConfirmed) {
                    invoice.payment_methods = modal_payment_methods;
                    invoice.is_cash = modal_payment_methods[0].payment_method_type.is_cash;
                    invoiceFactory.recalculatePaymentMethodTotals(invoice);
                }
            });
        });
    }

    function depositNeededModal() {
        return service.confirmOrCancel({
            headerText: 'Nije definisan depozit',
            bodyText: 'Za rad sa gotovinom morate definisati iznos dnevnog depozita. Da li želite da definišete iznos depozita sada?',
            confirmButtonText: 'Da, povedi me',
            cancelButtonText: 'Kasnije'
        })
    }

    function invalidForm() {
        return service.confirm({
            headerIcon: 'fa fa-exclamation-circle text-danger',
            headerText: 'Greška',
            bodyText: 'Podaci nisu ispravno popunjeni. Ispravite greške pa pokušajte ponovo.'
        });
    }

    function certificateUpload() {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/certificate-upload-modal/certificate-upload-modal.template.html',
            controller: 'CertificateUploadModalController',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            windowTemplateUrl: 'app/modals/window-fixed.template.html'
        });

        return modalInstance.result;
    }

    // -----------------------------------------------------------------------------------------------------------------
    // Internal modals
    // -----------------------------------------------------------------------------------------------------------------

    function paymentMethodPicker(initialData) {
        initialData = initialData !== undefined ? initialData : {};
        initialData.isMultiselect = initialData.isMultiselect !== undefined
            ? initialData.isMultiselect
            : false;
        initialData.selectedItems = initialData.selectedItems !== undefined
            ? angular.copy(initialData.selectedItems)
            : [];
        initialData.compare = (a, b) => { return a.id === b.id };

        initialData.title = 'Načini plaćanja';

        let TAB_CASH = 'Gotovinski';
        let TAB_NONCASH = 'Bezgotovinski';
        initialData.tabs = [];

        if (initialData.showCashTab === undefined || initialData.showCashTab === null) {
            initialData.showCashTab = true;
        }
        if (initialData.showCashTab) {
            initialData.tabs.push(TAB_CASH);
        }

        if (initialData.showNonCashTab === undefined || initialData.showNonCashTab === null) {
            initialData.showNonCashTab = true;
        }
        if (initialData.showNonCashTab) {
            initialData.tabs.push(TAB_NONCASH);
        }

        initialData.tab = initialData.tabs[0];

        initialData.searchEnabled = false;

        initialData.getItems = function(query, pageNumber, tab) {
            let newItems = [];
            if (tab === TAB_CASH) {
                newItems = fisConfig.filterPaymentMethods(query, true);
            } else if (tab === TAB_NONCASH) {
                newItems = fisConfig.filterPaymentMethods(query, false, true);
            } else {
                throw Error('Invalid tab');
            }

            return $q.resolve({
                items: newItems,
                totalItems: newItems.length
            });
        }

        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/payment-method-select-modal/payment-method-select-modal.template.html',
            controller: 'PaymentMethodSelectModal',
            controllerAs: 'ctrl',
            size: 'md',
            backdrop: 'static',
            // windowTemplateUrl: 'app/modals/window-fixed.template.html',
            windowTemplateUrl: 'app/modals/window-fullscreen.template.html',
            resolve: {
                initialData: initialData
            }
        });

        return modalInstance.result;
    }
}
angular
    .module('app')
    .service('fisReportService', fisReportService);

fisReportService.$inject = ['$rootScope', 'api', 'stampac'];

function fisReportService($rootScope, api, stampac) {
    return {
        getDayRelative: getDayRelative,
        getMonthStartRelative: getMonthStartRelative,
        getMonthEndRelative: getMonthEndRelative,
        presjekStanja: presjekStanja,
        dnevniIzvjestaj: dnevniIzvjestaj,
        periodicniIzvjestaj: periodicniIzvjestaj,
        zurnal: zurnal,
        poGrupamaArtikala: poGrupamaArtikala,
        poArtiklima: poArtiklima,
        formatDate: formatDate
    }

    function formatDate(date) {
        return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
            .toISOString()
    }


    function getMonthStartRelative(offset) {
        if (offset === undefined) {
            offset = 0;
        }

        const date = new Date();
        const month = date.getMonth() + offset;
        const year = date.getFullYear();
        return new Date(year, month, 1);
    }

    function getMonthEndRelative(offset) {
        if (offset === undefined) {
            offset = 0;
        }

        const currentDate = new Date();
        const month = currentDate.getMonth() + offset;
        const year = currentDate.getFullYear();

        let date = new Date(year, month + 1, 0)
        date.setHours(23, 59, 59, 0);
        return date;
    }

    function getDayRelative(offset) {
        if (offset === undefined) {
            offset = 0;
        }

        let date = new Date();
        date.setDate(date.getDate() + offset);
        date.setHours(0, 0, 0, 0);
        return date;
    }

    function presjekStanja() {
        $rootScope.showLoader = true;
        $rootScope.showSidebar = false;
        return stampac.stampaj('/api/customer/izvjestaj/presjek_stanja')
            .finally(function() {
                $rootScope.showLoader = false;
            });
    }

    function dnevniIzvjestaj(datum) {
        $rootScope.showLoader = true;
        return stampac.stampaj('/api/customer/izvjestaj/dnevni/' + formatDate(datum))
            .finally(function() {
                $rootScope.showLoader = false;
            });
    }

    function periodicniIzvjestaj(datumOd, datumDo) {
        $rootScope.showLoader = true;
        return stampac.stampaj('/api/customer/izvjestaj/periodicni/' + formatDate(datumOd) + '/' + formatDate(datumDo))
            .finally(function() {
                $rootScope.showLoader = false;
            });
    }

    function zurnal(datumOd, datumDo) {
        $rootScope.showLoader = true;
        return stampac.stampaj('/api/customer/izvjestaj/zurnal/' + formatDate(datumOd) + '/' + formatDate(datumDo))
            .finally(function() {
                $rootScope.showLoader = false;
            });
    }

    function poGrupamaArtikala(datumOd, datumDo) {
        $rootScope.showLoader = true;
        return stampac.stampaj('/api/customer/izvjestaj/po-grupama-artikala/' + formatDate(datumOd) + '/' + formatDate(datumDo))
            .finally(function() {
                $rootScope.showLoader = false;
            });
    }

    function poArtiklima(datumOd, datumDo) {
        $rootScope.showLoader = true;
        return stampac.stampaj('/api/customer/izvjestaj/po-artiklima/' + formatDate(datumOd) + '/' + formatDate(datumDo))
            .finally(function() {
                $rootScope.showLoader = false;
            });
    }
}
let IZVOR_KALKULACIJE_UPB = 1;  // Osnovica
let IZVOR_KALKULACIJE_UPA = 2;  // Puna cijena

let PAYMENT_METHOD_TYPE_BANKNOTE = 1;
let PAYMENT_METHOD_TYPE_CARD = 2;
let PAYMENT_METHOD_TYPE_CHECK = 3;
let PAYMENT_METHOD_TYPE_SVOUCHER = 4;
let PAYMENT_METHOD_TYPE_COMPANY = 5;
let PAYMENT_METHOD_TYPE_ORDER = 6;
let PAYMENT_METHOD_TYPE_ADVANCE = 7;
let PAYMENT_METHOD_TYPE_ACCOUNT = 8;
let PAYMENT_METHOD_TYPE_FACTORING = 9;
let PAYMENT_METHOD_TYPE_COMPENSATION = 10;
let PAYMENT_METHOD_TYPE_TRANSFER = 11;
let PAYMENT_METHOD_TYPE_WAIVER = 12;
let PAYMENT_METHOD_TYPE_KIND = 13;
let PAYMENT_METHOD_TYPE_OTHER = 14;
let PAYMENT_METHOD_TYPE_BUSINESSCARD = 15;
let PAYMENT_METHOD_TYPE_OTHER_CASH = 16;

let CORRECTION_TYPE_QUANTITY = 1;
let CORRECTION_TYPE_UPB = 2;
let CORRECTION_TYPE_UPA = 3;
let CORRECTION_TYPE_TAX_FREE_AMOUNT = 4;

angular
    .module('app')
    .service('invoiceFactory', invoiceFactory);

invoiceFactory.$inject = ['fisConfig'];

function invoiceFactory(fisConfig) {
    let PRECISION = 4;

    let service = {};
    service.setBuyer = setBuyer;
    //
    service.copyToCorrectedFields = copyToCorrectedFields;
    service.copyItemsFromAdvanceInvoice = copyItemsFromAdvanceInvoice;
    //
    service.create = create;
    service.createFromTemplate = createFromTemplate;
    //
    service.createPaymentMethod = createPaymentMethod;
    service.splitAmount = splitAmount;
    service.distributeEvenlyToPaymentMethods = distributeEvenlyToPaymentMethods;
    service.isCash = isCash;
    service.addBlankItem = addBlankItem;
    service.addPaymentMethodByTypeId = addPaymentMethodByTypeId;
    service.sortPaymentMethodTypes = sortPaymentMethodTypes;
    service.sortPaymentMethods = sortPaymentMethods;
    service.mergePaymentMethods = mergePaymentMethods;
    service.addItemFromItemTemplate = addItemFromItemTemplate;
    service.updateItemFromItemTemplate = updateItemFromItemTemplate;
    service.recalculateTotals = recalculateTotals;
    service.recalculatePaymentMethodTotals = recalculatePaymentMethodTotals;
    service.recalculateTaxGroups = recalculateTaxGroups;
    service.recalculateItem = recalculateItem;
    service.recalculateItemBasedOnUPB = recalculateItemBasedOnUPB;
    service.recalculateItemBasedOnUPA = recalculateItemBasedOnUPA;
    service.recalculateItemBasedOnExemption = recalculateItemBasedOnExemption;
    service.getInvoiceItem = getInvoiceItem;
    service.createCorrectiveInvoice = createCorrectiveInvoice;
    service.getCorrectiveInvoiceFromDiff = getCorrectiveInvoiceFromDiff;
    service.updateCorrectiveInvoiceItemsFromDiff = updateCorrectiveInvoiceItemsFromDiff;
    //
    service.recalculateInvoiceItemTemplate = recalculateInvoiceItemTemplate;
    service.recalculateInvoiceItemTemplateFromUPB = recalculateInvoiceItemTemplateFromUPB;
    service.recalculateInvoiceItemTemplateFromUPA = recalculateInvoiceItemTemplateFromUPA;
    //
    service.setCorrectedInvoiceReference = setCorrectedInvoiceReference;
    service.setCorrectedCreditNoteReference = setCorrectedCreditNoteReference;
    //
    service.getPaymentMethod = getPaymentMethod;
    //
    return service;

    // -----------------------------------------------------------------------------------------------------------------

    function _getItemRebateMultiplier(rebatePercentage) {
        return (new Big(100)).minus(rebatePercentage).div(100).toNumber();
    }

    function _getItemTaxMultiplier(taxRatePercentage) {
        return (new Big(taxRatePercentage)).div(100).plus(1).toNumber();
    }


    /**
     * Formiranje cijene na osnovu UPB
     * @param invoice
     * @param item
     * @private
     */
    function recalculateItemBasedOnUPB(invoice, item) {
        let rebatePercentage = item.rabat_procenat === undefined || item.rabat_procenat === null ? 0 : item.rabat_procenat;
        let quantity = item.kolicina === undefined || item.kolicina === null ? 0 : item.kolicina;
        let jedinicna_cijena_osnovna = item.jedinicna_cijena_osnovna === undefined || item.jedinicna_cijena_osnovna === null ? 0 : item.jedinicna_cijena_osnovna;

        let rebate_multiplier = _getItemRebateMultiplier(rebatePercentage);
        let tax_multiplier = _getItemTaxMultiplier(item.porez_procenat);

        item.izvor_kalkulacije = IZVOR_KALKULACIJE_UPB;

        item.jedinicna_cijena_rabatisana = (new Big(jedinicna_cijena_osnovna)).times(rebate_multiplier).round(PRECISION).toNumber();
        item.jedinicna_cijena_puna = (new Big(jedinicna_cijena_osnovna)).times(tax_multiplier).round(PRECISION).toNumber();
        item.jedinicna_cijena_prodajna = (new Big(item.jedinicna_cijena_rabatisana)).times(tax_multiplier).round(PRECISION).toNumber();

        item.ukupna_cijena_rabatisana = (new Big(jedinicna_cijena_osnovna)).times(rebate_multiplier).times(quantity).round(PRECISION).toNumber();
        item.porez_iznos = (new Big(item.ukupna_cijena_rabatisana)).times(item.porez_procenat).div(100).round(PRECISION).toNumber();
        item.ukupna_cijena_prodajna = (new Big(item.ukupna_cijena_rabatisana)).plus(item.porez_iznos).round(PRECISION).toNumber();

        item.ukupna_cijena_puna = (new Big(item.ukupna_cijena_prodajna)).div(rebate_multiplier).round(PRECISION).toNumber();
        item.rabat_iznos_prodajni = (new Big(item.ukupna_cijena_puna)).minus(item.ukupna_cijena_prodajna).round(PRECISION).toNumber();

        item.ukupna_cijena_osnovna = (new Big(jedinicna_cijena_osnovna)).times(quantity).round(PRECISION).toNumber();
        item.rabat_iznos_osnovni = (new Big(item.ukupna_cijena_osnovna)).minus(item.ukupna_cijena_rabatisana).round(PRECISION).toNumber();

        item.tax_exemption_amount = 0;

        item.credit_note_turnover_used = 0;
        item.credit_note_turnover_remaining = item.ukupna_cijena_prodajna;

        service.recalculateTotals(invoice);
        service.recalculateTaxGroups(invoice);
        service.recalculatePaymentMethodTotals(invoice);
    }

    /**
     * Formiranje cijene na osnovu UPA
     * @param invoice
     * @param item
     * @private
     */
    function recalculateItemBasedOnUPA(invoice, item) {
        let rebatePercentage = item.rabat_procenat === undefined || item.rabat_procenat === null ? 0 : item.rabat_procenat;
        let quantity = item.kolicina === undefined || item.kolicina === null ? 0 : item.kolicina;
        let jedinicna_cijena_puna = item.jedinicna_cijena_puna === undefined || item.jedinicna_cijena_puna === null ? 0 : item.jedinicna_cijena_puna;

        let rebate_multiplier = _getItemRebateMultiplier(rebatePercentage);
        let tax_multiplier = _getItemTaxMultiplier(item.porez_procenat);

        item.izvor_kalkulacije = IZVOR_KALKULACIJE_UPA;

        item.jedinicna_cijena_prodajna = (new Big(jedinicna_cijena_puna)).times(rebate_multiplier).round(PRECISION).toNumber();
        item.jedinicna_cijena_rabatisana = (new Big(item.jedinicna_cijena_prodajna)).div(tax_multiplier).round(PRECISION).toNumber();
        item.jedinicna_cijena_osnovna = (new Big(item.jedinicna_cijena_rabatisana)).div(rebate_multiplier).round(PRECISION).toNumber();

        item.ukupna_cijena_prodajna = (new Big(item.jedinicna_cijena_prodajna)).times(quantity).round(PRECISION).toNumber();
        item.ukupna_cijena_rabatisana = (new Big(item.ukupna_cijena_prodajna)).div(tax_multiplier).round(PRECISION).toNumber();
        item.porez_iznos = (new Big(item.ukupna_cijena_prodajna)).minus(item.ukupna_cijena_rabatisana).round(PRECISION).toNumber();

        item.ukupna_cijena_puna = (new Big(jedinicna_cijena_puna)).times(quantity).round(PRECISION).toNumber();
        item.rabat_iznos_prodajni = (new Big(item.ukupna_cijena_puna)).minus(item.ukupna_cijena_prodajna).round(PRECISION).toNumber();

        item.ukupna_cijena_osnovna = (new Big(item.ukupna_cijena_rabatisana)).div(rebate_multiplier).round(PRECISION).toNumber();
        item.rabat_iznos_osnovni = (new Big(item.ukupna_cijena_osnovna)).minus(item.ukupna_cijena_rabatisana).round(PRECISION).toNumber();

        item.tax_exemption_amount = 0;

        item.credit_note_turnover_used = 0;
        item.credit_note_turnover_remaining = item.ukupna_cijena_prodajna;

        service.recalculateTotals(invoice);
        service.recalculateTaxGroups(invoice);
        service.recalculatePaymentMethodTotals(invoice);
    }

    function recalculateItemBasedOnExemption(invoice, item) {
        let rebatePercentage = item.rabat_procenat === undefined || item.rabat_procenat === null ? 0 : item.rabat_procenat;
        let quantity = item.kolicina === undefined || item.kolicina === null ? 0 : item.kolicina;

        let rebate_multiplier = _getItemRebateMultiplier(rebatePercentage);

        item.izvor_kalkulacije = IZVOR_KALKULACIJE_UPB;

        item.jedinicna_cijena_osnovna = (new Big(item.tax_exemption_amount)).round(PRECISION).toNumber();
        item.jedinicna_cijena_rabatisana = (new Big(item.jedinicna_cijena_osnovna)).times(rebate_multiplier).round(PRECISION).toNumber();
        item.jedinicna_cijena_puna = item.jedinicna_cijena_osnovna;
        item.jedinicna_cijena_prodajna = item.jedinicna_cijena_rabatisana;

        item.ukupna_cijena_rabatisana = (new Big(item.jedinicna_cijena_osnovna)).times(rebate_multiplier).times(quantity).round(PRECISION).toNumber();
        item.porez_iznos = 0;
        item.ukupna_cijena_prodajna = item.ukupna_cijena_rabatisana;

        item.ukupna_cijena_puna = (new Big(item.ukupna_cijena_prodajna)).div(rebate_multiplier).round(PRECISION).toNumber();
        item.rabat_iznos_prodajni = (new Big(item.ukupna_cijena_puna)).minus(item.ukupna_cijena_prodajna).round(PRECISION).toNumber();

        item.ukupna_cijena_osnovna = (new Big(item.jedinicna_cijena_osnovna)).times(quantity).round(PRECISION).toNumber();
        item.rabat_iznos_osnovni = (new Big(item.ukupna_cijena_osnovna)).minus(item.ukupna_cijena_rabatisana).round(PRECISION).toNumber();

        item.credit_note_turnover_used = 0;
        item.credit_note_turnover_remaining = item.tax_exemption_amount;

        service.recalculateTotals(invoice);
        service.recalculateTaxGroups(invoice);
        service.recalculatePaymentMethodTotals(invoice);
    }

    function recalculateItem(invoice, item) {
        if (item.porez_procenat === null) {
            service.recalculateItemBasedOnExemption(invoice, item);
            return;
        }

        if (item.izvor_kalkulacije === IZVOR_KALKULACIJE_UPB) {
            service.recalculateItemBasedOnUPB(invoice, item);
            return;
        }

        if (item.izvor_kalkulacije === IZVOR_KALKULACIJE_UPA) {
            service.recalculateItemBasedOnUPA(invoice, item);
            return;
        }

        throw Error('Neispravno polje za tip kalkulacije iznosa stavke.');
    }

    // -----------------------------------------------------------------------------------------------------------------

    function _setInvoiceDateFields(invoice) {
        let currentTime = new Date();

        let taxPeriod = angular.copy(currentTime);
        taxPeriod.setDate(1);
        taxPeriod.setHours(0, 0, 0, 0);

        invoice.datumvalute = angular.copy(currentTime);
        invoice.datum_prometa = angular.copy(currentTime);
        invoice.poreski_period = taxPeriod;
    }

    function setBuyer(invoice, buyer) {
        if (buyer === undefined || buyer === null) {
            invoice.komitent = null;
            invoice.komitent_id = null;
        } else {
            invoice.komitent = angular.copy(buyer);
            invoice.komitent_id = buyer.id;
        }
    }

    function copyToCorrectedFields(invoice) {
        invoice.ukupna_cijena_osnovna = invoice.korigovana_ukupna_cijena_osnovna;
        invoice.ukupna_cijena_prodajna = invoice.korigovana_ukupna_cijena_prodajna;
        invoice.ukupna_cijena_rabatisana = invoice.korigovana_ukupna_cijena_rabatisana;
        invoice.ukupna_cijena_puna = invoice.korigovana_ukupna_cijena_puna;
        invoice.porez_iznos = invoice.korigovani_porez_iznos;
        invoice.rabat_iznos_osnovni = invoice.korigovani_rabat_iznos_osnovni;
        invoice.rabat_iznos_prodajni = invoice.korigovani_rabat_iznos_prodajni;

        for (let ii = 0; ii < invoice.stavke.length; ii++) {
            let invoice_item = invoice.stavke[ii];
            invoice_item.jedinicna_cijena_osnovna = invoice_item.korigovana_jedinicna_cijena_osnovna;
            invoice_item.jedinicna_cijena_rabatisana = invoice_item.korigovana_jedinicna_cijena_rabatisana;
            invoice_item.jedinicna_cijena_puna = invoice_item.korigovana_jedinicna_cijena_puna;
            invoice_item.jedinicna_cijena_prodajna = invoice_item.korigovana_jedinicna_cijena_prodajna;

            invoice_item.ukupna_cijena_osnovna = invoice_item.korigovana_ukupna_cijena_osnovna;
            invoice_item.ukupna_cijena_prodajna = invoice_item.korigovana_ukupna_cijena_prodajna;
            invoice_item.ukupna_cijena_rabatisana = invoice_item.korigovana_ukupna_cijena_rabatisana;
            invoice_item.ukupna_cijena_puna = invoice_item.korigovana_ukupna_cijena_puna;
            invoice_item.porez_iznos = invoice_item.korigovani_porez_iznos;
            invoice_item.rabat_iznos_osnovni = invoice_item.korigovani_rabat_iznos_osnovni;
            invoice_item.rabat_iznos_prodajni = invoice_item.korigovani_rabat_iznos_prodajni;
            invoice_item.tax_exemption_amount = invoice_item.corrected_tax_exemption_amount;
            invoice_item.kolicina = invoice_item.korigovana_kolicina;
        }
    }

    function copyItemsFromAdvanceInvoice(advance_invoice, dest_invoice) {
        for (let ii = 0; ii < advance_invoice.stavke.length; ii++) {
            let newInvoiceItem = angular.copy(advance_invoice.stavke[ii]);
            newInvoiceItem.kolicina = 0;
            newInvoiceItem.advance_invoice_item_index = ii;
            dest_invoice.stavke.push(newInvoiceItem);
            service.recalculateItem(dest_invoice, newInvoiceItem);
        }

        service.recalculateTotals(dest_invoice);
        service.recalculateTaxGroups(dest_invoice);
    }

    function create(paymentMethodTypeId) {
        // frontend only fields: payment_methods_total_amount

        let invoice = {}
        invoice.komitent_id = null;
        invoice.komitent = null;
        invoice.is_cash = null;
        invoice.valuta_id = 50;
        invoice.valuta = fisConfig.valute.find((x) => { return x.id === invoice.valuta_id });
        invoice.kurs_razmjene = 1;

        invoice.payment_methods = [];
        if (paymentMethodTypeId) {
            invoice.payment_methods.push(service.createPaymentMethod(paymentMethodTypeId));
            invoice.is_cash = invoice.payment_methods[0].payment_method_type.is_cash;
        }

        invoice.ukupna_cijena_osnovna = 0;
        invoice.ukupna_cijena_rabatisana = 0;
        invoice.ukupna_cijena_prodajna = 0;
        invoice.ukupna_cijena_puna = 0;
        invoice.porez_iznos = 0;
        invoice.rabat_iznos_osnovni = 0;
        invoice.rabat_iznos_prodajni = 0;
        invoice.tax_exemption_amount = 0;

        invoice.payment_methods_total_amount = 0;
        invoice.payment_methods_total_difference = 0;

        invoice.napomena = fisConfig.user.naplatni_uredjaj.organizaciona_jedinica.settings.default_invoice_note;

        invoice.stavke = [];
        invoice.grupe_poreza = _getTaxGroups();

        _setInvoiceDateFields(invoice);

        return invoice;
    }

    function getInvoiceItem() {
        let item = {};
        item.sifra = 1;
        item.naziv = '';
        item.jedinica_mjere_id = fisConfig.defaultUnit.id;
        item.jedinica_mjere = angular.copy(fisConfig.defaultUnit);
        item.izvor_kalkulacije = IZVOR_KALKULACIJE_UPB;

        item.jedinicna_cijena_osnovna = 0;
        item.jedinicna_cijena_puna = 0;
        item.jedinicna_cijena_rabatisana = 0;
        item.jedinicna_cijena_prodajna = 0;

        item.kolicina = 1;
        item.ukupna_cijena_osnovna = 0;
        item.ukupna_cijena_rabatisana = 0;
        item.ukupna_cijena_prodajna = 0;
        item.ukupna_cijena_puna = 0;

        item.poreska_stopa = angular.copy(fisConfig.defaultTaxRate);
        item.porez_procenat = fisConfig.defaultTaxRate.procenat;
        item.porez_iznos = 0;

        item.rabat_procenat = 0;
        item.rabat_iznos_prodajni = 0;
        item.rabat_iznos_osnovni = 0;

        item.credit_note_turnover_remaining = 0;
        item.credit_note_turnover_used = 0;

        item.tax_exemption_reason_id = null;
        item.tax_exemption_amount = 0;

        item.magacin_zaliha = null;
        item.magacin_zaliha_id = null;

        return item;
    }

    function addBlankItem(invoice) {
        let item = getInvoiceItem();

        invoice.stavke.push(item);
        service.recalculateTaxGroups(invoice);
        service.recalculateTotals(invoice);

        return item;
    }

    function addItemFromItemTemplate(invoice, itemTemplate) {
        let newItem = getInvoiceItem();
        service.updateItemFromItemTemplate(invoice, newItem, itemTemplate);
        invoice.stavke.push(newItem);
        return newItem;
    }

    function updateItemFromItemTemplate(invoice, item, itemTemplate) {
        item.naziv = itemTemplate.artikal.naziv;
        item.jedinica_mjere_id = itemTemplate.artikal.jedinica_mjere_id;
        item.jedinica_mjere = fisConfig.units.find(function(x) { return x.id === itemTemplate.artikal.jedinica_mjere_id; })
        item.jedinicna_cijena_osnovna = itemTemplate.jedinicna_cijena_osnovna;
        item.jedinicna_cijena_puna = itemTemplate.jedinicna_cijena_puna;
        item.porez_procenat = itemTemplate.porez_procenat;
        item.magacin_zaliha_id = itemTemplate.id;
        item.magacin_zaliha = angular.copy(itemTemplate);
        item.izvor_kalkulacije = itemTemplate.izvor_kalkulacije;
        service.recalculateItem(invoice, item);
    }

    function createFromTemplate(invoiceTemplate) {
        let invoice = invoiceTemplate;
        _setInvoiceDateFields(invoiceTemplate);
        return invoice;
    }

    function addPaymentMethodByTypeId(invoice, paymentMethodTypeId) {
        let paymentMethod = service.createPaymentMethod(paymentMethodTypeId);
        invoice.payment_methods.push(paymentMethod);
    }

    function sortPaymentMethodTypes(payment_method_types) {
        payment_method_types.sort(function(a, b) {
            return a.sort_weight - b.sort_weight;
        });
    }

    function sortPaymentMethods(payment_methods) {
        payment_methods.sort(function(a, b) {
            return a.payment_method_type.sort_weight - b.payment_method_type.sort_weight;
        });
    }

    function mergePaymentMethods(a, b) {
        let merged = angular.copy(a);
        for (let ii = 0; ii < b.length; ii++) {
            let c = merged.find(function(x) { return x.payment_method_type_id === b[ii].payment_method_type_id  });
            if (c === undefined) {
                merged.push(b[ii]);
            } else {
                merged[ii].amount += b[ii].amount;
            }
        }

        return merged;
    }

    function createPaymentMethod(paymentMethodTypeId) {
        return {
            payment_method_type: fisConfig.getPaymentMethodById(paymentMethodTypeId),
            payment_method_type_id: paymentMethodTypeId,
            amount: 0,
            advance_invoice: undefined
        }
    }

    function splitAmount(amount, numberOfParts) {
        let equalPart = new Big(amount)
            .div(numberOfParts)
            .round(2)
            .toNumber();

        let parts = [];
        for (let ii = 0; ii < numberOfParts - 1; ii++) {
            parts.push(equalPart);
            amount = new Big(amount).minus(equalPart).toNumber();
        }
        parts.push(amount);

        return parts;
    }

    function distributeEvenlyToPaymentMethods(invoice, payment_methods, distribute_amount) {
        let parts = service.splitAmount(distribute_amount, payment_methods.length);

        for (let ii = 0; ii < payment_methods.length; ii++) {
            payment_methods[ii].amount += parts[ii];
        }

        service.recalculateTotals(invoice);
    }

    function isCash(paymentMethodTypeId) {
        return fisConfig.getPaymentMethodById(paymentMethodTypeId).is_cash;
    }

    function recalculateTotals(invoice) {
        let ukupna_cijena_osnovna = (new Big(0));
        let ukupna_cijena_rabatisana = (new Big(0));
        let ukupna_cijena_prodajna = (new Big(0));
        let ukupna_cijena_puna = (new Big(0));
        let rabat_iznos_prodajni = (new Big(0));
        let rabat_iznos_osnovni = (new Big(0));
        let porez_iznos = (new Big(0));
        let tax_exemption_amount = (new Big(0));

        for (let ii = 0; ii < invoice.stavke.length; ii++) {
            ukupna_cijena_osnovna = ukupna_cijena_osnovna.plus(invoice.stavke[ii].ukupna_cijena_osnovna);
            ukupna_cijena_rabatisana = ukupna_cijena_rabatisana.plus(invoice.stavke[ii].ukupna_cijena_rabatisana);
            ukupna_cijena_prodajna = ukupna_cijena_prodajna.plus(invoice.stavke[ii].ukupna_cijena_prodajna);
            ukupna_cijena_puna = ukupna_cijena_puna.plus(invoice.stavke[ii].ukupna_cijena_puna);
            rabat_iznos_prodajni = rabat_iznos_prodajni.plus(invoice.stavke[ii].rabat_iznos_prodajni);
            rabat_iznos_osnovni = rabat_iznos_osnovni.plus(invoice.stavke[ii].rabat_iznos_osnovni);
            porez_iznos = porez_iznos.plus(invoice.stavke[ii].porez_iznos);
            tax_exemption_amount = tax_exemption_amount.plus(invoice.stavke[ii].tax_exemption_amount);
        }

        invoice.ukupna_cijena_osnovna = ukupna_cijena_osnovna.toNumber();
        invoice.ukupna_cijena_rabatisana = ukupna_cijena_rabatisana.toNumber();
        invoice.ukupna_cijena_prodajna = ukupna_cijena_prodajna.toNumber();
        invoice.ukupna_cijena_puna = ukupna_cijena_puna.toNumber();
        invoice.rabat_iznos_prodajni = rabat_iznos_prodajni.toNumber();
        invoice.rabat_iznos_osnovni = rabat_iznos_osnovni.toNumber();
        invoice.porez_iznos = porez_iznos.toNumber();
        invoice.tax_exemption_amount = tax_exemption_amount.toNumber();
    }

    function recalculatePaymentMethodTotals(invoice, autodistribute) {
        let ukupna_cijena_prodajna = new Big(invoice.ukupna_cijena_prodajna);

        if (angular.isUndefined(autodistribute)) {
            autodistribute = true;
        }

        if (autodistribute
            && invoice.payment_methods.length === 1
            && invoice.payment_methods[0].payment_method_type_id !== PAYMENT_METHOD_TYPE_ADVANCE) {
            invoice.payment_methods[0].amount = ukupna_cijena_prodajna.toNumber();
            invoice.payment_methods_total_difference = 0;
            invoice.payment_method_total_amount = ukupna_cijena_prodajna.toNumber();
            return;
        }

        let payment_methods_total_amount = new Big(0);
        for (let ii = 0; ii < invoice.payment_methods.length; ii++) {
            payment_methods_total_amount = payment_methods_total_amount
                .plus(invoice.payment_methods[ii].amount || 0);
        }

        invoice.payment_methods_total_difference = (new Big(ukupna_cijena_prodajna))
            .minus(payment_methods_total_amount)
            .toNumber();
        invoice.payment_methods_total_amount = payment_methods_total_amount
            .toNumber();
    }

    function _getTaxGroups() {
        let taxGroups = [21, 7, 0].map(function (taxRate) {
            return {
                broj_stavki: 0,
                ukupna_cijena_osnovna: 0,
                ukupna_cijena_rabatisana: 0,
                ukupna_cijena_puna: 0,
                ukupna_cijena_prodajna: 0,
                porez_procenat: taxRate,
                porez_iznos: 0,
                rabat_iznos_osnovni: 0,
                rabat_iznos_prodajni: 0,
                credit_note_turnover_remaining: 0,
                credit_note_turnover_used: 0,
                tax_exemption_reason_id: 0,
                tax_exemption_amount: 0
            };
        });

        let exemptionGroups = fisConfig.tax_exemption_reasons.map(function(exemptionReason) {
            return {
                broj_stavki: 0,
                ukupna_cijena_osnovna: 0,
                ukupna_cijena_rabatisana: 0,
                ukupna_cijena_puna: 0,
                ukupna_cijena_prodajna: 0,
                porez_procenat: null,
                porez_iznos: 0,
                rabat_iznos_osnovni: 0,
                rabat_iznos_prodajni: 0,
                credit_note_turnover_remaining: 0,
                credit_note_turnover_used: 0,
                tax_exemption_reason_id: exemptionReason.id,
                tax_exemption_reason: exemptionReason,
                tax_exemption_amount: 0
            }
        });

        return taxGroups.concat(exemptionGroups);
    }

    function recalculateTaxGroups(invoice) {
        for (let ii = 0; ii < invoice.grupe_poreza.length; ii++) {
            let taxGroup = invoice.grupe_poreza[ii];
            taxGroup.broj_stavki = 0;
            taxGroup.ukupna_cijena_osnovna = new Big(0);
            taxGroup.ukupna_cijena_rabatisana = new Big(0);
            taxGroup.ukupna_cijena_puna = new Big(0);
            taxGroup.ukupna_cijena_prodajna = new Big(0);
            taxGroup.porez_iznos = new Big(0);
            taxGroup.rabat_iznos_osnovni = new Big(0);
            taxGroup.rabat_iznos_prodajni = new Big(0);
            taxGroup.credit_note_turnover_remaining = new Big(0);
            taxGroup.credit_note_turnover_used = new Big(0);
            taxGroup.tax_exemption_amount = new Big(0);
        }

        invoice.stavke.forEach(function (stavka) {
            let taxGroup = invoice.grupe_poreza.find(function (x) {
                if (x.porez_procenat === null) {
                    return x.porez_procenat === stavka.porez_procenat
                        && x.tax_exemption_reason_id === stavka.tax_exemption_reason_id;
                } else {
                    return x.porez_procenat === stavka.porez_procenat;
                }
            });

            if (stavka.porez_procenat === null && (taxGroup === undefined || taxGroup === null)) {
                return;
            }

            taxGroup.broj_stavki += 1;
            taxGroup.ukupna_cijena_osnovna = taxGroup.ukupna_cijena_osnovna.plus(stavka.ukupna_cijena_osnovna);
            taxGroup.ukupna_cijena_rabatisana = taxGroup.ukupna_cijena_rabatisana.plus(stavka.ukupna_cijena_rabatisana);
            taxGroup.ukupna_cijena_puna = taxGroup.ukupna_cijena_puna.plus(stavka.ukupna_cijena_puna);
            taxGroup.ukupna_cijena_prodajna = taxGroup.ukupna_cijena_prodajna.plus(stavka.ukupna_cijena_prodajna);
            taxGroup.porez_iznos = taxGroup.porez_iznos.plus(stavka.porez_iznos);
            taxGroup.rabat_iznos_osnovni = taxGroup.rabat_iznos_osnovni.plus(stavka.rabat_iznos_osnovni);
            taxGroup.rabat_iznos_prodajni = taxGroup.rabat_iznos_prodajni.plus(stavka.rabat_iznos_prodajni);
            taxGroup.credit_note_turnover_remaining = taxGroup.credit_note_turnover_remaining.plus(stavka.credit_note_turnover_remaining);
            taxGroup.credit_note_turnover_used = taxGroup.credit_note_turnover_used.plus(stavka.credit_note_turnover_used);
            taxGroup.tax_exemption_amount = taxGroup.tax_exemption_amount.plus(stavka.tax_exemption_amount);
        });

        for (let ii = 0; ii < invoice.grupe_poreza.length; ii++) {
            let taxGroup = invoice.grupe_poreza[ii];
            taxGroup.ukupna_cijena_osnovna = taxGroup.ukupna_cijena_osnovna.round(PRECISION).toNumber();
            taxGroup.ukupna_cijena_rabatisana = taxGroup.ukupna_cijena_rabatisana.round(PRECISION).toNumber();
            taxGroup.ukupna_cijena_puna = taxGroup.ukupna_cijena_puna.round(PRECISION).toNumber();
            taxGroup.ukupna_cijena_prodajna = taxGroup.ukupna_cijena_prodajna.round(PRECISION).toNumber();
            taxGroup.porez_iznos = taxGroup.porez_iznos.round(PRECISION).toNumber();
            taxGroup.rabat_iznos_osnovni = taxGroup.rabat_iznos_osnovni.round(PRECISION).toNumber();
            taxGroup.rabat_iznos_prodajni = taxGroup.rabat_iznos_prodajni.round(PRECISION).toNumber();
            taxGroup.credit_note_turnover_remaining = taxGroup.credit_note_turnover_remaining.round(PRECISION).toNumber();
            taxGroup.credit_note_turnover_used = taxGroup.credit_note_turnover_used.round(PRECISION).toNumber();
            taxGroup.tax_exemption_amount = taxGroup.tax_exemption_amount.round(PRECISION).toNumber();
        }
    }

    function createCorrectiveInvoice(original_invoice) {
        let corrective_invoice = {};
        corrective_invoice.stavke = {};
        corrective_invoice.payment_methods = angular.copy(original_invoice.payment_methods);
        corrective_invoice.grupe_poreza = _getTaxGroups();
        return corrective_invoice;
    }

    function getCorrectiveInvoiceFromDiff(original_invoice, updated_invoice, corrective_invoice) {
        corrective_invoice.stavke = [];

        for (let ii = 0; ii < original_invoice.stavke.length; ii++) {
            service.updateCorrectiveInvoiceItemsFromDiff(original_invoice, updated_invoice, corrective_invoice, ii);
        }

        service.recalculateTotals(corrective_invoice);
        service.recalculatePaymentMethodTotals(corrective_invoice);
        service.recalculateTaxGroups(corrective_invoice);

        return corrective_invoice;
    }


    function updateCorrectiveInvoiceItemsFromDiff(original_invoice, updated_invoice, corrective_invoice, index) {
        let original = original_invoice.stavke[index];
        let updated = updated_invoice.stavke[index];

        service.recalculateItem(updated_invoice, updated);

        if (updated.kolicina !== original.kolicina) {
            let c1 = {};
            c1.izvor_kalkulacije = original.izvor_kalkulacije;
            c1.kolicina = updated.kolicina - original.kolicina;
            c1.jedinicna_cijena_osnovna = original.jedinicna_cijena_osnovna;
            c1.jedinicna_cijena_puna = original.jedinicna_cijena_puna;
            c1.tax_exemption_amount = original.tax_exemption_amount;
            c1.porez_procenat = original.porez_procenat;
            c1.rabat_procenat = original.rabat_procenat;
            c1.tax_exemption_reason_id = original.tax_exemption_reason_id;
            c1.corrected_invoice_item_id = original.id;
            c1.correction_type_id = CORRECTION_TYPE_QUANTITY;
            c1.magacin_zaliha = original.magacin_zaliha;
            c1.magacin_zaliha_id = original.magacin_zaliha_id;
            c1.naziv = original.naziv + ' - korekcija količine';
            c1.sifra = original.sifra;
            c1.jedinica_mjere = original.jedinica_mjere;
            c1.jedinica_mjere_id = original.jedinica_mjere_id;
            corrective_invoice.stavke.push(c1);
            service.recalculateItem(corrective_invoice, c1);
        }

        let correction_type_id = undefined;
        if (updated.porez_procenat === undefined || updated.porez_procenat === null) {
            if (updated.tax_exemption_amount !== original.tax_exemption_amount) {
                correction_type_id = CORRECTION_TYPE_TAX_FREE_AMOUNT;
            }
        } else {
            if (updated.izvor_kalkulacije === IZVOR_KALKULACIJE_UPA) {
                if (updated.jedinicna_cijena_puna !== original.jedinicna_cijena_puna) {
                    correction_type_id = CORRECTION_TYPE_UPA;
                }
            } else if (updated.izvor_kalkulacije === IZVOR_KALKULACIJE_UPB) {
                if (updated.jedinicna_cijena_osnovna !== original.jedinicna_cijena_osnovna) {
                    correction_type_id = CORRECTION_TYPE_UPB;
                }
            } else {
                throw Error('Invalid invoice item price calculation type');
            }
        }

        if (correction_type_id !== undefined) {
            let c2 = {};
            c2.izvor_kalkulacije = original.izvor_kalkulacije;
            c2.corrected_invoice_item_id = original.id;
            c2.porez_procenat = original.porez_procenat;
            c2.rabat_procenat = original.rabat_procenat;
            c2.tax_exemption_reason_id = original.tax_exemption_reason_id;
            c2.magacin_zaliha = original.magacin_zaliha;
            c2.magacin_zaliha_id = original.magacin_zaliha_id;
            c2.naziv = original.naziv + " - korekcija cijene";
            c2.jedinica_mjere = original.jedinica_mjere;
            c2.jedinica_mjere_id = original.jedinica_mjere_id;
            c2.sifra = original.sifra;

            if (correction_type_id === CORRECTION_TYPE_TAX_FREE_AMOUNT) {
                let tax_exemption_amount = (new Big(updated.tax_exemption_amount))
                    .minus(original.tax_exemption_amount)
                    .toNumber();
                c2.kolicina = (new Big(updated.kolicina))
                    .times(tax_exemption_amount < 0 ? -1 : 1)
                    .toNumber();
                c2.tax_exemption_amount = Math.abs(tax_exemption_amount);
                c2.correction_type_id = CORRECTION_TYPE_TAX_FREE_AMOUNT;
            } else if (correction_type_id === CORRECTION_TYPE_UPA) {
                let new_upa = (new Big(updated.jedinicna_cijena_puna))
                    .minus(original.jedinicna_cijena_puna)
                    .toNumber();
                c2.kolicina = (new Big(updated.kolicina))
                    .times(new_upa < 0 ? -1 : 1)
                    .toNumber();
                c2.jedinicna_cijena_puna = Math.abs(new_upa);
                c2.correction_type_id = CORRECTION_TYPE_UPA;
            } else if (correction_type_id === CORRECTION_TYPE_UPB) {
                let new_upb = (new Big(updated.jedinicna_cijena_osnovna))
                    .minus(original.jedinicna_cijena_osnovna)
                    .toNumber();
                c2.kolicina = (new Big(updated.kolicina))
                    .times(new_upb < 0 ? -1 : 1)
                    .toNumber();
                c2.jedinicna_cijena_osnovna = Math.abs(new_upb);
                c2.correction_type_id = CORRECTION_TYPE_UPB;
            }

            corrective_invoice.stavke.push(c2);
            service.recalculateItem(corrective_invoice, c2);
        }
    }

    function recalculateInvoiceItemTemplate(invoiceTemplate) {
        if (invoiceTemplate.izvor_kalkulacije === IZVOR_KALKULACIJE_UPB) {
            recalculateInvoiceItemTemplateFromUPB(invoiceTemplate);
            return;
        }

        if (invoiceTemplate.izvor_kalkulacije === IZVOR_KALKULACIJE_UPA) {
            recalculateInvoiceItemTemplateFromUPA(invoiceTemplate);
            return;
        }

        throw Error('Neispravno polje za tip kalkulacije iznosa stavke.');
    }

    function recalculateInvoiceItemTemplateFromUPB(invoiceTemplate) {
        invoiceTemplate.izvor_kalkulacije = IZVOR_KALKULACIJE_UPB;
        let tax_multiplier = _getItemTaxMultiplier(invoiceTemplate.porez_procenat ? invoiceTemplate.porez_procenat : 0);
        invoiceTemplate.jedinicna_cijena_puna = (new Big(invoiceTemplate.jedinicna_cijena_osnovna)).times(tax_multiplier).round(PRECISION).toNumber();
    }

    function recalculateInvoiceItemTemplateFromUPA(invoiceTemplate) {
        invoiceTemplate.izvor_kalkulacije = IZVOR_KALKULACIJE_UPA;
        let tax_multiplier = _getItemTaxMultiplier(invoiceTemplate.porez_procenat ? invoiceTemplate.porez_procenat : 0);
        invoiceTemplate.jedinicna_cijena_osnovna = (new Big(invoiceTemplate.jedinicna_cijena_puna)).div(tax_multiplier).round(PRECISION).toNumber();
    }

    function setCorrectedInvoiceReference(invoice, $model) {
        invoice.correctedInvoiceReference = {
            type: 'invoice',
            id: $model.id,
            invoice: $model
        }
    }

    function setCorrectedCreditNoteReference(invoice, $model) {
        invoice.correctedInvoiceReference = {
            type: 'credit_note',
            creditNoteId: $model.id,
            creditNote: $model
        }

        invoice.komitent_id = $model.buyer.id;
        invoice.komitent = {};
        invoice.komitent.naziv = $model.buyer.name;
        invoice.komitent.grad = $model.buyer.city;
        invoice.komitent.adresa = $model.buyer.address;
        invoice.komitent.drzava = $model.buyer.country.id;
        invoice.komitent.identifikaciona_oznaka = $model.buyer.identificationNumber;
        invoice.komitent.tip_identifikacione_oznake = {};
        invoice.komitent.tip_identifikacione_oznake_id = $model.buyer.identificationType.id;
        invoice.komitent.tip_identifikacione_oznake.id = $model.buyer.identificationType.id;
        invoice.komitent.tip_identifikacione_oznake.naziv = $model.buyer.identificationType.description;
    }

    function getPaymentMethod(paymentMethodId) {
        return fisConfig.payment_method_types.find((x) => {
            return x.id === paymentMethodId;
        });
    }
}

angular
    .module('app')
    .service('stampac', stampac);

stampac.$inject = ['$rootScope', '$window', '$q', '$timeout', 'api'];

function stampac($rootScope, $window, $q, $timeout, api) {
    let container = document.createElement('div');
    $window.document.body.append(container);

    return {
        stampaj: printV2,
        stampajFakturu: stampajFakturu,
        stampajDokument: stampajDokument,
        stampajKarticuKupca: stampajKarticuKupca,
        stampajKnjiznoOdobrenje: stampajKnjiznoOdobrenje
    }

    function stampajFakturu(fakturaId, tipStampe) {
        return printV2('/api/customer/faktura/' + fakturaId + '/stampa/' + tipStampe);
    }

    function stampajDokument(fakturaId) {
        return print('/api/customer/faktura/' + fakturaId + '/dokument/listaj');
    }

    function stampajKarticuKupca(komitentId) {
        return print('/api/customer/frontend/buyer/' + komitentId + '/state');
    }

    function stampajKnjiznoOdobrenje(creditNoteId) {
        return printV2('/api/customer/credit_note/' + creditNoteId + '/document');
    }

    function printV2(src) {
        const deferred = $q.defer();

        container.innerHTML = '';

        const iframe = document.createElement('iframe');
        iframe.src = src;
        iframe.style.position = 'fixed';
        iframe.style.top = '110%';
        iframe.style.left = '110%';
        iframe.onload = function () {
            iframe.contentWindow.matchMedia('print').addEventListener('change', function () {
                // U slučaju mobilnog browser-a event onafterprint se pokreće 2 puta
                // Jednom prije prelaska na aplikaciju za print, a zatim nakon zatvaranja
                // aplikacije za print. Ukoliko se iframe ukloni, u print aplikaciji
                // se prikazuje prazna stranica i zato se ovdje ne smije ukloniti.
                // iframe.remove();

                $rootScope.showLoader = false;
                $rootScope.$apply();
                deferred.resolve();
            });
            iframe.contentWindow.focus();
            iframe.contentWindow.print();
        }

        container.append(iframe);

        return deferred.promise;
    }

    function print(src) {
        const deferred = $q.defer();

        container.innerHTML = '';

        const iframe = document.createElement('iframe');
        iframe.src = src;
        iframe.className = 'd-none';
        iframe.onload = function () {
            iframe.contentWindow.print();
            $timeout(function() {
                $rootScope.showLoader = false;
                $rootScope.$apply();
                deferred.resolve();
            }, 100)
        }

        container.append(iframe);

        return deferred.promise;
    }
}
angular
    .module('app')
    .directive('blurOnEnter', blurOnEnter);

blurOnEnter.$inject = [];

function blurOnEnter() {
    return {
        restirct: 'A',
        link: function (scope, element, attr) {
            element[0].addEventListener('keyup', function (event) {
                if (event.keyCode === 13) {
                    this.blur();
                }
            });
        }
    }
}
angular
    .module('app')
    .directive('buyerTypeahead', buyerTypeahead);

buyerTypeahead.$inject = ['$parse', '$timeout', 'api', 'fisModal'];

function buyerTypeahead($parse, $timeout, api, fisModal) {
    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'app/directives/buyer-typeahead/buyer-typeahead.template.html',
        link: link,
        scope: true
    }

    function link($scope, $element, $attrs) {
        $scope.ctrl = {};
        $scope.ctrl.query = '';
        $scope.ctrl.onTypeaheadSearch = onTypeaheadSearch;
        $scope.ctrl.onTypeaheadSelect = onTypeaheadSelect;
        $scope.ctrl.onAddButtonClick = onAddButtonClick;
        $scope.ctrl.onSelectCallback = $parse($attrs.onSelect);
        $scope.ctrl.keepOnBlur = 'keepOnBlur' in $attrs;

        $scope.ctrl.canAdd = 'canAdd' in $attrs;

        function onTypeaheadSearch(query) {
            return api.komitent.listaj(query, 1, 10).then(function (data) {
                return data.stavke;
            });
        }

        function onTypeaheadSelect($item, $model, $label) {
            if (!$scope.ctrl.keepOnBlur) {
                $scope.ctrl.query = '';
            }

            $scope.ctrl.onSelectCallback($scope.$parent, {
                '$model': $model
            });
        }

        $scope.ctrl.onTypeaheadFocus = function() {
            let typeaheadNgModelController = $element.find('input').controller('ngModel');
            typeaheadNgModelController.$setViewValue('');
            typeaheadNgModelController.$$setModelValue(null);
            typeaheadNgModelController.$render();

            $scope.ctrl.onSelectCallback($scope.$parent, {
                '$model': null
            });
        }

        function onAddButtonClick() {
            let modalInstance = fisModal.buyerCreateModal();

            modalInstance.result.then(function (result) {
                if (result.isConfirmed) {
                    $scope.ctrl.onSelectCallback($scope.$parent, {
                        '$model': result.model
                    });
                }
            });
        }
    }
}
angular
    .module('app')
    .controller('CountryTypeaheadController', CountryTypeaheadController);

CountryTypeaheadController.$inject = ['$scope', '$parse', '$attrs', 'fisConfig'];

function CountryTypeaheadController($scope, $parse, $attrs, fisConfig) {
    const ctrl = this;

    ctrl.query = '';
    ctrl.onTypeaheadInputChange = onTypeaheadInputChange;
    ctrl.onTypeaheadSelect = onTypeaheadSelect;
    ctrl.initialize = initialize;
    ctrl.onSelectCallback = $parse($attrs.onSelect);

    function initialize(ngModelController) {
        ctrl.ngModelController = ngModelController;
    }

    function onTypeaheadInputChange(query) {
        if (typeof query === "string" && query.length > 0) {
            let queryLowercase = query.toLowerCase();

            return angular.copy(fisConfig.countries).filter(function(country) {
                if (country.drzava.toLowerCase().indexOf(queryLowercase) >= 0) {
                    return true;
                }

                if (country.drzavaeng.toLowerCase().indexOf(queryLowercase) >= 0) {
                    return true;
                }

                if (country.drzava_skraceno_3.toLowerCase().indexOf(queryLowercase) >= 0) {
                    return true;
                }

                return false;
            });
        }

        return angular.copy(fisConfig.countries);
    }

    function onTypeaheadSelect($item, $model, $label) {
        if (ctrl.ngModelController) {
            ctrl.ngModelController.$setViewValue($item.id);
            ctrl.ngModelController.$render();
        }

        ctrl.onSelectCallback($scope.$parent, {
            '$model': $item
        });
    }
}
angular
    .module('app')
    .directive('countryTypeahead', countryTypeahead);

countryTypeahead.$inject = ['$parse', '$timeout', 'fisConfig'];

function countryTypeahead($parse, $timeout, fisConfig) {
    return {
        require: ['countryTypeahead', '?ngModel'],
        replace: true,
        restrict: 'E',
        controller: 'CountryTypeaheadController',
        controllerAs: 'ctrl',
        bindToController: true,
        templateUrl: 'app/directives/country-typeahead/country-typeahead.template.html',
        link: link,
        scope: true
    }

    function link($scope, $element, $attrs, $controllers) {
        let countryTypeaheadController = $controllers[0];
        let ngModelController = $controllers[1];
        countryTypeaheadController.initialize(ngModelController);
    }
}
angular
    .module('app')
    .directive('creditNoteTypeahead', creditNoteTypeahead);

creditNoteTypeahead.$inject = ['$parse', 'fisCustomerApi'];

function creditNoteTypeahead($parse, fisCustomerApi) {
    return {
        require: '?ngModel',
        restrict: 'E',
        replace: true,
        templateUrl: 'app/directives/credit-note-typeahead/credit-note-typeahead.template.html',
        link: link,
        scope: true
    }

    function link(scope, element, attrs, ngModelController) {
        let ctrl = {};
        scope.ctrl = ctrl;

        ctrl.query = '';

        ctrl.onTypeaheadInputChange = onTypeaheadInputChange;
        ctrl.onTypeaheadSelect = onTypeaheadSelect;
        ctrl.onSelectCallback = $parse(attrs.onSelect);

        function onTypeaheadInputChange(query) {
            return fisCustomerApi.directives__credit_note_typeahead__on_typeahead_input_change({
                query: query
            }).then(function(data) {
                return data.creditNotes;
            });
        }

        function onTypeaheadSelect($item, $model, $label) {
            ctrl.query = '';

            if (ngModelController) {
                ngModelController.$setViewValue($item.id);
            }

            ctrl.onSelectCallback(scope.$parent, {
                '$model': $item
            });
        }
    }
}
angular
    .module('app')
    .directive('fileSelectionChanged', fileSelectionChanged);

fileSelectionChanged.$inject = ['$window'];

function fileSelectionChanged($window) {
    return {
        link: link,
        scope: {
            fileSelectionChanged: '&'
        }
    }

    function link(scope, element) {
        let isMulti = false;

        scope.fileInputElement = document.createElement('input');
        scope.fileInputElement.type = 'file';
        scope.fileInputElement.className = 'd-none';

        let container = document.createElement('div');
        $window.document.body.append(container);
        scope.$on('$destroy', function() {
            $window.document.body.removeChild(container);
        });

        if (isMulti) {
            scope.fileInputElement.multiple = true;
        }

        angular.element(scope.fileInputElement).bind('change', function(event) {
            scope.fileSelectionChanged({ files: event.target.files });
            scope.$apply();
        });

        element.on('click', function() {
            scope.fileInputElement.click();
        });
    }
}
angular
    .module('app')
    .directive('fisAutofocus', fisAutofocus);

fisAutofocus.$inject = ['$timeout'];

function fisAutofocus($timeout) {
    return {
        restrict: 'A',
        link: link,
        scope: {
            fisAutofocus: '&'
        }
    }

    function link(scope, element) {
        let autofocus = scope.fisAutofocus();

        if (autofocus) {
            $timeout(function () {
                element.focus();
            });
        } else {
            $timeout(function () {
                element.blur();
            });
        }
    }
}
angular
    .module('app')
    .directive('fisModelMatch', fisModelMatch);

fisModelMatch.$inject = [];

function fisModelMatch() {
    return {
        require: 'ngModel',
        restrict: 'A',
        link: link
    }

    function link(scope, element, attrs, ngModel) {
        // ngModel.$validators.fisModelMatch = function(modelValue) {
        //     if (ngModel.$validators.required && ngModel.$isEmpty(modelValue)) {
        //         ngModel.$setValidity('confirm', true);
        //         return true;
        //     }
        //
        //     ngModel.$setValidity('confirm', modelValue === scope.$eval(attrs.fisModelMatch));
        //     return true;
        // }

        ngModel.$parsers.push(function(viewValue) {
            ngModel.$setValidity('confirm', viewValue === scope.$eval(attrs.fisModelMatch));
            return viewValue;
        });

        ngModel.$formatters.push(function(modelValue) {
            ngModel.$setValidity('confirm', modelValue === scope.$eval(attrs.fisModelMatch));
            return modelValue;
        });

        // scope.$watch(attrs.fisModelMatch, function() {
        //     ngModel.$render();
        // });
    }
}
angular
    .module('app')
    .directive('fisMinDate', fisMinDate);

fisMinDate.$inject = [];

function fisMinDate() {
    return {
        restrict: 'A',
        require: 'ngModel',
        priority: 200,
        link: link
    }

    function link(scope, element, attrs, ngModel) {
        ngModel.$validators.mindate = function(modelValue, viewValue) {
            let minDate = attrs.fisMinDate ? scope.$eval(attrs.fisMinDate) : new Date();
            ngModel.$setValidity('minDate', modelValue > minDate);
            return modelValue > minDate;
        }
    }
}
angular
    .module('app')
    .directive('fisOnOverflow', fisOnOverflow);

fisOnOverflow.$inject = [];

function fisOnOverflow() {
    return {
        restrict: 'A',
        link: link,
        scope: {
            fisOnOverflow: '&'
        }
    };

    function link(scope, element) {
        scope.$watch(function() {
            return element[0].scrollHeight
        }, function() {
            if (element[0].clientHeight < element[0].scrollHeight) {
                scope.fisOnOverflow({ hasOverflow: true });
            } else {
                scope.fisOnOverflow({ hasOverflow: false });
            }
        }, true);
    }
}
angular
    .module('app')
    .directive('fisPagination', fisPagination);

fisPagination.$inject = ['$timeout'];

function fisPagination($timeout) {
    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'app/directives/fis-pagination/fis-pagination.template.html',
        link: link,
        scope: {
            currentPage: '=',
            pageData: '=',
            onPageChange: '&'
        }
    }

    function link($scope, $element, $attrs) {
        if ('class' in $attrs) {
            $element.children().addClass($attrs.class);
        }

        $scope.onPageChangeWrapper = function() {
            $timeout(function() {
                $scope.onPageChange();
            });
        }
    }
}
angular
    .module('app')
    .directive('fisTextareaResize', fisTextareaResize);

fisTextareaResize.$inject = ['$window'];

function fisTextareaResize($window) {
    return {
        restrict: 'A',
        link: link
    }

    function link(scope, element, attrs) {
        element[0].style.resize = 'none';

        angular.element($window).on('resize', function() {
            resizeTextarea();
        });

        scope.$watch(attrs.ngModel, function(){
            resizeTextarea();
        });

        resizeTextarea();

        function resizeTextarea(){
            let offset = element.innerHeight() - element.height();

            if (element.innerHeight() < element.get(0).scrollHeight) {
                // Grow the field if scroll height is smaller
                element.height(element.get(0).scrollHeight - offset);
            } else {
                // Shrink the field and then re-set it to the scroll height in case it needs to shrink
                element.height(1);
                element.height(element.get(0).scrollHeight - offset);
            }
        }
    }
}
angular
    .module('app')
    .directive('invoiceBadges', invoiceBadges);

invoiceBadges.$inject = [];

function invoiceBadges() {
    return {
        restrict: 'E',
        replace: true,
        link: link,
        templateUrl: 'app/directives/invoice-badges/invoice-badges.template.html',
        scope: {
            invoice: '=invoice'
        }
    }

    function link($scope, $element, $attributes) {
        $scope.badges = [];

        if ($scope.invoice.tip_fakture_id === 1) {
            $scope.badges.push({
                text: 'redovni račun',
                class: 'bg-dark'
            });
        }

        if ($scope.invoice.advance_invoice_id !== undefined && $scope.invoice.advance_invoice_id !== null) {
            $scope.badges.push({
                text: 'konačni račun',
                class: 'bg-danger'
            });
        }

        if ($scope.invoice.tip_fakture_id === 2) {
            $scope.badges.push({
                text: 'storno račun',
                class: 'bg-primary'
            });
        }

        if ($scope.invoice.tip_fakture_id === 5 || $scope.invoice.is_advance_invoice) {
            $scope.badges.push({
                text: 'avans',
                class: 'bg-info'
            });
        }

        if ($scope.invoice.tip_fakture_id === 3) {
            $scope.badges.push({
                text: 'zbirni račun',
                class: 'bg-info'
            });
        }

        if ($scope.invoice.status === 5) {
            $scope.badges.push({
                text: 'ima knjižno odobrenje',
                class: 'bg-info'
            });
        }

        if ($scope.invoice.tip_fakture_id === 7) {
            $scope.badges.push({
                text: 'korektivni račun',
                class: 'bg-primary'
            });
        }

        if ($scope.invoice.tip_fakture_id === 8) {
            $scope.badges.push({
                text: 'ispravka greške',
                class: 'bg-secondary'
            });
        }

        if ($scope.invoice.status === 4) {
            $scope.badges.push({
                text: 'storniran',
                class: 'bg-danger'
            });
        }

        if ($scope.invoice.status === 6) {
            $scope.badges.push({
                text: 'ispravljen',
                class: 'bg-secondary'
            });
        }

        if ($scope.invoice.je_korigovana) {
            $scope.badges.push({
                text: 'korigovan',
                class: 'bg-warning'
            });
        }

        if ($scope.invoice.status === 1 || $scope.invoice.status === 3) {
            $scope.badges.push({
                text: 'neuspjela fiskalizacija',
                class: 'bg-danger'
            });
        }

        if ($scope.invoice.tip_fakture_id === 9) {
            $scope.badges.push({
                text: 'predračun',
                class: 'bg-secondary'
            })
        }
    }
}
angular
    .module('app')
    .directive('invoiceBuyerPicker', invoiceBuyerPicker);

invoiceBuyerPicker.$inject = ['fisModal', 'invoiceFactory', 'api'];

function invoiceBuyerPicker(fisModal, invoiceFactory, api) {
    return {
        require: 'ngModel',
        restrict: 'E',
        templateUrl: 'app/directives/invoice-buyer-picker/invoice-buyer-picker.template.html',
        transclude: true,
        link: link,
        scope: {
            invoice: '=',
            fisDisabled: '&',
            fisChange: '&'
        }
    }

    function link(scope, element, attrs, ngModel) {
        element.addClass('invoice-buyer-picker');

        scope.disabled = scope.fisDisabled();

        if (attrs.buttonResponsiveClasses) {
            scope.buttonResponsiveClasses = attrs.buttonResponsiveClasses;
        } else {
            scope.buttonResponsiveClasses = 'col-6 col-lg-3 col-xxl-2';
        }

        scope.searchBuyers = function(query) {
            return api.komitent.listaj(query).then(function(data) {
                return data;
            });
        }

        scope.onSelect = function($item, $model, $label) {
            invoiceFactory.setBuyer(scope.invoice, $item);
            ngModel.$setViewValue(scope.invoice.komitent_id);
        }

        scope.showBuyerUpdateModal = function () {
            fisModal.buyerUpdateModal(scope.invoice.komitent_id).then(function(result) {
                if (result.isConfirmed) {
                    invoiceFactory.setBuyer(scope.invoice, result.komitent);
                    ngModel.$setViewValue(scope.invoice.komitent_id);
                }
            });
        }

        scope.showCreateBuyerModal = function () {
            let modalInstance = fisModal.buyerCreateModal();

            modalInstance.result.then(function(result) {
                if (result.isConfirmed) {
                    api.komitent.listaj().then(function(data) {
                        invoiceFactory.setBuyer(scope.invoice, result.komitent);
                        ngModel.$setViewValue(scope.invoice.komitent_id);
                    });
                }
            });
        }

        scope.removeBuyer = function () {
            invoiceFactory.setBuyer(scope.invoice, null);
        }
    }
}
angular
    .module('app')

    .directive('invoiceCard', invoiceCard);

invoiceCard.$inject = ['$state', 'api', 'stampac', 'fisModal', 'fisGui', 'fisConfig'];

function invoiceCard($state, api, stampac, fisModal, fisGui, fisConfig) {
    return {
        restrict: 'E',
        replace: true,
        link: link,
        templateUrl: 'app/directives/invoice-card/invoice-card.template.html',
        scope: {
            invoice: '=',
            mode: '=',
            onCancellation: '&'
        }
    }

    function link($scope, $element, $attrs) {
        $scope.options = {};

        $scope.stampac = stampac;

        $scope.showCijena = true;
        $scope.showPaymentMethods = true;
        $scope.showKomitent = true;
        $scope.showEmail = true;
        $scope.showPrometZaKnjizno = false;
        $scope.showUpload = $attrs.uploadEnabled === 'false';

        $scope.corrective_invoices = $scope.invoice.korektivne_fakture.filter(invoice => invoice.status === 2);

        $scope.upload = function(file) {
            let fakturaId = $scope.invoice.id;

            api.faktura.poId.dokument.upload(fakturaId, file).then(function() {
                stampac.stampajDokument(fakturaId);
                $scope.invoice.ima_dokument = true;
            });
        }

        $scope.cancel = function storniraj() {
            fisModal.confirmOrCancel({
                headerText: 'Storiranje računa',
                bodyText: 'Da li ste sigurni da želite da stornirate račun?',
                confirmButtonText: 'Da, storniraj',
                cancelButtonText: 'Odustani'
            }).then(function (result) {
                if (!result.isConfirmed) {
                    return;
                }

                fisGui.wrapInLoader(function() {
                    return api.faktura.storniraj($scope.invoice.id).then(function (data) {
                        if (data.result.is_success) {

                            return stampac.stampajFakturu(
                                data.invoice.id,
                                fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                            ).then(function() {
                                return $state.transitionTo($state.current, { broj_stranice: 1 }, {
                                    reload: true, inherit: false
                                });
                            });
                        } else {
                            return fisModal.confirm({
                                headerText: 'Grеška',
                                bodyText: data.result.message,
                                confirmButtonText: 'U redu'
                            });
                        }
                    });
                });
            });
        }

        $scope.sendMail = function sendMail() {
            fisModal.confirmOrCancel({
                headerText: 'Slanje e-mail-a',
                bodyText:
                    'Kopija računa će biti proslijeđena na adresu <span class="fw-bold">' + $scope.invoice.komitent.email + '</span>. ' +
                    'Da li ste sigurni da želite da pošaljete kopiju?'
            }).then(function(result) {
                if (result.isConfirmed) {
                    fisGui.wrapInLoader(function() {
                        return api.faktura.poId.mail($scope.invoice.id).then(function(data) {
                            if (data.is_success) {
                                return fisModal.confirm({
                                    headerText: 'Uspjeh',
                                    bodyText: data.message
                                });
                            } else {
                                return fisModal.confirm({
                                    headerText: 'Grеška',
                                    bodyText: data.message
                                })
                            }
                        }).finally(function() {
                            $state.reload();
                        });
                    });
                }
            });
        }

        $scope.invoiceScheduleModal = function() {
            fisModal.invoiceScheduleModal($scope.invoice).then(function(result) {
                if (result.isConfirmed) {
                    if (result.invoice_schedule.is_active) {
                        $scope.invoice.active_invoice_schedule = result.invoice_schedule;
                    }
                }
            });
        }
    }
}
angular
    .module('app')
    .directive('invoiceFilterForm', invoiceFilterForm);

invoiceFilterForm.$inject = ['fisConfig', 'api'];

function invoiceFilterForm(fisConfig, api) {
    return {
        replace: true,
        link: link,
        templateUrl: 'app/directives/invoice-filter-form/invoice-filter-form.template.html',
        scope: {
            filters: '=',
            onConfirm: '&',
            onClose: '&',
            onBuyerSelect: '&'
        }
    }

    function link(scope, element, attrs) {
        scope.payment_method_types = angular.copy(fisConfig.payment_method_types);

        scope.onPaymentMethodSelect = function($item, $model, $label) {
            if (scope.filters.payment_method_types.findIndex(x => x.id === $item.id) >= 0) {
                return;
            }

            scope.filters.payment_method_types.push($item);
            scope.filters.payment_type_id.push($item.id);
        }

        scope.deletePaymentMethodType = function($index) {
            scope.filters.payment_method_types.splice($index, 1);
            scope.filters.payment_type_id.splice($index, 1);
        }

        scope.searchBuyers = function(query) {
            return api.komitent.listaj(query, 1, 20).then(function(data) {
                return data.stavke;
            });
        }

        scope.onSelect = function($item, $model, $label) {
            if (scope.filters.buyers.findIndex(x => x.id === $item.id) >= 0) {
                return;
            }

            scope.filters.client_id.push($item.id);
            scope.filters.buyers.push($item);

            scope.onBuyerSelect();
        }

        scope.deleteBuyer = function($index) {
            scope.filters.client_id.splice($index, 1);
            scope.filters.buyers.splice($index, 1);
        }
    }
}
angular
    .module('app')
    .directive('invoiceItemTypeahead', invoiceItemTypeahead);

invoiceItemTypeahead.$inject = ['$rootScope', '$timeout', 'api', 'fisConfig'];

function invoiceItemTypeahead($rootScope, $timeout, api, fisConfig) {
    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'app/directives/invoice-item-typeahead/invoice-item-typeahead.template.html',
        link: link,
        scope: {
            size: '@size',  // sm, lg
            isRounded: '=',
            typeaheadPopupClasses: '=',
            typeaheadAppendTo: '=',
            typeaheadOnFocusChange: '&',
            typeaheadOnLoadingChange: '&',
            typeaheadOnOpenChange: '&',
            onAdd: '&'
        }
    }

    function link(scope, element, attrs) {
        scope.podaci = {};
        scope.podaci.kolicina = 1;
        scope.podaci.magacin_zaliha = null;
        scope.query = '';

        scope.isEditingQuantity = false;
        scope.typeaheadIsLoading = false;
        scope.typeaheadIsOpen = false;
        scope.typeaheadHasFocus = false;

        let quantityInput = angular.element(element.find('input')[0]);
        let typeaheadInput = angular.element(element.find('input')[1]);

        scope.$watch('typeaheadHasFocus', function(newValue) {
            $timeout(function() {
                scope.typeaheadOnFocusChange({
                    isFocused: newValue
                });
            }, 300);
        });

        scope.$watch('typeaheadIsLoading', function(newValue) {
            $timeout(function() {
                scope.typeaheadOnLoadingChange({
                    isLoading: newValue
                });
            }, 300);
        });

        scope.$watch('typeaheadIsOpen', function(newValue) {
            $timeout(function() {
                scope.typeaheadOnOpenChange({
                    isOpen: newValue
                });
            }, 300);
        });

        if (scope.size === 'lg' || scope.size === 'sm') {
            scope.inputGroupClasses = 'input-group-' + scope.size;
        }

        scope.debouncePromise = null;
        scope.request = null;

        scope.onSelect = onSelect;
        scope.getZalihe = getZalihe;
        scope.clearAmount = clearAmount;
        scope.onResetButtonClick = onResetButtonClick;
        scope.onInputKeydown = onInputKeydown;
        scope.focusTypeahead = focusTypeahead;

        function reset() {
            scope.podaci.kolicina = 1;
            scope.query = '';
        }

        function onSelect($item, $model, $label, $eventType) {
            if (scope.podaci.kolicina === null) {
                scope.podaci.kolicina = 1;
            }

            scope.podaci.magacin_zaliha = angular.copy($item);
            scope.onAdd({ $data: angular.copy(scope.podaci), $eventType: $eventType });

            reset();
        }

        function getZalihe(pojam_za_pretragu) {
            $timeout.cancel(scope.debouncePromise);

            scope.debouncePromise = $timeout(function() {
                return api.magacin.poId.zalihe
                    .listaj(
                        fisConfig.user.magacin_id,
                        {pojam_za_pretragu: pojam_za_pretragu, broj_stranice: 1, broj_stavki_po_stranici: 50})
                    .then(function (data) {
                        return data.stavke;
                    });
            }, 300);

            return scope.debouncePromise;
        }

        function clearAmount() {
            scope.query = '';
            scope.podaci.magacin_zaliha = null;
            scope.podaci.kolicina = null;

            $timeout(function () {
                quantityInput.focus();
            });
        }

        function onResetButtonClick() {
            reset();
        }

        let emptyCount = 1;

        function onInputKeydown(event) {
            $timeout(function() {
                if (scope.query === '' && (event.key === '' || event.key === 'Backspace' || event.keyCode === 8 || event.charCode === 8)) {
                    emptyCount += 1;
                } else {
                    emptyCount = 1;
                }

                if (emptyCount > 1) {
                    emptyCount = 1;
                    scope.podaci.kolicina = null;
                    scope.isEditingQuantity = true;
                    quantityInput.focus();
                }
            });

        }

        scope.onQuantityBlur = function($event) {
            scope.isEditingQuantity = false;
            if (
                scope.podaci.kolicina === undefined
                || scope.podaci.kolicina === null
                || scope.podaci.kolicina === ''
            ) {
                scope.podaci.kolicina = 1;
            }

            focusTypeahead();
        }

        scope.onQuantityChange = function() {
            if (
                scope.podaci.kolicina === undefined
                || scope.podaci.kolicina === null
                || scope.podaci.kolicina === ''
            ) {
                return;
            }

            const newValue = scope.podaci.kolicina.replace(/,/g, '.');

            let shouldBlur = newValue.endsWith('*') || newValue.endsWith('x') || newValue.endsWith('X');

            // Remove all non-numeric and non-decimal point characters
            let filteredValue = newValue.replace(/[^\d.]/g, '');

            if (filteredValue === "") {
                scope.podaci.kolicina = 1;
                focusTypeahead();
                return;
            }

            // Ensure that only the first decimal point remains
            const decimalIndex = filteredValue.indexOf('.');
            if (decimalIndex !== -1) {
                const integerPart = filteredValue.slice(0, decimalIndex);
                const decimalPart = filteredValue.slice(decimalIndex + 1).replace(/\./g, '');
                scope.podaci.kolicina = integerPart + '.' + decimalPart;
            } else {
                scope.podaci.kolicina = filteredValue;
            }

            if (shouldBlur) {
                scope.podaci.kolicina = parseFloat(scope.podaci.kolicina);
                focusTypeahead();
            }
        }

        function onQueryChange() {
            if (
                scope.query === undefined
                || scope.query === null
            ) {
                quantityInput.focus();
            }
        }

        function focusTypeahead() {
            typeaheadInput.attr('inputmode', 'none');
            typeaheadInput.focus();
        }
    }
}
angular
    .module('app')
    .directive('invoiceTurnoverTable', invoiceTurnoverTable);

invoiceTurnoverTable.$inject = [];

function invoiceTurnoverTable() {
    return {
        restrict: 'E',
        templateUrl: 'app/directives/invoice-turnover-table/invoice-turnover-table.template.html',
        link: link,
        scope: {
            creditNote: '=',
            viewInvoices: '=invoices',
            selectedInvoices: '=',
            selectionChanged: '&'
        }
    }

    function link($scope, $element, $attributes, $controllers) {
        $scope.toggle = toggle;

        $scope.selectedIds = [];

        function toggle(invoice) {
            let index = $scope.selectedIds.indexOf(invoice.id);
            let isSelected = index >= 0;

            doSelectMultiple();

            function doSelectMultiple() {
                if (isSelected) {
                    let event = { shouldSelect: true };
                    $scope.selectionChanged({ 'action': 'remove', invoice: invoice, selectedInvoices: $scope.selectedInvoices, selectedIds: $scope.selectedIds, event: event }).then(function() {
                        if (event.shouldSelect) {
                            $scope.selectedIds.splice(index, 1);
                            if ($scope.selectedInvoices) {
                                $scope.selectedInvoices.splice(index, 1);
                            }
                        }
                    });
                } else {
                    let event = { shouldSelect: true };
                    $scope.selectionChanged({ 'action': 'add', invoice: invoice, selectedInvoices: $scope.selectedInvoices, selectedIds: $scope.selectedIds, event: event }).then(function() {
                        if (event.shouldSelect) {
                            $scope.selectedIds.push(invoice.id);
                            if ($scope.selectedInvoices) {
                                $scope.selectedInvoices.push(invoice);
                            }
                        }
                    });
                }
            }
        }
    }
}
angular
    .module('app')
    .directive('numericKeyboard', numericKeyboard);

numericKeyboard.$inject = [];

function numericKeyboard() {
    return {
        restrict: 'EAC',
        require: 'ngModel',
        link: link,
        scope: {
            numericKeyboard: '@numericKeyboard'
        }
    }

    function link(scope, element, attrs, ngModelCtrl) {
        let Keyboard = window.SimpleKeyboard.default;

        element.addClass(scope.numericKeyboard);

        let lalaKeyboard = new Keyboard('.' + scope.numericKeyboard, {
            onChange: input => onChange(input),
            onKeyPress: button => onKeyPress(button),
            layout: {
                default: [
                    "7 8 9",
                    "4 5 6",
                    "1 2 3",
                    "{bksp} 0 .",
                ],
                shift: ["! / #", "$ % ^", "& * (", "{shift} ) +", "{bksp}"]
            },
            inputPattern: /^([1-9][0-9]*|0)\.?([0-9]{0,3})?$/,
            display: {
                '{bksp}': 'Briši'
            },
            buttonTheme: [
                {
                    class: 'invisible',
                    buttons: '{blank}'
                },
                {
                    class: 'h4 mb-0',
                    buttons: '.'
                }
            ],
                theme: "hg-theme-default hg-layout-numeric numeric-theme bg-white p-0"
        });

        lalaKeyboard.setInput(ngModelCtrl.$viewValue);

        scope.$watch(function () {
            return ngModelCtrl.$viewValue;
        }, function(newValue) {
            lalaKeyboard.setInput(newValue);
        });

        function onChange(input) {
            ngModelCtrl.$$setModelValue(parseFloat(input));
            ngModelCtrl.$setViewValue(input);
        }

        function onKeyPress(button) {
            console.log("Button pressed", button);

            /**
             * If you want to handle the shift and caps lock buttons
             */
            if (button === "{shift}" || button === "{lock}") handleShift();
        }

        function handleShift() {
            let currentLayout = keyboard.options.layoutName;
            let shiftToggle = currentLayout === "default" ? "shift" : "default";

            lalaKeyboard.setOptions({
                layoutName: shiftToggle
            });
        }
    }
}
angular
    .module('app')
    .directive('paymentMethodTypeahead', paymentMethodTypeahead);

paymentMethodTypeahead.$inject = ['fisConfig'];

function paymentMethodTypeahead(fisConfig) {
    return {
        restrict: 'E',
        templateUrl: 'app/directives/payment-method-typeahead/payment-method-typeahead.template.html',
        link: link,
        scope: {
            onSelect: '&',
            isCash: '='
        }
    }

    function link(scope, element, attrs) {
        scope.fisConfig = fisConfig;
        scope.query = '';
    }
}
angular
    .module('app')
    .directive('typeaheadAdditionalOptions', typeaheadAdditionalOptions);

typeaheadAdditionalOptions.$inject = [];

function typeaheadAdditionalOptions() {
    return {
        require: 'ngModel',
        scope: {
            options: '=typeaheadAdditionalOptions'
        },
        link: function ($scope, element, attrs, ngModel) {
            element.bind('focus', function () {
                if ($scope.options.clearOnFocus) {
                    ngModel.$setViewValue("")
                    ngModel.$render();
                }

                if ($scope.options.openOnFocus) {
                    $(element).trigger('input');
                    $(element).trigger('change');
                }
            });
        }
    };
}
angular
    .module('app')
    .controller('ConfirmModalController', ConfirmModalController);

ConfirmModalController.$inject = ['$uibModalInstance', 'data'];

function ConfirmModalController($uibModalInstance, data) {
    let ctrl = this;

    ctrl.headerText = data.headerText;
    ctrl.headerIcon = data.headerIcon ? data.headerIcon : null;
    ctrl.bodyText = data.bodyText;
    ctrl.buttonText = data.confirmButtonText ? data.confirmButtonText : 'U redu';
}
angular
    .module('app')
    .controller('ConfirmOrCancelModalController', ConfirmOrCancelModalController);

ConfirmOrCancelModalController.$inject = ['$uibModalInstance', 'data'];

function ConfirmOrCancelModalController($uibModalInstance, data) {
    let ctrl = this;

    ctrl.headerText = data.headerText;
    ctrl.headerIcon = data.headerIcon ? data.headerIcon : null;
    ctrl.bodyText = data.bodyText;
    ctrl.confirmButtonText = data.confirmButtonText ? data.confirmButtonText : 'Potvrdi';
    ctrl.cancelButtonText = data.cancelButtonText ? data.cancelButtonText : 'Odustani';
}
angular
    .module('app')
    .controller('CreditNoteExternalInvoiceModalController', CreditNoteExternalInvoiceModalController)

CreditNoteExternalInvoiceModalController.$inject = ['$uibModalInstance', 'fisModal'];

function CreditNoteExternalInvoiceModalController($uibModalInstance, fisModal) {
    let ctrl = this;

    ctrl.data = {
        iic: '',
        issue_datetime: '',
        verification_url: '',
        amount_21: 0,
        amount_7: 0,
        amount_0: 0,
        amount_exempt: 0,
        total_21: 0,
        total_7: 0,
        total_0: 0,
        total_exempt: 0
    }

    ctrl.confirm = confirm;

    function confirm() {
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.confirm({
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        $uibModalInstance.close({
            action: 'confirmed',
            data: ctrl.data
        });
    }
}
angular
    .module('app')
    .controller('CreditNoteItemModal', CreditNoteItemModal)

CreditNoteItemModal.$inject = ['$uibModalInstance', 'modalData', 'fisModal'];

function CreditNoteItemModal($uibModalInstance, modalData, fisModal) {
    let ctrl = this;

    ctrl.options = modalData.options;
    ctrl.cachedItem = angular.copy(modalData.item);

    if (ctrl.cachedItem) {
        ctrl.item = angular.copy(ctrl.cachedItem);
    } else {
        ctrl.item = {
            description: undefined,
            taxRate: undefined,
            amount: 0
        }
    }

    ctrl.confirm = confirm;

    function confirm() {
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.confirm({
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        $uibModalInstance.close({
            action: 'save',
            item: ctrl.item
        });
    }
}
angular
    .module('app')
    .controller('CreditNoteTurnoverUsedModalController', CreditNoteTurnoverUsedModalController)

CreditNoteTurnoverUsedModalController.$inject = ['$uibModalInstance', 'modalData', 'fisModal'];

function CreditNoteTurnoverUsedModalController($uibModalInstance, modalData, fisModal) {
    let ctrl = this;

    ctrl.cachedItem = angular.copy(modalData.invoice);
    ctrl.data = {
        amount_21: 0,
        amount_7: 0,
        amount_0: 0,
        amount_exempt: 0,
        total_21: 0,
        total_7: 0,
        total_0: 0,
        total_exempt: 0
    }

    if (ctrl.cachedItem) {
        ctrl.invoice = angular.copy(ctrl.cachedItem);
    } else {
        ctrl.invoice = {
            description: undefined,
            taxRate: undefined,
            amount: 0
        }
    }

    let tax21 = ctrl.invoice.grupe_poreza.find(function(x) {return x.porez_procenat === 21; })
    ctrl.data.total_21 = tax21 ? tax21.credit_note_turnover_remaining : 0;

    let tax7 = ctrl.invoice.grupe_poreza.find(function(x) {return x.porez_procenat === 7; })
    ctrl.data.total_7 = tax7 ? tax7.credit_note_turnover_remaining : 0;

    let tax0 = ctrl.invoice.grupe_poreza.find(function(x) {return x.porez_procenat === 0; })
    ctrl.data.total_0 = tax0 ? tax0.credit_note_turnover_remaining : 0;

    let taxExempt = ctrl.invoice.grupe_poreza.find(function(x) {return x.porez_procenat === null; })
    ctrl.data.total_exempt = taxExempt ? taxExempt.credit_note_turnover_remaining : 0;

    ctrl.confirm = confirm;

    function confirm() {
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.confirm({
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        $uibModalInstance.close({
            action: 'confirmed',
            data: ctrl.data
        });
    }
}
angular
    .module('app')
    .controller('DuePaymentNotificationModal', DuePaymentNotificationModal);

DuePaymentNotificationModal.$inject = ['$uibModalInstance', 'initialData'];

function DuePaymentNotificationModal($uibModalInstance, initialData) {
    const ctrl = this;

    ctrl.notifications = initialData.notifications;

    ctrl.confirm = confirm;

    function confirm() {
        $uibModalInstance.close();
    }
}
angular
    .module('app')
    .controller('InvoiceBuyerSelectModal', InvoiceBuyerSelectModal);

InvoiceBuyerSelectModal.$inject = [
    '$timeout', '$uibModalInstance', 'api', 'initialData', 'invoiceFactory', 'fisModal'
];

function InvoiceBuyerSelectModal(
    $timeout, $uibModalInstance, api, initialData, invoiceFactory, fisModal
) {
    let ctrl = this;

    ctrl.query = '';
    ctrl.invoice = angular.copy(initialData.invoice);

    ctrl.typeaheadState = {};
    ctrl.typeaheadState.isOpen = false;

    ctrl.confirm = confirm;
    ctrl.onTypeaheadSearch = onTypeaheadSearch;
    ctrl.setTypeaheadFocused = setTypeaheadFocused;
    ctrl.onSelect = onSelect;
    ctrl.showBuyerUpdateModal = showBuyerUpdateModal;
    ctrl.showCreateBuyerModal = showCreateBuyerModal;
    ctrl.removeBuyer = removeBuyer;

    function confirm() {
        initialData.invoice.komitent = ctrl.invoice.komitent;
        initialData.invoice.komitent_id = ctrl.invoice.komitent_id;
        $uibModalInstance.close({
            isConfirmed: true
        });
    }

    function onTypeaheadSearch(query) {
        return api.komitent.listaj(query).then(function(data) {
            return data;
        });
    }

    function setTypeaheadFocused(isFocused, delay) {
        $timeout(function() {
            ctrl.typeaheadState.isFocused = isFocused;
        }, delay)
    }

    function onSelect($item, $model, $label) {
        invoiceFactory.setBuyer(ctrl.invoice, $item);
        ctrl.query = '';
    }

    function showBuyerUpdateModal() {
        fisModal.buyerUpdateModal(ctrl.invoice.komitent_id).then(function(result) {
            if (result.isConfirmed) {
                invoiceFactory.setBuyer(ctrl.invoice, result.komitent);
                ngModel.$setViewValue(ctrl.invoice.komitent_id);
            }
        });
    }

    function showCreateBuyerModal() {
        let modalInstance = fisModal.buyerCreateModal();

        modalInstance.result.then(function(result) {
            if (result.isConfirmed) {
                api.komitent.listaj().then(function(data) {
                    invoiceFactory.setBuyer(ctrl.invoice, result.komitent);
                    ngModel.$setViewValue(ctrl.invoice.komitent_id);
                });
            }
        });
    }

    function removeBuyer() {
        invoiceFactory.setBuyer(ctrl.invoice, null);
    }
}
angular
    .module('app')
    .controller('InvoiceItemEditModalController', InvoiceItemEditModalController);

InvoiceItemEditModalController.$inject = ['$uibModalInstance', 'initialData', 'invoiceFactory'];

function InvoiceItemEditModalController($uibModalInstance, initialData, invoiceFactory) {
    const ctrl = this;

    ctrl.invoice = angular.copy(initialData.invoice);
    ctrl.item = ctrl.invoice.stavke[initialData.itemIndex];
    ctrl.invoiceFactory = invoiceFactory;

    ctrl.confirm = confirm;
    ctrl.deleteItem = deleteItem;

    function deleteItem() {
        initialData.invoice.stavke.splice(initialData.itemIndex, 1);
        invoiceFactory.recalculateTotals(initialData.invoice);
        invoiceFactory.recalculateTaxGroups(initialData.invoice);

        $uibModalInstance.close({
            isConfirmed: true,
            action: 'delete'
        });
    }

    function confirm() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            return;
        }

        initialData.invoice.stavke[initialData.itemIndex] = ctrl.item;
        invoiceFactory.recalculateItem(initialData.invoice, initialData.invoice.stavke[initialData.itemIndex]);

        $uibModalInstance.close({
            isConfirmed: true,
            action: 'save',
            item: initialData.invoice.stavke[initialData.itemIndex]
        });
    }
}
angular
    .module('app')
    .controller('InvoiceItemTemplatePickerModalController', InvoiceItemTemplatePickerModalController);

InvoiceItemTemplatePickerModalController.$inject = [
    '$uibModalInstance', '$timeout', 'api', 'fisConfig', 'breakpointsService'];

function InvoiceItemTemplatePickerModalController(
    $uibModalInstance, $timeout, api, fisConfig, breakpointsService) {
    let ctrl = this;

    ctrl.query = '';
    ctrl.isLoading = false;
    ctrl.pageNumber = 1;
    ctrl.total_items = 0;
    ctrl.invoiceItemTemplates = [];
    ctrl.isLoadMoreVisible = false;
    ctrl.selected = null;

    ctrl.loadPage = loadPage;
    ctrl.search = search;
    ctrl.searchOnInputEnter = searchOnInputEnter;
    ctrl.toggle = toggle;
    ctrl.confirm = confirm;

    // -----------------------------------------------------------------------------------------------------------------

    loadPage(1);

    // -----------------------------------------------------------------------------------------------------------------

    function loadPage(pageNumber) {
        let searchParameters = {
            pojam_za_pretragu: ctrl.query,
            broj_stranice: pageNumber,
            broj_stavki_po_stranici: 50
        }

        ctrl.isLoading = true;
        ctrl.isLoadMoreVisible = false;

        return api.magacin.poId.zalihe.listaj(fisConfig.user.magacin_id, searchParameters).then(function (data) {
            ctrl.invoiceItemTemplates = ctrl.invoiceItemTemplates.concat(data.stavke);
            ctrl.total_items = data.ukupan_broj_stavki;
            ctrl.isLoadMoreVisible = ctrl.invoiceItemTemplates.length < ctrl.total_items;
        }).finally(function () {
            ctrl.isLoading = false;
        });
    }

    function search() {
        ctrl.invoiceItemTemplates = [];
        loadPage(1);
    }

    function searchOnInputEnter($event) {
        if ($event.keyCode === 13) {
            ctrl.search()

            if (breakpointsService.ls(breakpointsService.keys.md)) {
                $event.target.blur();
            }
        }
    }

    function toggle(invoiceItemTemplate) {
        if (ctrl.selected === invoiceItemTemplate.id) {
            ctrl.selected = null
        } else {
            ctrl.selected = invoiceItemTemplate;
        }
    }

    function confirm() {
        $uibModalInstance.close({isConfirmed: true, invoiceItemTemplate: ctrl.selected})
    }
}
angular
    .module('app')
    .controller('InvoicePriceStructureModalController', InvoicePriceStructureModalController);

InvoicePriceStructureModalController.$inject = ['$uibModalInstance', 'initialData'];

function InvoicePriceStructureModalController($uibModalInstance, initialData) {
    let ctrl = this;
    ctrl.invoice = initialData.invoice;
}
angular
    .module('app')
    .controller('InvoiceScheduleModalController', InvoiceScheduleModalController);

InvoiceScheduleModalController.$inject = ['$uibModalInstance', 'initialData', 'api'];

function InvoiceScheduleModalController($uibModalInstance, initialData, api) {
    let ctrl = this;

    if (initialData.invoiceSchedule === undefined || initialData.invoiceSchedule === null) {
        let currentTime = new Date();

        let startDate = angular.copy(currentTime);
        startDate.setDate(startDate.getDate() + 1);
        startDate.setHours(startDate.getHours(), 0, 0, 0);

        let endDate = angular.copy(startDate);
        endDate.setMonth(endDate.getMonth() + 1)

        ctrl.end_datetime = endDate;
        ctrl.endDatetimeMode = 1;

        ctrl.invoice_schedule = {
            start_datetime: startDate,
            frequency_interval: 1
        }
    } else {
        ctrl.invoice_schedule = angular.copy(initialData.invoiceSchedule);
        ctrl.invoice_schedule.start_datetime = moment(ctrl.invoice_schedule.start_datetime).toDate()

        if (ctrl.invoice_schedule.end_datetime === undefined || ctrl.invoice_schedule.end_datetime === null) {
            ctrl.endDatetimeMode = 1;
        } else {
            ctrl.end_datetime = moment(ctrl.invoice_schedule.end_datetime).toDate();
            ctrl.invoice_schedule.end_datetime = moment(ctrl.invoice_schedule.end_datetime).toDate();
            ctrl.endDatetimeMode = 2;
        }
    }

    ctrl.cancel = cancel;
    ctrl.setEndDatetimeMode= setEndDatetimeMode;
    ctrl.confirm = confirm;

    function cancel() {
        $uibModalInstance.dismiss('cancel');
    }

    function setEndDatetimeMode(value) {
        if (ctrl.endDatetimeMode === value) {
            return;
        }

        ctrl.endDatetimeMode = value;
        if (ctrl.endDatetimeMode === 1) {
            ctrl.invoice_schedule.end_datetime = undefined;
        } else if (ctrl.endDatetimeMode === 2) {
            ctrl.invoice_schedule.end_datetime = undefined;
        } else {
            throw Error('Invalid end datetime mode');
        }
    }

    function confirm() {
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            return;
        }

        let data = angular.copy(ctrl.invoice_schedule);

        data.start_datetime = moment(data.start_datetime).format();
        if (data.end_datetime !== undefined && data.end_datetime !== null) {
            data.end_datetime = moment(data.end_datetime).format();
        }

        ctrl.isLoading = true;
        api.faktura.poId.invoice_schedule.add(ctrl.invoice_schedule.source_invoice_id, data).then(function(data) {
            $uibModalInstance.close({
                isConfirmed: true,
                invoice_schedule: data
            });
        }).finally(function() {
            ctrl.isLoading = false;
        });
    }
}
angular
    .module('app')
    .controller('KomitentIzmjenaModalController', KomitentIzmjenaModalController);

KomitentIzmjenaModalController.$inject = ['$uibModalInstance', 'api', 'fisConfig', 'komitent'];

function KomitentIzmjenaModalController($uibModalInstance, api, fisConfig, komitent) {
    const ctrl = this;

    ctrl.buyer = komitent;
    ctrl.drzave = angular.copy(fisConfig.countries);
    ctrl.tipoviIdentifikacioneOznake = angular.copy(fisConfig.identification_types);

    ctrl.sacuvaj = sacuvaj;

    function sacuvaj() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            return;
        }

        api.komitent.poId.izmijeni(ctrl.buyer.id, ctrl.buyer).then(function(data) {
            $uibModalInstance.close({
                isConfirmed: true,
                komitent: data.podaci,
                komitent_id: ctrl.buyer.id  // TODO: Should be removed
            });
        });
    }
}
angular
    .module('app')
    .controller('KomitentUnosModalController', KomitentUnosModalController);

KomitentUnosModalController.$inject = ['$uibModalInstance', 'api', 'fisConfig'];

function KomitentUnosModalController($uibModalInstance, api, fisConfig) {
    const ctrl = this;

    ctrl.buyer = {};
    ctrl.buyer.drzava = 39;

    ctrl.drzave = angular.copy(fisConfig.countries);
    ctrl.tipoviIdentifikacioneOznake = angular.copy(fisConfig.identification_types);

    ctrl.sacuvaj = sacuvaj;

    function sacuvaj() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            return;
        }

        api.komitent.dodaj(ctrl.buyer).then(function(data) {
            $uibModalInstance.close({
                isConfirmed: true,
                komitent: data,
                komitent_id: data.id  // TODO: Should be removed
            });
        });
    }
}
angular
    .module('app')
    .controller('NumericInputModalController', NumericInputModalController);

NumericInputModalController.$inject = ['$uibModalInstance', 'initialData'];

function NumericInputModalController($uibModalInstance, initialData) {
    let ctrl = this;
    ctrl.value = initialData.value ? initialData.value : 0;

    ctrl.confirm = confirm;
    ctrl.onEnter = onEnter;

    function onEnter($event) {
        if ($event.keyCode === 13) {
            ctrl.confirm();
        }
    }

    function confirm() {
        $uibModalInstance.close({
            isConfirmed: true, value: ctrl.value
        });
    }
}
angular
    .module('app')
    .controller('PaymentMethodSelectModal', PaymentMethodSelectModal);

PaymentMethodSelectModal.$inject = [
    '$uibModalInstance', '$compile', '$templateRequest', 'fisConfig', 'initialData', 'fisModal'];

function PaymentMethodSelectModal(
    $uibModalInstance, $compile, $templateRequest, fisConfig, initialData, fisModal) {
    let ctrl = this;

    ctrl.searchEnabled = initialData.searchEnabled !== undefined ? initialData.searchEnabled : true;
    ctrl.title = initialData.title;
    ctrl.isLoading = false;
    ctrl.isMultiselect = initialData.isMultiselect || false;
    ctrl.selectedItems = initialData.selectedItems || [];
    ctrl.query = initialData.query || '';
    ctrl.templateUrl = initialData.templateUrl;

    ctrl.items = [];
    ctrl.pageNumber = 0;
    ctrl.totalItems = 0;
    ctrl.hasMoreItems = false;

    ctrl.tab = initialData.tab || null;
    ctrl.tabs = initialData.tabs || [];

    ctrl.toggle = toggle;
    ctrl.confirm = confirm;
    ctrl.search = search;
    ctrl.onTabChange = onTabChange;
    ctrl.searchOnInputEnter = searchOnInputEnter;
    ctrl.loadMoreItems = loadMoreItems;
    ctrl.compare = initialData.compare || function (a, b) { return a.id === b.id};

    // -----------------------------------------------------------------------------------------------------------------

    search();

    function getItems() {
        ctrl.isLoading = true;
        ctrl.hasMoreItems = false;
        ctrl.pageNumber += 1;
        return initialData.getItems(ctrl.query, ctrl.pageNumber, ctrl.tab).then(function(result) {
            ctrl.items = ctrl.items.concat(result.items);
            ctrl.totalItems = result.totalItems;
            ctrl.hasMoreItems = ctrl.items.length < ctrl.totalItems;
            update_selection(ctrl.items, ctrl.selectedItems, ctrl.compare);
        }).finally(function() {
            ctrl.isLoading = false;
        });
    }

    function search() {
        ctrl.items = [];
        ctrl.pageNumber = 0;
        getItems();
    }

    function onTabChange() {
        // ctrl.selectedItems.forEach(function(x) {
        //     x.is_selected = false;
        // });
        // ctrl.selectedItems = [];
        ctrl.search();
    }

    function searchOnInputEnter($event) {
        if ($event.keyCode === 13) {
            ctrl.search()

            if (breakpointsService.ls(breakpointsService.keys.md)) {
                $event.target.blur();
            }
        }
    }

    function loadMoreItems($event) {
        let modalWindow = angular.element($event.currentTarget).parents('.modal')[0];
        $(modalWindow).animate({ scrollTop: modalWindow.scrollHeight });
        getItems();
    }

    function update_selection(items, selected, compareFn) {
        for (let ii = 0; ii < items.length; ii++) {
            let item = items[ii];

            let selected_item = selected.find(function(x) {
                return compareFn(x, item);
            });

            item.is_selected = selected_item !== undefined;
        }
    }

    function toggle(payment_method_type) {
        _toggle(ctrl.selectedItems, payment_method_type, ctrl.isMultiselect, ctrl.compare);
    }

    function _toggle(selected_items, item, isMultiselect, compareFn) {
        let index = selected_items.findIndex(function(selectedItem) {
            return compareFn(selectedItem, item);
        });

        if (isMultiselect) {
            if (index >= 0) {
                item.is_selected = false;
                selected_items.splice(index, 1);
            } else {
                item.is_selected = true;
                selected_items.push(item);
            }
        } else {
            if (index >= 0) {
                item.is_selected = false;
                selected_items.splice(0, 1);
            } else {
                if (selected_items.length > 0) {
                    selected_items[0].is_selected = false;
                    selected_items.splice(0, 1);
                }
                item.is_selected = true;
                selected_items.push(item);
            }
        }
    }

    function confirm() {
        if (ctrl.selectedItems.length === 0) {
            fisModal.confirm({
                headerText: 'Greška',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: initialData.isMultiselect
                    ? 'Morate odabrati makar jednu stavku.'
                    : 'Morate odabrati stavku.'
            });
            return;
        }

        ctrl.selectedItems.sort(function(a, b) {
            return a.id - b.id;
        });

        ctrl.selectedItems.forEach(function(x) {
            delete x.is_selected;
        });

        $uibModalInstance.close({
            isConfirmed: true,
            items: ctrl.selectedItems
        });
    }
}

angular
    .module('app')
    .controller('PrijemnicaStavkaModalController', PrijemnicaStavkaModalController);

PrijemnicaStavkaModalController.$inject = ['$uibModalInstance', 'item'];

function PrijemnicaStavkaModalController($uibModalInstance, item) {
    const ctrl = this;

    ctrl.item = item;

    ctrl.select = function (action, item) {
        $uibModalInstance.close({
            action: action,
            item: item
        });
    }

    ctrl.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}

angular
    .module('app')
    .controller('CertificateUploadModalController', CertificateUploadModalController);

CertificateUploadModalController.$inject = ['$rootScope', '$uibModalInstance', 'fisCustomerApi'];

function CertificateUploadModalController($rootScope, $uibModalInstance, fisCustomerApi) {
    const ctrl = this;

    ctrl.confirm = confirm;
    ctrl.handleFileUpload = handleFileUpload;

    ctrl.file = null;
    ctrl.password = '';
    ctrl.error = null;

    function confirm() {
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            return;
        }

        fisCustomerApi.certificateUploadModalSubmit(ctrl.file, ctrl.password).then(function(response) {
            if (response.error) {
                ctrl.error = response.error;
            } else {
                $rootScope.setCertificateExpirationDate(response.certificate_expiration_date);

                $uibModalInstance.close({
                    isConfirmed: true
                });
            }
        });
    }

    function handleFileUpload(file) {
        ctrl.file = file;
        ctrl.filename = ctrl.file.name;
    }
}
angular
    .module('app')
    .controller('ArtikalIzmjenaController', ArtikalIzmjenaController);

ArtikalIzmjenaController.$inject = [
    '$state', '$stateParams', 'api', 'fisModal', 'fisGui', 'fisConfig', 'initialData', 'invoiceFactory'];

function ArtikalIzmjenaController(
    $state, $stateParams, api, fisModal, fisGui, fisConfig, initialData, invoiceFactory
) {
    const ctrl = this;

    ctrl.invoiceFactory = invoiceFactory;

    ctrl.grupeArtikala = initialData.grupe_artikala;
    ctrl.jediniceMjere = angular.copy(fisConfig.units);
    ctrl.poreskeStope = angular.copy(fisConfig.poreske_stope);
    ctrl.tax_exemption_reasons = angular.copy(fisConfig.tax_exemption_reasons);

    ctrl.data = {};
    ctrl.data.artikal = initialData.artikal;
    ctrl.data.magacin_zaliha = initialData.magacin_zaliha;

    ctrl.upis = upis;

    function upis() {
        ctrl.forma.$setSubmitted();

        if (ctrl.forma.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        fisGui.wrapInLoader(function() {
            return api.artikal.izmijeni($stateParams.id, ctrl.data).then(function(data) {
                return data;
            });
        }).then(function() {
            return fisModal.confirm({
                headerText: 'Upis podataka',
                bodyText: 'Artikal je sačuvan'
            }).then(function() {
                return $state.go('artikal-pregled-lista', {
                    broj_stavki_po_stranici: 10,
                    broj_stranice: 1
                });
            });
        });
    }
}
angular
    .module('app')
    .controller('ArtikalPregledListalController', ArtikalPregledListalController);

ArtikalPregledListalController.$inject = ['$state', '$stateParams', 'strana', 'fisGui', 'fisModal', 'api']

function ArtikalPregledListalController($state, $stateParams, strana, fisGui, fisModal, api) {
    const ctrl = this;

    ctrl.pojam_za_pretragu = $stateParams.pojam_za_pretragu;
    ctrl.strana = strana;
    ctrl.broj_stranice = strana.broj_stranice;
    ctrl.pretrazi = pretrazi;
    ctrl.promijeniStranicu = promijeniStranicu;
    ctrl.deleteInvoiceItemTemplate = deleteInvoiceItemTemplate;

    function pretrazi() {
        $state.go('artikal-pregled-lista', {
            pojam_za_pretragu: ctrl.pojam_za_pretragu,
            broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
            broj_stranice: 1
        });
    }

    function promijeniStranicu() {
        return $state.go('artikal-pregled-lista', {
            pojam_za_pretragu: $stateParams.pojam_za_pretragu,
            broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
            broj_stranice: ctrl.broj_stranice
        });
    }

    function deleteInvoiceItemTemplate(invoiceItemTemplateId) {
        fisGui.wrapInLoader(function() {
            return api.artikal__poId__obrisi(invoiceItemTemplateId).then(function(data) {
                return data;
            });
        }).then(function(data) {
            if (data.is_success) {
                return fisModal.confirm({
                    headerText: 'Uspjeh',
                    bodyText: 'Artikal je obrisan.'
                }).then(function() {
                    return $state.reload();
                });
            } else {
                return fisModal.confirm({
                    headerText: 'Greška',
                    headerIcon: 'fa fa-exclamation-triangle text-danger',
                    bodyText: 'Artikal nije obrisan.'
                }).then(function() {
                    return ctrl.promijeniStranicu();
                });
            }
        });
    }
}
angular
    .module('app')
    .controller('ArtikalUnosController', ArtikalUnosController);

ArtikalUnosController.$inject = ['$state', 'api', 'fisConfig', 'initialData', 'invoiceFactory', 'fisModal'];

function ArtikalUnosController($state, api, fisConfig, initialData, invoiceFactory, fisModal) {
    const ctrl = this;

    ctrl.invoiceFactory = invoiceFactory;
    ctrl.grupeArtikala = initialData.grupe_artikala;
    ctrl.jediniceMjere = angular.copy(fisConfig.units);
    ctrl.poreskeStope = angular.copy(fisConfig.poreske_stope);
    ctrl.defaultJedinicaMjere = angular.copy(fisConfig.defaultUnit);
    ctrl.tax_exemption_reasons = angular.copy(fisConfig.tax_exemption_reasons);

    if (ctrl.grupeArtikala.length > 0) {
        ctrl.defaultGrupaArtikala = ctrl.grupeArtikala.find((x) => { return x.ui_default; });
    }

    ctrl.data = {};

    ctrl.data.magacin_zaliha = {
        izvor_kalkulacije: IZVOR_KALKULACIJE_UPB,
        jedinicna_cijena_osnovna: 0,
        jedinicna_cijena_puna: 0,
        raspoloziva_kolicina: 0,
        porez_procenat: 21
    }

    ctrl.data.artikal = {
        sifra: undefined,
        barkod: undefined,
        naziv: undefined,
        opis: undefined,
        jedinica_mjere_id: ctrl.defaultJedinicaMjere ? ctrl.defaultJedinicaMjere.id : undefined,
        jedinicna_mjere: ctrl.defaultJedinicaMjere,
        grupa_artikala_id: ctrl.defaultGrupaArtikala ? ctrl.defaultGrupaArtikala.id : undefined
    }

    ctrl.upis = upis;

    function upis() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo',
                headerIcon: 'fa fa-exclamation-triangle text-danger'
            });
            return;
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis podataka',
            bodyText: 'Da li ste sigurni da želite da dodate artikal?',
            confirmButtonText: 'Da, dodaj',
            cancelButtonText: 'Odustani'
        }).then(function (result) {
            if (result.isConfirmed) {
                api.artikal.dodaj(ctrl.data).then(function () {
                    fisModal.confirm({
                        headerText: 'Upis podataka',
                        bodyText: 'Novi artikal je upisan.'
                    }).then(function () {
                        $state.go('artikal-pregled-lista', {
                            broj_stavki_po_stranici: 10,
                            broj_stranice: 1
                        });
                    });
                });
            }
        });
    }
}
angular
    .module('app')
    .controller('CreditNoteCreateController', CreditNoteCreateController);

CreditNoteCreateController.$inject = [
    '$rootScope', '$q', '$state', '$uibModal', 'api', 'viewData', 'fisModal', 'fisGui', 'stampac', 'creditNoteFactory',
    'fisCustomerApi'
];

function CreditNoteCreateController(
    $rootScope, $q, $state, $uibModal, api, viewData, fisModal, fisGui, stampac, creditNoteFactory,
    fisCustomerApi
) {
    let ctrl = this;

    ctrl.invoiceSelectMode = false;
    ctrl.isLoadingInvoices = false;
    ctrl.stranica = null;
    ctrl.buyer = undefined;
    ctrl.creditNote = creditNoteFactory.create();
    ctrl.iic_ref = {
        iic: '',
        issue_datetime: '',
        amount_21: 0,
        amount_7: 0,
        amount_0: 0,
        amount_exempt: 0
    };

    ctrl.onBuyerTypeaheadSelect = onBuyerTypeaheadSelect;
    ctrl.removeBuyer = removeBuyer;
    ctrl.showBuyerUpdateModal = showBuyerUpdateModal;
    ctrl.onInvoicePageChange = onInvoicePageChange;
    ctrl.onSubmitButton = onSubmitButton;
    ctrl.findRemaningTurnover = findRemaningTurnover;
    ctrl.showReturnItemModal = showReturnItemModal;
    ctrl.showDiscountItemModal = showDiscountItemModal;
    ctrl.onInvoiceSelect = onInvoiceSelect;
    ctrl.addExternalInvoices = addExternalInvoices;

    ctrl.poreskeStope = angular.copy(viewData.poreske_stope);

    function onBuyerTypeaheadSelect($model) {
        ctrl.creditNote = creditNoteFactory.create();
        ctrl.buyer = $model;
        ctrl.creditNote.komitent_id = $model.id;

        ctrl.filters = {
            ordinal_id: undefined,
            broj_stavki_po_stranici: 10,
            broj_stranice: 1,
            total_price_gte: undefined,
            total_price_lte: undefined,
            fiscalization_date_gte: undefined,
            fiscalization_date_lte: undefined,
            payment_type_id: undefined,
            client_id: [$model.id],
            not_payment_type_id: [6],
            invoice_type_ids: [1]
        }

        ctrl.isLoadingInvoices = true;

            return fisCustomerApi.views__credit_note_create__on_buyer_typeahead_select(ctrl.filters).then(function(data) {
            ctrl.isLoadingInvoices = false;
            ctrl.stranica = data.stranica;
        });
    }

    function removeBuyer() {
        ctrl.buyer = undefined;
        ctrl.creditNote = creditNoteFactory.create();
    }

    function showBuyerUpdateModal() {
        fisModal.buyerUpdateModal(ctrl.buyer.id).then(function(result) {
            if (result.isConfirmed) {
                ctrl.creditNote.komitent = ctrl.komitent;
                ctrl.creditNote.komitent_id = ctrl.komitent.id;
            }
        });
    }

    function onInvoicePageChange() {
        ctrl.isLoadingInvoices = true;
        return fisCustomerApi.views__credit_note_create__on_invoice_page_change(ctrl.filters).then(function(data) {
            ctrl.stranica = data.stranica;
            ctrl.isLoadingInvoices = false;
        });
    }

    function validateTurnover() {
        return;
        ctrl.mainForm.$setValidity('turnover', true);
        ctrl.mainForm.$setValidity('noInvoices', true);

        if (ctrl.creditNote.fakture_credit_note_turnover_remaining === 0) {
            ctrl.mainForm.$setValidity('noInvoices', false);
            ctrl.mainForm.$setValidity('turnover', false);
            return;
        }

        if (ctrl.creditNote.return_amount_with_tax > 0 &&
            ctrl.creditNote.fakture_credit_note_turnover_remaining < ctrl.creditNote.return_amount_with_tax) {
            ctrl.mainForm.$setValidity('notEnoughTurnover', false);
            ctrl.mainForm.$setValidity('turnover', false);
        } else {
            ctrl.mainForm.$setValidity('notEnoughTurnover', true);
        }

        if (ctrl.creditNote.return_and_discount_amount_with_tax_21 > 0 &&
            ctrl.creditNote.fakture_credit_note_turnover_remaining_21 < ctrl.creditNote.return_and_discount_amount_with_tax_21) {
            ctrl.mainForm.$setValidity('notEnoughTurnover21', false);
            ctrl.mainForm.$setValidity('turnover', false);
        } else {
            ctrl.mainForm.$setValidity('notEnoughTurnover21', true);
        }

        if (ctrl.creditNote.return_and_discount_amount_with_tax_7 > 0 &&
            ctrl.creditNote.fakture_credit_note_turnover_remaining_7 < ctrl.creditNote.return_and_discount_amount_with_tax_7) {
            ctrl.mainForm.$setValidity('notEnoughTurnover7', false);
            ctrl.mainForm.$setValidity('turnover', false);
        } else {
            ctrl.mainForm.$setValidity('notEnoughTurnover7', true);
        }

        if (ctrl.creditNote.return_and_discount_amount_with_tax_0 > 0 &&
            ctrl.creditNote.fakture_credit_note_turnover_remaining_0 < ctrl.creditNote.return_and_discount_amount_with_tax_0) {
            ctrl.mainForm.$setValidity('notEnoughTurnover0', false);
            ctrl.mainForm.$setValidity('turnover', false);
        } else {
            ctrl.mainForm.$setValidity('notEnoughTurnover0', true);
        }
    }

    function validateItems() {
        if (ctrl.creditNote.return_and_discount_amount === 0) {
            ctrl.mainForm.$setValidity('noReturnAndDiscount', false);
        } else {
            ctrl.mainForm.$setValidity('noReturnAndDiscount', true);
        }
    }

    function onSubmitButton() {
        ctrl.mainForm.$setSubmitted();
        if (ctrl.creditNote.iic_refs.length === 0) {
            ctrl.mainForm.$setValidity('noInvoices', false);
        } else {
            ctrl.mainForm.$setValidity('noInvoices', true);
        }
        validateTurnover();
        validateItems();
        if (ctrl.mainForm.$invalid) {
            return;
        }

        fisGui.wrapInLoader(function () {
            let payload = creditNoteFactory.getPayload(ctrl.creditNote);

            return fisCustomerApi.views__credit_note_create__on_fiscalize(payload).then(function(data) {
                return data;
            });
        }).then(function(data) {
            if (data.is_success) {
                return stampac.stampajKnjiznoOdobrenje(data.credit_note.id).then(function() {
                    return $state.transitionTo($state.current, {}, {
                        reload: true, inherit: false
                    });
                });
            } else {
                return fisModal.confirm({
                    headerText: 'Greška',
                    headerIcon: 'fa fa-exclamation-triangle text-danger',
                    bodyText: 'Knjižno odobrenje nije fiskalizovano. '
                });
            }
        })
    }

    function findRemaningTurnover(taxRate, invoice) {
        for (let ii = 0; ii < invoice.grupe_poreza.length; ii++) {
            let grupaPoreza = invoice.grupe_poreza[ii];
            if (grupaPoreza.porez_procenat === taxRate) {
                return grupaPoreza.credit_note_turnover_remaining;
            }
        }
    }

    function showReturnItemModal(item, $index) {
        let payload = {};
        payload.item = null;
        payload.options = {};
        payload.options.type = 'return';

        if (item) {
            payload.item = {};
            payload.item.description =  item.description;
            payload.item.taxRate =  item.tax_rate;
            payload.item.amount =  item.return_amount_with_tax;
        }

        fisModal.creditNoteItemModal(payload).result.then(function(data) {
            if (data.action === 'cancel') {
                return;
            }

            if (data.action === 'delete') {
                creditNoteFactory.removeReturnItem(ctrl.creditNote, $index);
            }

            if (data.action === 'save') {
                if (!item) {
                    item = creditNoteFactory.addReturnItem(ctrl.creditNote);
                }
                let newItem = creditNoteFactory.getReturnItemFromAmountWithTax(data.item.description, data.item.taxRate, data.item.amount);
                angular.extend(item, newItem)
                creditNoteFactory.recalculateTaxGroupTotals(ctrl.creditNote);
                creditNoteFactory.recalculateTotals(ctrl.creditNote);
                validateItems();
            }
        });
    }

    function showDiscountItemModal(item, $index) {
        let payload = {};
        payload.item = null;
        payload.options = {};
        payload.options.type = 'discount';

        if (item) {
            payload.item = {};
            payload.item.description = item.description;
            payload.item.taxRate = item.tax_rate;
            payload.item.amount = item.discount_amount_with_tax;
        }

        fisModal.creditNoteItemModal(payload).result.then(function(data) {
            if (data.action === 'cancel') {
                return;
            }

            if (data.action === 'delete') {
                creditNoteFactory.removeDiscountItem(ctrl.creditNote, $index);
            }

            if (data.action === 'save') {
                if (!item) {
                    item = creditNoteFactory.addDiscountItem(ctrl.creditNote);
                }
                let newItem = creditNoteFactory.getDiscountItemFromAmountWithTax(data.item.description, data.item.taxRate, data.item.amount);
                angular.extend(item, newItem);
                creditNoteFactory.recalculateTaxGroupTotals(ctrl.creditNote);
                creditNoteFactory.recalculateTotals(ctrl.creditNote);
                validateItems();
            }
        });
    }

    function onInvoiceSelect(action, invoice, event) {
        if (action === 'add') {
            return fisModal.creditNoteTurnoverUsedModal({ invoice: invoice }).then(function(result) {
                if (result.action === 'cancel') {
                    event.shouldSelect = false;
                }

                if (result.action === 'confirmed') {
                    ctrl.creditNote.iic_refs.push({
                        iic: invoice.iic,
                        invoice_id: invoice.id,
                        verification_url: invoice.efi_verify_url,
                        issue_datetime: invoice.datumfakture,
                        amount_21: result.data.amount_21,
                        amount_7: result.data.amount_7,
                        amount_0: result.data.amount_0,
                        amount_exempt: result.data.amount_exempt,
                        total_21: result.data.total_21,
                        total_7: result.data.total_7,
                        total_0: result.data.total_0,
                        total_exempt: result.data.total_exempt
                    });

                    creditNoteFactory.recalculateTaxGroupLimits(ctrl.creditNote);
                    validateTurnover();
                    ctrl.invoiceSelectMode = false;
                }
            });
        } else {
            let defer = $q.defer();
            defer.promise.then(function() {
                let index = ctrl.creditNote.iic_refs.indexOf(x => {
                    if (x.id === invoice.id) {
                        return x;
                    }
                });
                ctrl.creditNote.iic_refs.splice(index, 1);
            })
            defer.resolve();
            return defer.promise;
        }
    }

    function addExternalInvoices() {
        return fisModal.creditNoteExternalInvoice().then(function(result) {
            ctrl.creditNote.iic_refs.push({
                iic: result.data.iic,
                invoice_id: null,
                verification_url: result.data.verification_url,
                issue_datetime: result.data.issue_datetime,
                amount_21: result.data.amount_21,
                amount_7: result.data.amount_7,
                amount_0: result.data.amount_0,
                amount_exempt: result.data.amount_exempt,
                total_21: result.data.total_21,
                total_7: result.data.total_7,
                total_0: result.data.total_0,
                total_exempt: result.data.total_exempt
            });

            creditNoteFactory.recalculateTaxGroupLimits(ctrl.creditNote);
        });
    }
}

angular
    .module('app')
    .controller('CreditNoteViewController', CreditNoteViewController);

CreditNoteViewController.$inject = ['$state', 'stampac', 'viewData'];

function CreditNoteViewController($state, stampac, viewData) {
    let ctrl = this;

    ctrl.stranica = viewData.stranica;
    ctrl.odabranaStranica = viewData.stranica.broj_stranice;

    ctrl.stampac = stampac;

    ctrl.onPageChange = onPageChange;

    function onPageChange() {
        $state.go('credit_note_view', {
            broj_stranice: ctrl.odabranaStranica,
            broj_stavki_po_stranici: ctrl.stranica.broj_stavki_po_stranici
        }, {inherit: false, reload: true});
    }
}
angular
    .module('app')
    .controller('DepozitController', depozitController);

depozitController.$inject = ['$stateParams', '$timeout', 'fisGui', 'fisModal', 'api', 'initialData'];

function depozitController($stateParams, $timeout, fisGui, fisModal, api, initialData) {
    let ctrl = this;

    if ($stateParams['#']) {
        $timeout(function () {
            $('#' + $stateParams['#']).focus();
        });
    }

    ctrl.stanje = initialData.stanje;

    if (ctrl.stanje.danasnji_depozit !== undefined && ctrl.stanje.danasnji_depozit !== null) {
        ctrl.depositInitialAmount = ctrl.stanje.danasnji_depozit.iznos;
    } else {
        ctrl.depositInitialAmount = 0;
    }
    ctrl.depositWithdrawalAmount = 0;
    ctrl.deposits = initialData.deposits;

    ctrl.postaviDepozit = postaviDepozit;
    ctrl.podigniDepozit = podigniDepozit;

    function postaviDepozit() {
        ctrl.formaPolog.$setSubmitted();
        if (ctrl.formaPolog.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return
        }

        fisGui.wrapInLoader(function() {
            return api.depozit.polozi({ iznos: ctrl.depositInitialAmount }).then(function (data) {
                return data;
            }).then(function(data) {
                ctrl.deposits = data.deposits;

                if ('greska' in data) {
                    return fisModal.confirm({
                        headerText: 'Greška',
                        headerIcon: 'fa fa-exclamation-triangle text-danger',
                        bodyText: data.greska
                    });
                }

                if (data.deposit.fiskalizacioni_kod === undefined || data.deposit.fiskalizacioni_kod === null) {
                    return fisModal.confirm({
                        headerText: 'Greška',
                        headerIcon: 'fa fa-exclamation-triangle text-danger',
                        bodyText: 'Depozit nije definisan.'
                    });
                }

                return api.stanje.listaj().then(function(dataStanje) {
                    ctrl.stanje = dataStanje;
                    ctrl.depositInitialAmount = data.deposit.iznos;
                    return fisModal.confirm({
                        headerText: 'Prijava depozita',
                        bodyText: 'Polaganje novca je fiskalizovano.'
                    });
                });
            });
        });
    }

    function podigniDepozit() {
        ctrl.formaPodizanje.$setSubmitted();
        if (ctrl.formaPodizanje.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return
        }

        fisModal.confirmOrCancel({
            headerText: 'Podizanje novca',
            bodyText: 'Da li ste sigurni da želite da podignete novac?',
            confirmButtonText: 'Da, podigni',
            cancelButtonText: 'Odustani'
        }).then(function (result) {
            fisGui.wrapInLoader(function() {
                if (result.isConfirmed) {
                    return api.depozit.podigni({ iznos: ctrl.depositWithdrawalAmount }).then(function (data) {
                        return {
                            isConfirmed: true,
                            data: data
                        };
                    });
                } else {
                    return {
                        isConfirmed: false
                    }
                }
            }).then(function(result) {
                if (!result.isConfirmed) {
                    return;
                }

                ctrl.depositWithdrawalAmount = 0;
                ctrl.deposits = result.data.deposits;

                if (result.data.deposit.fiskalizacioni_kod === undefined || result.data.deposit.fiskalizacioni_kod === null) {
                    return fisModal.confirm({
                        headerText: 'Greška',
                        headerIcon: 'fa fa-exclamation-triangle text-danger',
                        bodyText: 'Depozit nije definisan.'
                    });
                }

                return fisModal.confirm({
                    headerText: 'Prijava depozita',
                    bodyText: 'Podizanje novca je fiskalizovano.'
                });
            });
        });
    }
}
angular
    .module('app')
    .controller('DospjelaFakturaPregledController', DospjelaFakturaPregledController);

DospjelaFakturaPregledController.$inject = ['dospjele_fakture'];

function DospjelaFakturaPregledController(dospjele_fakture) {
    const ctrl = this;

    ctrl.dospjele_fakture = dospjele_fakture;
}
angular
    .module('app')
    .controller('FakturaKonacniRacunController', FakturaKonacniRacunController);

FakturaKonacniRacunController.$inject = [
    '$rootScope', '$scope', '$timeout', '$state', 'api', 'invoiceFactory', 'stampac', 'fisConfig', 'fisModal', 'fisGui',
    'initialData'
];

function FakturaKonacniRacunController(
    $rootScope, $scope, $timeout, $state, api, invoiceFactory, stampac, fisConfig, fisModal, fisGui,
    initialData
) {
    const ctrl = this;

    ctrl.tax_exemption_reasons = angular.copy(fisConfig.tax_exemption_reasons);
    ctrl.jediniceMjere = angular.copy(fisConfig.units);
    ctrl.poreskeStope = angular.copy(fisConfig.poreske_stope);
    ctrl.valute = angular.copy(fisConfig.valute);
    ctrl.invoiceFactory = invoiceFactory;
    ctrl.fisModal = fisModal;

    ctrl.payment_method_types = angular.copy(fisConfig.payment_method_types
        .filter((x) => x.id !== PAYMENT_METHOD_TYPE_ADVANCE ));
    ctrl.primary_payment_method = undefined;
    ctrl.advance_payment_method = undefined;

    ctrl.setPaymentMethod = setPaymentMethod;
    ctrl.onCurrencyChange = onCurrencyChange;
    ctrl.addInvoiceItem = addInvoiceItem;
    ctrl.deleteInvoiceItem = deleteInvoiceItem;
    ctrl.resetInvoiceItem = resetInvoiceItem;
    ctrl.onInvoiceItemQuantityChange = onInvoiceItemQuantityChange;

    ctrl.onBuyerSelect = onBuyerSelect;
    ctrl.showBuyerUpdateModal = showBuyerUpdateModal;

    ctrl.createInvoice = createInvoice;
    ctrl.onInvoiceItemTemplateSelect = onInvoiceItemTemplateSelect;
    ctrl.getStavkeLagera = getStavkeLagera;
    ctrl.naPromjenuTipaUnosa = naPromjenuTipaUnosa;
    ctrl.onFocusItemTemplateSearch = onFocusItemTemplateSearch;
    ctrl.onBlurItemTemplateSearch = onBlurItemTemplateSearch;

    ctrl.onItemUpdate = onItemUpdate;
    ctrl.onAdvanceInvoiceCorrection = onAdvanceInvoiceCorrection;

    init();

    //------------------------------------------------------------------------------------------------------------------

    function init() {
        ctrl.original_advance_invoice = angular.copy(initialData.advance_invoice);
        invoiceFactory.copyToCorrectedFields(ctrl.original_advance_invoice);

        ctrl.updated_advance_invoice = initialData.advance_invoice;
        invoiceFactory.copyToCorrectedFields(ctrl.updated_advance_invoice);

        ctrl.corrective_for_advance_invoice = invoiceFactory.createCorrectiveInvoice(ctrl.original_advance_invoice);
        invoiceFactory.getCorrectiveInvoiceFromDiff(
            ctrl.original_advance_invoice,
            ctrl.updated_advance_invoice,
            ctrl.corrective_for_advance_invoice);

        ctrl.racun = invoiceFactory.create();

        ctrl.racun.is_cash = false;

        ctrl.primary_payment_method = invoiceFactory.createPaymentMethod(PAYMENT_METHOD_TYPE_ACCOUNT);
        ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
        ctrl.racun.payment_methods.push(ctrl.primary_payment_method);

        ctrl.advance_payment_method = invoiceFactory.createPaymentMethod(PAYMENT_METHOD_TYPE_ADVANCE);
        ctrl.advance_payment_method.advance_invoice = ctrl.updated_advance_invoice;
        ctrl.advance_payment_method.advance_invoice_id = ctrl.updated_advance_invoice.id;
        ctrl.racun.payment_methods.push(ctrl.advance_payment_method);

        invoiceFactory.copyItemsFromAdvanceInvoice(initialData.advance_invoice, ctrl.racun);
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            ctrl.racun.stavke[ii].isDisabled = true;
        }

        updateInvoiceInputTypes();

        ctrl.racun.komitent = ctrl.updated_advance_invoice.komitent;
        ctrl.racun.komitent_id = ctrl.updated_advance_invoice.komitent_id;
    }

    function updateInvoiceInputTypes() {
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            if (ctrl.racun.stavke[ii].magacin_zaliha_id) {
                ctrl.racun.stavke[ii].tipUnosa = 'po_artiklu';
                ctrl.racun.stavke[ii].query = ctrl.racun.stavke[ii].magacin_zaliha.artikal.naziv;
            } else {
                ctrl.racun.stavke[ii].tipUnosa = 'slobodan_unos';
            }
        }
    }

    function onInvoiceItemTemplateSelect(index, $item, $model, $label) {
        invoiceFactory.updateItemFromItemTemplate(ctrl.racun, ctrl.racun.stavke[index], $item);
        ctrl.racun.stavke[index].query = ctrl.racun.stavke[index].magacin_zaliha.artikal.naziv;
    }

    function onFocusItemTemplateSearch(index) {
        let item = invoiceFactory.getInvoiceItem();
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
        ctrl.racun.stavke[index] = item;
    }

    function onBlurItemTemplateSearch(index) {
        if (
            ctrl.racun.stavke[index].magacin_zaliha === undefined
            || ctrl.racun.stavke[index].magacin_zaliha === null
        ) {
            let item = invoiceFactory.getInvoiceItem();
            item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
            ctrl.racun.stavke[index].query = '';
        }
    }

    function getStavkeLagera(pojam_za_pretragu) {
        return api.magacin.poId.zalihe.listaj(fisConfig.user.magacin_id, {
            pojam_za_pretragu: pojam_za_pretragu,
            broj_stranice: 1,
            broj_stavki_po_stranici: 50
        }).then(function (data) {
            return data.stavke;
        });
    }

    function naPromjenuTipaUnosa(index) {
        let item = invoiceFactory.getInvoiceItem()
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;

        ctrl.racun.stavke[index] = item;
        invoiceFactory.recalculateTotals(ctrl.racun);
        invoiceFactory.recalculateTaxGroups(ctrl.racun);
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function resetInvoiceItem(index) {
        ctrl.racun.stavke[index] = invoiceFactory.getInvoiceItem();
    }

    function onInvoiceItemQuantityChange(index) {
        let invoiceItem = ctrl.racun.stavke[index];
        ctrl.invoiceFactory.recalculateItem(ctrl.racun, invoiceItem);

        let advance_invoice_item_index = invoiceItem.advance_invoice_item_index;
        if (advance_invoice_item_index >= 0) {
            ctrl.updated_advance_invoice.stavke[advance_invoice_item_index].kolicina =
                (new Big(ctrl.original_advance_invoice.stavke[advance_invoice_item_index].kolicina))
                    .minus(invoiceItem.kolicina)
                    .toNumber();

            onAdvanceInvoiceCorrection(advance_invoice_item_index);
        }
    }

    function _validateBuyer() {
        if (
            ctrl.racun.komitent === null
            || ctrl.racun.komitent === undefined
        ) {
            if (ctrl.racun.is_cash) {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            } else {
                ctrl.form.komitent_id.$setValidity('required', false);
            }
        } else {
            if (!ctrl.racun.komitent.tip_identifikacione_oznake_id
                || !ctrl.racun.komitent.identifikaciona_oznaka
                || !ctrl.racun.komitent.adresa
                || !ctrl.racun.komitent.grad
                || !ctrl.racun.komitent.drzava) {
                ctrl.form.komitent_id.$setValidity('nepotpuno', false);
            } else {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            }
        }
    }

    function setPaymentMethod() {
        ctrl.primary_payment_method.payment_method_type = fisConfig.payment_method_types.find((x) => {
            return x.id === ctrl.primary_payment_method.payment_method_type_id
        });
        ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function onCurrencyChange() {
        ctrl.racun.valuta = ctrl.valute.find(function(x) {
            return x.id === ctrl.racun.valuta_id;
        });

        if (ctrl.racun.valuta_id === 50) {
            ctrl.racun.kurs_razmjene = 1;
        } else {
            ctrl.racun.kurs_razmjene = undefined;
        }
    }

    function addInvoiceItem() {
        let item = invoiceFactory.addBlankItem(ctrl.racun);
        item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;

        $timeout(function () {
            fisGui.scrollToSelector('#invoice-item-' + (ctrl.racun.stavke.length - 1), -56);
        });
    }

    function deleteInvoiceItem(index) {
        fisModal.confirmOrCancel({
            headerText: 'Brisanje stavke',
            bodyText: "Da li ste sigurni da želite da obrišete stavku?",
            confirmButtonText: 'Da, obriši',
            cancelButtonText: 'Odustani'
        }).then((result) => {
            if (result.isConfirmed) {
                return $timeout(function () {
                    ctrl.racun.stavke.splice(index, 1)

                    if (ctrl.racun.stavke.length === 0) {
                        addInvoiceItem();
                    }
                });
            }
        }).finally(function() {
            fisGui.scrollToSelector('#invoice-item-' + Math.max(0, index - 1), -120);
        });
    }

    function onBuyerSelect(model) {
        ctrl.racun.komitent_id = model.id;
        ctrl.racun.komitent = model;
        _validateBuyer();
    }

    function createInvoice(invoice) {
        _validateBuyer();
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.invalidForm().finally(function() {
                fisGui.scrollToNgInvalid(-56 - 20, 260);
            });
            return;
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis računa',
            bodyText: "Da li ste sigurni da želite da fiskalizujete račun?",
            confirmButtonText: 'Da, upiši',
            cancelButtonText: 'Odustani'
        }).then(function(result) {
            if (result.isConfirmed) {
                sendInvoiceData();
            }
        });

        function sendInvoiceData() {
            let podaci = angular.copy(ctrl.racun);
            podaci.datumvalute = moment(podaci.datumvalute).format();
            podaci.datum_prometa = moment(podaci.datum_prometa).format();
            podaci.poreski_period = moment(podaci.poreski_period).format();

            if ((new Big(podaci.payment_methods[0].amount)).eq(0)) {
                podaci.payment_methods.splice(0, 1);
            }

            fisGui.wrapInLoader(function() {
                return api.api__final_invoice__create(
                    podaci,
                    ctrl.updated_advance_invoice,
                    ctrl.corrective_for_advance_invoice
                ).then(function (data) {
                    return data;
                });
            }).then(function(data) {
                if (data.result.is_success) {
                    return stampac.stampajFakturu(
                        data.invoice.id,
                        fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                    ).then(function() {
                        let params = {};
                        params.advance_invoice_id = ctrl.updated_advance_invoice.id;

                        return $state.transitionTo($state.current, params, {
                            reload: true, inherit: false
                        });
                    });
                } else {
                    return fisModal.confirm({
                        headerIcon: 'fa fa-exclamation-circle text-danger',
                        headerText: 'Grеška',
                        bodyText: data.result.message
                    });
                }
            });
        }
    }

    function showBuyerUpdateModal() {
        fisModal.buyerUpdateModal(ctrl.racun.komitent_id).then(function(result) {
            if (result.isConfirmed) {
                ctrl.racun.komitent = result.komitent;
                ctrl.racun.komitent_id = result.komitent.id;
            }
        });
    }

    function onItemUpdate() {
        ctrl.advance_payment_method.amount = (new Big(ctrl.corrective_for_advance_invoice.ukupna_cijena_prodajna))
            .times(-1)
            .toNumber();
        ctrl.primary_payment_method.amount = Math.max(
            0,
            (new Big(ctrl.racun.ukupna_cijena_prodajna)).minus(ctrl.advance_payment_method.amount).toNumber()
        );

        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function onAdvanceInvoiceCorrection() {
        ctrl.corrective_for_advance_invoice = angular.extend(
            ctrl.corrective_for_advance_invoice,
            invoiceFactory.getCorrectiveInvoiceFromDiff(
                ctrl.original_advance_invoice,
                ctrl.updated_advance_invoice,
                ctrl.corrective_for_advance_invoice
            )
        )

        ctrl.onItemUpdate();
    }
}
angular
    .module('app')
    .controller('FakturaKorekcijaController', FakturaKorekcijaController);

FakturaKorekcijaController.$inject = [
    '$rootScope', '$scope', '$state', 'faktura', 'api', 'stampac', 'fisConfig', 'fisGui', 'invoiceFactory', 'fisModal'
];

function FakturaKorekcijaController(
    $rootScope, $scope, $state, faktura, api, stampac, fisConfig, fisGui, invoiceFactory, fisModal
) {
    let ctrl = this;

    ctrl.fisModal = fisModal;

    ctrl.corrective_invoice = null;

    ctrl.original_invoice = angular.copy(faktura);
    invoiceFactory.copyToCorrectedFields(ctrl.original_invoice);

    ctrl.updated_invoice = angular.copy(faktura);
    invoiceFactory.copyToCorrectedFields(ctrl.updated_invoice);

    ctrl.onInvoiceCorrection = onInvoiceCorrection;
    ctrl.onPriceDifferenceChange = onPriceDifferenceChange;
    ctrl.onPaymentMethodTypeaheadSelect = onPaymentMethodTypeaheadSelect;
    ctrl.koriguj = koriguj;

    // -----------------------------------------------------------------------------------------------------------------

    initialize();

    // -----------------------------------------------------------------------------------------------------------------
    function initialize() {
        ctrl.corrective_invoice = invoiceFactory.createCorrectiveInvoice(ctrl.original_invoice);
        invoiceFactory.getCorrectiveInvoiceFromDiff(ctrl.original_invoice, ctrl.updated_invoice, ctrl.corrective_invoice);
        ctrl.corrective_invoice.payment_methods = angular.copy(ctrl.updated_invoice.payment_methods);
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.corrective_invoice);
    }

    function onInvoiceCorrection() {
        ctrl.corrective_invoice = angular.extend(
            ctrl.corrective_invoice,
            invoiceFactory.getCorrectiveInvoiceFromDiff(ctrl.original_invoice, ctrl.updated_invoice, ctrl.corrective_invoice)
        );
    }

    function onPriceDifferenceChange(index) {
        let original = ctrl.original_invoice.stavke[index];
        let updated = ctrl.updated_invoice.stavke[index];
    }

    function onPaymentMethodTypeaheadSelect($item, $model, $label) {
        ctrl.corrective_invoice.payment_methods = invoiceFactory.mergePaymentMethods(ctrl.corrective_invoice.payment_methods, [invoiceFactory.createPaymentMethod($item.id)]);
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.corrective_invoice);
    }

    function koriguj() {
        let isUnchanged = true;

        for (let ii = 0; ii < ctrl.original_invoice.stavke.length; ii++) {
            let original = ctrl.original_invoice.stavke[ii];
            let updated = ctrl.updated_invoice.stavke[ii];

            if (
                !(new Big(original.kolicina)).eq(updated.kolicina)
                || !(new Big(original.jedinicna_cijena_osnovna)).eq(updated.jedinicna_cijena_osnovna)
                || !(new Big(original.jedinicna_cijena_puna)).eq(updated.jedinicna_cijena_puna)
                || !(new Big(original.tax_exemption_amount)).eq(updated.tax_exemption_amount)
            ) {
                isUnchanged = false;
                break;
            }
        }

        if (ctrl.corrective_invoice.payment_methods_total_difference !== 0) {
            fisModal.confirm({
                headerText: 'Greška',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Upisani podaci nisu ispravni. Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        if (isUnchanged) {
            fisModal.confirm({
                headerText: 'Greška',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Nije izmijenjena nijedna stavka fakture. Napravite promjenu pa pokušajte ponovo.'
            });
            return;
        }

        fisGui.wrapInLoader(function() {
            return api.api__faktura__po_id__koriguj(ctrl.original_invoice.id, ctrl.updated_invoice, ctrl.corrective_invoice).then(function(data) {
                return data;
            });
        }).then(function(data) {
            if (data.is_success) {
                return stampac.stampajFakturu(data.corrective_invoice.id, fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe).then(function() {
                    return $state.go('faktura_pregled_redovnih', {
                        broj_stavki_po_stranici: 10,
                        broj_stranice: 1
                    });
                });
            } else {
                return fisModal.confirm({
                    headerText: 'Greška',
                    headerIcon: 'fa fa-exclamation-triangle text-danger',
                    bodyText: data.message
                });
            }
        });
    }
}
angular
    .module('app')
    .controller('FakturaPosUnosController', FakturaPosUnosController);

FakturaPosUnosController.$inject = [
    '$rootScope', '$scope', '$state', '$timeout', '$uibModal', 'api', 'stampac', 'invoiceFactory', 'fisModal',
    'fisConfig', 'fisGui'
];

function FakturaPosUnosController(
    $rootScope, $scope, $state, $timeout, $uibModal, api, stampac, invoiceFactory, fisModal,
    fisConfig, fisGui
) {
    const ctrl = this;

    ctrl.fisModal = fisModal;

    ctrl.racun = invoiceFactory.create();

    ctrl.typeaheadDesktopState = {};
    ctrl.typeaheadMobileState = {};

    $timeout(function () {
        $('.invoice-item-input input').focus();
    });

    ctrl.updateTypeaheadMobileState = function(data) {
        ctrl.typeaheadMobileState = angular.extend(ctrl.typeaheadMobileState, data);
    }
    ctrl.updateTypeaheadDesktopState = function(data) {
        ctrl.typeaheadDesktopState = angular.extend(ctrl.typeaheadDesktopState, data);
    }
    ctrl.addInvoiceItem = addInvoiceItem;
    ctrl.editInvoiceItem = editInvoiceItem;
    ctrl.upis = upis;

    function addInvoiceItem($data, $eventType) {
        let index = null;
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            if (ctrl.racun.stavke[ii].magacin_zaliha.artikal_id === $data.magacin_zaliha.artikal.id) {
                index = ii;
            }
        }

        if (index === null) {
            let item = invoiceFactory.addItemFromItemTemplate(ctrl.racun, $data.magacin_zaliha);
            item.kolicina = $data.kolicina;
            invoiceFactory.recalculateItem(ctrl.racun, item);
            invoiceFactory.recalculateTaxGroups(ctrl.racun);
            invoiceFactory.recalculateTotals(ctrl.racun);

            index = ctrl.racun.stavke.length - 1

            if ($eventType === 'doubleClick') {
                fisModal.invoiceItemEdit(ctrl.racun, index).then(function(data) {
                    if (data.action === 'delete') {
                        return;
                    }

                    highlightItem(index);
                });
            } else {
                highlightItem(index);
            }
        } else {
            fisModal.invoiceItemEdit(ctrl.racun, index).then(function(data) {
                if (data.action === 'delete') {
                    return;
                }

                highlightItem(index);
            });
        }


    }

    function highlightItem(index) {
        $timeout(function() {
            let desktopScrollContainer = angular.element('#desktop-invoice-item-scroll-container');
            let desktopItem = angular.element('#desktop-invoice-item-tbody tr:eq(' + index + ')');

            let mobileScrollContainer = angular.element('#mobile-invoice-item-scroll-container');
            let mobileItem = angular.element('#mobile-invoice-item-tbody tr:eq(' + index + ')');

            desktopScrollContainer[0].scrollTop = desktopItem[0].offsetTop;
            desktopItem.removeClass('bg-white').addClass('bg-warning-light');

            mobileScrollContainer[0].scrollTop = mobileItem[0].offsetTop;
            mobileItem.removeClass('bg-white').addClass('bg-warning-light');
        }, 0);

        $timeout(function() {
            let desktopItem = angular.element('#desktop-invoice-item-tbody tr:eq(' + index + ')');
            let mobileItem = angular.element('#mobile-invoice-item-tbody tr:eq(' + index + ')');


            desktopItem.addClass('bg-white').removeClass('bg-warning-light');
            mobileItem.addClass('bg-white').removeClass('bg-warning-light');
        }, 500);
    }

    function editInvoiceItem(index) {
        return fisModal.invoiceItemEdit(ctrl.racun, index).then(function(data) {
            if (!data.isConfirmed || data.action === 'delete') {
                return;
            }

            highlightItem(index);
        });
    }

    function upis(paymentMethodTypeId) {
        if (ctrl.racun.stavke.length === 0) {
            fisModal.confirm({
                headerText: 'Račun je prazan',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Dodajte stavke pa probajte ponovo.'
            });
            return;
        }

        if (paymentMethodTypeId === 8 && !ctrl.racun.komitent_id) {
            ctrl.fisModal.invoiceBuyerSelectModal(ctrl.racun);
            return;
        }

        let podaci = angular.copy(ctrl.racun);

        podaci.is_cash = fisConfig.getPaymentMethodById(paymentMethodTypeId).is_cash;
        podaci.payment_methods = [invoiceFactory.createPaymentMethod(paymentMethodTypeId)];

        let currentTime = new Date();

        podaci.poreski_period = angular.copy(currentTime);
        podaci.poreski_period.setDate(1);
        podaci.poreski_period.setHours(0, 0, 0, 0);
        podaci.poreski_period = moment(podaci.poreski_period).format()

        podaci.datumfakture = moment(podaci.datumfakture).format()

        podaci.datumvalute = angular.copy(currentTime);
        podaci.datumvalute = moment(podaci.datumvalute).format();

        fisGui.wrapInLoader(function() {
            return api.api__faktura__dodaj(podaci).then(function (data) {
                if (data.result.is_success) {
                    return stampac.stampajFakturu(
                        data.invoice.id,
                        fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                    );
                } else {
                    return fisModal.confirm({
                        headerText: 'Grеška prilikom fiskalizacije',
                        headerIcon: 'fa fa-exclamation-triangle text-danger',
                        bodyText: data.result.message
                    });
                }
            }).catch(() => {
                return fisModal.confirm({
                    headerText: 'Greška',
                    headerIcon: 'fa fa-exclamation-triangle text-danger',
                    bodyText: 'Došlo je do nepredviđene greške. Kontaktirajte administratore sistema.'
                });
            });
        }).finally(function() {
            $state.reload();
        });
    }
}

angular
    .module('app')
    .controller('FakturaPregledAvansaController', FakturaPregledAvansaController);

FakturaPregledAvansaController.$inject = [
    '$rootScope', '$stateParams', '$state', '$cookies', '$uibModal', 'api', 'fisGui', 'fisModal', 'fisConfig',
    'stampac', 'initialData']

function FakturaPregledAvansaController(
    $rootScope, $stateParams, $state, $cookies, $uibModal, api, fisGui, fisModal, fisConfig,
    stampac, initialData) {
    const ctrl = this;

    ctrl.tab = 'regular';
    ctrl.areFiltersVisible = false;

    ctrl.viewType = $cookies.get('invoiceOverview.viewType');
    if (ctrl.viewType === undefined) {
        ctrl.viewType = 'grid';
        $cookies.put('invoiceOverview.viewType', 'grid')
    }

    ctrl.fakturaModal = {
        jeVidljiv: false,
        src: undefined
    }

    ctrl.komitenti = initialData.komitenti;
    ctrl.areFiltersCollapsed = true;
    ctrl.stranica = initialData.stranica;
    ctrl.broj_stranice = initialData.stranica.broj_stranice;

    ctrl.fiscalizationDateGteDropdownOpen = false;
    ctrl.fiscalizationDateLteDropdownOpen = false;

    ctrl.filters = {}
    ctrl.filters.ordinal_id = $stateParams.ordinal_id;
    ctrl.filters.total_price_gte = $stateParams.total_price_gte;
    ctrl.filters.total_price_lte = $stateParams.total_price_lte;
    ctrl.filters.fiscalization_date_gte = $stateParams.fiscalization_date_gte;
    ctrl.filters.fiscalization_date_lte = $stateParams.fiscalization_date_lte;
    ctrl.filters.payment_type_id = [];
    ctrl.filters.payment_method_types = [];
    ctrl.filters.client_id = [];
    ctrl.filters.buyers = [];
    if ($stateParams.payment_type_id) {
        ctrl.filters.payment_type_id = $stateParams.payment_type_id;
        ctrl.filters.payment_method_types = fisConfig.filterPaymentMethodsByIds($stateParams.payment_type_id);
    }
    if ($stateParams.client_id) {
        ctrl.filters.client_id = $stateParams.client_id;
        ctrl.filters.buyers = ctrl.komitenti.filter(function(x) {
            return $stateParams.client_id.indexOf(x.id) >= 0
        });
    }


    ctrl.stampac = stampac;
    ctrl.storniraj = storniraj;
    ctrl.promijeniStranicu = promijeniStranicu;
    ctrl.ponistiPretragu = ponistiPretragu;
    ctrl.posaljiMail = posaljiMail;
    ctrl.setViewType = setViewType;
    ctrl.applyFilters = applyFilters;

    function ponistiPretragu($event) {
        $event.preventDefault();
        $state.transitionTo($state.current, {}, {inherit: false, reload: true, notify: false});
    }

    function posaljiMail(fakturaId) {
        fisModal.confirmOrCancel({
            headerText: 'Slanje e-mail-a',
            bodyText: 'Da li ste sigurni da želite da pošaljete e-mail?'
        }).then(function(result) {
            if (result.isConfirmed) {
                fisGui.wrapInLoader(function() {
                    return api.faktura.poId.mail(fakturaId).then(function(data) {
                        if (data.is_success) {
                            return fisModal.confirm({
                                headerText: 'Uspjeh',
                                bodyText: data.message
                            });
                        } else {
                            return fisModal.confirm({
                                headerText: 'Grеška',
                                bodyText: data.message
                            });
                        }
                    }).finally(function() {
                        $state.reload();
                    });
                });
            }
        });
    }

    function promijeniStranicu() {
        let params = angular.copy(ctrl.filters);
        params.broj_stranice = ctrl.broj_stranice;

        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }

    function storniraj($index) {
        let faktura = ctrl.stranica.stavke[$index];

        fisModal.confirmOrCancel({
            headerText: 'Storniranje računa',
            bodyText: 'Da li ste sigurni da želite da stornirate račun?',
            confirmButtonText: 'U redu',
            cancelButtonText: 'Odustani'
        }).then(function (result) {
            if (!result.isConfirmed) {
                return;
            }

            fisGui.wrapInLoader(function() {
                return api.faktura.storniraj(faktura.id).then(function (data) {
                    if (data.result.is_success) {
                        return $state.reload();
                    } else {
                        return fisModal.confirm({
                            headerText: 'Grеška prilikom fiskalizacije',
                            bodyText: data.result.message
                        });
                    }
                });
            });
        });
    }

    function setViewType(viewType) {
        ctrl.viewType = viewType;
        $cookies.put('invoiceOverview.viewType', viewType);
    }

    function applyFilters() {
        let params = ctrl.filters;
        params.broj_stranice = 1;
        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }
}
angular
    .module('app')
    .controller('FakturaPregledRedovnihController', FakturaPregledRedovnihController);

FakturaPregledRedovnihController.$inject = [
    '$rootScope', '$stateParams', '$state', '$cookies', '$uibModal', 'api', 'fisGui', 'fisModal', 'fisConfig',
    'stampac', 'initialData']

function FakturaPregledRedovnihController(
    $rootScope, $stateParams, $state, $cookies, $uibModal, api, fisGui, fisModal, fisConfig,
    stampac, initialData) {
    const ctrl = this;

    ctrl.tab = 'regular';
    ctrl.areFiltersVisible = false;

    ctrl.viewType = $cookies.get('invoiceOverview.viewType');
    if (ctrl.viewType === undefined) {
        ctrl.viewType = 'grid';
        $cookies.put('invoiceOverview.viewType', 'grid')
    }

    ctrl.fakturaModal = {
        jeVidljiv: false,
        src: undefined
    }

    ctrl.komitenti = initialData.komitenti;
    ctrl.areFiltersCollapsed = true;
    ctrl.stranica = initialData.stranica;
    ctrl.broj_stranice = initialData.stranica.broj_stranice;

    ctrl.fiscalizationDateGteDropdownOpen = false;
    ctrl.fiscalizationDateLteDropdownOpen = false;

    ctrl.filters = {}
    ctrl.filters.ordinal_id = $stateParams.ordinal_id;
    ctrl.filters.total_price_gte = $stateParams.total_price_gte;
    ctrl.filters.total_price_lte = $stateParams.total_price_lte;
    ctrl.filters.fiscalization_date_gte = $stateParams.fiscalization_date_gte;
    ctrl.filters.fiscalization_date_lte = $stateParams.fiscalization_date_lte;
    ctrl.filters.payment_type_id = [];
    ctrl.filters.payment_method_types = [];
    ctrl.filters.client_id = [];
    ctrl.filters.buyers = [];
    if ($stateParams.payment_type_id) {
        ctrl.filters.payment_type_id = $stateParams.payment_type_id;
        ctrl.filters.payment_method_types = fisConfig.filterPaymentMethodsByIds($stateParams.payment_type_id);
    }
    if ($stateParams.client_id) {
        ctrl.filters.client_id = $stateParams.client_id;
        ctrl.filters.buyers = ctrl.komitenti.filter(function(x) {
            return $stateParams.client_id.indexOf(x.id) >= 0
        });
    }


    ctrl.stampac = stampac;
    ctrl.storniraj = storniraj;
    ctrl.promijeniStranicu = promijeniStranicu;
    ctrl.ponistiPretragu = ponistiPretragu;
    ctrl.posaljiMail = posaljiMail;
    ctrl.setViewType = setViewType;
    ctrl.applyFilters = applyFilters;

    function ponistiPretragu($event) {
        $event.preventDefault();
        $state.transitionTo($state.current, {}, {inherit: false, reload: true, notify: false});
    }

    function posaljiMail(fakturaId) {
        fisModal.confirmOrCancel({
            headerText: 'Slanje e-mail-a',
            bodyText: 'Da li ste sigurni da želite da pošaljete e-mail?'
        }).then(function(result) {
            if (result.isConfirmed) {
                fisGui.wrapInLoader(function() {
                    return api.faktura.poId.mail(fakturaId).then(function(data) {
                        if (data.is_success) {
                            return fisModal.confirm({
                                headerText: 'Uspjeh',
                                bodyText: data.message
                            });
                        } else {
                            return fisModal.confirm({
                                headerText: 'Grеška',
                                bodyText: data.message
                            })
                        }
                    }).finally(function() {
                        $state.reload();
                    });
                });
            }
        });
    }

    function promijeniStranicu() {
        let params = angular.copy(ctrl.filters);
        params.broj_stranice = ctrl.broj_stranice;

        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }

    function storniraj($index) {
        let faktura = ctrl.stranica.stavke[$index];

        fisModal.confirmOrCancel({
            headerText: 'Storniranje računa',
            bodyText: 'Da li ste sigurni da želite da stornirate račun?',
            confirmButtonText: 'U redu',
            cancelButtonText: 'Odustani'
        }).then(function (result) {
            if (!result.isConfirmed) {
                return;
            }

            fisGui.wrapInLoader(function() {
                return api.faktura.storniraj(faktura.id).then(function (data) {
                    if (data.result.is_success) {
                        return $state.reload();
                    } else {
                        return fisModal.confirm({
                            headerText: 'Grеška prilikom fiskalizacije',
                            bodyText: data.result.message
                        });
                    }
                });
            });
        });
    }

    function setViewType(viewType) {
        ctrl.viewType = viewType;
        $cookies.put('invoiceOverview.viewType', viewType);
    }

    function applyFilters() {
        let params = ctrl.filters;
        params.broj_stranice = 1;
        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }
}
angular
    .module('app')
    .controller('FakturaSlobodanUnosAvansaController', FakturaSlobodanUnosAvansaController);

FakturaSlobodanUnosAvansaController.$inject = [
    '$rootScope', '$scope', '$timeout', '$state', 'api', 'invoiceFactory', 'stampac', 'fisConfig', 'fisModal', 'fisGui',
    'initialData'
];

function FakturaSlobodanUnosAvansaController(
    $rootScope, $scope, $timeout, $state, api, invoiceFactory, stampac, fisConfig, fisModal, fisGui,
    initialData
) {

    const ctrl = this;

    ctrl.tax_exemption_reasons = angular.copy(fisConfig.tax_exemption_reasons);
    ctrl.jediniceMjere = angular.copy(fisConfig.units);
    ctrl.poreskeStope = angular.copy(fisConfig.poreske_stope);
    ctrl.valute = angular.copy(fisConfig.valute);
    ctrl.invoiceFactory = invoiceFactory;

    ctrl.payment_method_types = angular.copy(fisConfig.payment_method_types.filter((x) => x.id !== PAYMENT_METHOD_TYPE_ADVANCE ));
    ctrl.primary_payment_method = undefined;
    ctrl.advance_payment_method = undefined;

    ctrl.setPaymentMethod = setPaymentMethod;
    ctrl.onCurrencyChange = onCurrencyChange;
    ctrl.addInvoiceItem = addInvoiceItem;
    ctrl.deleteInvoiceItem = deleteInvoiceItem;
    ctrl.resetInvoiceItem = resetInvoiceItem;
    ctrl.onInvoiceItemQuantityChange = onInvoiceItemQuantityChange;

    ctrl.onBuyerSelect = onBuyerSelect;
    ctrl.showBuyerUpdateModal = showBuyerUpdateModal;

    ctrl.createInvoice = createInvoice;
    ctrl.onInvoiceItemTemplateSelect = onInvoiceItemTemplateSelect;
    ctrl.getStavkeLagera = getStavkeLagera;
    ctrl.naPromjenuTipaUnosa = naPromjenuTipaUnosa;
    ctrl.onFocusItemTemplateSearch = onFocusItemTemplateSearch;
    ctrl.onBlurItemTemplateSearch = onBlurItemTemplateSearch;

    ctrl.onItemUpdate = onItemUpdate;

    init();

    //------------------------------------------------------------------------------------------------------------------

    function init() {
        if (initialData.invoice_template === null || initialData.invoice_template === undefined) {
            ctrl.racun = invoiceFactory.create();

            ctrl.primary_payment_method = invoiceFactory.createPaymentMethod(8);
            ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
            ctrl.racun.payment_methods.push(ctrl.primary_payment_method);

            let item = invoiceFactory.addBlankItem(ctrl.racun);
            item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;
        } else {
            ctrl.racun = invoiceFactory.createFromTemplate(initialData.invoice_template);
            ctrl.primary_payment_method = ctrl.racun.payment_methods[0];
            ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
            updateInvoiceInputTypes();
        }
    }

    function updateInvoiceInputTypes() {
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            if (ctrl.racun.stavke[ii].magacin_zaliha_id) {
                ctrl.racun.stavke[ii].tipUnosa = 'po_artiklu';
                ctrl.racun.stavke[ii].query = ctrl.racun.stavke[ii].magacin_zaliha.artikal.naziv;
            } else {
                ctrl.racun.stavke[ii].tipUnosa = 'slobodan_unos';
            }
        }
    }

    function onInvoiceItemTemplateSelect(index, $item, $model, $label) {
        invoiceFactory.updateItemFromItemTemplate(ctrl.racun, ctrl.racun.stavke[index], $item);
        ctrl.racun.stavke[index].query = ctrl.racun.stavke[index].magacin_zaliha.artikal.naziv;
    }

    function onFocusItemTemplateSearch(index) {
        let item = invoiceFactory.getInvoiceItem();
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
        ctrl.racun.stavke[index] = item;
    }

    function onBlurItemTemplateSearch(index) {
        if (ctrl.racun.stavke[index].magacin_zaliha === undefined || ctrl.racun.stavke[index].magacin_zaliha === null) {
            let item = invoiceFactory.getInvoiceItem();
            item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
            ctrl.racun.stavke[index].query = '';
        }
    }

    function getStavkeLagera(pojam_za_pretragu) {
        return api.magacin.poId.zalihe.listaj(fisConfig.user.magacin_id, {
            pojam_za_pretragu: pojam_za_pretragu,
            broj_stranice: 1,
            broj_stavki_po_stranici: 50
        }).then(function (data) {
            return data.stavke;
        });
    }

    function naPromjenuTipaUnosa(index) {
        let item = invoiceFactory.getInvoiceItem()
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;

        ctrl.racun.stavke[index] = item;
        invoiceFactory.recalculateTotals(ctrl.racun);
        invoiceFactory.recalculateTaxGroups(ctrl.racun);
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function resetInvoiceItem(index) {
        ctrl.racun.stavke[index] = invoiceFactory.getInvoiceItem();
    }

    function onInvoiceItemQuantityChange(index) {
        let invoiceItem = ctrl.racun.stavke[index];
        ctrl.invoiceFactory.recalculateItem(ctrl.racun, invoiceItem);
    }

    function _validateBuyer() {
        if (ctrl.racun.komitent === null || ctrl.racun.komitent === undefined) {
            if (ctrl.racun.is_cash) {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            } else {
                ctrl.form.komitent_id.$setValidity('required', false);
            }
        } else {
            if (!ctrl.racun.komitent.tip_identifikacione_oznake_id
                || !ctrl.racun.komitent.identifikaciona_oznaka
                || !ctrl.racun.komitent.adresa
                || !ctrl.racun.komitent.grad
                || !ctrl.racun.komitent.drzava) {
                ctrl.form.komitent_id.$setValidity('nepotpuno', false);
            } else {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            }
        }
    }

    function setPaymentMethod() {
        ctrl.primary_payment_method.payment_method_type = fisConfig.payment_method_types.find((x) => {
            return x.id === ctrl.primary_payment_method.payment_method_type_id
        });
        ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function onCurrencyChange() {
        ctrl.racun.valuta = ctrl.valute.find(function(x) {
            return x.id === ctrl.racun.valuta_id;
        });

        if (ctrl.racun.valuta_id === 50) {
            ctrl.racun.kurs_razmjene = 1;
        } else {
            ctrl.racun.kurs_razmjene = undefined;
        }
    }

    function addInvoiceItem() {
        let item = invoiceFactory.addBlankItem(ctrl.racun);
        item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;

        $timeout(function () {
            fisGui.scrollToSelector('#invoice-item-' + (ctrl.racun.stavke.length - 1), -56);
        });
    }

    function deleteInvoiceItem(index) {
        fisModal.confirmOrCancel({
            headerText: 'Brisanje stavke',
            bodyText: "Da li ste sigurni da želite da obrišete stavku?",
            confirmButtonText: 'Da, obriši',
            cancelButtonText: 'Odustani'
        }).then((result) => {
            if (result.isConfirmed) {
                return $timeout(function () {
                    ctrl.racun.stavke.splice(index, 1)

                    if (ctrl.racun.stavke.length === 0) {
                        addInvoiceItem();
                    }
                });
            }
        }).finally(function() {
            fisGui.scrollToSelector('#invoice-item-' + Math.max(0, index - 1), -120);
        });
    }

    function onBuyerSelect(model) {
        ctrl.racun.komitent_id = model.id;
        ctrl.racun.komitent = model;
        _validateBuyer();
    }

    function createInvoice(invoice) {
        _validateBuyer();
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.invalidForm().finally(function() {
                fisGui.scrollToNgInvalid(-56 - 20, 260);
            });
            return;
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis računa',
            bodyText: "Da li ste sigurni da želite da fiskalizujete račun?",
            confirmButtonText: 'Da, upiši',
            cancelButtonText: 'Odustani'
        }).then(function(result) {
            if (result.isConfirmed) {
                sendInvoiceData();
            }
        });

        function sendInvoiceData() {
            let podaci = angular.copy(ctrl.racun);
            podaci.datumvalute = moment(podaci.datumvalute).format();
            podaci.datum_prometa = moment(podaci.datum_prometa).format();
            podaci.poreski_period = moment(podaci.poreski_period).format();

            if ((new Big(podaci.payment_methods[0].amount)).eq(0)) {
                podaci.payment_methods.splice(0, 1);
            }

            fisGui.wrapInLoader(function() {
                return api.api__advance__create(podaci).then(function (data) {
                    return data;
                });
            }).then(function(data) {
                if (data.result.is_success) {
                    return stampac.stampajFakturu(
                        data.invoice.id,
                        fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                    ).then(function() {
                        let params = {};

                        return $state.transitionTo($state.current, params, {
                            reload: true, inherit: false
                        });
                    });
                } else {
                    return fisModal.confirm({
                        headerIcon: 'fa fa-exclamation-circle text-danger',
                        headerText: 'Grеška',
                        bodyText: data.result.message
                    });
                }
            });
        }
    }

    function showBuyerUpdateModal() {
        fisModal.buyerUpdateModal(ctrl.racun.komitent_id).then(function(result) {
            if (result.isConfirmed) {
                ctrl.racun.komitent = result.komitent;
                ctrl.racun.komitent_id = result.komitent.id;
            }
        });
    }

    function onItemUpdate() {
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }
}
angular
    .module('app')
    .controller('FakturaSlobodanUnosKorekcijeController', FakturaSlobodanUnosKorekcijeController);

FakturaSlobodanUnosKorekcijeController.$inject = [
    '$rootScope', '$scope', '$timeout', '$state', 'api', 'invoiceFactory', 'stampac', 'fisConfig', 'fisModal', 'fisGui',
    'fisCustomerApi'
];

function FakturaSlobodanUnosKorekcijeController(
    $rootScope, $scope, $timeout, $state, api, invoiceFactory, stampac, fisConfig, fisModal, fisGui,
    fisCustomerApi
) {
    const ctrl = this;

    ctrl.tax_exemption_reasons = angular.copy(fisConfig.tax_exemption_reasons);
    ctrl.jediniceMjere = angular.copy(fisConfig.units);
    ctrl.poreskeStope = angular.copy(fisConfig.poreske_stope);
    ctrl.valute = angular.copy(fisConfig.valute);
    ctrl.invoiceFactory = invoiceFactory;

    ctrl.payment_method_types = angular.copy(fisConfig.payment_method_types.filter((x) => x.id !== PAYMENT_METHOD_TYPE_ADVANCE ));
    ctrl.primary_payment_method = undefined;
    ctrl.advance_payment_method = undefined;

    ctrl.setPaymentMethod = setPaymentMethod;
    ctrl.onCurrencyChange = onCurrencyChange;
    ctrl.addInvoiceItem = addInvoiceItem;
    ctrl.deleteInvoiceItem = deleteInvoiceItem;
    ctrl.resetInvoiceItem = resetInvoiceItem;
    ctrl.onInvoiceItemQuantityChange = onInvoiceItemQuantityChange;

    ctrl.onBuyerSelect = onBuyerSelect;
    ctrl.showBuyerUpdateModal = showBuyerUpdateModal;

    ctrl.createInvoice = createInvoice;
    ctrl.onInvoiceItemTemplateSelect = onInvoiceItemTemplateSelect;
    ctrl.getStavkeLagera = getStavkeLagera;
    ctrl.naPromjenuTipaUnosa = naPromjenuTipaUnosa;
    ctrl.onFocusItemTemplateSearch = onFocusItemTemplateSearch;
    ctrl.onBlurItemTemplateSearch = onBlurItemTemplateSearch;

    ctrl.onItemUpdate = onItemUpdate;

    init();

    //------------------------------------------------------------------------------------------------------------------

    function init() {
        ctrl.racun = invoiceFactory.create();

        ctrl.primary_payment_method = invoiceFactory.createPaymentMethod(8);
        ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
        ctrl.racun.payment_methods.push(ctrl.primary_payment_method);

        let item = invoiceFactory.addBlankItem(ctrl.racun);
        item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;
    }

    function onInvoiceItemTemplateSelect(index, $item, $model, $label) {
        invoiceFactory.updateItemFromItemTemplate(ctrl.racun, ctrl.racun.stavke[index], $item);
        ctrl.racun.stavke[index].query = ctrl.racun.stavke[index].magacin_zaliha.artikal.naziv;
    }

    function onFocusItemTemplateSearch(index) {
        let item = invoiceFactory.getInvoiceItem();
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
        ctrl.racun.stavke[index] = item;
    }

    function onBlurItemTemplateSearch(index) {
        if (ctrl.racun.stavke[index].magacin_zaliha === undefined || ctrl.racun.stavke[index].magacin_zaliha === null) {
            let item = invoiceFactory.getInvoiceItem();
            item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
            ctrl.racun.stavke[index].query = '';
        }
    }

    function getStavkeLagera(pojam_za_pretragu) {
        return api.magacin.poId.zalihe.listaj(fisConfig.user.magacin_id, {
            pojam_za_pretragu: pojam_za_pretragu,
            broj_stranice: 1,
            broj_stavki_po_stranici: 50
        }).then(function (data) {
            return data.stavke;
        });
    }

    function naPromjenuTipaUnosa(index) {
        let item = invoiceFactory.getInvoiceItem()
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;

        ctrl.racun.stavke[index] = item;
        invoiceFactory.recalculateTotals(ctrl.racun);
        invoiceFactory.recalculateTaxGroups(ctrl.racun);
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function resetInvoiceItem(index) {
        ctrl.racun.stavke[index] = invoiceFactory.getInvoiceItem();
    }

    function onInvoiceItemQuantityChange(index) {
        let invoiceItem = ctrl.racun.stavke[index];
        ctrl.invoiceFactory.recalculateItem(ctrl.racun, invoiceItem);
    }

    function _validateBuyer() {
        if (ctrl.racun.komitent === null || ctrl.racun.komitent === undefined) {
            if (ctrl.racun.is_cash) {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            } else {
                ctrl.form.komitent_id.$setValidity('required', false);
            }
        } else {
            if (!ctrl.racun.komitent.tip_identifikacione_oznake_id
                || !ctrl.racun.komitent.identifikaciona_oznaka
                || !ctrl.racun.komitent.adresa
                || !ctrl.racun.komitent.grad
                || !ctrl.racun.komitent.drzava) {
                ctrl.form.komitent_id.$setValidity('nepotpuno', false);
            } else {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            }
        }
    }

    function setPaymentMethod() {
        ctrl.primary_payment_method.payment_method_type = fisConfig.payment_method_types.find((x) => {
            return x.id === ctrl.primary_payment_method.payment_method_type_id
        });
        ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function onCurrencyChange() {
        ctrl.racun.valuta = ctrl.valute.find(function(x) {
            return x.id === ctrl.racun.valuta_id;
        });

        if (ctrl.racun.valuta_id === 50) {
            ctrl.racun.kurs_razmjene = 1;
        } else {
            ctrl.racun.kurs_razmjene = undefined;
        }
    }

    function addInvoiceItem() {
        let item = invoiceFactory.addBlankItem(ctrl.racun);
        item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;

        $timeout(function () {
            fisGui.scrollToSelector('#invoice-item-' + (ctrl.racun.stavke.length - 1), -56);
        });
    }

    function deleteInvoiceItem(index) {
        fisModal.confirmOrCancel({
            headerText: 'Brisanje stavke',
            bodyText: "Da li ste sigurni da želite da obrišete stavku?",
            confirmButtonText: 'Da, obriši',
            cancelButtonText: 'Odustani'
        }).then((result) => {
            if (result.isConfirmed) {
                return $timeout(function () {
                    ctrl.racun.stavke.splice(index, 1)

                    if (ctrl.racun.stavke.length === 0) {
                        addInvoiceItem();
                    }
                });
            }
        }).finally(function() {
            fisGui.scrollToSelector('#invoice-item-' + Math.max(0, index - 1), -120);
        });
    }

    function onBuyerSelect(model) {
        ctrl.racun.komitent_id = model.id;
        ctrl.racun.komitent = model;
        _validateBuyer();
    }

    function createInvoice(invoice) {
        _validateBuyer();
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.invalidForm().finally(function() {
                fisGui.scrollToNgInvalid(-56 - 20, 260);
            });
            return;
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis računa',
            bodyText: "Da li ste sigurni da želite da fiskalizujete račun?",
            confirmButtonText: 'Da, upiši',
            cancelButtonText: 'Odustani'
        }).then(function(result) {
            if (result.isConfirmed) {
                sendInvoiceData();
            }
        });

        function sendInvoiceData() {
            let podaci = angular.copy(ctrl.racun);
            podaci.datumvalute = moment(podaci.datumvalute).format();
            podaci.datum_prometa = moment(podaci.datum_prometa).format();
            podaci.poreski_period = moment(podaci.poreski_period).format();

            if ((new Big(podaci.payment_methods[0].amount)).eq(0)) {
                podaci.payment_methods.splice(0, 1);
            }

            fisGui.wrapInLoader(function() {
                fisCustomerApi.views__faktura_slobodan_unos_korekcije__fiskalizuj(podaci).then(function(data) {
                    return data;
                });
            }).then(function(data) {
                if (data.result.is_success) {
                    return stampac.stampajFakturu(
                        data.invoice.id,
                        fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                    ).then(function() {
                        let params = {};

                        return $state.transitionTo($state.current, params, {
                            reload: true, inherit: false
                        });
                    });
                } else {
                    return fisModal.confirm({
                        headerIcon: 'fa fa-exclamation-circle text-danger',
                        headerText: 'Grеška',
                        bodyText: data.result.message
                    });
                }
            });
        }
    }

    function showBuyerUpdateModal() {
        fisModal.buyerUpdateModal(ctrl.racun.komitent_id).then(function(result) {
            if (result.isConfirmed) {
                ctrl.racun.komitent = result.komitent;
                ctrl.racun.komitent_id = result.komitent.id;
            }
        });
    }

    function onItemUpdate() {
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }
}
angular
    .module('app')
    .controller('FakturaSlobodanUnosRedovnihController', FakturaSlobodanUnosRedovnihController);

FakturaSlobodanUnosRedovnihController.$inject = [
    '$rootScope', '$scope', '$timeout', '$state', 'api', 'invoiceFactory', 'stampac', 'fisConfig', 'fisModal', 'fisGui',
    'initialData'
];

function FakturaSlobodanUnosRedovnihController(
    $rootScope, $scope, $timeout, $state, api, invoiceFactory, stampac, fisConfig, fisModal, fisGui,
    initialData
) {

    const ctrl = this;

    ctrl.tax_exemption_reasons = angular.copy(fisConfig.tax_exemption_reasons);
    ctrl.jediniceMjere = angular.copy(fisConfig.units);
    ctrl.poreskeStope = angular.copy(fisConfig.poreske_stope);
    ctrl.valute = angular.copy(fisConfig.valute);
    ctrl.invoiceFactory = invoiceFactory;

    ctrl.payment_method_types = angular.copy(fisConfig.payment_method_types.filter((x) => x.id !== PAYMENT_METHOD_TYPE_ADVANCE ));
    ctrl.primary_payment_method = undefined;

    ctrl.setPaymentMethod = setPaymentMethod;
    ctrl.onCurrencyChange = onCurrencyChange;
    ctrl.addInvoiceItem = addInvoiceItem;
    ctrl.deleteInvoiceItem = deleteInvoiceItem;
    ctrl.onInvoiceItemQuantityChange = onInvoiceItemQuantityChange;

    ctrl.createInvoice = createInvoice;
    ctrl.createInvoiceTemplate = createInvoiceTemplate;
    ctrl.onInvoiceItemTemplateSelect = onInvoiceItemTemplateSelect;
    ctrl.getStavkeLagera = getStavkeLagera;
    ctrl.naPromjenuTipaUnosa = naPromjenuTipaUnosa;
    ctrl.onFocusItemTemplateSearch = onFocusItemTemplateSearch;
    ctrl.onBlurItemTemplateSearch = onBlurItemTemplateSearch;

    ctrl.onItemUpdate = onItemUpdate;

    init();

    //------------------------------------------------------------------------------------------------------------------

    function init() {
        if (initialData.invoice_template === null || initialData.invoice_template === undefined) {
            ctrl.racun = invoiceFactory.create();

            ctrl.primary_payment_method = invoiceFactory.createPaymentMethod(8);
            ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
            ctrl.racun.payment_methods.push(ctrl.primary_payment_method);

            let item = invoiceFactory.addBlankItem(ctrl.racun);
            item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;
        } else {
            ctrl.racun = invoiceFactory.createFromTemplate(initialData.invoice_template);
            ctrl.primary_payment_method = ctrl.racun.payment_methods[0];
            ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
            updateInvoiceInputTypes();
        }
    }

    function updateInvoiceInputTypes() {
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            if (ctrl.racun.stavke[ii].magacin_zaliha_id) {
                ctrl.racun.stavke[ii].tipUnosa = 'po_artiklu';
                ctrl.racun.stavke[ii].query = ctrl.racun.stavke[ii].magacin_zaliha.artikal.naziv;
            } else {
                ctrl.racun.stavke[ii].tipUnosa = 'slobodan_unos';
            }
        }
    }

    function onInvoiceItemTemplateSelect(index, $item, $model, $label) {
        invoiceFactory.updateItemFromItemTemplate(ctrl.racun, ctrl.racun.stavke[index], $item);
        ctrl.racun.stavke[index].query = ctrl.racun.stavke[index].magacin_zaliha.artikal.naziv;
    }

    function onFocusItemTemplateSearch(index) {
        let item = invoiceFactory.getInvoiceItem();
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
        ctrl.racun.stavke[index] = item;
    }

    function onBlurItemTemplateSearch(index) {
        if (ctrl.racun.stavke[index].magacin_zaliha === undefined || ctrl.racun.stavke[index].magacin_zaliha === null) {
            let item = invoiceFactory.getInvoiceItem();
            item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;
            ctrl.racun.stavke[index].query = '';
        }
    }

    function getStavkeLagera(pojam_za_pretragu) {
        return api.magacin.poId.zalihe.listaj(fisConfig.user.magacin_id, {
            pojam_za_pretragu: pojam_za_pretragu,
            broj_stranice: 1,
            broj_stavki_po_stranici: 50
        }).then(function (data) {
            return data.stavke;
        });
    }

    function naPromjenuTipaUnosa(index) {
        let item = invoiceFactory.getInvoiceItem()
        item.tipUnosa = ctrl.racun.stavke[index].tipUnosa;

        ctrl.racun.stavke[index] = item;
        invoiceFactory.recalculateTotals(ctrl.racun);
        invoiceFactory.recalculateTaxGroups(ctrl.racun);
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function onInvoiceItemQuantityChange(index) {
        let invoiceItem = ctrl.racun.stavke[index];
        ctrl.invoiceFactory.recalculateItem(ctrl.racun, invoiceItem);
    }

    function _validateBuyer() {
        if (ctrl.racun.komitent === null || ctrl.racun.komitent === undefined) {
            if (ctrl.racun.is_cash) {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            } else {
                ctrl.form.komitent_id.$setValidity('required', false);
            }
        } else {
            if (!ctrl.racun.komitent.tip_identifikacione_oznake_id
                || !ctrl.racun.komitent.identifikaciona_oznaka
                || !ctrl.racun.komitent.adresa
                || !ctrl.racun.komitent.grad
                || !ctrl.racun.komitent.drzava) {
                ctrl.form.komitent_id.$setValidity('nepotpuno', false);
            } else {
                ctrl.form.komitent_id.$setValidity('required', true);
                ctrl.form.komitent_id.$setUntouched();
                ctrl.form.komitent_id.$setPristine();
            }
        }
    }

    function setPaymentMethod() {
        ctrl.primary_payment_method.payment_method_type = fisConfig.payment_method_types.find((x) => {
            return x.id === ctrl.primary_payment_method.payment_method_type_id
        });
        ctrl.racun.is_cash = ctrl.primary_payment_method.payment_method_type.is_cash;
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }

    function onCurrencyChange() {
        ctrl.racun.valuta = ctrl.valute.find(function(x) {
            return x.id === ctrl.racun.valuta_id;
        });

        if (ctrl.racun.valuta_id === 50) {
            ctrl.racun.kurs_razmjene = 1;
        } else {
            ctrl.racun.kurs_razmjene = undefined;
        }
    }

    function addInvoiceItem() {
        let item = invoiceFactory.addBlankItem(ctrl.racun);
        item.tipUnosa = fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_unosa_stavke_fakture;

        $timeout(function () {
            fisGui.scrollToSelector('#invoice-item-' + (ctrl.racun.stavke.length - 1), -56);
        });
    }

    function deleteInvoiceItem(index) {
        fisModal.confirmOrCancel({
            headerText: 'Brisanje stavke',
            bodyText: "Da li ste sigurni da želite da obrišete stavku?",
            confirmButtonText: 'Da, obriši',
            cancelButtonText: 'Odustani'
        }).then((result) => {
            if (result.isConfirmed) {
                return $timeout(function () {
                    ctrl.racun.stavke.splice(index, 1)

                    if (ctrl.racun.stavke.length === 0) {
                        addInvoiceItem();
                    }
                });
            }
        }).finally(function() {
            fisGui.scrollToSelector('#invoice-item-' + Math.max(0, index - 1), -120);
        });
    }

    function createInvoice(invoice) {
        _validateBuyer();
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.invalidForm().finally(function() {
                fisGui.scrollToNgInvalid(-56 - 20, 260);
            });
            return;
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis računa',
            bodyText: "Da li ste sigurni da želite da fiskalizujete račun?",
            confirmButtonText: 'Da, upiši',
            cancelButtonText: 'Odustani'
        }).then(function(result) {
            if (result.isConfirmed) {
                sendInvoiceData();
            }
        });

        function sendInvoiceData() {
            let podaci = getData();

            if ((new Big(podaci.payment_methods[0].amount)).eq(0)) {
                podaci.payment_methods.splice(0, 1);
            }

            fisGui.wrapInLoader(function() {
                return api.api__faktura__dodaj(podaci).then(function (data) {
                    return data;
                });
            }).then(function(data) {
                if (data.result.is_success) {
                    return stampac.stampajFakturu(
                        data.invoice.id,
                        fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                    ).then(function() {
                        let params = {};

                        return $state.transitionTo($state.current, params, {
                            reload: true, inherit: false
                        });
                    });
                } else {
                    return fisModal.confirm({
                        headerIcon: 'fa fa-exclamation-circle text-danger',
                        headerText: 'Grеška',
                        bodyText: data.result.message
                    });
                }
            });
        }
    }

    function createInvoiceTemplate() {
        _validateBuyer();
        ctrl.form.$setSubmitted();
        if (ctrl.form.$invalid) {
            fisModal.invalidForm().finally(function() {
                fisGui.scrollToNgInvalid(-56 - 20, 260);
            });
            return;
        }

        let podaci = getData();
        api.profaktura.dodaj(podaci).then(function(data) {
            if (data.is_success) {
                return stampac.stampajFakturu(data.invoice.id, 'a4').then(function() {
                    let params = {};

                    return $state.transitionTo($state.current, params, {
                        reload: true, inherit: false
                    });
                });
            } else {
                return fisModal.confirm({
                    headerIcon: 'fa fa-exclamation-circle text-danger',
                    headerText: 'Grеška',
                    bodyText: data.message
                });
            }
        });
    }

    function getData() {
        let data = {};
        data.is_cash = ctrl.racun.is_cash;
        data.datumvalute = moment(ctrl.racun.datumvalute).format();
        data.poreski_period = moment(ctrl.racun.poreski_period).format();
        data.datum_prometa = moment(ctrl.racun.datum_prometa).format();
        data.napomena = ctrl.racun.napomena;
        data.valuta_id = ctrl.racun.valuta_id;
        data.komitent_id = ctrl.racun.komitent_id;
        data.kurs_razmjene = ctrl.racun.kurs_razmjene;
        data.ukupna_cijena_osnovna = ctrl.racun.ukupna_cijena_osnovna;
        data.ukupna_cijena_rabatisana = ctrl.racun.ukupna_cijena_rabatisana;
        data.ukupna_cijena_puna = ctrl.racun.ukupna_cijena_puna;
        data.ukupna_cijena_prodajna = ctrl.racun.ukupna_cijena_prodajna;
        data.porez_iznos = ctrl.racun.porez_iznos;
        data.rabat_iznos_osnovni = ctrl.racun.rabat_iznos_osnovni;
        data.rabat_iznos_prodajni = ctrl.racun.rabat_iznos_prodajni;
        data.tax_exemption_amount = ctrl.racun.tax_exemption_amount;

        data.stavke = [];
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            let oldItem = ctrl.racun.stavke[ii];
            let newItem = {};
            newItem.sifra = oldItem.sifra;
            newItem.naziv = oldItem.naziv;
            newItem.izvor_kalkulacije = oldItem.izvor_kalkulacije;

            newItem.jedinicna_cijena_osnovna = oldItem.jedinicna_cijena_osnovna;
            newItem.jedinicna_cijena_rabatisana = oldItem.jedinicna_cijena_rabatisana;
            newItem.jedinicna_cijena_puna = oldItem.jedinicna_cijena_puna;
            newItem.jedinicna_cijena_prodajna = oldItem.jedinicna_cijena_prodajna;

            newItem.porez_procenat = oldItem.porez_procenat;
            newItem.rabat_procenat = oldItem.rabat_procenat;

            newItem.kolicina = oldItem.kolicina;

            newItem.ukupna_cijena_osnovna = oldItem.ukupna_cijena_osnovna;
            newItem.ukupna_cijena_rabatisana = oldItem.ukupna_cijena_rabatisana;
            newItem.ukupna_cijena_puna = oldItem.ukupna_cijena_puna;
            newItem.ukupna_cijena_prodajna = oldItem.ukupna_cijena_prodajna;
            newItem.porez_iznos = oldItem.porez_iznos;
            newItem.rabat_iznos_osnovni = oldItem.rabat_iznos_osnovni;
            newItem.rabat_iznos_prodajni = oldItem.rabat_iznos_prodajni;
            newItem.tax_exemption_amount = oldItem.tax_exemption_amount;

            newItem.jedinica_mjere_id = oldItem.jedinica_mjere_id;
            newItem.tax_exemption_reason_id = oldItem.tax_exemption_reason_id;
            newItem.magacin_zaliha_id = oldItem.magacin_zaliha_id;
            data.stavke.push(newItem);
        }

        data.grupe_poreza = [];
        for (let ii = 0; ii < ctrl.racun.grupe_poreza.length; ii++) {
            let oldTaxGroup = ctrl.racun.grupe_poreza[ii];
            if (oldTaxGroup.broj_stavki === 0 || oldTaxGroup.ukupna_cijena_prodajna === 0) {
                continue;
            }

            let newTaxGroup = {};
            newTaxGroup.broj_stavki = oldTaxGroup.broj_stavki;
            newTaxGroup.ukupna_cijena_osnovna = oldTaxGroup.ukupna_cijena_osnovna;
            newTaxGroup.ukupna_cijena_rabatisana = oldTaxGroup.ukupna_cijena_rabatisana;
            newTaxGroup.ukupna_cijena_puna = oldTaxGroup.ukupna_cijena_puna;
            newTaxGroup.ukupna_cijena_prodajna = oldTaxGroup.ukupna_cijena_prodajna;
            newTaxGroup.porez_procenat = oldTaxGroup.porez_procenat;
            newTaxGroup.porez_iznos = oldTaxGroup.porez_iznos;
            newTaxGroup.rabat_iznos_osnovni = oldTaxGroup.rabat_iznos_osnovni;
            newTaxGroup.rabat_iznos_prodajni = oldTaxGroup.rabat_iznos_prodajni;
            newTaxGroup.tax_exemption_reason_id = oldTaxGroup.tax_exemption_reason_id;
            newTaxGroup.tax_exemption_amount = oldTaxGroup.tax_exemption_amount;
            data.grupe_poreza.push(newTaxGroup);
        }

        data.payment_methods = [];
        for (let ii = 0; ii < ctrl.racun.payment_methods.length; ii++) {
            let oldPaymentMethod = ctrl.racun.payment_methods[ii];
            let newPaymentMethod = {};
            newPaymentMethod.payment_method_type_id = oldPaymentMethod.payment_method_type_id;
            newPaymentMethod.amount = oldPaymentMethod.amount;
            data.payment_methods.push(newPaymentMethod);
        }

        return data;
    }

    function onItemUpdate() {
        invoiceFactory.recalculatePaymentMethodTotals(ctrl.racun);
    }
}
angular
    .module('app')
    .controller('FakturaUnosPoGrupamaController', FakturaUnosPoGrupamaController);

FakturaUnosPoGrupamaController.$inject = [
    '$rootScope', '$scope', '$state', '$uibModal', '$timeout', '$window', 'api', 'stampac', 'grupe_artikala',
    'invoiceFactory', 'fisConfig', 'fisGui', 'fisModal', 'breakpointsService',
    '$cookies'
];

function FakturaUnosPoGrupamaController(
    $rootScope, $scope, $state, $uibModal, $timeout, $window, api, stampac, grupe_artikala,
    invoiceFactory, fisConfig, fisGui, fisModal, breakpointsService,
    $cookies
) {
    const ctrl = this;

    ctrl.invoiceTab = 'items';

    ctrl.grupe_artikala = grupe_artikala;
    ctrl.zalihe = undefined;
    ctrl.odabrana_grupa = undefined;

    ctrl.grupaArtikalaGrid = createGrid(
        grupe_artikala,
        6,
        4,
        'unosPoGrupama.grupaArtikalaGrid',
        1

    );

    ctrl.artikalGrid = createGrid(
        [],
        3,
        3,
        'unosPoGrupama.artikalGrid'
    );

    ctrl.selectItemGroup = selectItemGroup;
    ctrl.deselectItemTemplateGroup = deselectItemTemplateGroup;
    ctrl.nextPage = nextPage;
    ctrl.prevPage = prevPage;
    ctrl.editQuantityInNumericModal = editQuantityInNumericModal;
    ctrl.odaberiZalihuTablet = odaberiZalihuTablet;
    ctrl.incrementQuantity = incrementQuantity;
    ctrl.decrementQuantity = decrementQuantity;
    ctrl.azurirajStavku = azurirajStavku;
    ctrl.onBuyerSelect = onBuyerSelect;
    ctrl.showBuyerUpdateModal = showBuyerUpdateModal;
    ctrl.upis = upis;
    ctrl.upisSaKupcem = upisSaKupcem;
    ctrl.updateGridLayout = updateGridLayout;

    // -----------------------------------------------------------------------------------------------------------------

    ctrl.racun = invoiceFactory.create();

    // -----------------------------------------------------------------------------------------------------------------

    function updateOrCreateItemFromItemTempate(itemTemplate, quantity) {
        if (itemTemplate.invoiceItem === null) {
            itemTemplate.invoiceItem = invoiceFactory.addItemFromItemTemplate(ctrl.racun, itemTemplate);
        }
        itemTemplate.invoiceItem.kolicina = quantity;
        invoiceFactory.recalculateItem(ctrl.racun, itemTemplate.invoiceItem);

        if (breakpointsService.ls(breakpointsService.keys.md)) {
            ctrl.invoiceTab = 'product_list';
        } else {
            ctrl.invoiceTab = 'items';
        }
    }

    function removeItemFromInvoice(itemTemplate) {
        let index = null;
        for (let ii = 0; ii < ctrl.racun.stavke.length; ii++) {
            if (itemTemplate.artikal_id === ctrl.racun.stavke[ii].magacin_zaliha.artikal_id) {
                index = ii;
                break;
            }
        }

        itemTemplate.invoiceItem.kolicina = 0;
        itemTemplate.invoiceItem = null;
        ctrl.racun.stavke.splice(index, 1);
    }

    function selectItemGroup(grupa_artikala) {
        fisGui.wrapInLoader(function() {
            return api.grupaArtikala.poId.zaliha.listaj(grupa_artikala.id).then(function(data) {
                ctrl.odabrana_grupa = grupa_artikala;
                ctrl.zalihe = data;

                updateGridSource(ctrl.artikalGrid, data);
                updateGridPage(ctrl.artikalGrid, 1);

                for (let ii = 0; ii < ctrl.zalihe.length; ii++) {
                    ctrl.zalihe[ii].invoiceItem = null;
                    for (let jj = 0; jj < ctrl.racun.stavke.length; jj++) {
                        if (ctrl.zalihe[ii].artikal_id === ctrl.racun.stavke[jj].magacin_zaliha.artikal.id) {
                            ctrl.zalihe[ii].invoiceQuantity = ctrl.racun.stavke[jj].kolicina;
                            ctrl.zalihe[ii].invoiceItem = ctrl.racun.stavke[jj];
                        }
                    }
                }
            });
        });
    }

    function deselectItemTemplateGroup() {
        ctrl.odabrana_grupa = undefined;
        ctrl.zalihe = undefined;
    }


    function nextPage(grid, cycle) {
        cycle = cycle === undefined ? true : cycle;

        let newPage = grid.currentPage + 1;
        if (grid.currentPage === grid.totalPages) {
            if (cycle) {
                newPage = 1;
            } else {
                return;
            }
        }

        ctrl.grid = updateGridPage(grid, newPage, cycle);
    }
    function prevPage(grid, cycle) {
        cycle = cycle === undefined ? true : cycle;

        let newPage = grid.currentPage - 1;
        if (grid.currentPage === 1) {
            if (cycle) {
                newPage = grid.totalPages;
            } else {
                return;
            }
        }

        ctrl.grid = updateGridPage(grid, newPage, cycle);
    }

    function createGrid(dataSource, defaultRowNum, defaultColNum, cookieKey, currentPage) {
        let grid = {};

        let cookieRowNum = $cookies.get(cookieKey + '.rowNum');
        if (cookieRowNum === undefined) {
            grid.rowNum = defaultRowNum;
            $cookies.put('unosPoGrupama.grupaArtikalaGrid.rowNum', defaultRowNum);
        } else {
            grid.rowNum = parseInt(cookieRowNum);
        }

        let cookieColNum = $cookies.get(cookieKey + '.colNum');
        if (cookieColNum === undefined) {
            grid.colNum = defaultColNum;
            $cookies.put('unosPoGrupama.grupaArtikalaGrid.colNum', defaultColNum);
        } else {
            grid.colNum = parseInt(cookieColNum);
        }

        if ($cookies.get(cookieKey + '.colNum') === undefined) {
            $cookies.put('unosPoGrupama.grupaArtikalaGrid.colNum', 4);
        }

        grid.currentPage = currentPage ? currentPage : 1;
        grid.itemsPerPage = grid.rowNum * grid.colNum;
        grid.cookieKey = cookieKey;

        updateGridSource(grid, dataSource);
        updateGridPage(grid, grid.currentPage);

        return grid;
    }

    function updateGridSource(grid, dataSource) {
        grid.totalPages = Math.ceil(dataSource.length / grid.itemsPerPage);
        if (grid.totalPages === 0) {
            grid.totalPages = 1;
        }
        grid.dataSource = dataSource;
    }

    function updateGridLayout(grid, colNum, rowNum) {
        grid.colNum = colNum;
        $cookies.put(grid.cookieKey + '.colNum', colNum);
        grid.rowNum = rowNum;
        $cookies.put(grid.cookieKey + '.rowNum', rowNum);
        grid.itemsPerPage = colNum * rowNum;
        grid.totalPages = Math.ceil(grid.dataSource.length / grid.itemsPerPage);
        updateGridPage(grid, 1);
    }

    function updateGridPage(grid, page) {
        grid.currentPage = page;
        grid.currentPageIndex = page - 1;
        grid.rows = [];

        for (let ii = 0; ii < grid.rowNum; ii++) {
            let start = grid.currentPageIndex * grid.itemsPerPage + (ii * grid.colNum);
            let end = grid.currentPageIndex * grid.itemsPerPage + ((ii * grid.colNum) + grid.colNum);

            let arr = [];
            for (let jj = start; jj < end; jj++) {
                if (jj < grid.dataSource.length) {
                    arr.push(grid.dataSource[jj]);
                } else {
                    arr.push(null);
                }
            }
            grid.rows.push(arr);
        }

        if (grid.rows.length < grid.rowNum) {
            for (let ii = 0; ii < grid.rowNum; ii++) {
                grid.rows.push([]);
            }
        }

        for (let ii = 0; ii < grid.rows.length; ii++) {
            let lll = grid.colNum - grid.rows[ii].length;
            if (lll > 0) {
                for (let jj = 0; jj < lll; jj++) {
                    grid.rows[ii].push(null);
                }
            }
        }

        return grid;
    }

    function editQuantityInNumericModal(itemTemplate) {
        fisModal.numericInput({ value: itemTemplate.invoiceQuantity }).then(function(result) {
            if (result.isConfirmed) {
                updateOrCreateItemFromItemTempate(itemTemplate, result.value);
            }
        });
    }

    function odaberiZalihuTablet(zaliha) {
        if (zaliha.artikal.jedinica_mjere.naziv === 'kom') {
            incrementQuantity(zaliha);
        } else {
            editQuantityInNumericModal(zaliha);
        }
    }

    function incrementQuantity(itemTemplate) {
        let quantity = 1;
        if (itemTemplate.invoiceItem !== null) {
            quantity = itemTemplate.invoiceItem.kolicina + 1
        }

        updateOrCreateItemFromItemTempate(itemTemplate, quantity);
    }

    function decrementQuantity(itemTemplate) {
        let quantity = Math.max(0, itemTemplate.invoiceItem.kolicina - 1);
        if (itemTemplate.invoiceItem !== null) {
            if (quantity === 0) {
                removeItemFromInvoice(itemTemplate);
            } else {
                updateOrCreateItemFromItemTempate(itemTemplate, quantity);
            }
        }
    }

    function azurirajStavku(index) {
        let cachedInvoiceTemplateId = ctrl.racun.stavke[index].magacin_zaliha.artikal_id;
        fisModal.invoiceItemEdit(ctrl.racun, index).then(function(result) {
            if (!result.isConfirmed) {
                return;
            }

            let zaliha = ctrl.artikalGrid.dataSource.find(function(zaliha) {
                return zaliha.artikal_id === cachedInvoiceTemplateId;
            });

            if (result.action === 'delete') {
                zaliha.invoiceItem = null;
                return;
            }

            if (result.action === 'save') {
                zaliha.invoiceItem = ctrl.racun.stavke[index];
            }
        });
    }

    function onBuyerSelect($model) {
        ctrl.komitent = $model;
        ctrl.racun.komitent_id = $model.id;
    }

    function showBuyerUpdateModal() {
        fisModal.buyerUpdateModal(ctrl.racun.komitent_id).then(function(result) {
            if (result.isConfirmed) {
                ctrl.komitent = result.komitent;
                ctrl.komitent_id = result.komitent.id;
            }
        });
    }

    function upisSaKupcem(paymentMethodTypeId) {
        if (ctrl.racun.stavke.length === 0) {
            fisModal.confirm({
                headeText: 'Račun je prazan',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Dodajte stavke pa probajte ponovo.'
            });
            return;
        }

        if (paymentMethodTypeId === 8 && !ctrl.racun.komitent_id) {
            fisModal.invoiceBuyerSelectModal(ctrl.racun).then(function(result) {
                if (result.isConfirmed) {
                    sendData(paymentMethodTypeId);
                }
            });
        }
    }

    function upis(paymentMethodTypeId) {
        if (ctrl.racun.stavke.length === 0) {
            fisModal.confirm({
                headeText: 'Račun je prazan',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Dodajte stavke pa probajte ponovo.'
            });
            return;
        }

        sendData(paymentMethodTypeId);
    }

    function sendData(paymentMethodTypeId) {
        let podaci = angular.copy(ctrl.racun);

        podaci.is_cash = fisConfig.getPaymentMethodById(paymentMethodTypeId).is_cash;
        podaci.payment_methods = [invoiceFactory.createPaymentMethod(paymentMethodTypeId)];

        let currentTime = new Date();

        podaci.poreski_period = angular.copy(currentTime);
        podaci.poreski_period.setDate(1);
        podaci.poreski_period.setHours(0, 0, 0, 0);
        podaci.poreski_period = moment(podaci.poreski_period).format()

        podaci.datumfakture = moment(podaci.datumfakture).format()

        podaci.datumvalute = angular.copy(currentTime);
        podaci.datumvalute = moment(podaci.datumvalute).format()


        $rootScope.showLoader = true;
        fisGui.wrapInLoader(function() {
            return api.api__faktura__dodaj(podaci).then(function (data) {
                return data;
            });
        }).then(function(data) {
            if (data.result.is_success) {
                return stampac.stampajFakturu(
                    data.invoice.id,
                    fisConfig.user.podesavanja_aplikacije.podrazumijevani_tip_stampe
                ).then(function() {
                    $state.reload();
                });
            } else {
                return fisModal.confirm({
                    headerIcon: 'fa fa-exclamation-circle text-danger',
                    headerText: 'Grеška',
                    bodyText: data.result.message
                });
            }
        });
    }
}
angular
    .module('app')
    .controller('FirmaIzmjenaController', FirmaIzmjenaController);

FirmaIzmjenaController.$inject = [
    '$state', '$scope', 'api', 'fisGui', 'fisModal', 'fisConfig'
];

function FirmaIzmjenaController(
    $state, $scope, api, fisGui, fisModal, fisConfig
) {
    const ctrl = this;

    ctrl.firma = angular.copy(fisConfig.user.firma);
    ctrl.drzave = angular.copy(fisConfig.countries);
    ctrl.organizacionaJedinica = angular.copy(fisConfig.user.naplatni_uredjaj.organizaciona_jedinica);
    ctrl.logoFile = null;
    ctrl.logoUrl = null;
    ctrl.cachedMailSettings = undefined;
    ctrl.mailSettings = undefined;
    ctrl.user = angular.copy(fisConfig.user);

    ctrl.upisOrganizacioneJedinice = upisOrganizacioneJedinice;
    ctrl.setMailSettings = setMailSettings;
    ctrl.updateCompanyData = updateCompanyData;
    ctrl.deleteLogo = deleteLogo;
    ctrl.uploadLogo = uploadLogo;
    ctrl.updateLogo = updateLogo;
    ctrl.updateUser = updateUser;
    ctrl.saveMailSettings = saveMailSettings;

    setMailSettings();



    if (ctrl.firma.logo_url === undefined || ctrl.firma.logo_url === null) {
        ctrl.logoUrl = null;
    } else {
        ctrl.logoUrl = ctrl.firma.logo_url;
    }

    $scope.$watch('ctrl.mailSettings.smtp_active', function (newVal) {
        if (newVal === false) {
            ctrl.mailSettings = {
                smtp_active: false,
                smtp_host: undefined,
                smtp_port: undefined,
                smtp_mail: undefined,
                smtp_username: undefined,
                smtp_password: undefined
            }
        }
    });

    function setMailSettings() {
        ctrl.cachedMailSettings = {
            smtp_active: fisConfig.user.firma.settings.smtp_active,
            smtp_host: fisConfig.user.firma.settings.smtp_host,
            smtp_port: fisConfig.user.firma.settings.smtp_port,
            smtp_mail: fisConfig.user.firma.settings.smtp_mail,
            smtp_username: fisConfig.user.firma.settings.smtp_username,
            smtp_password: undefined
        }

        ctrl.mailSettings = angular.copy(ctrl.cachedMailSettings);
    }

    function deleteLogo() {
        ctrl.logoFile = null;
        ctrl.logoUrl = null;
    }

    function uploadLogo(file) {
        ctrl.logoFile = file;
        ctrl.logoUrl = URL.createObjectURL(file);
    }

    function updateLogo() {
        let formData = new FormData();

        if (ctrl.logoUrl !== null) {
            formData.append('logo_url', ctrl.logoUrl);
        }

        if (ctrl.logoFile !== null) {
            formData.append("logo", ctrl.logoFile);
        }

        fisGui.wrapInLoader(function() {
            return api.firma.logo.izmijeni(formData);
        }).then(function() {
            return fisModal.confirm({
                headerIcon: 'fa fa-check-circle text-success',
                headerText: 'Uspjeh',
                bodyText: 'Logo je ažuriran.'
            });
        });
    }

    function updateUser() {
        ctrl.userForm.$setSubmitted();
        if (ctrl.userForm.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                headerIcon: 'fa fa-exclamation-triangle text-danger',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return
        }

        fisGui.wrapInLoader(function() {
            let data = {};
            data.lozinka = ctrl.user.lozinka;

            return api.korisnik.poId.izmijeni(data).then(function(data) {
                return data;
            });
        }).then(function(data) {
            return fisModal.confirm({
                headerIcon: 'fa fa-check-circle text-success',
                headerText: 'Uspjeh',
                bodyText: 'Podaci su ažurirani.'
            });
        });
    }

    function updateCompanyData() {
        fisGui.wrapInLoader(function() {
            return api.firma.izmijeni(ctrl.firma).then(function() {
                return fisConfig.reload();
            });
        }).then(function() {
            return fisModal.confirm({
                headerIcon: 'fa fa-check-circle text-success',
                headerText: 'Uspjeh',
                bodyText: 'Podaci su ažurirani.'
            });
        });
    }

    function upisOrganizacioneJedinice() {
        ctrl.organisationalUnitForm.$setSubmitted();
        if (ctrl.organisationalUnitForm.$invalid) {
            return fisModal.invalidForm();
        }

        fisGui.wrapInLoader(function() {
            return api.organizacionaJedinica.poId.izmijeni(ctrl.organizacionaJedinica.id, ctrl.organizacionaJedinica).then(function(data) {
                if (data.is_success) {
                    return fisConfig.reload().then(function() {
                        return data;
                    });
                } else {
                    return data;
                }
            });
        }).then(function(data) {
            ctrl.organisationalUnitForm.$setPristine();

            if (data.is_success) {
                return fisModal.confirm({
                    headerIcon: 'fa fa-check-circle text-success',
                    headerText: 'Uspjeh',
                    bodyText: data.message
                });
            } else {
                return fisModal.confirm({
                    headerIcon: 'fa fa-exclamation-triangle text-danger',
                    headerText: 'Greška',
                    bodyText: data.message
                });
            }
        });
    }

    function saveMailSettings() {
        ctrl.mailSettingsForm.$setSubmitted();
        if (ctrl.mailSettingsForm.$invalid) {
            return fisModal.invalidForm();
        }

        fisGui.wrapInLoader(function() {
            return api.firma.podesavanja.smtp.izmijeni(ctrl.mailSettings).then(function(data) {
                return data;
            });
        }).then(function(data) {
            ctrl.mailSettingsForm.$setPristine();

            if (data.is_success) {
                ctrl.cachedMailSettings = angular.copy(ctrl.mailSettings);

                return fisModal.confirm({
                    headerText: 'Uspjeh',
                    headerIcon: 'fa fa-check-circle text-success',
                    bodyText: data.message
                }).then(function() {
                    return api.korisnik.listaj().then(function (data) {
                        fisConfig.user = data;
                        ctrl.setMailSettings();
                    });
                });
            } else {
                return fisModal.confirm({
                    headerText: 'Greška',
                    headerIcon: 'fa fa-exclamation-triangle text-danger',
                    bodyText: data.message
                });
            }
        });;
    }
}
angular
    .module('app')
    .controller('GrupaArtikalaIzmjenaController', GrupaArtikalaIzmjenaController);

GrupaArtikalaIzmjenaController.$inject = [
    '$rootScope', '$stateParams', '$state', 'grupaArtikala', 'fisModal', 'fisGui', 'api'
];

function GrupaArtikalaIzmjenaController(
    $rootScope, $stateParams, $state, grupaArtikala, fisModal, fisGui, api
) {
    const ctrl = this;

    ctrl.grupaArtikala = grupaArtikala;

    ctrl.upis = upis;

    function upis() {
        fisGui.wrapInLoader(function() {
            return api.grupaArtikala.poId.izmijeni($stateParams.id, ctrl.grupaArtikala);
        }).then(function() {
            $state.go('grupa-artikala-pregled-lista');
        });
    }
}
angular
    .module('app')
    .controller('GrupaArtikalaPregledListaController', GrupaArtikalaPregledListaController);

GrupaArtikalaPregledListaController.$inject = ['grupeArtikala'];

function GrupaArtikalaPregledListaController(grupeArtikala) {
    const ctrl = this;

    ctrl.grupeArtikala = grupeArtikala;
}
angular
    .module('app')
    .controller('GrupaArtikalaUnosController', ArtikalaUnosController);

ArtikalaUnosController.$inject = ['$state', 'fisModal', 'fisGui', 'api'];

function ArtikalaUnosController($state, fisModal, fisGui, api) {
    const ctrl = this;

    ctrl.grupaArtikala = {}

    ctrl.upis = upis;

    function upis() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo',
                headerIcon: 'fa fa-exclamation-triangle text-danger'
            });
            return;
        }

        fisGui.wrapInLoader(function() {
            return api.grupaArtikala.dodaj(ctrl.grupaArtikala);
        }).then(function() {
            return fisModal.confirm({
                headerText: 'Upis podataka',
                bodyText: 'Grupa artikala je sačuvana'
            });
        }).then(function() {
            $state.go('grupa-artikala-pregled-lista');
        });
    }
}
angular
    .module('app')
    .controller('IzvjestajDnevniFormaController', IzvjestajDnevniFormaController);

IzvjestajDnevniFormaController.$inject = ['fisReportService'];

function IzvjestajDnevniFormaController(fisReportService) {
    let ctrl = this;

    ctrl.datum = fisReportService.getDayRelative(-1);
}

angular
    .module('app')
    .controller('IzvjestajPeriodicniFormaController', IzvjestajPeriodicniFormaController);

IzvjestajPeriodicniFormaController.$inject = ['fisReportService'];

function IzvjestajPeriodicniFormaController(fisReportService) {
    let ctrl = this;

    ctrl.datumOd = fisReportService.getDayRelative(-2);


    let endOfDay = fisReportService.getDayRelative();
    endOfDay.setHours(23, 59, 59, 0);
    ctrl.datumDo = endOfDay;
}

angular
    .module('app')
    .controller('IzvjestajPoArtiklimaFormaController', IzvjestajPoArtiklimaFormaController);

IzvjestajPoArtiklimaFormaController.$inject = ['$rootScope', '$scope', '$templateRequest', 'fisReportService', 'fisCustomerApi', '$compile'];

function IzvjestajPoArtiklimaFormaController($rootScope, $scope, $templateRequest, fisReportService, fisCustomerApi, $compile) {
    let ctrl = this;

    ctrl.pageFormat = '58mm';

    ctrl.datumOd = fisReportService.getDayRelative(-1);

    let endOfDay = fisReportService.getDayRelative();
    endOfDay.setHours(23, 59, 59, 0);

    ctrl.datumDo = endOfDay;

    ctrl.fetchReport = fetchReport;

    function fetchReport(start, end) {
        $rootScope.showLoader = true;
        return fisCustomerApi.views__izvjestaj_po_artiklima_forma__on_submit({
            start: fisReportService.formatDate(start),
            end: fisReportService.formatDate(end),
            buyerId: ctrl.buyerId,
            pageFormat: ctrl.pageFormat
        }).then(function(data) {
            let templateUrl;
            if (ctrl.pageFormat === '58mm') {
                templateUrl = 'app/views/izvjestaj-po-artiklima-forma/report-58mm.template.html';
            } else if (ctrl.pageFormat === 'A4') {
                templateUrl = 'app/views/izvjestaj-po-artiklima-forma/report-a4.template.html';
            } else {
                throw Error('Invalid page format.');
            }

            $templateRequest(templateUrl).then(function(html) {
                let container = angular.element(html);
                let containerScope = $scope.$new(true);
                containerScope.data = data;
                let compiledElement = $compile(container)(containerScope);

                const iframe = document.createElement('iframe')
                iframe.style.position = 'fixed';
                iframe.style.top = '110%';
                iframe.style.left = '110%';
                iframe.srcdoc = '<!doctype html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=2.0, maximum-scale=1.0, minimum-scale=1.0"><meta http-equiv="X-UA-Compatible" content="ie=edge"><title>Document</title></head><body></body></html>';
                document.body.appendChild(iframe);
                iframe.onload = function() {
                    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;

                    const metaElement = document.createElement('meta');
                    metaElement.name = 'viewport';
                    metaElement.content = 'width=device-width, user-scalable=no, initial-scale=2.0, maximum-scale=1.0, minimum-scale=1.0';
                    iframeDocument.head.appendChild(metaElement);

                    const styleElement = document.createElement('style');
                    styleElement.innerHTML = '';

                    iframeDocument.head.appendChild(compiledElement[0]);
                    iframeDocument.body.appendChild(compiledElement[2]);
                    iframe.contentWindow.focus();
                    iframe.contentWindow.print();
                }
            });
        }).finally(function() {
            $rootScope.showLoader = false;
        });
    }
}

angular
    .module('app')
    .controller('IzvjestajPoGrupamaArtikalaFormaController', IzvjestajPoGrupamaArtikalaFormaController);

IzvjestajPoGrupamaArtikalaFormaController.$inject = ['fisReportService'];

function IzvjestajPoGrupamaArtikalaFormaController(fisReportService) {
    let ctrl = this;

    ctrl.datumOd = fisReportService.getDayRelative(-2);

    let endOfDay = fisReportService.getDayRelative();
    endOfDay.setHours(23, 59, 59, 0);
    ctrl.datumDo = endOfDay;
}

angular
    .module('app')
    .controller('IzvjestajZurnalFormaController', IzvjestajZurnalFormaController);

IzvjestajZurnalFormaController.$inject = ['fisReportService'];

function IzvjestajZurnalFormaController(fisReportService) {
    let ctrl = this;

    ctrl.datumOd = fisReportService.getDayRelative(-2);

    let endOfDay = fisReportService.getDayRelative();
    endOfDay.setHours(23, 59, 59, 0);
    ctrl.datumDo = endOfDay;
}

angular
    .module('app')
    .controller('KomitentIzmjenaController', KomitentIzmjenaController);

KomitentIzmjenaController.$inject = [
    '$scope', '$state', '$stateParams', 'api', 'fisModal', 'fisConfig', 'komitent'
];

function KomitentIzmjenaController(
    $scope, $state, $stateParams, api, fisModal, fisConfig, komitent
) {
    const ctrl = this;

    ctrl.drzave = angular.copy(fisConfig.countries);
    ctrl.komitent = komitent;
    ctrl.tipoviIdentifikacioneOznake = angular.copy(fisConfig.identification_types);

    ctrl.upis = upis;

    $scope.$watch('ctrl.komitent.tip_identifikacione_oznake_id', function(newVal) {
        if (newVal === undefined || newVal === null) {
            ctrl.komitent.identifikaciona_oznaka = null;
        }
    });

    function upis() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis podataka',
            bodyText: "Da li ste sigurni da želite da izmijenite podatke partnera?",
            confirmButtonText: 'Da, izmijeni',
            cancelButtonText: 'Odustani',
        }).then((result) => {
            if (result.isConfirmed) {
                api.komitent.poId.izmijeni($stateParams.id, ctrl.komitent).then(function (data) {
                    if (data.greska === 1) {
                        fisModal.confirm({
                            headerText: "Greška",
                            bodyText: "Podaci nijesu upisani."
                        });
                    } else {
                        fisModal.confirm({
                            headerText: "Izmjena partnera",
                            bodyText: "Podaci partnera su izmijenjeni."
                        });
                    }

                    $state.go('komitent-pregled-lista', {
                        broj_stavki_po_stranici: 10,
                        broj_stranice: 1
                    });
                });
            }
        });
    }
}
angular
    .module('app')
    .controller('KomitentPregledListaController', KomitentPregledListaController);

KomitentPregledListaController.$inject = ['$state', '$stateParams', 'strana', 'stampac'];

function KomitentPregledListaController($state, $stateParams, strana, stampac) {
    const ctrl = this;

    ctrl.upit_za_pretragu = $stateParams.upit_za_pretragu;
    ctrl.strana = strana;
    ctrl.broj_stranice = strana.broj_stranice;

    ctrl.naPromjenuStranice = naPromjenuStranice;
    ctrl.stampajKarticuKupca = stampajKarticuKupca;

    function naPromjenuStranice() {
        $state.go('komitent-pregled-lista', {
            broj_stavki_po_stranici: $stateParams.broj_stavki_po_stranici,
            broj_stranice: ctrl.broj_stranice,
            upit_za_pretragu: ctrl.upit_za_pretragu
        });
    }

    function stampajKarticuKupca(komitentId) {
        stampac.stampajKarticuKupca(komitentId)
    }
}
angular
    .module('app')
    .controller('KomitentPregledPlacanjaController', KomitentPregledPlacanjaController);

KomitentPregledPlacanjaController.$inject = ['$rootScope', '$state', 'api', 'komitent'];

function KomitentPregledPlacanjaController($rootScope, $state, api, komitent) {
    const ctrl = this;

    ctrl.komitent = komitent;

    ctrl.obrisi = obrisi;


    function obrisi(index) {
        $rootScope.showLoader = true;

        let id = ctrl.komitent.placanja[index].id;

        api.komitent.placanje.poId.obrisi(id).then(function() {
            $state.reload();
        });
    }
}
angular
    .module('app')
    .controller('KomitentUnosController', KomitentUnosController);

KomitentUnosController.$inject = ['$scope', '$state', 'api', 'fisModal', 'fisConfig'];

function KomitentUnosController($scope, $state, api, fisModal, fisConfig) {
    const ctrl = this;

    ctrl.komitent = {
        show_total_debt: false,
        previous_debt: 0,
        drzava: 39
    }
    ctrl.drzave = angular.copy(fisConfig.countries);
    ctrl.tipoviIdentifikacioneOznake = angular.copy(fisConfig.identification_types);

    ctrl.upis = upis;

    $scope.$watch('ctrl.komitent.tip_identifikacione_oznake_id', function(newVal) {
        if (newVal === undefined || newVal === null) {
            ctrl.komitent.identifikaciona_oznaka = null;
        }
    });

    function upis() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return
        }

        fisModal.confirmOrCancel({
            headerText: 'Upis podataka',
            bodyText: "Da li ste sigurni da želite da dodate novog partnera?",
            confirmButtonText: 'Da, dodaj',
            cancelButtonText: 'Odustani',
        }).then((result) => {
            if (result.isConfirmed) {
                api.komitent.dodaj(ctrl.komitent).then(function (data) {
                    if (data.greska === 1) {
                        fisModal.confirm({
                            headerText: "Greška",
                            bodyText: "Podaci nijesu upisani."
                        });
                        return;
                    }

                    fisModal.confirm({
                        headerText: "Dodavanje partnera",
                        bodyText: "Novi partner je upisan."
                    }).then(function () {
                        $state.go('komitent-pregled-lista', {
                            broj_stavki_po_stranici: 10,
                            broj_stranice: 1
                        });
                    });
                });
            }
        });
    }
}
angular
    .module('app')
    .controller('KomitentUnosPlacanjaController', KomitentUnosPlacanjaController);

KomitentUnosPlacanjaController.$inject = ['$rootScope', '$state', 'fisModal', 'api', 'komitenti'];

function KomitentUnosPlacanjaController($rootScope, $state, fisModal, api, komitenti) {
    const ctrl = this;

    ctrl.komitenti = komitenti;

    ctrl.dodaj = dodaj;
    ctrl.upis = upis;
    ctrl.obrisi = obrisi;


    ctrl.placanje = {
        komitent_id: undefined,
        datum_placanja: new Date(),
        iznos: undefined
    }

    ctrl.placanja = [];

    function dodaj() {
        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }


        let novoPlacanje = angular.copy(ctrl.placanje);
        novoPlacanje.komitent_id = novoPlacanje.komitent.id;

        ctrl.placanja.push(novoPlacanje);

        ctrl.placanje.iznos = undefined;

        ctrl.forma.$setPristine();
    }

    function upis() {
        $rootScope.showLoader = true;

        let data = angular.copy(ctrl.placanja);

        for (let ii = 0; ii < data.length; ii++) {
            data[ii].komitent_id = data[ii].komitent.id;
            delete data[ii].komitent;
        }

        api.komitent.placanje.dodaj_bulk(data).then(function() {
            $state.go('komitent-pregled-lista', {
                broj_stavki_po_stranici: 10,
                broj_stranice: 1,
                upit_za_pretragu: ''
            });
        });
    }

    function obrisi(index) {
        ctrl.placanja.splice(index, 1);
    }
}
angular
    .module('app')
    .controller('PrijemnicaPregledListaController', PrijemnicaPregledListaController);

PrijemnicaPregledListaController.$inject = ['$state', 'stranica'];

function PrijemnicaPregledListaController($state, stranica) {
    const ctrl = this;


    ctrl.broj_stranice = stranica.broj_stranice;
    ctrl.stranica = stranica;

    ctrl.promijeniStranicu = promijeniStranicu;

    function promijeniStranicu() {
        let params = {};
        params.broj_stranice = ctrl.broj_stranice;
        params.broj_stavki_po_stranici = ctrl.stranica.broj_stavki_po_stranici;

        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }
}
angular
    .module('app')
    .controller('PrijemnicaUnosController', PrijemnicaUnosController);

PrijemnicaUnosController.$inject = [
    '$scope', '$rootScope', '$timeout', '$state', '$uibModal', 'api', 'fisModal', 'magacini', 'fisConfig',
    'komitenti', 'artikli'
];

function PrijemnicaUnosController(
    $scope, $rootScope, $timeout, $state, $uibModal, api, fisModal, magacini, fisConfig,
    komitenti, artikli
) {
    const ctrl = this;

    ctrl.prijemnica = {
        magacin_id: fisConfig.user.magacin_id,
        stavke: []
    }

    ctrl.magacini = magacini;
    ctrl.komitenti = komitenti;
    ctrl.artikli = artikli;

    ctrl.dodajStavku = dodajStavku;
    ctrl.obrisiStavku = obrisiStavku;
    ctrl.upis = upis;

    function dodajStavku() {
        if (ctrl.formaStavka.$invalid) {
            ctrl.formaStavka.$setSubmitted();
            fisModal.confirm({
                headerText: 'Greška',
                bodyText: 'Ispravite greške pa pokušajte ponovo'
            });
            return;
        }

        for (let ii = 0; ii < ctrl.prijemnica.stavke.length; ii++) {
            if (ctrl.prijemnica.stavke[ii].artikal_id === ctrl.stavka.artikal.id) {
                fisModal.confirmOrCancel({
                    title: 'Stavka već postoji',
                    text: 'Da li želite da dodate na postojeću količinu?',
                    confirmButtonText: 'Da, saberi količine',
                    cancelButtonText: 'Odustani'
                }).then(function (result) {
                    if (result.isConfirmed) {
                        ctrl.prijemnica.stavke[ii].kolicina += ctrl.stavka.kolicina;
                        ctrl.stavka = {
                            kolicina: 1,
                            artikal: undefined
                        };
                        ctrl.formaStavka.$setPristine();
                        $scope.$apply();
                    }
                });

                return;
            }
        }

        ctrl.prijemnica.stavke.push({
            artikal: ctrl.stavka.artikal,
            artikal_id: ctrl.stavka.artikal.id,
            kolicina: ctrl.stavka.kolicina
        });

        ctrl.stavka = {
            kolicina: 1,
            artikal: undefined
        };

        $timeout(function() {
            ctrl.formaStavka.$setPristine();
        });
    }

    function obrisiStavku(index) {
        let modalInstance = $uibModal.open({
            templateUrl: 'app/modals/prijemnica-stavka-modal/prijemnica-stavka-modal.template.html',
            controller: 'PrijemnicaStavkaModalController',
            controllerAs: 'ctrl',
            size: 'large',
            backdrop: 'static',
            resolve: {
                item: function () {
                    return angular.copy(ctrl.prijemnica.stavke[index]);
                }
            }
        });

        modalInstance.result.then(function (result) {
            if (result.action === 'delete') {
                ctrl.prijemnica.stavke.splice(index, 1);
                return;
            }

            if (result.action === 'save') {
                ctrl.prijemnica.stavke[index] = result.item;
            }
        });
    }

    function upis() {
        if (ctrl.prijemnica.stavke.length === 0) {
            fisModal.confirm({
                headerText: 'Prijemnica je prazna',
                bodyText: 'Unesite stavke prijemnice pa pokušajte ponovo.'
            });
            return;
        }

        ctrl.forma.$setSubmitted();
        if (ctrl.forma.$invalid) {
            fisModal.invalidForm();
            return;
        }

        let requestData = angular.copy(ctrl.prijemnica);
        requestData.datum_ulazne_fakture = moment(requestData.datum_ulazne_fakture).format();

        api.kalkulacija.dodaj(requestData).then(function (data) {
            fisModal.confirm({
                headerText: 'Podaci upisani',
                bodyText: 'Nova prijemnica je sačuvana.'
            }).then(function () {
                $state.go('prijemnica-pregled-lista');
            });
        });
    }
}
angular
    .module('app')
    .controller('ProfakturaPregledRedovnihController', ProfakturaPregledRedovnihController);

ProfakturaPregledRedovnihController.$inject = [
    '$rootScope', '$stateParams', '$state', '$cookies', '$uibModal', 'api', 'fisGui', 'fisModal', 'fisConfig',
    'stampac', 'initialData']

function ProfakturaPregledRedovnihController(
    $rootScope, $stateParams, $state, $cookies, $uibModal, api, fisGui, fisModal, fisConfig,
    stampac, initialData) {
    const ctrl = this;

    ctrl.tab = 'regular';
    ctrl.areFiltersVisible = false;

    ctrl.viewType = $cookies.get('invoiceOverview.viewType');
    if (ctrl.viewType === undefined) {
        ctrl.viewType = 'grid';
        $cookies.put('invoiceOverview.viewType', 'grid')
    }

    ctrl.fakturaModal = {
        jeVidljiv: false,
        src: undefined
    }

    ctrl.komitenti = initialData.komitenti;
    ctrl.areFiltersCollapsed = true;
    ctrl.stranica = initialData.stranica;
    ctrl.broj_stranice = initialData.stranica.broj_stranice;

    ctrl.fiscalizationDateGteDropdownOpen = false;
    ctrl.fiscalizationDateLteDropdownOpen = false;

    ctrl.filters = {}
    ctrl.filters.ordinal_id = $stateParams.ordinal_id;
    ctrl.filters.total_price_gte = $stateParams.total_price_gte;
    ctrl.filters.total_price_lte = $stateParams.total_price_lte;
    ctrl.filters.fiscalization_date_gte = $stateParams.fiscalization_date_gte;
    ctrl.filters.fiscalization_date_lte = $stateParams.fiscalization_date_lte;
    ctrl.filters.payment_type_id = [];
    ctrl.filters.payment_method_types = [];
    ctrl.filters.client_id = [];
    ctrl.filters.buyers = [];
    if ($stateParams.payment_type_id) {
        ctrl.filters.payment_type_id = $stateParams.payment_type_id;
        ctrl.filters.payment_method_types = fisConfig.filterPaymentMethodsByIds($stateParams.payment_type_id);
    }
    if ($stateParams.client_id) {
        ctrl.filters.client_id = $stateParams.client_id;
        ctrl.filters.buyers = ctrl.komitenti.filter(function(x) {
            return $stateParams.client_id.indexOf(x.id) >= 0
        });
    }


    ctrl.stampac = stampac;
    ctrl.storniraj = storniraj;
    ctrl.promijeniStranicu = promijeniStranicu;
    ctrl.ponistiPretragu = ponistiPretragu;
    ctrl.posaljiMail = posaljiMail;
    ctrl.setViewType = setViewType;
    ctrl.applyFilters = applyFilters;

    function ponistiPretragu($event) {
        $event.preventDefault();
        $state.transitionTo($state.current, {}, {inherit: false, reload: true, notify: false});
    }

    function posaljiMail(fakturaId) {
        fisModal.confirmOrCancel({
            headerText: 'Slanje e-mail-a',
            bodyText: 'Da li ste sigurni da želite da pošaljete e-mail?'
        }).then(function(result) {
            if (result.isConfirmed) {
                fisGui.wrapInLoader(function() {
                    return api.faktura.poId.mail(fakturaId).then(function(data) {
                        if (data.is_success) {
                            return fisModal.confirm({
                                headerText: 'Uspjeh',
                                bodyText: data.message
                            });
                        } else {
                            return fisModal.confirm({
                                headerText: 'Grеška',
                                bodyText: data.message
                            })
                        }
                    }).finally(function() {
                        $state.reload();
                    });
                });
            }
        });
    }

    function promijeniStranicu() {
        let params = angular.copy(ctrl.filters);
        params.broj_stranice = ctrl.broj_stranice;

        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }

    function storniraj($index) {
        let faktura = ctrl.stranica.stavke[$index];

        fisModal.confirmOrCancel({
            headerText: 'Storniranje računa',
            bodyText: 'Da li ste sigurni da želite da stornirate račun?',
            confirmButtonText: 'U redu',
            cancelButtonText: 'Odustani'
        }).then(function (result) {
            if (!result.isConfirmed) {
                return;
            }

            fisGui.wrapInLoader(function() {
                return api.faktura.storniraj(faktura.id).then(function (data) {
                    if (data.result.is_success) {
                        return $state.reload();
                    } else {
                        return fisModal.confirm({
                            headerText: 'Grеška prilikom fiskalizacije',
                            bodyText: data.result.message
                        });
                    }
                });
            });
        });
    }

    function setViewType(viewType) {
        ctrl.viewType = viewType;
        $cookies.put('invoiceOverview.viewType', viewType);
    }

    function applyFilters() {
        let params = ctrl.filters;
        params.broj_stranice = 1;
        return $state.transitionTo($state.current, params, { inherit: false, reload: true });
    }
}
angular
    .module('app')
    .controller('StanjeController', StanjeController);

StanjeController.$inject = ['$rootScope', '$stateParams', '$state', '$timeout', 'api', 'stanje', 'fisConfig'];

function StanjeController($rootScope, $stateParams, $state, $timeout, api, stanje, fisConfig) {
    const ctrl = this;

    ctrl.stanje = stanje;

    ctrl.depozit = {
        iznos: 0
    };

    if (ctrl.stanje.danasnji_depozit === null) {
        if (fisConfig.user.naplatni_uredjaj.podrazumijevani_iznos_depozita !== null) {
            ctrl.depozit.iznos = fisConfig.user.naplatni_uredjaj.podrazumijevani_iznos_depozita;
        }
    } else {
        ctrl.depozit.iznos = ctrl.stanje.danasnji_depozit.iznos;
    }

    ctrl.isplata = {
        iznos: 0
    };
}
angular
    .module('app')
    .controller('CertificatesListViewController', CertificatesListViewController);

CertificatesListViewController.$inject = ['$rootScope', '$state', 'fisModal', 'fisCustomerApi', 'viewData'];

function CertificatesListViewController($rootScope, $state, modalService, fisCustomerApi, viewData) {
    const ctrl = this;

    ctrl.certificates = viewData.certificates;
    ctrl.openCertificateUploadModal = openCertificateUploadModal;
    ctrl.openConfirmDeletionModal = openConfirmDeletionModal;

    function openCertificateUploadModal() {
        modalService.certificateUpload().then(function(result) {
            if (result.isConfirmed) {
                refresh();
            }
        });
    }

    function openConfirmDeletionModal(certificateId) {
        modalService.confirmOrCancel({
            headerText: 'Brisanje sertifikata',
            bodyText: 'Da li ste sigurni da želite da obrišete sertifikat?',
            confirmButtonText: 'Obriši',
            cancelButtonText: 'Odustani'
        }).then(function(result) {
            if (!result.isConfirmed) {
                return;
            }

            fisCustomerApi.certificatesListViewDeleteCertificate(certificateId).then(function(response) {
                if (response.error) {
                    refresh();
                } else {
                    $rootScope.setCertificateExpirationDate(response.certificate_expiration_date);
                    refresh();
                }
            });
        });
    }

    function refresh() {
        return $state.transitionTo($state.current, {}, {
            reload: true, inherit: false
        });
    }
}